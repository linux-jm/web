.\" %FreeBSD: src/contrib/gcc/cccp.1,v 1.3 1999/09/19 08:18:18 obrien Exp %
.\" Copyright (c) 1991, 1992, 1993 Free Software Foundation	-*- nroff -*-
.\" See section COPYING for conditions for redistribution
.\"
.\" $FreeBSD: doc/ja_JP.eucJP/man/man1/cccp.1,v 1.8 2001/05/14 01:07:21 horikawa Exp $
.\"
.TH cpp 1 "April 30, 1993" "FreeBSD" "GNU Tools"
.SH 名称
cpp \- GNU-C 互換のコンパイラプリプロセッサ
.SH 書式
.hy 0
.na
.TP
.B cpp
.RB "[\|" \-$ "\|]"
.RB "[\|" \-A \c
.I predicate\c
.RB [ (\c
.I value\c
.BR ) ]\|]
.RB "[\|" \-C "\|]"
.RB "[\|" \-D \c
.I name\c
.RB [ =\c
.I definition\c
\&]\|]
.RB "[\|" \-dD "\|]"
.RB "[\|" \-dM "\|]"
.RB "[\|" "\-I\ "\c
.I directory\c
\&\|]
.RB "[\|" \-H "\|]"
.RB "[\|" \-I\- "\|]"
.RB "[\|" "\-imacros\ "\c
.I file\c
\&\|]
.RB "[\|" "\-include\ "\c
.I file\c
\&\|]
.RB "[\|" "\-idirafter\ "\c
.I dir\c
\&\|]
.RB "[\|" "\-iprefix\ "\c
.I prefix\c
\&\|]
.RB "[\|" "\-iwithprefix\ "\c
.I dir\c
\&\|]
.RB "[\|" \-lang\-c "\|]"
.RB "[\|" \-lang\-c++ "\|]"
.RB "[\|" \-lang\-objc "\|]"
.RB "[\|" \-lang\-objc++ "\|]"
.RB "[\|" \-lint "\|]"
.RB "[\|" \-M\  [ \-MG "\|]]"
.RB "[\|" \-MM\  [ \-MG "\|]]"
.RB "[\|" \-MD\  \c
.I file\ \c
\&\|]
.RB "[\|" \-MMD\  \c
.I file\ \c
\&\|]
.RB "[\|" \-nostdinc "\|]"
.RB "[\|" \-nostdinc++ "\|]"
.RB "[\|" \-P "\|]"
.RB "[\|" \-pedantic "\|]"
.RB "[\|" \-pedantic\-errors "\|]"
.RB "[\|" \-traditional "\|]"
.RB "[\|" \-trigraphs "\|]"
.RB "[\|" \-U \c
.I name\c
\&\|]
.RB "[\|" \-undef "\|]"
.RB "[\|" \-Wtrigraphs "\|]"
.RB "[\|" \-Wcomment "\|]"
.RB "[\|" \-Wall "\|]"
.RB "[\|" \-Wtraditional "\|]"
.br
.RB "[\|" \c
.I infile\c
.RB | \- "\|]"
.RB "[\|" \c
.I outfile\c
.RB | \- "\|]"
.ad b
.hy 1
.SH 解説
C プリプロセッサは、
実際のコンパイルの前にプログラムを変換するために
C コンパイラから自動的に利用される
.I マクロプロセッサ\c
です。
長い記述を簡略してマクロとして定義することができるため、
マクロプロセッサと呼ばれます。

C プリプロセッサは、以下の4つの機能を提供します。
.TP
\(bu
ヘッダファイルを読み込みます。
これは
プログラムに組み込まれる
(C 言語の)宣言の入ったファイルです。
.TP
\(bu
C 言語の任意の部分の省略形として \c
.I マクロ\c
\&を定義し、C プリプロセッサがプログラム内の全てのマクロを
その定義で置き換えます。
.TP
\(bu
条件文の処理をします。専用のプリプロセッサコマンドを用いて、
いろいろな条件にしたがってプログラムの一部を含めたり除外したりできます。
.TP
\(bu
行番号の制御をします。
ソースファイルと
コンパイルされた中間ファイルとを組み合わせたり再アレンジしたりするプログラムを
用いる場合、
コンパイラにオリジナルのソースの何行目であるかを知らせるための、
行番号制御のプリプロセッサコマンドを利用できます。
.PP
C プリプロセッサは、そのインプリメントによって細かな部分に違いが
いくつかあります。GNU C プリプロセッサの完全なドキュメントは、
.B info
ファイルの `\|\c
.B cpp.info\c
\&\|', もしくは、マニュアルの
.I The C Preprocessor\c
\&を参照して下さい。
この双方は `\|\c
.B cpp.texinfo\c
\&\|'から生成されます。GNU C プリプロセッサは ANSI Standard C のスーパセットと
なっています。

ANSI Standard C では、今日 C プログラムで一般的に用いられている多くの
(無害な)構造が認められていません。
この非互換性はユーザにとっては不便であり、そのため
GNU C preprocessor ではこの記述をデフォルトで受け付けるように作られています。
厳密にいえば、
ANSI Standard C にするためには
オプションとして `\|\c
.B \-trigraphs\c
\&\|', `\|\c
.B \-undef\c
\&\|', `\|\c
.B \-pedantic\c
\&\|'をつけなければなりません。
しかし経験則から、厳密な ANSI Standard C にあわせてこうした設定を
行なうと支障のある場合が多いことがわかっています。

ほとんどの場合は、C プリプロセッサは明示的に実行する必要はありません。
C コンパイラが自動的に実行してくれるからです。しかしながら、
明示的にプリプロセッサを実行するのが有効なことが個々にはあります。

C プリプロセッサ
は、引数として \c
.I infile\c
\& と
\c
.I outfile\c
\&の 2 つのファイル名を期待します。
プリプロセッサは `\|\c
.B #include\c
\&\|'で指定したファイルと一緒に \c
.I infile\c
を読み込みます。
入力ファイルの組み合わせで作られた出力は、
全て \c
.I outfile\c
\&に書かれます。

.I infile\c
\& と \c
.I outfile\c
\& の指定に `\|\c
.B \-\c
\&\|'を使用することができます。\c
.I infile\c
\& が `\|\c
.B \-\c
\&\|' であれば\c
\& 標準入力からデータを読み、\c
.I outfile\c
\& が `\|\c
.B \-\c
\&\|' であれば標準出力へ結果を書きます。もし \c
.I outfile\c
\& もしくは両方のファイル名が省略された場合、
省略されたファイルの代わりに標準入力と標準出力が使われます。
.SH オプション
以下が C プリプロセッサが受け付けるオプションの一覧です。
これらのオプションは、
プリプロセッサがコンパイラから起動されている場合にも
自動的に引き渡されるので、
C プログラムをコンパイルする際にも指定することができます。
.TP
.B \-P
`\|\c
.B #\c
\&\|'-行番号
という行番号情報をプリプロセッサの出力に含めません。
これは、C 以外の言語で行番号情報が含まれているとエラーを起こす言語を
処理する場合に有用でしょう。
.TP
.B \-C
コメントを削除せず、そのまま出力ファイルに含めます。
マクロ呼び出しの引数に現れるコメントはマクロ呼び出しの展開後にコピーされます。
.TP
.B -traditional
ANSI ではなく、旧形式の C の文法として解釈します。
.TP
.B -trigraphs
ANSI標準のトリグラフ(trigraph)構文を処理します。
これは ANSI C で 1 文字を表示すると定められた `\|\c
.B ??\c
\&\|' で始まる 3 文字の並びです。例えば、`\|\c
.B ??/\c
\&\|' は `\|\c
.BR "\e" "\|'"
を表しますので、`\|\c
.B '??/n'\c
\&\|' は改行文字の文字定数となります。
厳密に言えば、GNU C プリプロセッサの `\|\c
.B \-trigraphs\c
\&\|' オプションは ANSI C 標準を完全にはサポートしません。
が、普通のユーザならばその違いに気づく事は稀でしょう。

トリグラフについて、これ以上知りたいとは思わないでしょ?
.TP
.B \-pedantic
`\|\c
.B #else\c
\&\|' や `\|\c
.B #endif\c
\&\|' の後にコメント以外のテキストがつくといった場合に、
ANSI C 標準で求められる警告を出力します。
.TP
.B \-pedantic\-errors
`\|\c
.B \-pedantic\c
\&\|' に似ていますが、警告ではなくエラーにします。
.TP
.B \-Wtrigraphs
トリグラフがあると警告を出力します(ただし、トリグラフの処理は行います)。
.TP
.B \-Wcomment
.TP
.B \-Wcomments
コメント開始シーケンスである `\|\c
.B /*\c
\&\|' がコメント中に存在したならば警告を発生します
(両形式は同じ効果を持ちます)。
.TP
.B \-Wall
`\|\c
.B \-Wtrigraphs\c
\&\|' と `\|\c
.B \-Wcomment\c
\&\|' (ただし
`\|\c
.B \-Wtraditional\c
\&\|' は除く) を指定したのと同じです。
.TP
.B \-Wtraditional
ANSI と伝統派の C とで異なる振る舞いをとる構文が出現した場合に
警告を発します。
.TP
.BI "\-I " directory\c
\&
ディレクトリ \c
.I directory\c
\& をヘッダファイルを検索するディレクトリリストの末尾に追加します。
このオプションは、指定したディレクトリが
システムのヘッダファイルが格納されているディレクトリよりも先に
検索されるので、ユーザ自身の作成したバージョンで
システムが提供するヘッダファイルを上書きさせることもできます。
1 つ以上の `\|\c
.B \-I\c
\&\|' オプションを使用する場合、ディレクトリは左から右の順番で検索され、
標準のシステムヘッダファイルはその後になります。
.TP
.B \-I\-
`\|\c
.B \-I\-\c
\&\|' オプションよりも前に指定された `\|\c
.B \-I\c
\&\|' オプションで与えられたディレクトリは、`\|\c
.B #include \c
\&"\c
.I file\c
\&"\c
\&\|' のインクルード文の場合にのみ検索されます。`\|\c
.B #include <\c
.I file\c
\&>\c
\&\|' では検索されません。

オプション `\|\c
.B \-I\-\c
\&\|' の後のオプション `\|\c
.B \-I\c
\&\|' に追加のディレクトリが指定された場合、それらのディレクトリは
全ての `\|\c
.B #include\c
\&\|' 文で検索されます。

付け加えて言うならば、`\|\c
.B \-I\-\c
\&\|' オプションを指定すると、カレントディレクトリは `\|\c
.B #include \c
.I \&"file\c
\&"\c
\&\|' 文に対する最初の検索ディレクトリではなくなります。
それゆえ、カレントディレクトリは明示的に `\|\c
.B \-I.\c
\&\|' として指定された場合にのみ検索されることになります。
`\|\c
.B \-I\-\c
\&\|' と `\|\c
.B \-I.\c
\&\|' を双方とも指定することで、どのディレクトリがカレントディレクトリ
の前に、あるいは後に検索されるかを厳密に指定することができます。
.TP
.B \-nostdinc
ヘッダファイルの検索に標準システムディレクトリを用いません。`\|\c
.B \-I\c
\&\|' オプションで指定したディレクトリ(と、もし適切であるならば
カレントディレクトリ)が検索されます。
.TP
.B \-nostdinc++
ヘッダファイルの検索に C++ 仕様の標準ディレクトリを用いません。
が、その他の標準ディレクトリは検索します。
(このオプションは libg++ の構築時に用いられます。)
.TP
.BI "\-D " "name"\c
\&
\c
.I name\c
\& を既定義のマクロとして、`\|\c
.B 1\c
\&\|' に定義します。
.TP
.BI "\-D " "name" = definition
\&
\c
.I name\c
\& をマクロとして\c
.I definition\c
\& に定義します。\c
.I definition\c
\& の内容に制限はありませが、プリプロセッサをシェルやシェルに類似した
プログラムから起動している場合、シェルの文法上意味を持つスペース
などの文字を保護するため、そのシェルのクォート文法を使用する必要が
あります。もし、1 つの
.I name\c
\& に対して複数の `\|\c
.B \-D\c
\&\|' を指定したならば、もっとも右側の定義が有効となります。
.TP
.BI "\-U " "name"\c
\&\c
.I name\c
\& を定義しません。同一の \c
.I name\c
\&  に対して `\|\c
.B \-U\c
\&\|' と `\|\c
.B \-D\c
\&\|' の双方が指定された場合、`\|\c
.B \-U\c
\&\|' が `\|\c
.B \-D\c
\&\|' に優先し、 \c
.I name\c
\&  は定義されません。
.TP
.B \-undef
非標準のマクロを一切定義しません。
.TP
.BI "\-A " "name(" value )
(\c
.B #assert\c
\& コマンドと同じ方法で)
述語  \c
.I name\c
\& にトークンリスト \c
.I value\c
\& をアサートします。シェルのコマンドライン上では括弧を
エスケープするなりクォートすることを忘れないで下さい。

既定義のアサーション全てを取り消すのに、`\|\c
.B \-A-\c
\&\|' を使えます。これはまた、既定義のマクロ全てを無効にします。
.TP
.B \-dM
プリプロセッサの結果を出力する代わりに、
プリプロセッサの実行中に定義された、既定義のものも含む全てのマクロの
`\|\c
.B #define\c
\&\|' コマンドのリストを出力します。
これは、使用しているプリプロセッサのそのバージョンで、
どんなマクロが既定義であるかを知る方法を提供してくれます。
それには、空のファイル `\|\c
.B foo.h\c
\&\|' をこのオプションで処理してみればよいのです。
.sp
.br
touch\ foo.h;\ cpp\ \-dM\ foo.h
.br
.sp
はすべての既定義マクロの値を見せてくれるでしょう。
.TP
.B \-dD
`\|\c
.B \-dM\c
\&\|' に似ていますが、2 つの相違点があります。これは既定義マクロを
出力\c
.I しません\c
\&。また、`\|\c
.B #define\c
\&\|' コマンドとプリプロセス結果の\c
.I 双方\c
\& を出力します。これらの出力は両方とも標準出力に行われます。
.PP
.TP
.BR \-M\  [ \-MG ]
プリプロセスの結果を出力する代わりに、main のソースファイルの依存性を
記述する\c
.B make\c
\& 規則を出力します。
プリプロセッサはソースファイルのオブジェクトファイル名、コロン、
そのすべてのインクルードファイル名から成る\c
.B make\c
\& 規則を出力します。複数のインクルードファイルがある場合、規則は`\|\c
.B \\\\\c
\&\|'-改行で複数行に区切られます。

`\|\c
.B \-MG\c
\&\|' は、見つけられなかったヘッダファイルは(コンパイルの途中で)生成され、
ソースファイルと同じディレクトリに存在するものとして扱います。`\|\c
.B \-M\c
\&\|' と共に指定しなければなりません。

この機能は自動的に Makefile を更新するのに使います。
.TP
.BR \-MM\  [ \-MG ]
これは `\|\c
.B \-M\c
\&\|' に似ていますが、`\|\c
.B #include
"\c
.I file\c
\&"\c
\&\|' でインクルードされるファイルのみを扱う点が異なります。`\|\c
.B #include
<\c
.I file\c
\&>\c
\&\|' でインクルードされるシステムヘッダファイルは無視されます。
.TP
.BI \-MD\  file
これも `\|\c
.B \-M\c
\&\|' に似ていますが、依存情報が`\|\c
.I file\c
\&\|' に書き出されます。\(em\&`\|\c
.B \-MD\c
\&\|' を指定したファイルの処理もこれに加えて行われ、`\|\c
.B \-M\c
\&\|' のように通常の処理を抑制することはありません。

gcc を実行する場合は `\|\c
.I file\c
\&\|' 引数を指定してはいけません。gcc は、入力ファイル名の末尾の
`\|\c
.B .c\c
\&\|' を `\|\c
.B .d\c
\&\|' で置き換えたファイル名を出力に用いるからです。

Mach では、`\|\c
.B make\c
\&\|' コマンドで便利なように複数のファイルを 1 つの依存規則ファイルに
まとめるユーティリティ \c
.B md\c
\& が利用できます。
.TP
.BI \-MMD\  file
`\|\c
.B \-MD\c
\&\|' に似ていますが、ユーザのヘッダファイルのみを扱い、システムヘッダは
無視する点が異なります。
.TP
.B \-H
通常の動作に加えて、
使用されたヘッダファイルのファイル名を出力します。
.TP
.BI "\-imacros " "file"\c
\&
ファイル  \c
.I file\c
\& を入力として処理しますが、
標準の入力ファイルを処理する前にその結果の出力を破棄します。
.I file\c
\& によって生成される出力は捨てられるため、`\|\c
.B \-imacros \c
.I file\c
\&\c
\&\|' の処理結果の影響は、\c
.I file\c
\& 中に記述されたマクロがメインの入力ファイル中で使用可能になることだけです。
プリプロセッサは、`\|\c
.B \-imacros\c
.I file\c
\&\|' を処理する前に、
コマンドラインから与えられた全ての `\|\c
.B \-D\c
\&\|' や `\|\c
.B \-U\c
\&\|' オプションを評価します。
.TP
.BI "\-include " "file"\c
\&
ファイル  \c
.I file\c
\& を、標準の入力ファイルの前に処理し、その結果出力をインクルードします。
.TP
.BI "\-idirafter " "dir"
ディレクトリ \c
.I dir\c
\& を第 2 インクルードパスに加えます。第 2 インクルードパス中の
ディレクトリは、メインインクルードパス (オプション
`\|\c
.B \-I\c
\&\|' によって追加されます) 中にヘッダファイルを探した結果
発見できなかった場合に検索されます。
.TP
.BI "\-iprefix " "prefix"
\c
.I prefix\c
\& を、その後に続く `\|\c
.B \-iwithprefix\c
\&\|'
オプション用のプレフィックスとして使用します。
.TP
.BI "\-iwithprefix " "dir"
ディレクトリを第 2 インクルードパスに追加します。ディレクトリ名は \c
.I prefix\c
\& と \c
.I dir\c
\& を連結することによって得られます。ここで \c
.I prefix
は `\|\c
.B \-iprefix\c
\&\|' オプションによって指定されたものです。
.TP
.B \-lang-c
.TP
.B \-lang-c++
.TP
.B \-lang-objc
.TP
.B \-lang-objc++
ソースの言語を指定します。`\|\c
.B \-lang-c++\c
\&\|' は、プリプロセッサに C++ のコメント文と、C++ 用の追加の
デフォルトインクルードディレクトリを処理させ、`\|\c
.B \-lang-objc\c
\&\|' は、Objective C の `\|\c
.B #import\c
\&\|' ディレクティブを使用可能にします。`\|\c
.B \-lang-c\c
\&\|' は明示的にこれらの機能の切り離しを指定し、`\|\c
.B \-lang-objc++\c
\&\|' は双方を利用可能にします。

これらのオプションはコンパイラドライバ \c
.B gcc\c
\& によって生成されますが、`\|\c
.B gcc\c
\&\|' のコマンドラインから引き渡すことはできません。
.TP
.B \-lint
コメント中に埋め込まれた、プログラムチェッカ  \c
.B lint\c
\& のコマンドを見つけ出し、それらの前に  `\|\c
.B #pragma lint\c
\&\|' を埋め込みます。例えば、コメント  `\|\c
.B /* NOTREACHED */\c
\&\|' は `\|\c
.B #pragma lint
NOTREACHED\c
\&\|' になります。

このオプションは直接 \c
.B cpp\c
\& を呼び出す場合にのみ使えます。\c
.B gcc\c
\& は、コマンドラインからこのオプションを引き渡しません。
.TP
.B \-$
識別子中での `\|\c
.B $\c
\&\|' の使用を禁止します。
これは、標準が修正される以前は、C 標準への厳密な準拠のためにありました。

本オプションは、
.B cpp
を直接呼ぶときのみ使用可能です。
.B gcc
はコマンド行からこれを渡しません。
.SH 関連項目
.B info\c
\&;
.I The C Preprocessor\c
, Richard M. Stallman.
中のエントリ
.RB "`\|" cpp "\|'"
.br
.BR gcc "(" 1 ");"
.B info\c
\&;
.I
Using and Porting GNU CC (for version 2.0)\c
, Richard M. Stallman.
中のエントリ
.RB "`\|" gcc "\|'"
.SH COPYING
Copyright (c) 1991, 1992, 1993 Free Software Foundation, Inc.
.PP
Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.
.PP
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.
.PP
Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be included in
translations approved by the Free Software Foundation instead of in
the original English.
