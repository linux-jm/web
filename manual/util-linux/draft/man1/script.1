.\"O .TH "SCRIPT" "1" "2021-06-02" "util\-linux 2.37.2" "User Commands"
.\"O .ie \n(.g .ds Aq \(aq
.\"O .el       .ds Aq '
.\"O .ss \n[.ss] 0
.\"O .nh
.\"O .ad l
.\"O .de URL
.\"O \fI\\$2\fP <\\$1>\\$3
.\"O ..
.\"O .als MTO URL
.\"O .if \n[.g] \{\
.\"O .  mso www.tmac
.\"O .  am URL
.\"O .    ad l
.\"O .  .
.\"O .  am MTO
.\"O .    ad l
.\"O .  .
.\"O .  LINKSTYLE blue R < >
.\"O .\}
.TH SCRIPT 1 2021\-06\-02 "util\-linux 2.37.2" ユーザーコマンド
.ie  \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de  URL
\fI\\$2\fP <\\$1>\\$3
..
.als MTO URL
.if  \n[.g] \{\
.  mso www.tmac
.  am URL
.    ad l
.  .
.  am MTO
.    ad l
.  .
.  LINKSTYLE blue R < >
.\}
.\"O ----------------------------------------
.\"O .SH "NAME"
.\"O script \- make typescript of terminal session
.SH 名前
script \- 端末セッションの忠実な記録を作成する
.\"O ----------------------------------------
.\"O .SH "SYNOPSIS"
.\"O .sp
.\"O \fBscript\fP [options] [\fIfile\fP]
.SH 書式
.sp
\fBscript\fP [options] [\fIfile\fP]
.\"O ----------------------------------------
.\"O .SH "DESCRIPTION"
.\"O .sp
.\"O \fBscript\fP makes a typescript of everything on your terminal session. The terminal data are stored in raw form to the log file and information about timing to another (optional) structured log file. The timing log file is necessary to replay the session later by \fBscriptreplay\fP(1) and to store additional information about the session.
.\"O .sp
.\"O Since version 2.35, \fBscript\fP supports multiple streams and allows the logging of input and output to separate files or all the one file. This version also supports new timing file which records additional information. The command \fBscriptreplay \-\-summary\fP then provides all the information.
.\"O .sp
.\"O If the argument \fIfile\fP or option \fB\-\-log\-out\fP \fIfile\fP is given, \fBscript\fP saves the dialogue in this \fIfile\fP. If no filename is given, the dialogue is saved in the file \fItypescript\fP.
.\"O .sp
.\"O Note that logging input using \fB\-\-log\-in\fP or \fB\-\-log\-io\fP may record security\-sensitive information as the log file contains all terminal session input (e.g., passwords) independently of the terminal echo flag setting.
.SH 説明
.sp
\fBscript\fP は、端末セッションで行われるすべてについて忠実な記録 (タイプスクリプト、typescript)
を作成する。端末上のデータは、未加工のまま (in raw form) ログファイルに記録され、 タイミングに関する情報は、(作成する、しないが任意の)
構造化された別のログファイルに記録される。このタイミングのログファイルは、後で \fBscriptreplay\fP(1)
を使用して、セッションを再生するためにも、 またセッションに関する補足情報を記録するためにも必要である。
.sp
バージョン 2.35 以降の \fBscript\fP は、複数ストリームをサポートし、 入力と出力を別々のファイルに記録することも、
両者を一つのファイルに記録することも可能になっている。 またそうしたバージョンでは、補足情報を記録する新型のタイミングファイルも使用できる。
\fBscriptreplay \-\-summary\fP というコマンドを使えば、そうした補足情報のすべてを見ることができる。
.sp
引数の \fIfile\fP やオプションの \fB\-\-log\-out\fP \fIfile\fP を指定すると、 \fBscript\fP はセッションのやり取りを
\fIfile\fP という名前のファイルに記録する。 ファイル名を指定しない場合は、セッションのやり取りを \fItypescript\fP
というファイルに記録することになる。
.sp
\fB\-\-log\-in\fP や \fB\-\-log\-io\fP を使って入力のログを取ると、セキュリティ的に危険な情報まで記録されることになるかもしれない。
端末のエコーフラグ (echo flag) の設定がどうなっていようと、 ログファイルに端末セッションにおけるすべての入力が書き込まれるからである
(たとえば、パスワードまでも)。
.\"O ----------------------------------------
.\"O .SH "OPTIONS"
.\"O .sp
.\"O Below, the \fIsize\fP argument may be followed by the multiplicative suffixes KiB (=1024), MiB (=1024*1024), and so on for GiB, TiB, PiB, EiB, ZiB and YiB (the "iB" is optional, e.g., "K" has the same meaning as "KiB"), or the suffixes KB (=1000), MB (=1000*1000), and so on for GB, TB, PB, EB, ZB and YB.
.\"O .sp
.\"O \fB\-a\fP, \fB\-\-append\fP
.SH オプション
.sp
以下で使用する引数 \fIsize\fP の後ろには、KiB (=1024), MiB (=1024*1024)
のような乗数を表す接尾辞を付けることができる。GiB, TiB, PiB, EiB, ZiB, YiB も同様に使える　("iB"
を続けるのは任意であり、たとえば、"K" は "KiB" と同じ意味である)。また、KB (=1000), MB (=1000*1000)
のような接尾辞を付けてもよい。GB, TB, PB, EB, ZB, YB も同様に使える。
.sp
\fB\-a\fP, \fB\-\-append\fP
.\"O ----------------------------------------
.\"O .RS 4
.\"O Append the output to \fIfile\fP or to \fItypescript\fP, retaining the prior contents.
.RS 4
出力を \fIfile\fP や \fItypescript\fP に追加する。ファイルの既存の内容はそのまま保持される。
.\"O ----------------------------------------
.\"O .RE
.\"O .sp
.\"O \fB\-c\fP, \fB\-\-command\fP \fIcommand\fP
.RE
.sp
\fB\-c\fP, \fB\-\-command\fP \fIcommand\fP
.\"O ----------------------------------------
.\"O .RS 4
.\"O Run the \fIcommand\fP rather than an interactive shell. This makes it easy for a script to capture the output of a program that behaves differently when its stdout is not a tty.
.RS 4
対話シェルではなく、\fIcommand\fP を直接実行する。 これを用いると、 プログラムからの出力をスクリプトが取り込みやすくなるときがある。 それは、
標準出力が端末 (tty) ではないときに、 異なる動作を行うようなプログラムの場合である。
.\"O ----------------------------------------
.\"O .RE
.\"O .sp
.\"O \fB\-E\fP, \fB\-\-echo\fP \fIwhen\fP
.RE
.sp
\fB\-E\fP, \fB\-\-echo\fP \fIwhen\fP
.\"O ----------------------------------------
.\"O .RS 4
.\"O This option controls the \fBECHO\fP flag for the slave end of the session\(cqs pseudoterminal. The supported modes are \fIalways\fP, \fInever\fP, or \fIauto\fP.
.\"O .sp
.\"O The default is \fIauto\fP \(em in this case, \fBECHO\fP enabled for the pseudoterminal slave; if the current standard input is a terminal, \fBECHO\fP is disabled for it to prevent double echo; if the current standard input is not a terminal (for example pipe: \fBecho date | script\fP) then keeping \fBECHO\fP enabled for the pseudoterminal slave enables the standard input data to be viewed on screen while being recorded to session log simultaneously.
.\"O .sp
.\"O Note that \(aqnever\(aq mode affects content of the session output log, because users input is not repeated on output.
.RS 4
このオプションは、 セッションの疑似端末におけるスレーブ側の \fBECHO\fP フラグを制御する。 サポートされるモードは \fIalways\fP,
\fInever\fP, \fIauto\fP である。
.sp
デフォルトは \fIauto\fP である \(em その場合 \fBECHO\fP は、 疑似端末のスレーブに対して有効になる。 つまり、
その時点での標準入力が端末である場合、 \fBECHO\fP は無効になり、 echo が繰り返されることはない。 また標準入力が端末ではない場合 (たとえば
\fBecho date | script\fP を行った場合)、 疑似端末のスレーブに対して \fBECHO\fP は有効のままであり、
画面上には標準入力データが表示される。 これと同時に、 その内容はセッションログにも記録される。
.sp
\(aqnever\(aq モードは、  セッションの出力ログ内容に影響する点に注意すること。 ユーザー入力は、 繰り返して出力されないからである。
.\"O ----------------------------------------
.\"O .RE
.\"O .sp
.\"O \fB\-e\fP, \fB\-\-return\fP
.RE
.sp
\fB\-e\fP, \fB\-\-return\fP
.\"O ----------------------------------------
.\"O .RS 4
.\"O Return the exit status of the child process. Uses the same format as bash termination on signal termination (i.e., exit status is 128 + the signal number). The exit status of the child process is always stored in the type script file too.
.RS 4
子プロセスの終了ステータスを返す。 子プロセスがシグナルによって終了させられたときの終了ステータスには、bash の場合と同じ形式を使用する
(すなわち、「128 + シグナル番号」である)。 子プロセスの終了ステータスは、タイプスクリプトファイルにも常に記録される。
.\"O ----------------------------------------
.\"O .RE
.\"O .sp
.\"O \fB\-f\fP, \fB\-\-flush\fP
.RE
.sp
\fB\-f\fP, \fB\-\-flush\fP
.\"O ----------------------------------------
.\"O .RS 4
.\"O Flush output after each write. This is nice for telecooperation: one person does \fBmkfifo foo; script \-f foo\fP, and another can supervise in real\-time what is being done using \fBcat foo\fP. Note that flush has an impact on performance; it\(cqs possible to use \fBSIGUSR1\fP to flush logs on demand.
.RS 4
書き込みをするたびに出力をフラッシュする。 離れた場所で共同作業をしているとき、これは役に立つ。 片方が \fBmkfifo foo; script \-f
foo\fP をすれば、もう一方は \fBcat foo\fP を使って、相手が何をやっているかリアルタイムで監視できるわけである。
頻繁にフラッシュすると、パフォーマンスに影響が出ることに注意していただきたい。 \fBSIGUSR1\fP
シグナルを使って、オンデマンドでログをフラッシュすることもできる。
.\"O ----------------------------------------
.\"O .RE
.\"O .sp
.\"O \fB\-\-force\fP
.RE
.sp
\fB\-\-force\fP
.\"O ----------------------------------------
.\"O .RS 4
.\"O Allow the default output file \fItypescript\fP to be a hard or symbolic link. The command will follow a symbolic link.
.RS 4
デフォルトの出力ファイル \fItypescript\fP がハードリンクやシンボリックリンクであってもよいことにする。すなわち、\fBscript\fP
コマンドがシンボリックをたどるようになる。
.\"O ----------------------------------------
.\"O .RE
.\"O .sp
.\"O \fB\-B\fP, \fB\-\-log\-io\fP \fIfile\fP
.RE
.sp
\fB\-B\fP, \fB\-\-log\-io\fP \fIfile\fP
.\"O ----------------------------------------
.\"O .RS 4
.\"O Log input and output to the same \fIfile\fP. Note, this option makes sense only if \fB\-\-log\-timing\fP is also specified, otherwise it\(cqs impossible to separate output and input streams from the log \fIfile\fP.
.RS 4
入力と出力のログを同じファイル \fIfile\fP に記録する。 注意してほしいが、このオプションに意味があるのは、\fB\-\-log\-timing\fP
オプションも一緒に指定した場合だけである。 そうしないと、ログファイル \fIfile\fP 中の出力ストリームと入力ストリームを分離できないことになる。
.\"O ----------------------------------------
.\"O .RE
.\"O .sp
.\"O \fB\-I\fP, \fB\-\-log\-in\fP \fIfile\fP
.RE
.sp
\fB\-I\fP, \fB\-\-log\-in\fP \fIfile\fP
.\"O ----------------------------------------
.\"O .RS 4
.\"O Log input to the \fIfile\fP. The log output is disabled if only \fB\-\-log\-in\fP specified.
.\"O .sp
.\"O Use this logging functionality carefully as it logs all input, including input when terminal has disabled echo flag (for example, password inputs).
.RS 4
入力を \fIfile\fP に記録する。 \fB\-\-log\-in\fP だけを指定すると、出力のログは作成されないことになる。
.sp
このログ機能を使うときは、気を付けていただきたい。 端末でエコーフラグを「抑止」にしているときの入力も含めて、すべての入力を記録するからである
(たとえば、パスワードの入力も記録する)。
.\"O ----------------------------------------
.\"O .RE
.\"O .sp
.\"O \fB\-O\fP, \fB\-\-log\-out\fP \fIfile\fP
.RE
.sp
\fB\-O\fP, \fB\-\-log\-out\fP \fIfile\fP
.\"O ----------------------------------------
.\"O .RS 4
.\"O Log output to the \fIfile\fP. The default is to log output to the file with name \fItypescript\fP if the option \fB\-\-log\-out\fP or \fB\-\-log\-in\fP is not given. The log output is disabled if only \fB\-\-log\-in\fP specified.
.RS 4
出力を \fIfile\fP に記録する。 オプション \fB\-\-log\-out\fP や \fB\-\-log\-in\fP
を指定しない場合、出力が記録されるのは、デフォルトでは \fItypescript\fP という名前のファイルである。 \fB\-\-log\-in\fP
だけを指定すると、ログ出力は無効になる。
.\"O ----------------------------------------
.\"O .RE
.\"O .sp
.\"O \fB\-T\fP, \fB\-\-log\-timing\fP \fIfile\fP
.RE
.sp
\fB\-T\fP, \fB\-\-log\-timing\fP \fIfile\fP
.\"O ----------------------------------------
.\"O .RS 4
.\"O Log timing information to the \fIfile\fP. Two timing file formats are supported now. The classic format is used when only one stream (input or output) logging is enabled. The multi\-stream format is used on \fB\-\-log\-io\fP or when \fB\-\-log\-in\fP and \fB\-\-log\-out\fP are used together. See also \fB\-\-logging\-format\fP.
.RS 4
タイミング情報を \fIfile\fP に記録する。 現在では、タイミングファイルに 2 種類のフォーマットが使用できるようになっている。 classic
(従来型) フォーマットは、(入力なり、出力なり) 片方のストリームのロギングのみが有効になっている場合に使用される。
マルチストリーム型のフォーマットが使用されるのは、\fB\-\-log\-io\fP のときか、\fB\-\-log\-in\fP と \fB\-\-log\-out\fP
が一緒に使われているときである。 \fB\-\-logging\-format\fP も参照していただきたい。
.\"O ----------------------------------------
.\"O .RE
.\"O .sp
.\"O \fB\-m\fP, \fB\-\-logging\-format\fP \fIformat\fP
.RE
.sp
\fB\-m\fP, \fB\-\-logging\-format\fP \fIformat\fP
.\"O ----------------------------------------
.\"O .RS 4
.\"O Force use of \fIadvanced\fP or \fIclassic\fP format. The default is the classic format to log only output and the advanced format when input as well as output logging is requested.
.\"O .sp
.\"O \fBClassic format\fP
.RS 4
タイミングファイルに強制的に \fIadvanced\fP (新型) または \fIclassic\fP (従来型) フォーマットを使用させる。
デフォルトは、出力のみをログに記録する場合は、従来型であり、 入力と出力、両方のロギングが要求されている場合は、新型である。
.sp
\fBclassic フォーマット\fP
.\"O ----------------------------------------
.\"O .RS 4
.\"O The log contains two fields, separated by a space. The first field indicates how much time elapsed since the previous output. The second field indicates how many characters were output this time.
.RS 4
ログは、スペースで区切られた二つのフィールドからなる。 最初のフィールドは、前回の出力から経過した時間を示し、2 番目のフィールドは、今回、何文字
(characters) 出力したかを示している。
.\"O ----------------------------------------
.\"O .RE
.\"O .sp
.\"O \fBAdvanced (multi\-stream) format\fP
.RE
.sp
\fBadvanced (multi\-stream) フォーマット\fP
.\"O ----------------------------------------
.\"O .RS 4
.\"O The first field is an entry type identifier (\(aqI\(cqnput, \(aqO\(cqutput, \(aqH\(cqeader, \(aqS\(cqignal). The socond field is how much time elapsed since the previous entry, and the rest of the entry is type\-specific data.
.RS 4
最初のフィールドは、記載事項のタイプ識別子である (\(aqI\(cqnput, \(aqO\(cqutput, \(aqH\(cqeader,
\(aqS\(cqignal)。 2 番目のフィールドは、前回の記録から経過した時間。 そして、記載事項の残りの部分は、タイプ特有のデータである。
.\"O ----------------------------------------
.\"O .RE
.RE
.\"O ----------------------------------------
.\"O .RE
.\"O .sp
.\"O \fB\-o\fP, \fB\-\-output\-limit\fP \fIsize\fP
.RE
.sp
\fB\-o\fP, \fB\-\-output\-limit\fP \fIsize\fP
.\"O ----------------------------------------
.\"O .RS 4
.\"O Limit the size of the typescript and timing files to \fIsize\fP and stop the child process after this size is exceeded. The calculated file size does not include the start and done messages that the \fBscript\fP command prepends and appends to the child process output. Due to buffering, the resulting output file might be larger than the specified value.
.RS 4
タイプスクリプトファイルやタイミングファイルの上限を \fIsize\fP までとし、 そのサイズを越えたら、子プロセスをストップする。
ファイルサイズの計算には、 \fBscript\fP コマンドが子プロセスの出力の前後に付ける開始や終了のメッセージは入らない。
バッファーリングのせいで、生成される出力ファイルが、指定した値より大きくなることがある。
.\"O ----------------------------------------
.\"O .RE
.\"O .sp
.\"O \fB\-q\fP, \fB\-\-quiet\fP
.RE
.sp
\fB\-q\fP, \fB\-\-quiet\fP
.\"O ----------------------------------------
.\"O .RS 4
.\"O Be quiet (do not write start and done messages to standard output).
.RS 4
出力を抑える (開始や終了のメッセージを標準出力に書き出さない)。
.\"O ----------------------------------------
.\"O .RE
.\"O .sp
.\"O \fB\-t\fP[\fIfile\fP], \fB\-\-timing\fP[=\fIfile\fP]
.RE
.sp
\fB\-t\fP[\fIfile\fP], \fB\-\-timing\fP[=\fIfile\fP]
.\"O ----------------------------------------
.\"O .RS 4
.\"O Output timing data to standard error, or to \fIfile\fP when given. This option is deprecated in favour of \fB\-\-log\-timing\fP where the \fIfile\fP argument is not optional.
.RS 4
タイミングデータを標準エラーに出力する。 \fIfile\fP を指定した場合は、 タイミングデータの出力先がそのファイルになる。
このオプションは非推奨であり、 \fB\-\-log\-timing\fP の使用をお勧めする。 なお \fB\-\-log\-timing\fP では、 引数 \fIfile\fP
の指定は必須である。
.\"O ----------------------------------------
.\"O .RE
.\"O .sp
.\"O \fB\-V\fP, \fB\-\-version\fP
.RE
.sp
\fB\-V\fP, \fB\-\-version\fP
.\"O ----------------------------------------
.\"O .RS 4
.\"O Display version information and exit.
.RS 4
バージョン情報を表示して終了する。
.\"O ----------------------------------------
.\"O .RE
.\"O .sp
.\"O \fB\-h\fP, \fB\-\-help\fP
.RE
.sp
\fB\-h\fP, \fB\-\-help\fP
.\"O ----------------------------------------
.\"O .RS 4
.\"O Display help text and exit.
.RS 4
ヘルプを表示して終了する。
.\"O ----------------------------------------
.\"O .RE
.RE
.\"O ----------------------------------------
.\"O .SH "SIGNALS"
.\"O .sp
.\"O Upon receiving \fBSIGUSR1\fP, \fBscript\fP immediately flushes the output files.
.SH シグナル
.sp
\fBSIGUSR1\fP を受け取ると、\fBscript\fP は直ちにバッファーの内容を出力ファイルにフラッシュする。
.\"O ----------------------------------------
.\"O .SH "ENVIRONMENT"
.\"O .sp
.\"O The following environment variable is utilized by \fBscript\fP:
.\"O .sp
.\"O \fBSHELL\fP
.SH 環境変数
.sp
次の環境変数を \fBscript\fP は利用する。
.sp
\fBSHELL\fP
.\"O ----------------------------------------
.\"O .RS 4
.\"O If the variable \fBSHELL\fP exists, the shell forked by \fBscript\fP will be that shell. If \fBSHELL\fP is not set, the Bourne shell is assumed. (Most shells set this variable automatically).
.RS 4
環境変数 \fBSHELL\fP が存在すれば、 \fBscript\fP からフォークするシェルは、 そのシェルになる。 \fBSHELL\fP
が設定されていない場合は、 Bourne シェルだと見なされる (ほとんどのシェルが、この変数を自動的に設定する)。
.\"O ----------------------------------------
.\"O .RE
.RE
.\"O ----------------------------------------
.\"O .SH "NOTES"
.\"O .sp
.\"O The script ends when the forked shell exits (a \fIcontrol\-D\fP for the Bourne shell (\fBsh\fP(1p)), and \fIexit\fP, \fIlogout\fP or \fIcontrol\-d\fP (if \fIignoreeof\fP is not set) for the C\-shell, \fBcsh\fP(1)).
.\"O .sp
.\"O Certain interactive commands, such as \fBvi\fP(1), create garbage in the typescript file. \fBscript\fP works best with commands that do not manipulate the screen, the results are meant to emulate a hardcopy terminal.
.\"O .sp
.\"O It is not recommended to run \fBscript\fP in non\-interactive shells. The inner shell of \fBscript\fP is always interactive, and this could lead to unexpected results. If you use \fBscript\fP in the shell initialization file, you have to avoid entering an infinite loop. You can use for example the \fB.profile\fP file, which is read by login shells only:
.\"O .sp
.\"O .if n .RS 4
.\"O .nf
.\"O .fam C
.\"O if test \-t 0 ; then
.\"O     script
.\"O     exit
.\"O fi
.\"O .fam
.\"O .fi
.\"O .if n .RE
.\"O .sp
.\"O You should also avoid use of \fBscript\fP in command pipes, as \fBscript\fP can read more input than you would expect.
.SH 注意
.sp
script コマンドが記録を終えるのは、フォークしたシェルが終了するときである (Bourne シェル (\fBsh\fP(1p))
では、\fIcontrol\-D\fP で終了する。C シェル (\fBcsh\fP(1)) では、\fIexit\fP, \fIlogout\fP、あるいは
(\fIignoreeof\fP が設定されていない場合は) \fIcontrol\-D\fP で終了する)。
.sp
\fBvi\fP のような対話的なコマンドには、タイプスクリプトファイルにゴミを作るものがある。 \fBscript\fP
は、複雑な画面処理をしないコマンドを使ったとき、一番うまく行く。 作成される記録は、ハードコピー端末をエミュレートするようになっているのである。
.sp
\fBscript\fP を非対話的シェルで動かすのは、お勧めできない。 \fBscript\fP
の内側のシェルは、常に対話的であり、そのため予期せぬ結果をもたらすかもしれないからである。 もし、\fBscript\fP
をシェルの初期化ファイルで使用するのなら、 無限ループに陥らないように気を付けなければならない。 たとえば、以下のような \fB.profile\fP
ファイルを使うことができるが、これなら読み込むのは、ログインシェルだけになる。
.sp
.if  n .RS 4
.nf
.fam C
if test \-t 0 ; then
    script
    exit
fi
.fam
.fi
.if  n .RE
.sp
また、パイプを使ったコマンドで \fBscript\fP を使うのも避けたほうがよい。 \fBscript\fP
が、ユーザーの思っている以上に入力を読み込むかもしれないからである。
.\"O ----------------------------------------
.\"O .SH "HISTORY"
.\"O .sp
.\"O The \fBscript\fP command appeared in 3.0BSD.
.SH 履歴
.sp
\fBscript\fP コマンドは 3.0BSD で登場した。
.\"O ----------------------------------------
.\"O .SH "BUGS"
.\"O .sp
.\"O \fBscript\fP places \fIeverything\fP in the log file, including linefeeds and backspaces. This is not what the naive user expects.
.\"O .sp
.\"O \fBscript\fP is primarily designed for interactive terminal sessions. When stdin is not a terminal (for example: \fBecho foo | script\fP), then the session can hang, because the interactive shell within the script session misses EOF and \fBscript\fP has no clue when to close the session. See the \fBNOTES\fP section for more information.
.SH バグ
.sp
\fBscript\fP は、ラインフィードやバックスペースも含めて、\fIすべて\fPをログファイルに書き込む。
これは、初心ユーザーの予想する動作ではないだろう。
.sp
\fBscript\fP は、そもそも対話的な端末セッションを対象に設計されている。 そのため、標準入力が端末でないときは (たとえば、\fBecho foo
| script\fP)、 セッションがハングするかもしれない。 なぜなら、script セッション内の対話的シェルが EOF
を受け取りそこなうと、\fBscript\fP としては、いつセッションを閉じればよいのか、手がかりをつかめないからである。
詳しくは、「\fB注意\fP」セクションを参照のこと。
.\"O ----------------------------------------
.\"O .SH "SEE ALSO"
.\"O .sp
.\"O \fBcsh\fP(1) (for the \fIhistory\fP mechanism),
.\"O \fBscriptreplay\fP(1),
.\"O \fBscriptlive\fP(1)
.SH 関連項目
.sp
\fBcsh\fP(1) (\fIhistory\fP のメカニズムについて), \fBscriptreplay\fP(1), \fBscriptlive\fP(1)
.\"O ----------------------------------------
.\"O .SH "REPORTING BUGS"
.\"O .sp
.\"O For bug reports, use the issue tracker at \c
.\"O .URL "https://github.com/karelzak/util\-linux/issues" "" "."
.SH バグ報告
.sp
バグ報告は、 以下にある issue トラッカーを利用すること。
.URL https://github.com/karelzak/util\-linux/issues "" .
.\"O ----------------------------------------
.\"O .SH "AVAILABILITY"
.\"O .sp
.\"O The \fBscript\fP command is part of the util\-linux package which can be downloaded from \c
.\"O .URL "https://www.kernel.org/pub/linux/utils/util\-linux/" "Linux Kernel Archive" "."
.SH 入手方法
.sp
\fBscript\fP コマンドは util\-linux パッケージの一部であり、 以下からダウンロードできる。
.URL https://www.kernel.org/pub/linux/utils/util\-linux/ "Linux Kernel Archive" .
.\"O ----------------------------------------
