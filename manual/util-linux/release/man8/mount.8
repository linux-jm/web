.\" Copyright (c) 1996-2004 Andries Brouwer
.\"
.\" This page is somewhat derived from a page that was
.\" (c) 1980, 1989, 1991 The Regents of the University of California
.\" and had been heavily modified by Rik Faith and myself.
.\" (Probably no BSD text remains.)
.\" Fragments of text were written by Werner Almesberger, Remy Card,
.\" Stephen Tweedie and Eric Youngdale.
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139,
.\" USA.
.\"
.\" 960705, aeb: version for mount-2.7g
.\" 970114, aeb: xiafs and ext are dead; romfs is new
.\" 970623, aeb: -F option
.\" 970914, reg: -s option
.\" 981111, K.Garloff: /etc/filesystems
.\" 990111, aeb: documented /sbin/mount.smbfs
.\" 990730, Yann Droneaud <lch@multimania.com>: updated page
.\" 991214, Elrond <Elrond@Wunder-Nett.org>: added some docs on devpts
.\" 010714, Michael K. Johnson <johnsonm@redhat.com> added -O
.\" 010725, Nikita Danilov <NikitaDanilov@Yahoo.COM>: reiserfs options
.\" 011124, Karl Eichwalder <ke@gnu.franken.de>: tmpfs options
.\"
.\" Japanese Version Copyright (c) 1997-1999 NAKANO Takeo all rights reserved.
.\" Translated Thu Aug 19 1997 by NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\" Updated & Modified Wed Jun 24 1998 by NAKANO Takeo 
.\" Updated & Modified Tue Nov 24 1998 by NAKANO Takeo 
.\" Updated & Modified Thu Oct 14 1999 by NAKANO Takeo 
.\" Updated & Modified Sat 18 Mar 2000 by NAKANO Takeo
.\" Updated & Modified Wed 14 Jun 2000 by NAKANO Takeo 
.\" Updated & Modified Tue Jan  9 04:40:47 JST 2001
.\"      by Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated & Modified Mon Mar 26 18:21:20 JST 2001 by Yuichi SATO
.\" Updated Tue Jun 19 05:29:02 JST 2001
.\"      by Kentaro Shirakata <argrath@ub32.org>
.\" Updated & Modified Fri Jul 20 03:38:20 JST 2001 by Yuichi SATO
.\" Updated & Modified Mon Sep  3 01:15:41 JST 2001 by Yuichi SATO
.\" Updated & Modified Sat Nov 17 15:30:38 JST 2001 by Yuichi SATO
.\" Updated & Modified Fri Jan 25 06:07:34 JST 2002 by Yuichi SATO
.\" Updated & Modified Sun Mar 24 13:53:03 JST 2002 by Yuichi SATO
.\" Updated & Modified Thu Aug 29 04:38:46 JST 2002 by Yuichi SATO
.\" Updated & Modified Fri Mar 21 04:13:41 JST 2003 by Yuichi SATO
.\" Updated & Modified Sun May  2 12:22:24 JST 2004 by Yuichi SATO
.\" Updated & Modified Mon May  9 02:52:10 JST 2005 by Yuichi SATO
.\"
.\"WORD:	character set		文字セット
.\"
.TH MOUNT 8 "2004-12-16" "Linux 2.6" "Linux Programmer's Manual"
.SH 名前
mount \- ファイルシステムをマウントする
.SH 書式
.BI "mount [\-lhV]"
.LP
.BI "mount \-a [\-fFnrsvw] [\-t " vfstype "] [\-O " optlist ]
.br
.BI "mount [\-fnrsvw] [\-o " options " [,...]] " "device " | " dir"
.br
.BI "mount [\-fnrsvw] [\-t " vfstype "] [\-o " options "] " "device dir"
.SH 説明
Unix のシステムにおいては、アクセスできるファイルはすべて 1 つの大きな
ツリー構造にまとめられている。
これは
.BR /
をルート (root:根) とする階層構造をなしている。
これらのファイル群は複数のデバイスにわたって配置することができる。
.B mount
コマンドはあるデバイス上のファイルシステムを
この大きなツリー構造に接続するために用いられる。
逆に接続を解除する際には
.BR umount (8)
コマンドが用いられる。

.B mount
コマンドの標準形は次の通りである。
.RS
.br
.BI "mount \-t" " type device dir"
.RE
これは
.I device
上にあるファイルシステム (タイプ
.IR type )
をディレクトリ
.IR dir
に接続するよう、カーネルに伝える。
このファイルシステムがマウントされている間は、ディレクトリ
.I dir
のもとの中身 (もしあれば)、ディレクトリ自身の所有者、
パーミッションモードは見えなくなる。
.I dir
によって指定されるパスは
.IR device
上のファイルシステムのルートを参照することになる。

以下の 3 種類の実行形式は、実際には何もマウントしない。
.RS
.br
.B "mount \-h"
.RE
はヘルプメッセージを表示する。
.RS
.br
.B "mount \-V"
.RE
はバージョン情報を表示する。
.RS
.BI "mount [-l] [-t" " type" ]
.RE
とだけ入力して実行すると、
現在マウントされているファイルシステムのリストを表示する。
-t "type" を指定すると、ファイルシステムのタイプが
.IR type
のものだけを表示する。
オプション \-l を付けると (ext2, ext3, XFS) のラベルをリストに追加する。
タイプに関する詳細は以下に述べる。

.\" 実際には 2.3.99 以降で使用できる。
.\" 最初の頃、書式は mount -t bind であった。
Linux 2.4.0 以降では、
ファイル階層の一部をどこか別の場所に再マウントすることができる。
使い方は以下の通りである。
.RS
.br
.B "mount --bind olddir newdir"
.RE
この呼び出しの後、同じ内容を 2 つの場所でアクセスできる。
1 つのファイルを (1 つのファイル上に) 再マウントすることもできる。

この呼び出しでは 1 つのファイルシステム (の一部) のみをアタッチするだけで、
サブマウントはアタッチしない。
サブマウントを含むファイル階層全体は、
以下のコマンドで 2 番目の場所にアタッチできる。
.RS
.br
.B "mount --rbind olddir newdir"
.RE
.\" Linux 2.4.11 以降で使用可能。

ファイルシステムのマウントオプションは、
元のマウントポイントのものと同じに維持され、
--bind/--rbind の後に -o オプションを指定して変更できない点に注意すること。

Linux 2.5.1 以降では、
マウントされたツリーを纏めて他の場所に移動することが可能になった。
使い方は以下の通りである。
.RS
.br
.B "mount --move olddir newdir"
.RE

.I proc
ファイルシステムはスペシャルデバイスには関連付けられていないので、
マウントする際には
.I proc
のような適当なキーワードをデバイス指定の代わりに用いる。
(通常用いられている
.I none
はあまりお勧めできない:
.B umount
が `none busy' というエラーメッセージを出すことになるので、
混乱の原因となりかねない。)


ほとんどの場合、デバイスは (ブロックスペシャルデバイスの) ファイル名で
指定する (例:
.IR /dev/sda1 )。
しかし例外もある。例えば NFS を通してマウントする場合には、
.I device
は
.IR knuth.cwi.nl:/dir
のようになる。
ブロックスペシャルデバイスの指定には、ボリュームラベルや UUID を
用いることができる (以下の \-L および \-U オプションを見よ)。

ファイル
.I /etc/fstab
.RB ( fstab (5)
を見よ) は、それぞれのデバイスが通常マウントされる場所を、
オプションとともに記述したものである。
このファイルは以下の 3 つの場合に用いられる。
.LP
(i) コマンド
.RS
.br
.BI "mount \-a [\-t " type "] [\-O " optlist ]
.RE
が (通常は起動スクリプトから) 実行されると、
.I fstab
に記述されているすべてのファイルシステムが
(適当なオプションの有無に関わらず、それぞれ適当なタイプで) マウントされる。
ただしキーワード
.B noauto
を含む行はマウントされない。
.B \-F
オプションを指定すると mount は fork し、
それぞれのファイルシステムが同時にマウントされる。
.LP
(ii)
.IR fstab
中に記述されているファイルシステムをマウントするときは、
デバイスのみ、あるいはマウントポイントのみの指定で充分である。
.LP
(iii) 通常はスーパーユーザーのみがマウントを行うことができるが、
.I fstab
中の行に
.B user
オプションが含まれていれば、その行で指定されているファイルシステムは
誰でもマウントすることができる。
.LP
したがって
.RS
.br
.B "/dev/cdrom  /cd  iso9660  ro,user,noauto,unhide"
.RE
という行があれば、誰でも CDROM 上の iso9660 ファイルシステムを
.RS
.br
.B "mount /dev/cdrom"
.RE
または
.RS
.br
.B "mount /cd"
.RE
によってマウントできる。
詳細は
.BR fstab (5)
を参照のこと。
ファイルシステムをマウントしたユーザーだけが、
それをアンマウントすることができる。
他のユーザーでもアンマウントを行えるようにしたい場合は、
.I fstab
の行の指定を
.B user
の代わりに
.B users
とすること。
.B owner
オプションは
.B user
オプションと似ているが、ユーザーがそのスペシャルファイルの
所有者でなければならないという制限がある。
これはたとえばログインスクリプトがコンソールのユーザーを
.I /dev/fd
の所有者にする場合、このデバイスに用いると便利だろう。
.B group
オプションは (訳註:
.B user
オプションと) 似ているが、ユーザーがそのスペシャルファイルの
グループのメンバでなければならないという制限がある。

.B mount
および
.B umount
プログラムによって現在マウントされているファイルシステムの一覧は
.I /etc/mtab
ファイル中に記述されている。
.B mount
が引き数なしで実行された場合には、
このリストが表示される。

.I proc
ファイルシステムがマウントされている場合には (マウントポイントは
.I /proc
としよう)、
ファイル
.I /etc/mtab
と
.I /proc/mounts
はほとんど同じ内容になる。
.I /etc/mtab
には、マウントオプションなど多少の情報が付け加えられている。
特に非常に多くマウントしている場合には、(訳註:
.I /etc/mtab
を
.I /proc/mounts
への) シンボリックリンクにすることにより、とても速くなる。
しかし、
.I /etc/mtab
は常に最新の情報であるとは限らない (以下の
.B \-n
オプションの説明を参照)。
.I /etc/mtab
を
.I /proc/mounts
へのシンボリックリンクとすることも可能であるが、
この場合は上に挙げた情報が失われる。
loop デバイスを用いている場合には特に不便となってしまう。
また "user" オプションを用いると失敗する。

.SH オプション
.B mount
の実行時に用いられるオプションは以下のようにして決定される。
まずそのファイルシステムに特有のオプションが
.I fstab
中の対応する行から抽出される。
次にコマンドラインの
.B \-o
引き数によって指定されたオプション、最後に
.BR \-r " または " \-w
オプションが指定されている場合には、それらが適用される。

.B mount
コマンドで利用できるオプションは以下の通り:
.TP
.B \-V
バージョンを表示する。
.TP
.B \-h
ヘルプメッセージを表示する。
.TP
.B \-v
詳細表示モード。
.TP
.B \-a
.IR fstab
に記載されている (指定したタイプの) ファイルシステムを
すべてマウントする。
.TP
.B \-F
.RB ( \-a
とともに用いる)
それぞれのデバイスごとに fork して新しい mount プロセスを生成する。
別々のデバイス、別々の NFS サーバに対するマウントを並行して行うことになる。
利点は動作が高速になること、
また NFS タイムアウトが並行して計測されることである。
逆に欠点としては、マウントの順序が規定されないことである。
したがって、
.I /usr
と
.I /usr/spool
の両方を同時にマウントするときには、このオプションを用いることはできない。
.TP
.B \-f
実際のシステムコール以外を除いてすべての動作をする。
もうちょっとわかりやすく言うと、
ファイルシステムのマウント動作を「行うふり」をする。
このオプションは
.B \-v
フラグとともに用いると便利で、
.B mount
コマンドが行おうとすることを確認できる。
また以前に \-n オプションを用いてマウントされたデバイスのエントリーを
.I /etc/mtab
に書き込む目的にも用いることができる。
.TP
.B \-i
/sbin/mount.<filesystem> ヘルパがあっても、呼び出さない。
.TP
.B \-l
ext2, ext3, XFS のラベルを mount の出力に追加する。
これを行うには、mount にディスクデバイスの読み取り権限が必要である
(つまり suid root されている必要がある)。
このような ext2 や ext3 のラベルを設定するには
.BR e2label (8)
ユーティリティを用いればよい。
また、XFS のラベルを設定するには
.BR xfs_admin (8)
を用いればよい。
reiserfs のラベルを設定するには
.BR reiserfstune (8)
を用いればよい。
.TP
.B \-n
マウントの際に
.IR /etc/mtab
に書き込みを行わない。
これが必要になるのは、例えば
.I /etc
がリードオンリーのファイルシステムの場合などである。
.TP
.BI \-p " num"
暗号付きループマウントの場合、
パスフレーズを端末からではなくファイルディスクリプタ
.I num
から読み込む。
.TP
.B \-s
曖昧なマウントオプションが与えられたときに、
実行を中断しないで受け入れる。
これはファイルシステムタイプによってサポートされていない
マウントオプションを無視する。
すべてのファイルシステムでこのオプションがサポートされているわけではない。
このオプションは Linux autofs ベースのオートマウンタのために用意されている。
.TP
.B \-r
ファイルシステムをリードオンリーでマウントする。
.B "\-o ro"
と同義である。
.TP
.B \-w
ファイルシステムを読み書き可能なモードでマウントする (デフォルト)。
.B "\-o rw"
と同義である。
.TP
.BI \-L " label"
.I label
で指定したラベルを持つパーティションをマウントする。
.TP
.BI \-U " uuid"
.I uuid
で指定した UUID を持つパーティションをマウントする。
これらの 2 つのオプションを用いるには、
.I /proc/partitions
ファイル (Linux 2.1.116 以降でサポート) が存在していなければならない。
.TP
.TP
.BI \-t " vfstype"
.B \-t
に続く引き数はファイルシステムタイプを指定するのに用いられる。
現在サポートされているファイルシステムのタイプには、以下のものが含まれる。
.IR adfs ,
.IR affs ,
.IR autofs ,
.IR coda ,
.IR coherent ,
.IR cramfs ,
.IR devpts ,
.IR efs ,
.IR ext ,
.IR ext2 ,
.IR ext3 ,
.IR hfs ,
.IR hpfs ,
.IR iso9660 ,
.IR jfs ,
.IR minix ,
.IR msdos ,
.IR ncpfs ,
.IR nfs ,
.IR ntfs ,
.IR proc ,
.IR qnx4 ,
.IR ramfs ,
.IR reiserfs ,
.IR romfs ,
.IR smbfs ,
.IR sysv ,
.IR tmpfs ,
.IR udf ,
.IR ufs ,
.IR umsdos ,
.IR usbfs ,
.IR vfat ,
.IR xenix ,
.IR xfs ,
.IR xiafs .
coherent, sysv, xenix の 3 つは等価であり、
.I xenix
と
.I coherent
は将来削除される \(em 代りに
.I sysv
を用いること。
カーネルのバージョン 2.1.21 以降では、
.I ext
および
.I xiafs
というタイプは、もはや存在しない。
.I usbfs
は、以前は
.I usbdevfs
として知られていた。

ほとんどのタイプに対しては、
.B mount
プログラムがしなければならないことは単に
.IR mount (2)
システムコールを発行することだけであり、
そのタイプのファイルシステムに対する細かな知識は必要とされない。
しかしいくつかのタイプ (nfs, smbfs, ncpfs など) については、
特別なコードが必要になる。
nfs 対応コードは組み込まれているが、
smbfs と ncpfs については別にマウントプログラムが用意されている。
全部のタイプを同じやり方で扱うことができるようにするため、
mount はタイプ
.I TYPE
とともに呼び出されると、(もしあれば)
.I /sbin/mount.TYPE
を実行する。
.I smbmount
プログラムでは、バージョンによって呼び出しの方式が異なっていることが多いので、
.I /sbin/mount.smbfs
は必要な呼び出し方式に調整するシェルスクリプトでなければならないだろう。

.B \-t
オプションが与えられなかった場合や、
.B auto
タイプが指定された場合、
.B mount
は適切なタイプを推測する。
.B mount
が blkid ライブラリとともにコンパイルされている場合、
このライブラリによって推測を行う。
さもなければ、
.B mount
は自身でスーパーブロックをプローブして推測を行う。
このプローブに失敗すると、\fBmount\fP はファイル
.I /etc/filesystems
を読み込もうとする。
さらにこのファイルがなければ
.I /proc/filesystems
を読み込もうとする。
そして、読み込んだファイルにリストされているファイルシステムがテストされる。
ただし "nodev" ラベルの付いているもの (すなわち
.IR devpts ,
.IR proc ,
.IR nfs )
はテストから除かれる。
.I /etc/filesystems
が * のみの行で終わっている場合、
.B mount
はその後に
.I /proc/filesystems
を読み込む。

.B auto
タイプはフロッピーを一般ユーザーがマウントする場合に特に便利であろう。
プローブの順序を変更したい場合
(例えば msdos の前に vfat の試行をしたい場合や
ext2 の前に ext3 を試行したい場合) や、
カーネルモジュールの自動ローダを利用している場合には、
.I /etc/filesystems
ファイルを作っておくと便利である。
注意: ファイルシステムのテストには発見的手法
(適当な `合い言葉' が見つかるかどうか) が用いられるので、
ファイルシステムのタイプを間違えて、被害を被る可能性もある。
データが重要な場合は、
.B mount
にファイルシステムタイプを推測させてはならない。

複数のタイプをコンマで区切ったリストで指定することもできる。
ファイルシステムのタイプのリストの前に
.B no
を前置することもできる。
これは動作対象としないファイルシステムを指定する。
.RB ( \-a
オプションとともに用いると良いかもしれない。)

例えば以下のコマンド:
.RS
.RS
.B "mount \-a \-t nomsdos,ext"
.RE
は
.I msdos
および
.IR ext
を除くすべてのファイルシステムをマウントする。
.RE
.TP
.B \-O
.B \-a
と一緒に使うと、
.B \-a
が適用されるファイルシステムを制限することができる。
この動作は
.B \-t
と似ているが、
.B \-a
と一緒に使うとき以外は機能しない点が異なる。
例えば以下のコマンド:
.RS
.RS
.B "mount \-a \-O no_netdev"
.RE
は
.I /etc/fstab
ファイルのオプションフィールドで
.I _netdev
オプションが指定されていない
全てのファイルシステムをマウントする。

各オプションが厳密にマッチされる点が
.B \-t
とは異なる。
ある 1 個のオプションの前に
.B no
をおいても、残りのオプションの意味は打ち消されない。

.B \-t
と
.B \-O
オプションの機能は足し合わせることができる。
すなわちコマンド
.RS
.B "mount \-a \-t ext2 \-O _netdev"
.RE
は _netdev が指定されている
全ての ext2 ファイルシステムをマウントするが、
ext2 以外のファイルシステムや、
_netdev が指定されていない ext2 ファイルシステムはマウントしない。
.RE
.TP
.B \-o
オプションの指定を行うには、
.B \-o
フラグに続けて各オプションをコンマで区切った文字列を書く。
オプションには、
.I /etc/fstab
の中でのみ意味を持つものもある。
以下のオプションはマウントされるすべての
ファイルシステムに適用できるものである
(但し、全てのファイルシステムがこれらのオプションを引き受けるとは限らない。
例えば、
.B sync
オプションは現在 ext2, ext3, ufs でのみ効果をもつ):
.RS
.TP
.B async
そのファイルシステムに対するすべての I/O が非同期 (asynchronous) に行われる。
.TP
.B atime
アクセス毎に inode のアクセス時間を更新する。デフォルト。
.TP
.B auto
.B \-a
が指定されたときにマウントされる。
.TP
.B defaults
デフォルトのオプション:
.BR rw ", " suid ", " dev ", " exec ", " auto ", " nouser ", " async
を用いる。
.TP
.B dev
ファイルシステム上の
キャラクタ・スペシャル・デバイスや
ブロック・スペシャル・デバイスを
利用できるようにする。
.TP
.B exec
バイナリの実行を許可する。
.TP
.B group
通常 (つまり root 以外) のユーザーの属するグループのうちの 1 つが
デバイスのグループとマッチした場合に、
そのユーザーがファイルシステムをマウントするのを許可する。
このオプションはオプション
.BR nosuid " と " nodev
を暗黙のうちに指定する
(ただし、オプション行で
.B group,dev,suid
のようにして、その後のオプションで上書きしない限り)。
.TP
.B mand
このファイルシステム上での強制 (mandatory) ロックを許可する。
.BR fcntl (2)
を参照すること。
.TP
.B _netdev
ネットワークアクセスが必要なデバイス上にあるファイルシステム
(システムでネットワークが使用可能になるまでは、
ファイルシステムをマウントさせないために使われる)。
.TP
.B noatime
そのファイルシステム上では inode のアクセス時間を更新しない
(例えばニュースサーバーをスピードアップしたいときなどに、
ニューススプールへのアクセス速度を向上させるために用いられる)。
.TP
.B noauto
明示的に指定されたときのみマウントできる。
つまり
.B \-a
オプションではマウントされない。
.TP
.B nodev
このファイルシステム上にある
キャラクタ・スペシャル・デバイスや
ブロック・スペシャル・デバイスを
使用できないようにする。
.TP
.B noexec
マウントされたファイルシステム上の任意のバイナリの直接実行を禁止する。
(最近になるまで /lib/ld*.so /mnt/binary のようなコマンドを使って、
バイナリを何とか実行することが可能であった。
このトリックは Linux 2.4.25 / 2.6.0 以降では失敗する。)
.TP
.B nomand
ファイルシステム上での強制ロックを禁止する。
.TP
.B nosuid
SUID および SGID ビットを無効にする (これは安全なように見えるが、
suidperl(1) がインストールされている場合には、実際にはむしろ危険である)。
.TP
.B nouser
一般ユーザー (スーパーユーザー以外のユーザー) のマウントを禁止する。
これはデフォルトである。
.TP
.B owner
通常 (つまり root 以外) のユーザーがデバイスの所有者とマッチした場合に、
そのユーザーがファイルシステムをマウントするのを許可する。
このオプションはオプション
.BR nosuid " と " nodev
を暗黙のうちに指定する
(ただし、オプション行で
.B owner,dev,suid
のようにして、その後のオプションで上書きしない限り)。
.TP
.B remount
すでにマウントされているファイルシステムを再マウントしようとする。
これは通常ファイルシステムのマウントフラグを変更するとき
(特にリードオンリーのファイルシステムを書き込み可能にするとき) に用いられる。
デバイスとマウントポイントを変更しない。
.TP
.B ro
ファイルシステムをリードオンリーでマウントする。
.TP
.B rw
ファイルシステムを読み書き可能なモードでマウントする。
.TP
.B suid
SUID および SGID ビットを有効にする。
.TP
.B sync
そのファイルシステムに対する I/O がすべて同期的 (synchronous) に行われる。
.TP
.B dirsync
ファイルシステムにおける全てのディレクトリ更新を、
同期的 (synchronous) に行わせる。
このオプションは以下のシステムコールに影響する:
creat, link, unlink, symlink, mkdir, rmdir, mknod, rename.
.TP
.B user
一般ユーザーでもファイルシステムをマウントできるようにする。
マウントを行ったユーザーの名前が mtab に書き込まれ、
そのユーザーがアンマウントできるようになる。
このオプションを指定すると、同時に
.BR noexec ", " nosuid ", " nodev
が指定されたことになる。
ただし続けて指定すれば上書きは可能。
すなわち
.B user,exec,dev,suid
のような行を指定すればよい。
.TP
.B users
全てのユーザーがファイルシステムをマウント・アンマウント出来るようにする。
このオプションを指定すると、同時に
.BR noexec ", " nosuid ", " nodev
が指定されたことになる。
ただし続けて指定すれば上書きは可能。
すなわち
.B users,exec,dev,suid
のような行を指定すればよい。
.RE
.TP
.B \-\-bind
サブツリーをどこか他の場所に再マウントする
(サブツリーの内容が両方の場所でアクセスできる)。
上記を参照。
.TP
.B \-\-move
サブツリーを他の場所に移動する。上記を参照。

.SH ファイルシステム独自のマウントオプション
以下のオプションは特定のファイルシステムにのみ適用される。
ファイルシステムの順に並べてある。
すべて
.B \-o
フラグに続けて指定する。

どのようなオプションがサポートされているかは、
実行されているカーネルに少々依存する。
より詳しい情報はカーネルソースのサブディレクトリ
.I Documentation/filesystems
で見つけることができる。

.SH "adfs のマウントオプション"
.TP
\fBuid=\fP\fIvalue\fP and \fBgid=\fP\fIvalue\fP
このファイルシステムのファイルの所有者とグループを設定する
(デフォルトは uid=gid=0)。
.TP
\fBownmask=\fP\fIvalue\fP and \fBothmask=\fP\fIvalue\fP
それぞれ ADFS の「所有者」属性と「その他」属性に対する
パーミッションマスクを設定する
(デフォルトはそれぞれ 0700 と 0777)。
.I /usr/src/linux/Documentation/filesystems/adfs.txt
も参照のこと。
.SH "affs のマウントオプション"
.TP
\fBuid=\fP\fIvalue\fP と \fBgid=\fP\fIvalue\fP
ファイルシステムのルートの所有者とグループを設定する
(デフォルトは uid=gid=0。
ただしオプション
.B uid
や
.B gid
を値なしで指定すると、カレントプロセスの uid および gid が用いられる)。
.TP
\fBsetuid=\fP\fIvalue\fP と \fBsetgid=\fP\fIvalue\fP
すべてのファイルの所有者とグループを設定する。
.TP
.BI mode= value
すべてのファイルの許可属性を
.IR value " & 0777"
に設定する。
元の許可属性は無視される。
読み込みが許可されているディレクトリには検索許可の属性を付加する。
この値は 8 進数で与える。
.TP
.B protect
ファイルシステムの保護ビットへのいかなる変更も許可しない。
.TP
.B usemp
ファイルシステムのルートの uid と gid を
マウントポイントの uid と gid に設定する。
ただしこの設定は最初の sync または umount の際に実行され、
その後にこのオプションはクリアされる。変なの。
.TP
.B verbose
それぞれのマウントが成功するごとにメッセージを表示する。
.TP
.BI prefix= string
リンクをたどる際にボリューム名の前に用いられるプレフィックス (prefix)。
.TP
.BI volume= string
シンボリックリンクをたどる際に '/' の前に用いられるプレフィックス。
最長 30 文字。
.TP
.BI reserved= value
デバイススタート時の未使用ブロックの数。デフォルトは 2。
.TP
.BI root= value
ルートブロックの位置を明示的に与える。
.TP
.BI bs= value
ブロックサイズを与える。有効な値は 512, 1024, 2048, 4096 のいずれか。
.TP
.BR grpquota " / " noquota " / " quota " / " usrquota
これらのオプションは指定可能であるが、単に無視される。
(但し、 quota ユーティリティは
.I /etc/fstab
にこのような文字列があると反応する)

.SH "coherent のマウントオプション"
なし。

.SH "devpts のマウントオプション"
.\"nakano: 仮想の方がいい? でも仮想は virtual?
devpts ファイルシステムは擬似ファイルシステムで、
通例としては
.I /dev/pts
にマウントされる。プロセスは擬似端末 (pseudo terminal) を取得するために、
.I /dev/ptmx
をオープンする。
するとそのプロセスは番号を通して擬似端末を使えるようになり、
擬似端末のスレーブに
.IR /dev/pts/ <number>
経由でアクセスできるようになる。
.\"nakano: 勉強してないんでよくわからない...
.TP
\fBuid=\fP\fIvalue\fP と \fBgid=\fP\fIvalue\fP
新たに作成される PTY の所有者と所有グループを設定する。
何も指定しないと、作成したプロセスの UID と GID になる。
例えば tty グループの GID が 5 であったとすると、
.B gid=5
とすれば新たに作成された PTY は tty グループに属することになる。
.TP
.BI mode= value
新たに作成される PTY のモードを設定する。
デフォルトは 0600 である。
.B mode=620
と
.B gid=5
を設定すると、新たに生成される PTY は、
"mesg y" がデフォルトになる。

.SH "ext のマウントオプション"
なし。
`ext' ファイルシステムはすでに時代遅れであり、用いるべきではない。
Linux バージョン 2.1.21 以降では extfs はカーネルソースから削除されている。

.SH "ext2 のマウントオプション"
`ext2' ファイルシステムは Linux の標準ファイルシステムである。
.\" カーネルのバグのため、ランダムなオプションでマウントされてしまうことがあった 
.\" (Linux 2.0.4 で修正された)。
Linux 2.5.46 以降では、大部分のマウントオプションのデフォルト値は
ファイルシステムのスーパーブロックで決定される。
このデフォルト値は
.BR tune2fs (8)
で設定すること。
.TP
.BR acl " / " noacl
POSIX アクセス制御リスト (Access Control List) をサポートする
(またはサポートしない)。
.\" CONFIG_EXT2_FS_POSIX_ACL が必要である。
.TP
.BR bsddf " / " minixdf
システムコール
.I statfs
の振る舞いを設定する。
.B minixdf
を指定すると、返り値の
.I f_blocks
フィールドにファイルシステムの全ブロック数が入るようになり、
.B bsddf
を指定すると、ext2 ファイルシステムによって利用されていて、
ファイルの保存領域としては使えないブロックの分を引いた値が入る。
デフォルトは
.BR bsddf 。
すなわち、
.RE
.nf

% mount /k -o minixdf; df /k; umount /k
Filesystem   1024-blocks  Used Available Capacity Mounted on
/dev/sda6      2630655   86954  2412169      3%   /k
% mount /k -o bsddf; df /k; umount /k
Filesystem   1024-blocks  Used Available Capacity Mounted on
/dev/sda6      2543714      13  2412169      0%   /k

.fi
(この例より、
.I /etc/fstab
のオプションにコマンドラインオプションを追加できることもわかる。)

.TP
.\" Linux 2.3.99-pre3 より前:
.\" .BR check " / " check=normal " / " check=strict
.\" チェックレベルを設定する。
.\" これらのオプションのうち少なくとも 1 つが設定されると (デフォルトでは
.\" .B check=normal
.\" が設定されている)、inode とブロックのビットマップが
.\" マウントの際にチェックされる
.\" (これは大きなディスクでは 30 秒ほどかかることもあるが、あまり役に立たない)。
.\" strict チェックが指定されると、ブロックの deallocation
.\" (解放すべきブロックがデータ領域にないかどうか) がチェックされる。
.\" 2.3.99-pre3 以降で 2.6.0-test7 より前では、
.\" 文字列 check=foo という全ての文字列は単なる check と等価であった。
.\" 2.6.0-test7 以降では check のみが受け付けられる。
.BR check
ファイルシステム (のブロックと inode ビットマップ) をマウント時にチェックする。
.\" CONFIG_EXT2_CHECK が必要である。
.TP
.BR check=none " / " nocheck
マウント時にチェックを行わない。
これがデフォルトであり、高速である。
.BR e2fsck (8)
を時折、例えばブート時に、呼び出す方が賢明である。
.TP
.B debug
デバッグ情報をマウントおよび再マウントごとに表示する。
.TP
.BR errors=continue " / " errors=remount-ro " / " errors=panic
エラーが起こったときの振る舞いを指定する。
(エラーを無視し、ファイルシステムに問題があることを記録だけして続ける /
ファイルシステムをリードオンリーでマウントしなおす /
パニックを起こしてシステムを停止する)
デフォルトはファイルシステムのスーパーブロックに設定されている。
これは
.BR tune2fs (8)
を用いて変更することができる。
.TP
.BR grpid " または " bsdgroups " / " nogrpid " または " sysvgroups
新しく作成されたファイルが取得するグループ id を指定する。
.B grpid
が設定されていると、ファイルは作成されたディレクトリと同じグループ id を得る。
それ以外の場合ファイルはカレントプロセスの fsgid を得る (デフォルト)。
ただしディレクトリに SGID ビットが設定されている場合は、
親ディレクトリから gid を引き継ぎ、作成されたファイルがディレクトリならば、
自分自身にも SGID ビットを設定する。
.TP
.BR grpquota " / " noquota " / " quota " / " usrquota
これらのオプションは指定可能であるが、単に無視される。
.TP
.BR nobh
buffer_heads をファイルページキャッシュにアタッチしない (2.5.49 以降)。
.TP
.BR nouid32
32 ビットの UID と GID を無効にする。
これは 16 ビットで (UID や GID の) 値を格納したり、
値が返されることを想定している昔のカーネルとの互換性のためにある。
.TP
.BR oldalloc " または " orlov
新しい inode に対して、old アロケータまたは Orlov アロケータを使う。
Orlov がデフォルトである。
.TP
\fBresgid=\fP\fIn\fP と \fBresuid=\fP\fIn\fP
ext2 ファイルシステムは適当な大きさの予約領域を持っている
(デフォルトでは 5%。
.BR mke2fs (8)
および
.BR tune2fs (8)
を見よ)。
これらのオプションはこの予約ブロックを使えるユーザーを指定する。
すなわち指定された uid を持つユーザー、あるいは指定されたグループに
所属するユーザーである。
.TP
.BI sb= n
ブロック 1 の代わりにブロック
.I n
をスーパーブロックとして用いる。
このオプションはファイルシステムが損傷を受けた場合に便利である。
(以前はスーパーブロックのコピーが 8192 ブロックおきに作成されていた。
つまりブロック 1, 8193, 16385, ... である
(大きなファイルシステムでは、この数は数千にも及ぶことがあった)。
バージョン 1.08 以降の
.B mke2fs
では  \-s オプション (sparse superblock: 疎なスーパーブロック)
が使えるようになり、バージョン 1.15 以降ではこれがデフォルトになった。
注意してほしいのだが、つまりこれは、最近の
.B mke2fs
で作成された ext2 ファイルシステムは、
Linux 2.0.* では read/write での mount ができない、ということである。)
ここでのブロック数は 1k バイト単位を使う。
よって、4k バイトブロックでファイルシステム上の
論理ブロック 32768 を使いたい場合は、"sb=131072" とすること。
.TP
.BR user_xattr " / " nouser_xattr
"user." 拡張属性をサポートする (またはサポートしない)。
.\" CONFIG_EXT2_FS_XATTR が必要である。


.SH "ext3 のマウントオプション"
`ext3' ファイルシステムは ext2 ファイルシステムを作り替えたもので、
拡張としてジャーナリング機能を備えている。
ext2 と同じオプションに加え、以下の追加オプションをサポートしている。
.\" .TP
.\" .BR abort
.\" 致命的なエラーが起こったかのように
.\" 中止 (abort) モードでファイルシステムをマウントする。
.TP
.BR journal=update
ext3 ファイルシステムのジャーナルを現在の形式に更新する。
.TP
.BR journal=inum
ジャーナルが既にある場合、このオプションは無視される。
ジャーナルがない場合、ext3 ファイルシステムのジャーナルファイルを
表すための i ノードの数を指定する。
ext3 は、i ノード数が
.I inum
のファイルの古い内容を上書きして、新しいジャーナルを作成する。
.TP
.BR noload
マウント時に ext3 ファイルシステムのジャーナルを読み込まない。
.TP
.BR data=journal " / " data=ordered " / " data=writeback
ファイルデータのジャーナリングモードを指定する。
メタデータは常にジャーナルに書かれる。
ルートファイルシステムに対して
.B ordered
以外のモードを使用するには、
.I rootflags=data=journal
のようにして、モードをブートパラメータとしてカーネルに渡す。
.RS
.TP
.B journal
メインファイルシステムより前に、全てのデータがジャーナルに記録される。
.TP
.B ordered
これがデフォルトのモードである。
メタデータがジャーナルに記録される前に、
全てのデータがメインファイルシステムに直接書き出される。
.TP
.B writeback
データの順番は保存されない。
メタデータがジャーナルに記録された後で、
データがメインファイルシステムに書き込まれる。
これはスループットを高くするオプションらしい。
このオプションは内部ファイルシステムの完全性を保証する。
しかし、クラッシュした後のジャーナルによる回復で、
ファイルが昔のデータになることも許されている。
.RE
.TP
.BI commit= nrsec
全てのデータとメタデータを
.I nrsec
秒毎に同期させる。
デフォルト値は 5 秒である。
0 はデフォルトを意味する。

.SH "fat のマウントオプション"
(注意:
.I fat
は独立したファイルシステムではなく、
.IR msdos ,
.IR umsdos ,
.I vfat
各ファイルシステムの共通部分である。)
.TP
.BR blocksize=512 " / " blocksize=1024 " / " blocksize=2048
ブロックサイズを設定する (デフォルトは 512)。
.TP
\fBuid=\fP\fIvalue\fP と \fBgid=\fP\fIvalue\fP
すべてのファイルの所有者とグループを設定する
(デフォルトはカレントプロセスの uid と gid)。
.TP
.BI umask= value
umask を設定する (umask とは許可属性のビットマスクで、
立て\fBない\fRビットを立てたもの)。
デフォルトはカレントプロセスの umask。値は 8 進数で与える。
.TP
.BI dmask= value
ディレクトリにのみ適用される umask を設定する。
デフォルトはカレントプロセスの umask。
値は 8 進数で与える。
.\" 2.5.43 以降に存在する。
.TP
.BI fmask= value
通常のファイルにのみ適用される umask を設定する。
デフォルトはカレントプロセスの umask。
値は 8 進数で与える。
.\" 2.5.43 以降に存在する。
.TP
.BI check= value 
チェックの詳細さは 3 つのレベルから選択できる:
.RS
.TP
.B r[elaxed]
大文字と小文字を受け付け、それぞれ等価と見なす。
ロングネームの部分は切り捨てられる
(すなわち
.I verylongname.foobar
は
.I verylong.foo
となる)。
スペース文字を名前のそれぞれの部分 (本体と拡張子) に用いることができる。
.TP
.B n[ormal]
"relaxed" と似ているが、多くの特殊文字 (*, ?, <, スペースなど) は
用いることができない。デフォルト。
.TP
.B s[trict]
"normal" と似ているが、名前には長い部分を含むことができない。
また Linux では用いることができるが MS-DOS では受け入れられない特殊文字
(+, =, スペースなど) を用いることができない。
.RE
.TP
.BI codepage= value
FAT や VFAT ファイルシステムで、短いファイル名に変換するときに
用いる文字のコードページを設定する。
デフォルトではコードページ 437 が用いられる。
.TP
.BR conv=b[inary] " / " conv=t[ext] " / " conv=a[uto]
.I fat
ファイルシステムは CRLF<-->NL (MS-DOS のテキストフォーマットと UNIX の
テキストフォーマット) の変換をカーネルで行うことができる。
以下の変換モードを指定できる:
.RS
.TP
.B binary
変換は行わない。デフォルト。
.TP
.B text
すべてのファイルで CRLF<-->NL の変換を行う。
.TP
.B auto
拡張子を見てバイナリファイルかどうか判断し、バイナリではないファイルに
対して CRLF<-->NL の変換を行う。
拡張子のリストは
.I fs/fat/misc.c
の先頭に記述されている。
(2.0 の段階ではリストは以下の通り:
exe, com, bin, app, sys, drv, ovl, ovr, obj,
lib, dll, pif, arc, zip, lha, lzh, zoo, tar, z, arj, tz, taz, tzp, tpz,
gz, tgz, deb, gif, bmp, tif, gl, jpg, pcx, tfm, vf, gf, pk, pxl, dvi)
.PP
lseek を行うプログラムはカーネルレベルのテキスト変換と相性が悪い。
この変換によってデータを台無しにしてしまった人もいるので、注意すること！

バイナリモードでマウントしたファイルシステムに対して、変換ツール
(fromdos/todos) を用いることもできる。
.RE
.TP
.BI cvf_format= module
自動検知の結果ではなく、CVF (Compressed Volume File:
圧縮ボリュームファイル) モジュール
.RI cvf_ module
を使うよう、ドライバに強制する。
カーネルが kmod をサポートしていれば、
cvf_format=xxx オプションとしてもオンデマンドで CVF モジュールをロードできる。
.TP
.BI cvf_option= option
CVF モジュールに渡すオプション。
.TP
.B debug
.I debug
フラグを ON にする。
バージョン文字とファイルシステムのパラメータが表示される
(これらのデータはパラメータが一貫していないような場合にも表示される)。
.TP
.BR fat=12 " / " fat=16 " / " fat=32
12 ビット fat か 16 ビット fat か 32 ビット fat かを特定する。
これは FAT 形式の自動認識ルーチンによる設定を上書きする。
用いる際には注意すること。
.TP
.BI iocharset= value
8 ビットの文字を 16 ビットの Unicode 文字に変換する (あるいはその逆)
ときに用いる文字セット (character set)。デフォルトは iso8859-1 である。
長いファイル名は、ディスクには Unicode フォーマットで保存されている。
.TP
.B quiet
.I quiet
フラグを ON にする。
ファイルを chown や chmod しようとしたときにもエラーを返さず、単に失敗する。
用いる際には注意すること！
.TP
.B "sys_immutable, showexec, dots, nodots, dotsOK=[yes|no]"
FAT ファイルシステムに Unix または DOS のしきたりを
強制しようとするさまざまな試み。
おそらくは用いるべきでない。

.SH "hfs のマウントオプション"
.TP
.BI creator= cccc ", type=" cccc
新しいファイルを作成する際に、
MacOS の finder で表示されるクリエータとタイプを設定する。
デフォルト値は '????' である。
.TP
.BI uid= n ", gid=" n
すべてのファイルの所有者とグループを設定する
(デフォルトはカレントプロセスの uid と gid)。
.TP
.BI dir_umask= n ", file_umask=" n ", umask=" n
全てのディレクトリ・全ての通常ファイル・
全てのファイルとディレクトリに対して使用される umask を設定する。
デフォルトはカレントプロセスの umask である。
.TP
.BI session= n
マウントする CDROM のセッションを選択する。
デフォルトでは CDROM ドライバに決定を任せる。
下層にあるデバイスが CDROM でない場合、このオプションは失敗する。
.TP
.BI part= n
デバイスのパーティション番号 n を選択する。
CDROM に対してのみ意味を持つ。
デフォルトではパーティションテーブルを全く解釈しない。
.TP
.B quiet
不正なマウントオプションに対して苦情を出さない。

.SH "hpfs のマウントオプション"
.TP
\fBuid=\fP\fIvalue\fP と \fBgid=\fP\fIvalue\fP
すべてのファイルの所有者とグループを設定する
(デフォルトはカレントプロセスの uid と gid)。
.TP
.BI umask= value
umask を設定する (umask とは許可属性のビットマスクで、立って
.B いない
ビットを立てたもの)。
デフォルトはカレントプロセスの umask。
値は 8 進数で与える。
.TP
.BR case=lower " / " case=asis
すべてのファイルのファイル名を小文字に変換するか、
あるいはそのままにするかを指定する
(デフォルトは
.BR case=lower )
.TP
.BR conv=binary " / " conv=text " / " conv=auto
.B conv=text
が指定されると、ファイルを読み取るときに CR を適宜削除する
(特に NL の前にある場合)。
.B conv=auto
が指定されると、ファイルによって
.BR conv=binary " と " conv=text
を適宜選択する。
.B conv=binary
が指定されると、ファイルをそのまま読み込む。
デフォルトは
.BR conv=binary 。
.TP
.B nocheck
ファイルシステムの整合性チェックに失敗しても、マウントを中断しない。

.SH "iso9660 のマウントオプション"
ISO 9660 は CD-ROM で使われているファイルシステム構造を記述している。
(このファイルシステムタイプは DVD で使われていることもある。
.I udf
ファイルシステムも参照すること。)

.I iso9660
における通常のファイル名は 8.3 形式である
(すなわちファイル名の長さに関しては DOS と同じ制限)。
またすべての文字は大文字でなければならない。
また所有者や保護属性、リンク数、ブロックデバイスか
キャラクタデバイスかなどを表すフィールドも存在しない。

Rock Ridge は iso9660 の拡張で、上に示した unix 的機能をすべて与える。
基本的にはそれぞれのディレクトリレコードを拡張して、
付加的な情報を与えるものである。
Rock Ridge が用いられると、ファイルシステムは通常の 
UNIX ファイルシステムとは区別できなくなる
(もちろんリードオンリーであることを除いて、だが)。
.TP
.B norock
Rock Ridge 拡張が利用できる場合でもこれを無効にする。
.B map
も参照のこと。
.TP
.B nojoliet
Microsoft Joliet 拡張が利用できる場合でもこれを無効にする。
.B map
も参照のこと。
.TP
.BR check=r[elaxed] " / " check=s[trict]
.BR check=relaxed
が指定されると、ファイル名はまず小文字に変換されてから照合される。
これは
.B norock
および
.B map=normal
とともに用いた場合にだけ意味がある。
(デフォルトは
.BR check=strict 。)
.TP
\fBuid=\fP\fIvalue\fP と \fBgid=\fP\fIvalue\fP
ファイルシステム中のすべてのファイルのユーザー id、
グループ id を設定する。
Rock Ridge 拡張で指定されている情報を上書きできる。
デフォルトは
.BR uid=0,gid=0 。
.TP
.BR map=n[ormal] " / " map=o[ff] " / " map=a[corn]
Rock Ridge 拡張がされていないボリュームに対して normal が指定されると、
ファイル名の大文字が小文字の ASCII にマップされ、
最後の `;1' は削除され、`;' はすべて `.' に変換される。
.B map=off
が指定されると、ファイル名の変換は行わない。
.BR norock を見よ。
デフォルトは
.BR map=normal 。
.B map=acorn
は
.B map=normal
と似ているが、Acorn 拡張があればそれを適用する。
.TP
.BI mode= value
Rock Ridge 拡張がされていないボリュームに対して、
すべてのファイルのモードを指定された値にする。
デフォルトは、すべてのユーザーに対する読み込み属性。
Linux 2.1.37 以降では、10 進数を用いなくても良くなった
(0 で始まる数値は 8 進数とみなされる)。
.TP
.B unhide
hidden 属性のファイルや、それに関連付けられたファイルも表示する。
(通常のファイルがそれに関連付けられたファイルまたは hidden 属性のファイルと
同じファイル名である場合、通常のファイルはアクセスできなくなる。)
.TP
.B block=[512|1024|2048]
ブロックサイズを指定する。デフォルトは
.BR block=1024 。
.TP
.BR conv=a[uto] " / " conv=b[inary] " / " conv=m[text] " / " conv=t[ext]
デフォルトは
.BR conv=binary 。
Linux 1.3.54 以降では、このオプションは無効となった。
またそれ以前でも binary 以外の設定は非常に危険であり、
原因不明のデータ破壊を引き起こすことがある。
.TP
.B cruft
ファイルサイズの上位バイトがゴミを含んでいる場合、
このオプションを指定することで上位バイトを無視できる。
このオプションを指定すると、ファイルの大きさは 16MB に制限される。
.TP
.BI session= x
マルチセッション CD でのセッション数を選択する (2.3.4 以降)。
.TP
.BI sbsector= xxx
セッションをセクタ xxx から始める (2.3.4 以降)。
.LP
以下のオプションは vfat のものと同じで、
Microsoft Joliet 拡張でエンコードされた
ディスクを使うときにしか意味がない。
.TP
.BI iocharset= value
CD 上の 16 ビットの Unicode 文字を
8 ビットの文字に変換するときに用いる文字セット。
デフォルトは iso8859-1 である。
.TP
.B utf8
CD 上の 16 ビットの Unicode 文字を UTF-8 に変換する。

.SH "jfs のマウントオプション"
.TP
.BI iocharset= name
Unicode から ASCII に変換する際に使う文字セット。
デフォルトでは変換を行わない。
UTF8 変換を行う場合は、
.B iocharset=utf8
を使うこと。
これを行うには、カーネルの
.I ".config"
ファイルに CONFIG_NLS_UTF8 が設定されている必要がある。
.TP
.BI resize= value
ボリュームを
.I value
ブロックに変更する。
JFS ではボリュームを増やすことのみがサポートされており、
減らすことはサポートされていない。
ボリュームが読み書き可能でマウントされている場合、
このオプションは再マウントの間のみ有効である。
.B resize
キーワードに値を指定しないと、
ボリュームはパーティションの最大サイズまで増やされる。
.TP
.B nointegrity
ジャーナルに書き込まない。
このオプションの主な目的は、
バックアップメディアからボリュームを復旧する際に、
性能の向上を可能にすることである。
システムが異常終了した場合、ボリュームの完全性は保証されない。
.TP
.B integrity
デフォルト。
メタデータの変更をジャーナルに記録する。
以前に
.B nointegrity
オプションが指定されたボリュームを通常の状態に戻すために
再マウントするときは、このオプションを使用すること。
.TP
.BR errors=continue " / " errors=remount-ro " / " errors=panic
エラーが起こったときの振る舞いを指定する。
(エラーを無視し、ファイルシステムに問題があることを記録だけして続ける /
ファイルシステムをリードオンリーでマウントしなおす /
パニックを起こしてシステムを停止する)
.TP
.BR noquota " / " quota " / " usrquota " / " grpquota
これらのオプションは指定可能であるが、単に無視される。

.SH "minix のマウントオプション"
なし。

.SH "msdos のマウントオプション"
fat のマウントオプションを見よ。
.I msdos
ファイルシステムに不整合が発見されるとエラーが報告され、
ファイルシステムはリードオンリーとなる。
再マウントすることによって書き込み可能にすることができる。

.SH "ncpfs のマウントオプション"
.IR nfs " と同様に、" ncpfs
の実装では mount システムコールの際にバイナリの引き数
.RI ( "struct ncp_mount_data" )
を用いる。
この引き数は
.BR ncpmount (8)
によって渡すことができる。
現在のバージョンの
.B mount
(2.12) は ncpfs を扱うことができない。

.SH "nfs のマウントオプション"
通常のマウントオプションにはカーネルによって解釈される
逐語的な文字列を用いるが、
.I nfs
ファイルシステムでは
.I "struct nfs_mount_data"
と言う型のバイナリ引き数でオプションを渡す。
.B mount
プログラムは以下の `tag=value' 形式のオプションを解釈し、
その内容を上の構造体に代入する。
.BI rsize= n,
.BI wsize= n,
.BI timeo= n,
.BI retrans= n,
.BI acregmin= n,
.BI acregmax= n,
.BI acdirmin= n,
.BI acdirmax= n,
.BI actimeo= n,
.BI retry= n,
.BI port= n,
.BI mountport= n,
.BI mounthost= name,
.BI mountprog= n,
.BI mountvers= n,
.BI nfsprog= n,
.BI nfsvers= n,
.BI namlen= n.
オプション
.BI addr= n
は指定可能であるが単に無視される。
以下のオプションはブール値で指定する。
.B no
を前置することもでき、その場合は真偽が反転する。
.BR bg ,
.BR fg ,
.BR soft ,
.BR hard ,
.BR intr ,
.BR posix ,
.BR cto ,
.BR ac ,
.BR tcp ,
.BR udp ,
.BR lock .
これらの詳細に関しては
.BR nfs (5)
を見よ。

特に便利なオプションをいくつか以下に示す。
.TP
.B rsize=8192,wsize=8192
この指定をすると nfs コネクションは高速になる。
デフォルトのバッファサイズは 4096。
(NFSv2 は
.BR rsize " や " wsize
があまり大きいと動作しない。)
.TP
.B hard
サーバーがクラッシュしたとき、NFS マウントされたファイルシステム上の
ファイルにアクセスしているプログラムはハングする。
.B intr
を同時に指定していなければ、プロセスは interrupt / kill できない。
NFS サーバが再び接続可能になると、
プログラムはその時点から何もなかったように再開する。
こちらを指定しておくと良い場合が大部分であろう。
.TP
.B soft
このオプションを指定すると nfs サーバがしばらく反応しなくなったとき、
カーネルはタイムアウト動作をするようになる。
時間の長さは
.BR timeo=time
で指定できる。
このオプションは、プロセスがサーバからファイルを get するときに
nfs サーバがときどき反応しなくなったり、
リブートしたりする場合に指定すると有効かもしれない。
通常はトラブルの原因になる場合がほとんどだろう。
.TP
.B nolock
ロック動作を行わない。lockd を起動しない。

.SH ntfs のマウントオプション
.TP
.BI iocharset= name
ファイル名を返すときに用いる文字セット。
VFAT とは異なり、NTFS は変換できない文字を含む名前を抑制する。
.\"NAKANO 返さない?
このオプションは推奨されない。
.\" 2.5.11 以降
.TP
.BI nls= name
以前は
.I iocharset
という名前であったオプションの新しい名前。
.\" 2.5.11 以降
.TP
.BR utf8
ファイル名の変換に UTF-8 を用いる。
.TP
.B uni_xlate=[0|1|2]
0 (または `no' または `false') とすると、
不明な Unicode 文字に対してエスケープシーケンスを使わない。
1 (または `yes' または `true') または 2 とすると、
":" で始まる VFAT スタイルの 4 バイトのエスケープシーケンスを用いる。
2 の場合は、もとのファイル名をリトルエンディアンとみなしてエンコードする。
1 の場合は、もとのファイル名をバイト順が入れ換えられた
ビッグエンディアンとみなしてエンコードする。
.TP
.B posix=[0|1]
有効になっている (posix=1) と、ファイルシステムは大文字小文字を区別する。
この場合には 8.3 形式の別名がハードリンクとして実現される。
.TP
\fBuid=\fP\fIvalue\fP と \fBgid=\fP\fIvalue\fP, \fBumask=\fP\fIvalue\fP
ファイルシステムにあるファイルの許可属性を設定する。
umask の値は 8 進数で指定する。
デフォルトではファイルは root が所有し、
他のユーザーからは読み取り不可になっている。

.SH "proc のマウントオプション"
.TP
\fBuid=\fP\fIvalue\fP と \fBgid=\fP\fIvalue\fP
これらのオプションは指定可能であるが、私の知る限り効力はない。

.SH "ramfs のマウントオプション"
ramfs はメモリベースのファイルシステムである。
マウントすれば使用することができる。
アンマウントすると内容は消えてしまう。
Linux 2.3.99pre4 以降で存在する。
マウントオプションはない。

.SH "reiserfs のマウントオプション"
reiserfs はジャーナリングファイルシステムである。
reiserfs のマウントオプションは
.I http://www.namesys.com/mount-options.html
でもっと完全に説明されている。
.TP
.BR conv
バージョン 3.6 の reiserfs ソフトウェアに
バージョン 3.5 のファイルシステムをマウントさせる。
新しく作成されたオブジェクトには 3.6 の形式が使われる。
このようにしたファイルシステムは reiserfs 3.5 のツールとは互換性がなくなる。
.TP
.BR hash=rupasov " / " hash=tea " / " hash=r5 " / " hash=detect
reiserfs がディレクトリ内でファイルを見付けるのに、
どのハッシュ関数を使うかを選択する。
.RS
.TP
.B rupasov
Yury Yu. Rupasov が発明したハッシュ。
このハッシュは高速であり、
辞書順で近いファイル名を近いハッシュ値に対応づけることで
近接関係 (locality) が保存される。
高い確率でハッシュの衝突が起こるので、このオプションは使うべきではない。
.TP
.B tea
Jeremy Fitzhardinge が実装した Davis-Meyer 関数。
ハッシュ名にハッシュ置換ビットを使う。
ランダム性が高いので、使用される CPU コストに対してハッシュ衝突の確率が低い。
このオプションは、r5 ハッシュで EHASHCOLLISION エラーが起こる場合に使われる。
.TP
.B r5
rupasov ハッシュの修正版。
デフォルトではこれが使用され、非常に多くのディレクトリや
変わったファイル名のパターンがファイルシステムにない限り、
もっとも良い選択肢である。
.TP
.B detect
現在マウントされているファイルシステムを
.I mount
コマンドに調べさせ、どのハッシュ関数が使われているかを検出 (detect) させる。
さらに、この情報を reiserfs のスーパーブロックに書き込ませる。
古い形式のファイルシステムを初めてマウントするときにのみ役立つ。
.RE
.TP
.BR hashed_relocation
ブロックアロケータを有効にする。
ある状況下では性能の向上が見られるかもしれない。
.TP
.BR noborder
Yury Yu. Rupasov が発明した境界アロケータアルゴリズムを無効にする。
ある状況下では性能の向上が見られるかもしれない。
.TP
.BR nolog
ジャーナリングを無効にする。
reiserfs が持つクラッシュからの高速な回復は失われるが、
ある状況下では僅かな性能の向上が見られる。
このオプションが有効になっている場合でも、
reiserfs は、ジャーナリング領域への実際の書き込みを保存するといった
全てのジャーナリング操作を行っている。
.IR nolog
の実装は進行中の作業である。
.TP
.BR notail
デフォルトでは、reiserfs は小さなファイルや「ファイルの末尾」を
ツリーの中に直接格納する。
これが
.BR LILO (8)
のようなユーティリティを混乱させてしまう。
このオプションはファイルをツリーの中に格納させないようにする。
.TP
.BR replayonly
ジャーナルにあるトランザクションをやり直させる。
実際にはファイルシステムをマウントしない。
主に
.I reiserfsck
が使う。
.TP
.BI resize= number
reiserfs パーティションのオンラインでの領域拡張を許可する
再マウントオプション。
そのデバイスが
.I number
ブロック数であると reiserfs に仮定させる。
このオプションは、論理的なボリューム管理 (LVM) 下にある
デバイスに対して使うように設計されている。
.I ftp://ftp.namesys.com/pub/reiserfsprogs
から特別な
.I resizer
ユーティリティが取得できる。

.SH "romfs のマウントオプション"
なし。

.SH "smbfs のマウントオプション"
.IR nfs " と同様に、" smbfs
の実装は mount システムコールにバイナリの引き数
.RI ( "struct smb_mount_data" )
を用いる。
この引き数は
.BR smbmount (8)
によって渡すことができる。
現在のバージョンの
.B mount
(2.12) は smbfs を扱うことができない。

.SH "sysv のマウントオプション"
なし。

.SH "tmpfs のマウントオプション"
以下のパラメータには、Ki, Mi, Gi (バイナリのキロ・メガ・ギガ) を表す
サフィックス
.BR k ,
.BR m ,
.B g
をつけることができる。
また再マウントのときに変更することもできる。
.TP
.BI size= nbytes
ファイルシステムのデフォルトの最大サイズを上書きする。
サイズはバイトで指定され、ページ単位になるように切り捨てられる。
デフォルトはメモリサイズの半分である。
.TP
.B nr_blocks=
ブロック数を設定する。
.TP
.B nr_inodes=
inode 数を設定する。
.TP
.B mode=
ルートディレクトリの最初の許可属性を設定する。

.SH "udf のマウントオプション"
udf は Optical Storage Technology Association で定義されている
"Universal Disk Format" ファイルシステムであり、DVD-ROM で多く使用される。
.I iso9660
も参照すること。
.TP
.B gid=
デフォルトのグループを設定する。
.TP
.B umask=
デフォルトの umask を設定する。
値は 8 進数で指定する。
.TP
.B uid=
デフォルトのユーザーを設定する。
.TP
.B unhide
隠しファイルも見せる。
.TP
.B undelete
削除されたファイルもリストに見せる。
.TP
.B nostrict
厳密に適合させない。
.\" .TP
.\" .B utf8
.\" (未実装)。
.TP
.B iocharset
NLS 文字セットを設定する。
.TP
.B bs=
ブロックサイズを設定する (2048 以外では動作しない)。
.TP
.B novrs
ボリュームシーケンスの確認をスキップする。
.TP
.B session=
CDROM セッションのカウントを 0 から始める。
デフォルトは最終セッション。
.\"nakano: 直前のセッションだろうか?
.TP
.B anchor=
標準のアンカーの位置を上書きする。デフォルトは 256。
.TP
.B volume=
VolumeDesc の位置を上書きする (未実装)。
.TP
.B partition=
PartitionDesc の位置を上書きする (未実装)。
.TP
.B lastblock=
ファイルシステムの最終ブロックを設定する。
.TP
.B fileset=
fileset ブロックの位置を上書きする (未実装)。
.TP
.B rootdir=
ルートディレクトリの位置を上書きする (未実装)。

.SH "ufs のマウントオプション"
.TP
.BI ufstype= value
UFS は他の OS で広く用いられているファイルシステムである。
ただし実装が OS によって異なっているのが問題である。
ある種の実装における機能には文書化されていないものがあり、
ufs の形式を自動的に認識するのは難しい。
したがってユーザーは ufs の形式をマウントオプションで指定しなければならない。
指定できる値は以下の通り:
.RS
.TP
.B old
ufs の古い形式。これがデフォルトで、リードオンリー
(\-r オプションを忘れずに指定すること)。
.TP
.B 44bsd
BSD ライクなシステム (NetBSD, FreeBSD, OpenBSD)
で作られたファイルシステムに用いる。
.TP
.B sun
SunOS や Solaris on Sparc
で作られたファイルシステムに用いる。
.TP
.B sunx86
Solaris on x86
で作られたファイルシステムに用いる。
.TP
.B hp
HP-UX で作られたファイルシステムに用いる。リードオンリー。
.TP
.B nextstep
(NeXT ステーションの) NeXTStep
で作られたファイルシステムに用いる (現在はリードオンリー)。
.TP
.B nextstep-cd
NeXTStep CDROM (block_size == 2048) に用いる。リードオンリー。
.TP
.B openstep
OpenStep で作られたファイルシステムに用いる (現在はリードオンリー)。
同じファイルシステムが Mac OS X でも使われている。
.RE

.TP
.BI onerror= value
エラー時の振る舞いを設定する:
.RS
.TP
.B panic
エラーが起こったらカーネルパニックを起こす。
.TP
.B [lock|umount|repair]
現在のところはこれらのオプションはなにもしない。
エラーが起こるとコンソールメッセージが表示されるだけである。
.RE

.SH "umsdos のマウントオプション"
msdos のマウントオプションを見よ。
.B dotsOK
オプションは
.I umsdos
では当然無効である。

.SH "vfat のマウントオプション"
まず
.I fat
のマウントオプションが認識される。
.B dotsOK
オプションは
.I vfat
では当然無効である。
さらに以下のオプションが存在する。
.TP
.B uni_xlate
扱うことのできない Unicode 文字を特殊なエスケープシーケンスに変換する。
これは Unicode 文字を含むファイルをバックアップ、
レストアするのに用いることができる。
このオプションを指定しないと、変換できない場合には `?' が用いられる。
エスケープ文字には `:' が用いられる
(これは通常 vfat ファイルシステムでは用いることのできない文字であるため)。
用いられるエスケープシーケンスは u を Unicode 文字とすると以下の通り。
\&':', (u & 0x3f), ((u>>6) & 0x3f), (u>>12)。
.TP
.B posix
大文字か小文字かだけが異なる 2 つのファイル名を識別できるようにする。
.TP
.B nonumtail
.I name~num.ext
を用いる前に、まずシーケンス番号のない短縮名に変換しようとする。
.TP
.B utf8
UTF8 は、コンソールで用いられる Unicode の 8 ビットエンコードに対して
安全なファイルシステムである。
このオプションを指定すると UTF8 が有効になる。
\&'uni_xlate' が設定されていると UTF8 は無効になる。
.TP
.B shortname=[lower|win95|winnt|mixed]

8.3 形式の文字列に合うようなファイル名を
生成したり表示したりする動作を定義する。
ファイルにロングネームがある場合は、いつでも指定された動作で表示する。
以下の 4 つのモードがある:
.RS
.TP
.I lower
ショートネームを表示する際に小文字にする。
ショートネームに小文字が含まれる場合は、ロングネームで生成する。
.TP
.I win95
ショートネームを表示する際に大文字にする。
ショートネームに小文字が含まれる場合は、ロングネームで生成する。
.TP
.I winnt
ショート名をそのまま表示する。
ショートネームが全て小文字または全て大文字でない場合は、
ロングネームで生成する。
.TP
.I mixed
ショート名をそのまま表示する。
ショートネームに小文字が含まれる場合は、ロングネームで生成する。
.RE

デフォルトは "lower" である。

.SH "usbfs のマウントオプション"
.TP
\fBdevuid=\fP\fIuid\fP, \fBdevgid=\fP\fIgid\fP, \fBdevmode=\fP\fImode\fP
usbfs ファイルシステムにあるデバイスファイルの
所有者・グループ・モードを設定する
(デフォルトは uid=gid=0, mode=0644)。
このモードは 8 進数で指定する。
.TP
\fBbusuid=\fP\fIuid\fP, \fBbusgid=\fP\fIgid\fP, \fBbusmode=\fP\fImode\fP
usbfs ファイルシステムにあるバスディレクトリの
所有者・グループ・モードを設定する
(デフォルトは uid=gid=0, mode=0555)。
このモードは 8 進数で指定する。
.TP
\fBlistuid=\fP\fIuid\fP, \fBlistgid=\fP\fIgid\fP, \fBlistmode=\fP\fImode\fP
ファイル
.I devices
の所有者・グループ・モードを設定する
(デフォルトは uid=gid=0, mode=0444)。
このモードは 8 進数で指定する。

.SH "xenix のマウントオプション"
なし。

.SH "xfs のマウントオプション"
.TP
.BI biosize= size
バッファされる I/O サイズを設定する (デフォルトのサイズは 64K)。
.I size
は、希望する I/O サイズの (基数 2 の) 対数で表さなければならない。
このオプションに指定される有効な値は 14	〜 16 である
(つまり、16K, 32K, 64K バイトである)。
ページサイズが 4K バイトのマシンでは、
13 (8K バイト) も
.I size
として有効である。
バッファされる I/O サイズは、
.BR ioctl (2)
システムコールを使って、各ファイル単位で変更することもできる。
.TP
.B dmapi " / " xdsm
DMAPI (Data Management API, データ管理 API) イベント呼び出しを有効にする。
.TP
.BI logbufs= value
メモリ内ログバッファの数を指定する。
有効な数値は 2 〜 8 の範囲である。
デフォルトの値は、
ブロックサイズが 64K のファイルシステムには 8 バッファ、
ブロックサイズが 23K のファイルシステムには 4 バッファ、
ブロックサイズが 16K のファイルシステムには 3 バッファ、
他の設定では 2 バッファである。
バッファ数を増やすと、同じ実行負荷に対して性能が良くなる。
しかし、追加されるログバッファとそれに関連する制御構造体で使われる
メモリのコストがかかる。
.TP
.BI logbsize= value
各メモリ内ログバッファのサイズを設定する。
有効なサイズは 16384 (16K) と 32768 (32K) である。
デフォルトの値は、32MB 以上のメモリを持つマシンでは 32768 である。
それ以下のマシンでは 16384 がデフォルトである。
.TP
\fBlogdev=\fP\fIdevice\fP と \fBrtdev=\fP\fIdevice\fP
外部ログ (メタデータジャーナル) とリアルタイムデバイスの
両方または片方を使う。
XFS ファイルシステムには、データセクション・ログセクション・
リアルタイムセクションの 3 つの部分がある。
リアルタイムセクションは省略することができる。
ログセクションはデータセクションと分離することも、
データセクションに含めることもできる。
.BR xfs (5)
を参照すること。
.TP
.B noalign
データ割り当てをストライプユニット境界に配置しない。
.TP
.B noatime
ファイルを読み込んだときに、タイムスタンプを更新しない。
.TP
.B norecovery
ログを使った回復を実行せずにファイルシステムをマウントする。
ファイルシステムが正常にアンマウンントされなかった場合に、
.B norecovery
モードでマウントされると、不整合が起こりやすい。
そのため、いくつかのファイルやディレクトリにアクセスできないかもしれない。
.B norecovery
でマウントされるファイルシステムは、
リードオンリーでマウントしなければならない。
さもなければ、マウントに失敗するだろう。
.TP
.B nouuid
ファイルシステム uuid を無視する。
これは重複する uuid によるエラーを回避する。
.TP
.B osyncisdsync
O_SYNC フラグを設定してオープンしたファイルに、
O_DSYNC フラグが使われた場合と同じ動作で書き込む。
データの安全性を危険に晒すことなく、よりよい性能が得られる。
しかし、このオプションが有効になっている場合、
システムがクラッシュすると、
O_SYNC 書き込みによるタイムスタンプの更新が失われる。
.TP
.BR quota " / " usrquota " / " uqnoenforce
ユーザーディスク quota のアカウントを有効にして、
制限を (オプションとして) 守らせる。
.TP
.BR grpquota " / " gqnoenforce
グループディスク quota のアカウントを有効にして、
制限を (オプションとして) 守らせる。
.TP
\fBsunit=\fP\fIvalue\fP と \fBswidth=\fP\fIvalue\fP
RAID デバイスのストライプユニットと幅を指定する。
または、ストライプボリュームを指定する。
このオプションが指定されていない場合、
mkfs の時に RAID デバイスに対して
ストライプボリューム・幅・ユニットを指定して
ファイルシステムが作成されていれば、
mount システムコールは値をスーパーブロックから取り出す。
RAID デバイス上に直接作成されたファイルシステムでは、
スーパーブロックにある情報を上書きするために、
これらのオプションを使うことができる。
ただし、ファイルシステムが作成された後で、
下層にあるディスクレイアウトが変更される場合。
.B sunit
オプションが指定された場合、
.B swidth
が必要である。
.B swidth
は
.B sunit
の値の倍数でなければならない。

.SH "xiafs のマウントオプション"
なし。xiafs は特に欠点のないファイルシステムであるが、
あまり用いられておらず、メンテナンスされていない。
おそらく用いない方が良いだろう。
Linux のバージョン 2.1.21 以降では xiafs はカーネルソースから削除された。

.SH "loop デバイス"
残ったタイプとしてもう 1 つ、loop デバイスを用いたマウントがある。
例えば以下のコマンド

.nf
.B "  mount /tmp/fdimage /mnt -t msdos -o loop=/dev/loop3,blocksize=1024"
.fi

は loop デバイス
.I /dev/loop3
をファイル
.I /tmp/fdimage
に関連付け、そしてこのデバイスを
.I /mnt
にマウントする。

このタイプのマウントの際には 3 つのオプションが指定できる。
.BR loop ", " offset ", " encryption
である。
これらは実際には
.BR \%losetup (8)
のオプションである。
(これらのオプションはファイルシステムタイプに固有のオプションの他に
使用することができる。)

loop デバイスの名前をコマンドラインで省略した場合
(`\fB\-o loop\fP' のみを指定した場合) は
.B mount
はまだ使われていない loop デバイスを探してそれを利用する。
.I /etc/mtab
を
.I /proc/mounts
へのシンボリックリンクにするような馬鹿をしなければ、
.B mount
によって割り当てられたいずれの loop デバイスも
.B umount
によって解放できる。
`losetup -d' を用いれば loop デバイスを手動で解放することもできる。
詳細は
.BR losetup (8)
を見よ。

.SH 返り値
.B mount
は以下のコードを返す (ビットは OR できる):
.TP
.BR 0
成功した。
.TP
.BR 1
呼び出しやパーミッションが正しくない。
.TP
.BR 2
システムエラー (メモリ不足、fork できなかった、loop デバイスが足りない)。
.TP
.BR 4
.B mount
内部のバグ、または
.B mount
が
.B nfs
に対応していない。
.TP
.BR 8
ユーザーによる中断。
.TP
.BR 16
/etc/mtab の書き込み時またはロック時の問題がある。
.TP
.BR 32
マウントに失敗した。
.TP
.BR 64
(訳註: "mount -a" などで) 一部が成功した。

.SH ファイル
.TP 18n
.I /etc/fstab
ファイルシステムの一覧表
.TP
.I /etc/mtab
マウントされたファイルシステムの一覧表
.TP
.I /etc/mtab~
ロックファイル
.TP
.I /etc/mtab.tmp
テンポラリファイル
.TP
.I /etc/filesystems
試行するファイルシステムタイプの一覧

.SH 関連項目
.BR mount (2),
.BR umount (2),
.BR fstab (5),
.BR umount (8),
.BR swapon (8),
.BR nfs (5),
.BR xfs (5),
.BR e2label (8),
.BR xfs_admin (8),
.BR mountd (8),
.BR nfsd (8),
.BR mke2fs (8),
.BR tune2fs (8),
.BR losetup (8)
.SH バグ
ファイルシステムに整合性がないと、クラッシュを引き起こす場合がある。
.PP
Linux のファイルシステムのなかには
.BR "\-o sync" " と " "\-o dirsync"
をサポートしていないものがある。
(ext2, ext3 ファイルシステムは BSD 流の同期更新をサポートして\fIいる\fP。
.B sync
オプションとともにマウントすれば良い。)
.PP
.B "\-o remount"
でマウントパラメータが変更されないことがある (例えば
.I ext2fs
特有のパラメータは、
.B sb
を除いてすべて remount で変更可能であるが、
.I fatfs
では
.B gid
や
.B umask
を変更できない)。
.PP
ラベルまたは uuid によるマウントは、そのデバイスの名前が
.I /proc/partitions
にリストされている場合にのみ可能である。
特に、カーネルが devfs を付けてコンパイルされているにも関わらず、
devfs がマウントされていない場合にも失敗する。
.SH 履歴
.B mount
コマンドは Version 5 の AT&T UNIX には存在していた。
