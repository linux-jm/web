.\" Copyright 2009 by Karel Zak.  All Rights Reserved.
.\" This file may be copied under the terms of the GNU Public License.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\" Japanese Version Copyright (c) 2020 Chonan Yoichi,
.\"     all rights reserved.
.\" Translated (util-linux 2.35.2) Fri Aug 14 11:10:43 JST 2020
.\"     by Chonan Yoichi <cyoichi@maple.ocn.ne.jp>
.\"
.TH WIPEFS 8 "December 2014" util\-linux "System Administration"
.SH 名前
wipefs \- デバイスからシグナチャーを消去する
.SH 書式
\fBwipefs\fP [\fBoptions\fP] \fIdevice\fP...
.sp
\fBwipefs\fP [\fB\-\-backup\fP] \fB\-o\fP \fIoffset\fP \fIdevice\fP...
.sp
\fBwipefs\fP [\fB\-\-backup\fP] \fB\-a\fP \fIdevice\fP...
.SH 説明
\fBwipefs\fP を使えば、指定された \fIdevice\fP からファイルシステム、raid、
パーティションテーブルなどのシグナチャー (signatures, マジックストリング)
を消去して、シグナチャーを libblkid から見えなくすることができる。
\fBwipefs\fP は、デバイスからファイルシステムそのものを消去するわけではない。
また、シグナチャー以外のいかなるデータも消去しない。

\fBwipefs\fP は、オプションなしで使用すると
(訳注: たとえば、\fBwipefs /dev/sda*\fP と実行すると)、
見ることが可能なすべてのファイルシステムと、その基本的なシグナチャーのオフセットを一覧表示する。
デフォルトで何を出力するかは、バージョンによって違うことがよくあるので、スクリプトで使うときは、
デフォルトの出力の使用は、なるべく避けた方がよい。
いつでも一定の出力が必要な場合には、\fB\-\-output\fP \fIcolumn\-list\fP
を使用して、表示させたい項目が何と何かを、必ず明確に指定するべきである。

\fBwipefs\fP は、パーティションテーブルのシグナチャーの消去が済むと、BLKRRPART
ioctl を呼んで、変更についてカーネルに知らせる。ioctl
を呼ぶのは、最後のステップなので、
そのときには、指定されたすべてのデバイスの、指定されたすべてのシグナチャーは、
すでに消去されているわけである。

ファイルシステムやパーティションテーブルによっては、
複数のマジックストリングをデバイスに保存するものがある
(たとえば、FAT, ZFS, GPT など)。\fBwipefs\fP コマンドは (v2.31 以来)
マジックストリングを検出したすべてのオフセット位置を列挙する。

オプション \fB\-a\fP を使用すると、libblkid
から見えるすべてのマジックストリングが消去される。その際、\fBwipefs\fP は、変更 (消去)
を行うごとに、デバイスを再度スキャンして、マジックストリングがひとつも見つからなくなるまで、
それを繰り返す。

気を付けていただきたいが、\fBwipefs\fP は、デフォルトでは、
ディスク全体ではないデバイスにある、ネストしたパーティションテーブルを消去しない。
そうするためには、\fB\-\-force\fP オプションが必要である。

.SH オプション
.TP 
\fB\-a\fP,\fB \-\-all\fP
処理可能なシグナチャーをすべて消去する。消去するシグナチャーを何と何にするかは、\fB\-t\fP
オプションによって絞り込むことができる。
.RS
.IP "[\fB訳注\fP]" 8
オプションの名前が \fB\-\-all\fP のせいで紛らわしいが、\fB\-t\fP
オプションを使って、シグナチャーのタイプを限定している場合でも、消去操作には
\fB\-a\fP (\fB\-\-all\fP) が必要である。\fB\-t\fP
だけだと、動作が消去ではなく、表示になる。
.RE
.TP 
\fB\-b\fP,\fB \-\-backup\fP
ファイル $HOME/wipefs\-<devname>\-<offset>.bak
にシグナチャーのバックアップを作成する。詳しくは、「\fB用例\fP」をご覧いただきたい。
.TP 
\fB\-f\fP,\fB \-\-force\fP
ファイルシステムがマウントされている場合でも、消去を強行する。
このオプションは、ブロックデバイス上のパーティションテーブル・シグナチャーを消去するために必要である。
.RS
.IP "[\fB訳注\fP]" 8
2 番目の文は、訳者には意味不明である。
確かに、ファイルシステムがマウントされている場合に、
ファイルシステムのシグナチャーを消すには、\fB\-f\fP が必要だろう。
また、おそらく、ネストしたパーティションテーブルのシグナチャーを消去するためにも、
\fB\-f\fP が必要なのだろう。しかし、そういうことでないならば、ルート権限さえ持っていれば、
ブロックデバイス上のパーティションテーブルのシグナチャーを消すのに、
普通 \fB\-f\fP は要らないはずである。
それとも、あるデバイスのパーティションに自分が目下実行しているシステムが含まれているとき、
そのディスクのパーティションテーブルのシグナチャーを消去するということだろうか。
それは、やらない方がよい乱暴なことだと思うのだが。
.RE
.TP 
\fB\-h\fP,\fB \-\-help\fP
ヘルプテキストを表示して終了する。
.TP 
\fB\-J\fP,\fB \-\-json\fP
出力に JSON フォーマットを使用する。
.TP 
\fB\-i\fP,\fB \-\-noheadings\fP
ヘッダ行を表示しない。
.TP 
\fB\-O\fP,\fB \-\-output \fP\fIlist\fP
出力にどの項目 (column) を表示するかを指定する。
サポートされている全項目のリストを得るには、\fB\-\-help\fP を使用すればよい。
.TP 
\fB\-n\fP,\fB \-\-no\-act\fP
write() 呼び出し以外のすべてを行うようにする。
.TP 
\fB\-o\fP,\fB \-\-offset \fP\fIoffset\fP
デバイスから消去すべきシグナチャーの位置を (バイト単位で) 指定する。\fIoffset\fP
には接頭辞　"0x" を付けてもよく、その場合は、数値が
16 進数と見なされることになる。複数の \fB\-o\fP オプションを指定することもできる。
(訳注: \fB\-t\fP と違って、こちらは \fB\-a\fP オプションと一緒に使う必要はない。
と言うより、両方指定すると、エラーになる。)
.sp
引き数 \fIoffset\fP には、KiB (=1024), MiB (=1024*1024)
のような乗数を表す接尾辞を付けることができる。GiB, TiB, PiB, EiB,
ZiB, YiB も同様に使える。("iB" を続けるのは任意であり、たとえば、"K"
は "KiB" と同じ意味である)。あるいは、KB (=1000), MB (=1000*1000)
といった接尾辞を付けてもよい。GB, TB, PB, EB, ZB, YB も同様に使える。
.TP 
\fB\-p\fP,\fB \-\-parsable\fP
人間に見やすい (printable) フォーマットではなく、プログラムが解析しやすい
(parsable) フォーマットで出力する。文字列中の問題を起こしかねないすべての文字は、
対応する '\ex' を頭に点けた 16 進数にエンコードされる。
.TP 
\fB\-q\fP,\fB \-\-quiet\fP
シグナチャーの消去に成功した場合は、いかなるメッセージも表示しない。
.TP 
\fB\-t\fP,\fB \-\-types \fP\fIlist\fP
表示、または消去するシグナチャーを絞り込む。
複数のタイプを指定するには、コンマで区切ったリストにすればよい。
リスト、または個々のタイプの前に、'no' という接頭辞を付けることができ、
その場合は、作業の対象にすべきではないタイプを指定することになる。
もっと詳しく知りたければ、\fBmount\fP(8) のマニュアルをご覧になるとよい。
.RS
.IP "[\fB訳注\fP]" 8
\fIlist\fP に使えるのは、基本的には \fBmount\fP(8) の \fB\-t\fP
に指定するファイルシステムのタイプと同じものだが、\fBgpt\fP や \fBswap\fP
を指定することもできる。すなわち、\fBwipefs /dev/sda*\fP の出力の TYPE
の項目に表示されるものが使えるわけである。
.RE
.TP 
\fB\-V\fP,\fB \-\-version\fP
バージョン情報を表示して終了する。
.SH 用例
.TP 
\fBwipefs /dev/sda*\fP
sda と sda 上のすべてのパーティションの情報を表示する。
.TP 
\fBwipefs \-\-all \-\-backup /dev/sdb\fP
デバイス /dev/sdb からすべてのシグナチャーを消去し、
シグナチャーそれぞれに対して、~/wipefs\-sdb\-<offset>.bak
というバックアップファイルを作成する。
.TP 
\fBdd if=~/wipefs\-sdb\-0x00000438.bak of=/dev/sdb seek=$((0x00000438)) bs=1 conv=notrunc\fP
バックアップファイル  ~/wipefs\-sdb\-0x00000438.bak から
ext2 のシグナチャーを復元する。
.IP "[\fB訳注\fP]" 8
3 番目の例は、ちょっと変わったことをしていると言えるかもしれない。
ここでは、/dev/sdb にファイルシステムのシグナチャーを復元している。
とすると、/dev/sdb1 のようなパーティションにではなく、/dev/sdb というディスクに直接
ext2 のファイルシステムを作成していたことになりそうだ。/dev/sdb が、たとえば
USB メモリなら、そういうこともあるだろうけれど。
.SH 作者
Karel Zak <kzak@redhat.com>
.SH 環境変数
.IP LIBBLKID_DEBUG=all
libblkid デバッグ出力を有効にする。
.SH 関連項目
\fBblkid\fP(8), \fBfindfs\fP(8)
.SH 入手方法
この wipfs コマンドは、util\-linux パッケージの一部であり、次の URL
から入手できる。https://www.kernel.org/pub/linux/utils/util\-linux/
