.\" Copyright 2000 Andreas Dilger (adilger@turbolinux.com)
.\"
.\" This file may be copied under the terms of the GNU Public License.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 2004-2005 Yuichi SATO,
.\"   and 2020 Yoichi Chonan,
.\"         all rights reserved.
.\" Translated Sun Mar  7 00:00:12 JST 2004
.\"         by Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated & Modified Sat Apr 30 07:25:35 JST 2005 by Yuichi SATO
.\" Updated & Modified Tue Dec 20 05:57:54 JST 2005 by Yuichi SATO
.\" Updated & Modified (util-linux 2.35.2) Sat Oct  3 08:33:58 JST 2020
.\"         By Yoichi Chonan <cyoichi@maple.ocn.ne.jp>
.\"
.TH BLKID 8 "March 2013" util\-linux "System Administration"
.SH 名前
blkid \- ブロックデバイスの属性を検索/表示する
.SH 書式
.IP \fBblkid\fP
\fB\-\-label\fP\fI label\fP | \fB\-\-uuid\fP\fI uuid\fP

.IP \fBblkid\fP
[\fB\-\-no\-encoding\fP \fB\-\-garbage\-collect \-\-list\-one \-\-cache\-file\fP \fIfile\fP]
[\fB\-\-output\fP \fIformat\fP] [\fB\-\-match\-tag\fP \fItag\fP] [\fB\-\-match\-token\fP
\fINAME=value\fP] [\fIdevice\fP ...]

.IP \fBblkid\fP
\fB\-\-probe\fP [\fB\-\-offset\fP \fIoffset\fP] [\fB\-\-output\fP \fIformat\fP] [\fB\-\-size\fP
\fIsize\fP] [\fB\-\-match\-tag\fP \fItag\fP] [\fB\-\-match\-types\fP \fIlist\fP] [\fB\-\-usages\fP
\fIlist\fP] [\fB\-\-no\-part\-details\fP] \fIdevice\fP ...

.IP \fBblkid\fP
\fB\-\-info\fP [\fB\-\-output\fP \fIformat\fP] [\fB\-\-match\-tag\fP \fItag\fP] \fIdevice\fP ...

.SH 読者へのご注意
これは util-linux 版の \fBblkid\fP コマンドのマニュアルである。\fBblkid\fP
は、以前は e2fsprogs パッケージの一部だったが、現在では util-linux
パッケージにも属している。util-linux 版は e2fsprogs
版を元にしているとは言え、全く同じではない。
.SH 説明
\fBblkid\fP プログラムは、\fBlibblkid\fP(3)
ライブラリを利用するためのコマンドライン・インターフェースである。\fBblkid\fP
は、ブロックデバイスの中身がどんなタイプか (たとえば、ファイルシステムか、スワップか)
を判定することができる。また、ブロックデバイスの中身のメタデータ
(たとえば、LABEL や UUID といったフィールド) を調べて、どんな属性
(トークン、NAME=value の対) を持っているかを特定することもできる。
.PP
\fBブロックデバイスについて情報を取得するには、\fP\fBlsblk\fP(8)
\fBの使用をお勧めする。デバイス中のファイルシステム群の概要を知るには、lsblk \-\-fs
が便利である。すでにマウント済みのファイルシステムを調べるには、\fP\fBfindmnt\fP(8)
\fBを使うとよい。\fP
.PP
.RS
\fBlsblk\fP(8) の方が提供する情報も多いし、出力形式の制御もしやすく、
スクリプト中でも使いやすい。また、現時点での情報を得るのに、ルート権限を必要としない。
\fBblkid\fP の方は、情報をデバイスから直接読み込むので、ルート以外のユーザに対しては、
キャッシュした情報、すなわち、最新であることの保証のない情報を返すことになる。
\fBblkid\fP の主な用途は、システム管理で使用することと、libblkid
の機能をテストすることなのである。
.RE

.PP
\fIdevice\fP を指定すると、そのデバイスのトークンのみが表示される。
複数の \fIdevice\fP をコマンドラインで引き数に指定してもよい。
\fIdevice\fP を一つも指定しない場合は、\fI/proc/partitions\fP
に記載されている、すべてのパーティションやパーティション分割されていないデバイスのうち、
認識されたものが表示される。
.PP
\fBblkid\fP には、主な仕事が二つある。特定の NAME=value
の対を属性に持つデバイスを捜し出すことと、指定された一つ以上のデバイスについて
NAME=valeu の対を表示することである。

セキュリティ上の理由から、\fBblkid\fP は、検出結果に相反するものがあった場合には
(複数の相矛盾するファイルシステムが検出された場合などは)、
警告も出さずに、そうしたデバイスをすべて無視する。そうした場合に
low\-level 精査モード (\fB\-p\fP)
を使用すると、より多くの情報が得られるし、リターンコードも特別なものになる。
デバイスの詳しい全体像をつかんだり、デバイスから古くなったもの
(古いマジックストリング) を削除したりするには、\fBwipefs\fP(8) を使用するとよい。

.SH オプション
\fIsize\fP や \fIoffset\fP という引き数の後ろには、KiB (=1024), MiB (=1024*1024)
のような乗数を表す接尾辞を続けることができる。GiB, TiB, PiB, EiB, ZiB, YiB
も同様に使える ("iB" を続けるのは任意であり、たとえば、"K" は "KiB"
と同じ意味である)。あるいは、KB (=1000), MB (=1000*1000)
といった接尾辞を付けてもよい。GB, TB, PB, EB, ZB, YB も同様に使える。
.TP 
\fB\-c\fP, \fB\-\-cache\-file\fP \fIcachefile\fP
デフォルトのキャシュファイルではなく、\fIcachefile\fP から情報を読み込む
(詳細については、「設定ファイル」セクションを参照していただきたい)。
キャッシュを白紙の状態にして、コマンドを実行したいのなら
(すなわち、以前スキャンしたことがあっても、
現時点で使用できるとはかぎらないデバイスについて、報告しないようにするには)、\fIcashefile\fP
に \fI/dev/null\fP を指定するとよい。
.TP 
\fB\-d\fP, \fB\-\-no\-encoding\fP
非表示文字をエンコードしない。デフォルトでは、非表示文字は ^ や
M\- を使う表記法でエンコードされるのである。なお、\fB\-\-output udev\fP
の出力フォーマットでは、別のエンコード方式を使っており、こちらは無効にできない。
.TP 
\fB\-D\fP, \fB\-\-no\-part\-details\fP
low\-level 精査モードのとき、パーティションテーブルから取得した情報
(PART_ENTRY_* というタグ) を表示しない。
.TP 
\fB\-g\fP, \fB\-\-garbage\-collect\fP
もはや存在していないデバイスを除去するために、blkid
キャッシュに対してガーベッジコレクション操作を行う。
.TP 
\fB\-h\fP, \fB\-\-help\fP
使用法を表示して終了する。
.TP 
\fB\-i\fP, \fB\-\-info\fP
I/O リミット (I/O トポロジーとも言う) について情報を表示する。'export'
出力フォーマットが自動的に有効になる。このオプションは、\fB\-\-probe\fP
オプションと合わせて使うことができる。
.RS
.IP "[\fB訳注\fP]" 8
\&'export' フォーマットというのは、要するに NAME=value の対を
1 行に 1 個ずつ表示することである。以前の \fBblkid\fP では、\fB\-i\fP
オプションで確かに 1 行 1 トークンになったのだが、最近の \fBblkid \-\-info\fP
では、1 行 1 トークンにならないようだ。すなわち、\fB\-\-info\fP
(\fB\-i\fP) で 'export' フォーマットは自動的に有効にならないらしい。
.RE
.TP 
\fB\-k\fP, \fB\-\-list\-filesystems\fP
フィルシステムと RAID について、既知のタイプをすべて列挙して、終了する。
.TP 
\fB\-l\fP, \fB\-\-list\-one\fP
\fB\-\-match\-token\fP
オプションで指定した検索パラメータに一致するデバイスを、一つだけ見つけ出す。
検索パラメータに一致するデバイスがいくつもあった場合は、最も優先順位が高いデバイスを報告し、
同じ優先順位の中では、最初に見つかったデバイスを報告する (ただし、検索に udev
を使用する場合もあり、それについては、次のパラグラフをお読みいただきたい)。
デバイスのタイプを優先順位の高い方から並べると、デバイスマッパー, EVMS, LVM, MD
の順になり、最後に普通のブロックデバイスが来る。このオプションが指定されていない場合、
\fBblkid\fP は、検索パラメータに一致したデバイスをすべて表示することになる。
.sp
このオプションを \fB\-\-match\-token\fP で LABEL や UUID
のトークンを指定した場合に使うと、強制的に \fBblkid\fP に
udev を使用させることになる。そのように、検索に udev を使用させるのは、
システムが複数のデバイスに対して同名のタグを使用している場合に、
出力を他のユーティリティと (たとえば、mount などと)
矛盾しないようにするためである。
.RS
.IP "[\fB訳注\fP]" 8
1 番目のパラグラフの「検索に udev
を使用する場合 ...」という訳は、訳者による補足訳である。原文は、"but see
below note about udev" としか言っていない。訳者としては、\fB\-\-label\fP
の説明や、「\fB設定ファイル\fP」セクションの \fIEVALUATE=<methods>\fP
の説明と読み合わせて、これは「検索に udev を使用する、すなわち /dev/disk/by\-*
以下のシムリンクを使用する場合については、以下の追加説明を見よ」と言っているのだと考える。
シムリンク (のみ) を使用する場合は、
検索条件に一致するデバイスは、当然ながらリンク先一つしかなく、udev
のシムリンクを使用するアプリケーション間で同一なわけである。
ただし、こうした解釈は、訳者の推測に過ぎない。間違っているかもしれない。
.sp
なお、当方のバージョン 2.35.2 では、\fB\-\-match\-token\fP に LABEL=
を指定した場合、udev を使用させる、すなわち、同名の LABEL
を持つデバイスが複数あったときに、/dev/disk/by-label
中のシムリンクの参照先を報告させるには、\fB\-l\fP だけでなく
\fB\-o device\fP も必要だった。お手元でも確かめていただきたい。
.RE
.TP 
\fB\-L\fP, \fB\-\-label\fP \fIlabel\fP
ファイルシステムのラベル (訳注: ボリューム名とも言う) に \fIlabel\fP
を使用しているデバイスを見つけ出す。これは、\fB\-\-list\-one \-\-output device
\-\-match\-token LABEL=\fP\fIlabel\fP と同じことである。
ここで使われる検索メソッドでは、/dev/disk/by\-label にある udev
のシムリンクを信用して使用することができる (もっとも、/etc/blkid.conf
の設定次第だが)。一般にこうしたシムリンクを不用意に使うのは避けた方がよい。
現状を確認せずにこうしたシムリンクを使用するのは、信用できないからである。
なお、この \fB\-\-label\fP オプションは、システムが udev
を使っているかいないかにかかわらず、問題なく動作する。
.RS
.IP "[\fB訳注\fP]" 8
「/dev/disk/by-label にある udev
のシムリンクを信用して使用できるのは、/etc/blkid.conf
の設定次第だ」というのは、SEND_UEVENT=<yes|not> の値次第ということだ。それが
yes ならば、必要に応じて現状が反映されるので、udev
のシムリンクが信用できることになる。「\fB設定ファイル\fP」セクションを参照していただきたい。
.RE
.PP
.RS
困ったことに e2fsprogs 所収のオリジナルの \fBblkid\fP(8) は、\fB\-L\fP
オプションを \fB\-o list\fP の同義語として使っている。
スクリプトの使い回しが利くようにしたいのなら、スクリプト中では \fB\-L\fP オプションよりも
\fB\-l \-o device \-t LABEL=\fP\fIlabel\fP や \fB\-o list\fP を使った方がよい。
.RE
.TP 
\fB\-n\fP, \fB\-\-match\-types\fP \fIlist\fP
精査機能 (訳注: \fB\-\-probe\fP を参照) の使用を、コンマ区切りのリスト \fIlist\fP
で指定したスーパーブロックのタイプ (名前) に限定する。リストの項目の前に "no"
を付ければ、無視すべきタイプを指定することになる。例を挙げよう。
.sp
  blkid \-\-probe \-\-match\-types vfat,ext3,ext4 /dev/sda1
.sp
上のコマンドは、vfat, ext3, ext4 のファイルシステムに対して low\-level
精査を行う。
.RS
.IP "[\fB訳注\fP]" 8
この場合なら、スーパーブロックの情報をいくつか追加表示する。
なお、このオプションの働きは、あくまでも low\-level
精査の対象に指定すること (あるいは、そこから外すこと) であって、
他のタイプだからと言って、情報の取得・表示を全くしなくなるわけではない。
その点は、\fB\-\-usages\fP も同様である。
.RE
.PP
.RS
  blkid \-\-probe \-\-match\-types nominix /dev/sda1
.sp
こちらは、minix
ファイルシステム以外の、サポートされているすべてのファイルシステムに対して
low\-level 精査を行う。なお、この \fB\-\-match\-types\fP
オプションが役に立つのは、\fB\-\-probe\fP と一緒に使ったときだけである。
.RE
.TP 
\fB\-o\fP, \fB\-\-output\fP \fIformat\fP
指定した出力フォーマットを使用する。なお、変数やデバイスの出力順は固定していない。
\fB\-s\fP オプションも参照していただきたい。パラメータ \fIformat\fP
には、次のものが使用できる。
.RS
.TP 
\fBfull\fP
すべてのタグを表示する (デフォルト)
.TP 
\fBvalue\fP
タグの値のみを表示する
.TP 
\fBlist\fP
デバイスの情報をユーザに読みやすいフォーマットで表示する。この出力フォーマットは
low\-level 精査 (\fB\-\-probe\fP や \fB\-\-info\fP) では使用できない。

この出力フォーマットは、\fB非推奨\fPである。\fBlsblk\fP コマンドの使用をお勧めする。
.TP 
\fBdevice\fP
デバイス名しか表示しない。この出力フォーマットは、\fB\-\-label\fP や \fB\-\-uuid\fP
では、常に有効になる。
.TP 
\fBudev\fP
key=value の対を udev 環境にインポートしやすいように表示する
(訳注: key=value を 1 行に 1 個ずつ出力する)。
キー (key) には、ID_FS か ID_PART という接頭辞が付く。値 (value)
は、udev 環境で問題を起こさないように修正されることがある。
値に使用できるのは、プレーン ASCII と 16 進数エスケープ表記、それに有効な
UTF\-8 であり、それ以外はすべて (ホワイトスペースも含めて) '_' で置き換えられる。
なお、_ENC という接尾辞が付いたキーでは、問題を起こしかねない文字に対して
16 進数エスケープ表記を使用している。

udev 出力フォーマットでは、複数の矛盾するスーパーブロックが検出された場合には、
ID_FS_AMBIVALENT というタグが返される。また、ID_PART_ENTRY_*
タグが、空のパーティションも含めて、すべてのパーティションに対して常に返される
(訳注: もちろん、\fB\-\-probe\fP を指定した場合のことである)。

この出力フォーマットは、\fB非推奨\fPである。
.TP 
\fBexport\fP
key=value の対を環境にインポートしやすいように表示する
(訳注: key=value を 1 行に 1 個ずつ出力する)。
この出力フォーマットは、I/O リミットの情報が求められた場合には
(すなわち、\fB\-\-info\fP オプションが指定された場合は)、自動的に有効になる
(訳注: 手元のバージョン 2.35 の \fBblkid\fP では、自動的に有効にならないようだ)。

非表示文字は、^ や M\- を使う表記法でエンコードされ、
問題を起こしかねない文字は、すべてエスケープされる。
.RE
.TP 
\fB\-O\fP, \fB\-\-offset\fP \fIoffset\fP
指定された \fIoffset\fP 位置を調べる (\fB\-\-probe\fP と一緒に使ったときのみ効果がある)。
このオプションは、\fB\-\-info\fP と一緒に使うこともできる。
.TP 
\fB\-p\fP, \fB\-\-probe\fP
low\-level なスーパーブロック精査モードに切り換える (キャッシュはバイパスする)。

なお、low\-level 精査では、(訳注:
ファイルシステムに関するスーパーブロックの情報だけでなく)
パーティションテーブルのタイプ (PTTYPE タグ) やパーティションに関する情報
(PART_ENTRY_* タグ) もやはり報告される。low\-level 精査によって生成されるタグ名は、
libblkid によって内的に使用される名前に基づいているので、\fB\-\-probe\fP
を付けずに実行したときのタグ名と異なっていることもある
(たとえば、PART_ENTRY_UUID= と PARTUUID=)。
\fB\-\-no\-part\-details\fP の項もご覧いただきたい。
.RS
.IP "[\fB訳注\fP]" 8
この説明には、紛らわしいことが二つある。一つは、PTTYPE
タグが表示されるのは、\fIdevice\fP にパーティションではなく、
/dev/sda のようなディスクを指定した場合であるということ
(\fB\-\-probe\fP オプションを指定する、しないは関係ない)。
/dev/sda1 のようなパーティションを指定した場合は、同じ情報が
PART_ENTRY_SCHEME タグに表示される。
.sp
もう一つは、\fB\-\-probe\fP
を指定しないでも、スーパーブロック中の情報のいくつかは表示されるということ。
\fB\-\-probe\fP を指定すると、ファイルシステムに関して表示される情報が増えるのである。
.RE
.TP 
\fB\-s\fP, \fB\-\-match\-tag\fP \fItag\fP
(指定された) 各デバイスについて、\fItag\fP に一致するタグのみを表示する。\fB\-\-match\-tag\fP
オプションは、複数回指定することもできる。タグの指定を全くしなかった場合は
(訳注: すなわち、このオプションを全く使用しなかった場合は)、(指定された)
すべてのデバイスについて、すべてのトークンが表示される。
いかなるトークンも表示せず、ただキャッシュを更新するだけなら、\fB\-\-match\-tag none\fP
を、他のオプションを付けずに、使用すればよい。
.TP 
\fB\-S\fP, \fB\-\-size\fP \fIsize\fP
デバイス/ファイルのサイズを変更する (\fB\-\-probe\fP
と一緒に使ったときのみ役に立つ)。
.TP 
\fB\-t\fP, \fB\-\-match\-token\fP \fINAME=value\fP
名前が \fINAME\fP で、値が \fIvalue\fP のトークンを持つブロックデバイスを捜して、
見つかったすべてのデバイスを表示する。\fINAME\fP によく使われるものには、\fBTYPE\fP,
\fBLABEL\fP, \fBUUID\fP などがある。
コマンドラインでデバイスを一つも指定しないと、すべてのブロックデバイスが検索される。
デバイスを指定した場合は、そのデバイスのみが検索される。
.TP 
\fB\-u\fP, \fB\-\-usages\fP \fIlist\fP
精査機能 (訳注: \fB\-\-probe\fP 参照) の使用を、コンマ区切りのリスト
\fIlist\fP で指定した用途 ("USAGE")
のタイプに限定する。サポートされている用途のタイプには、filesystem,
raid, crypto, other がある。リストの項目の前に "no"
を付ければ、無視すべき用途タイプを指定することになる。例を挙げよう。
.sp
  blkid \-\-probe \-\-usages filesystem,other /dev/sda1
.sp
上のコマンドは、用途のタイプが filesystem や other (たとえば、swap)
のすべてに対して low\-level 精査を行う。
.sp
  blkid \-\-probe \-\-usages noraid /dev/sda1
.sp
こちらは、RAID 以外の、サポートされている用途タイプのすべてに対して low\-level
精査を行う。なお、この \fB\-\-usages\fP オプションが役に立つのは、\fB\-\-probe\fP
と一緒に使ったときだけである。
.TP 
\fB\-U\fP, \fB\-\-uuid\fP \fIuuid\fP
ファイルシステム UUID に \fIuuid\fP を使用しているデバイスを見つけ出す。
詳しいことは、\fB\-\-label\fP オプションを参照していただきたい。
.TP 
\fB\-V\fP, \fB\-\-version\fP
バージョン番号を表示して終了する。
.SH リターンコード
指定されたデバイス、または (\fB\-\-match\-token\fP オプションで)
指定されたトークンによって作業の対象になったデバイスが見つかり、
しかもそのデバイスについて何らかの情報が収集できたときは、終了コード 0 を返す。
なお、オプション \fB\-\-match\-tag\fP
は、出力するタグの限定はするけれど、リターンコードには影響を及ぼさない。

指定されたトークンが見つからなかった場合、指定されたデバイスが一つも見つからなかった場合、
それにデバイスの識別名やデバイスの内容について情報が全く収集できなかった場合は、
終了コード 2 を返す。

使用法の誤りなどに対しては、終了コード 4 を返す。

low\-level 精査モード (\fB\-p\fP)
で矛盾した検査結果が出たときは、終了コード 8 を返す。
.SH 設定ファイル
標準の設定ファイルは \fI/etc/blkid.conf\fP だが、この位置は、環境変数
BLKID_CONF によって変更することができる。以下に挙げる設定項目は、libblkid
ライブラリを制御している。
.TP 
\fISEND_UEVENT=<yes|not>\fP
\fI/dev/disk/by\-{label,uuid,partuuid,partlabel}/\fP
にあるシムリンクが、デバイスの LABEL, UUID, PARTUUID, PARTLABEL
と一致していない場合に、uevent を送出する。デフォルトは "yes" である。
.TP 
\fICACHE_FILE=<path>\fP
キャッシュファイルの位置を標準から変更する。この設定は、環境変数
BLKID_FILE によって上書きすることができる。デフォルトは、普通
\fI/run/blkid/blkid.tab\fP だが、/run ディレクトのないシステムでは
\fI/etc/blkid.tab\fP になる。
.TP 
\fIEVALUATE=<methods>\fP
LABEL や UUID からデバイスを特定するためのメソッド (LABEL and UUID
evaluation method) を指定する。現在のところ、libblkid
ライブラリは、"udev" と "scan" という二つのメソッドをサポートしている。
一つ以上のメソッドを、コンマで区切ったリスト形式で指定してもよい。
デフォルトは、"udev,scan" である。"udev" メソッドが、\fI/dev/disk/by\-*\fP
にある udev のシムリンクを使用するのに対して、"scan"
メソッドは、ファイル \fI/proc/partitions\fP
を読んで、記載されているすべてのブロックデバイスをスキャンする。
.SH 作者
\fBblkid\fP は libblkid のために Andreas Dilger によって書かれ、Theodore Ts'o
と Karel Zak によって改良された。
.SH 環境変数
.IP "LIBBLKID_DEBUG=all と設定すると、デバッグ出力が有効になる。"
.SH 関連項目
\fBlibblkid\fP(3), \fBfindfs\fP(8), \fBlsblk\fP(8), \fBwipefs\fP(8)
.SH 入手方法
この blkid コマンドは、util\-linux パッケージの一部であり、
https://www.kernel.org/pub/linux/utils/util\-linux/ から入手できる。
