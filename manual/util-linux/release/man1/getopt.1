.\" getopt.c - Enhanced implementation of BSD getopt(1)
.\" Copyright (c) 1997-2014 Frodo Looijaard <frodo@frodo.looijaard.name>
.\"
.\" This program is free software; you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation; either version 2 of the License, or
.\" (at your option) any later version.
.\"
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License along
.\" with this program; if not, write to the Free Software Foundation, Inc.,
.\" 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" The original version of this translation was contributed 
.\" to Linux JM project from NetBSD jman proj.
.\"
.\" The copyright for the modified parts of the translation blongs to us
.\" with Linux JM project.
.\"
.\" Japanese Version Copyright for the modified parts (c) 2001-2020 Yuichi SATO
.\"   and 2020 Yoichi Chonan,
.\"         all rights reserved.
.\" Translated Tue 11 Jan 1994
.\"         by NetBSD jman proj. <jman@spa.is.uec.ac.jp>
.\" Updated Sun Jan 14 04:46:37 JST 2001
.\"         by Yuichi SATO <sato@complex.eng.hokudai.ac.jp>
.\" Updated & Modified Sun Mar  2 15:11:49 JST 2003
.\"         by Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated & Modified (util-linux 2.34) Fri Sep 25 10:16:02 JST 2020
.\"         by Yuichi SATO <ysato444@ybb.ne.jp>
.\"         and Yoichi Chonan <cyoichi@maple.ocn.ne.jp>
.\" Updated & Modified (util-linux 2.36) Sun Mar  7 09:36:18 JST 2021
.\"         by Yoichi Chonan <cyoichi@maple.ocn.ne.jp>
.\"
.TH GETOPT 1 "December 2014" util\-linux "User Commands"
.SH 名前
getopt \- コマンドのオプションを解析する (強化版)
.SH 書式
\fBgetopt\fP \fIoptstring parameters\fP
.br
\fBgetopt\fP [options] [\fB\-\-\fP] \fIoptstring parameters\fP
.br
\fBgetopt\fP [options] \fB\-o\fP|\fB\-\-options\fP \fIoptstring\fP [options] [\fB\-\-\fP]
\fIparameters\fP
.SH 説明
\fBgetopt\fP は、コマンドラインのオプションを分解 (\fI構文解析\fP)
して、シェル上の手続きによる解析作業を容易にしたり、
オプションが有効かどうかをチェックしたりするために使用する。\fBgetopt\fP
は、そうしたことを行うのに
.SM GNU
\fBgetopt\fP(3)
のルーティンを使っている。
.PP
\fBgetopt\fP を呼び出すときに使用するパラメータは、2 つの部分に分けることができる。
すなわち、\fBgetopt\fP が解析を行うときの動作を変更するオプション部分
(上記「\fB書式\fP」の \fIoptions\fP と \fIopstring\fP) と、解析の対象になるパラメータ部分
(上記「\fB書式\fP」の \fIparameters\fP) の 2 つである。2 番目の部分は、
オプションではない最初のパラメータで、オプションの引き数でもないものから始まるか、
あるいは、'\fB\-\-\fP' が最初に現れた位置の直後から始まる。なお、1 番目の部分に
\&'\fB\-o\fP' や '\fB\-\-options\fP' オプションが存在しない場合は
(訳注: そして、他のオプションや \fB\-\-\fP
が存在するならば、それは「\fB書式\fP」セクションの第 2 の書式に当たる)、2
番目の部分の最初のパラメータが、解析の対象となるショートオプションを
1 つにまとめたショートオプションズ文字列 (すなわち \fIoptsting\fP) として使用される。
.IP "[\fB訳注\fP]" 8
「\fB書式\fP」セクションの第 3
の書式で、解析の対象になるパラメータをオプションから始めるときは、その前に
\&'\fB\-\-\fP' を置く必要がある。そうしないと、\fBgetopt\fP
自体のオプションと誤解されることになる。
解析の対象をファイル名などから始めるときは、'\fB\-\-\fP' を置かなくてもよい。
.PP
環境変数 \fBGETOPT_COMPATIBLE\fP
が設定されている場合や、最初のパラメータがオプションではない場合 (すなわち、'\fB\-\fP'
で始まっていない場合で、これは「\fB書式\fP」セクションの第 1 の書式である)、この
\fBgetopt\fP は他のバージョンの \fBgetopt\fP(1) と互換性のある出力を生成する。
なお、その場合でもやはりパラメータの並べ替えは行うし、指定が任意の引き数の認識もする
(詳細については、「\fB互換性\fP」セクションを参照していただきたい)。
.PP
従来の \fBgetopt\fP(1)
の実装では、引き数などのオプションではないパラメータの中に、ホワイトスペース
(訳注: 空白、タブ、改行など) や (シェル固有の)
特殊文字などがあると、それに対処することができなかった。
この問題を解決するために、この実装では、クォートした出力を生成できるようになっているが、
そうした出力は、シェルによってもう一度解釈される必要がある
(たいていは、そのために \fBeval\fP コマンドを使用する。[訳注: もっと詳しく言うと、
\fBPARAM=$(getopt \-o 'a:b::c' \-\- "$@"); \fP
\fBeval set \-\- "$PARAM"\fP といった方法を用いて、位置パラメータを再構成する])。
この出力形式を使えば、ホワイトスペースや特殊文字を保護することにはなるが、それには
\fBgetopt\fP を他のバージョンともはや互換性のない形で呼び出さなければならない
(すなわち、「\fB書式\fP」セクションの第 2 や 第 3 の書式だ)。御使用のシステムに
\fBgetopt\fP(1) のこの強化版がインストールされているかどうかを知るには、
専用のテストオプション (\fB\-T\fP) を使用すればよい。
.SH オプション
.TP 
\fB\-a\fP,\fB \-\-alternative\fP
ロングオプションを 1 個の '\fB\-\fP' で始めることができるようにする。
.TP 
\fB\-h\fP,\fB \-\-help\fP
ヘルプを表示して、終了する。それ以上何も出力しない。
.TP 
\fB\-l\fP,\fB \-\-longoptions \fP\fIlongopts\fP
認識すべきロング (複数の文字からなる) オプション群を指定する。
2 個以上のオプション名を、コンマで区切って一度に指定することができる。
このオプションは複数回指定することもでき、その場合も \fIlongopts\fP
が追加されていく。\fIlongouts\fP
中の各ロングオプション名の後ろには、コロンを続けることができる。コロンが 1 個のときは、
引き数が必須だということであり、2 個のときは、
引き数は任意、すなわち、あってもなくてもよいということである。
.RS
.IP "[\fB訳注\fP]" 8
ロングオプションのみを使い、ショートオプションを全く使わない場合は、\fB\-o\fP
オプションに空文字列を渡すことで (\fB\-o ''\fP)
それを明示的に宣言しなければならない。「\fBバグ\fP」セクションを参照。
.RE
.TP 
\fB\-n\fP,\fB \-\-name \fP\fIprogname\fP
\fBgetopt\fP(3) ルーティンが、エラーを通知する際に使用するプログラム名を指定する。
\fBgetopt\fP(1) 自体に関するエラーは (訳注: たとえば、
\fBgetopt\fP コマンドのオプションが間違っている場合などは)、やはり getopt
コマンドがエラーの発生元として報告されることに注意していただきたい。
.TP 
\fB\-o\fP,\fB \-\-options \fP\fIshortopts\fP
認識すべきショート (1 文字からなる) オプション群を指定する。
このオプションが指定されていない場合は、'\fB\-\fP' で始まらない
(そして、オプションの引数でもない) \fBgetopt\fP の最初のパラメータが、
ショートオプションを一つにまとめたショートオプションズ文字列として使用される
(訳注: 「\fB書式\fP」セクションの第 2 の書式)。\fIshortopts\fP
中のショートオプション各文字の後ろには、コロンを続けることができる。コロンが
1 個のときは、引き数が必須だということであり、2
個のときは、引き数は任意、すなわち、あってもなくてもよいということである。
また、\fIshortopts\fP の先頭に '\fB+\fP' や '\fB\-\fP'
という文字を付ければ、オプションの解析の仕方や、出力の生成の仕方を変更することができる
(詳細については、「\fBスキャニングモード\fP」セクションを参照すること)。
.TP 
\fB\-q\fP,\fB \-\-quiet\fP
getopt(3) の出すエラーメッセージを表示しない。
.TP 
\fB\-Q\fP,\fB \-\-quiet\-output\fP
通常の出力を生成しない。それでも、 \fB\-q\fP も同時に指定しないかぎり、
\fBgetopt\fP(3) によるエラー報告は行われる。
.TP 
\fB\-s\fP,\fB \-\-shell \fP\fIshell\fP
クォート方式を \fIshell\fP のものにする。\fB\-s\fP オプションが指定されていない場合は、
.SM BASH
のクォート方式が使われる。
指定可能な引き数は、現在のところ '\fBsh\fP', '\fBbash\fP', '\fBcsh\fP', '\fBtcsh\fP' である。
.TP 
\fB\-T\fP,\fB \-\-test\fP
現在使っている \fBgetopt\fP(1)  が、強化バージョンか古いバージョンかをテストする。 このオプションは何も出力しないが、エラーステータスを 4
にする。 \fBgetopt(1)\fP の他の実装や、このバージョンでも環境変数 \fBGETOPT_COMPATIBLE\fP が設定されている場合は、
\&'\fB\-\-\fP' を返して、エラーステータスを 0 にする。
.TP 
\fB\-u\fP,\fB \-\-unquoted\fP
出力をクォートしない。このモードでは、ホワイトスペースや (シェルによって様々な)  特殊文字が、 (\fBgetopt\fP(1)
の他の実装におけると同様に) 望ましからぬ混乱を引き起こしかねないことに、注意していただきたい。
.TP 
\fB\-V\fP,\fB \-\-version\fP
バージョン情報を表示して、終了する。それ以上何も出力しない。
.SH 構文解析
このセクションは、\fBgetopt\fP のパラメータの
2 番目の部分 (「\fB書式\fP」セクションの \fIparameters\fP)
の書式について詳述している。次のセクション (「\fB出力\fP」)
では、生成される出力について説明する。一般に \fBgetopt\fP
は、シェル関数やシェルスクリプトの中で、その引き数を解析するために使うものなので、
ここで取り上げるパラメータ群が、元はと言えば、
シェル関数を呼んだときに渡したパラメータだったというのは、ごく普通のことである。
そこで、気を付けなければならないことがある。シェル関数を呼んだときに渡す各パラメータは、
\fBgetopt\fP に渡されるパラメータリスト中のパラメータと
1 対 1 で対応していなければならないのだ (「\fB用例\fP」セクションを参照)。
すべての解析は、GNU \fBgetopt\fP(3) のルーティンによって行われる。
.IP "[\fB訳注\fP]" 8
\fBgetopt\fP の使い方の簡単な例を挙げる。
たとえば、シェル関数やシェルスクリプト中に次のように書く。
.sp
.nf
    PARAM=$(getopt -o 'a:b::c' -- "$@")
    eval set -- "$PARAM"
.fi
.sp
このようにして、シェル関数やスクリプトに渡された引き数群を、位置パラメータを利用して、
どれがオプションで、どれがそのオプション引き数、どれがそれ以外か、わかりやすく、
処理しやすいように再構成するわけである。詳しくは、「\fB出力\fP」セクションや、
「\fB用例\fP」で述べているスクリプトの見本を参照していただきたい。
.sp
「シェル関数を呼んだときに渡す各パラメータは、\fBgetopt\fP
に渡されるパラメータリスト中のパラメータと 1 対 1
で対応していなければならない」というのは、
シェル関数やシェルスクリプトに渡すパラメータでも、
それが空白などを含むようならクォートしなければならないのはもちろん、以下で説明するような
\fBgetopt\fP コマンドのパラメータの書式にも従っていなければならないということである。
たとえば、引き数が任意のショートオプション \fB\-b\fP
に引き数を指定する場合は、\fB\-bXXX\fP などと、間に空白を置かずに指定しなければならない。
.PP
パラメータ群は左から右へ解析される。各パラメータは、ショートオプション、ロングオプション、
オプションの引き数、オプションとは無関係なパラメータに分割分類される。
.PP
単純なショートオプションは、1 個の '\fB\-\fP' に 1
個のショートオプション文字が続くものである。
オプションが引き数を必須にしている場合は、オプション文字の直後に続けてもよく、
次のパラメータとして (すなわち、コマンドライン上でホワイトスペースを間に置いて)
書いてもよい。オプションの引き数が任意の場合は、それが存在するなら、
オプション文字の直後に続けなければならない。
.PP
1 個の '\fB\-\fP' の後ろに数個のショートオプションをまとめて指定することもできる。
ただし、最後のオプション以外のすべてのオプションが、
必須や任意の引き数を取らないという条件がある
(例外として、最後のオプションは引き数を取ることができる)。
.PP
ロングオプションは、通常 '\fB\-\-\fP' で始まり、ロングオプション名がそれに続く。
オプションが引き数を必須にしている場合は、ロングオプション名の直後に '\fB=\fP'
で区切って続けてもよく、次の引き数として
(すなわち、コマンドライン上でホワイトスペースを間に置いて) 書いてもよい。
オプションの引き数が任意の場合は、それが存在するなら、ロングオプション名の直後に
\&'\fB=\fP' で区切って続けなければならない ('\fB=\fP'
を続けたものの、その後に何も指定しない場合は、引き数が存在しないかのように解釈される。
これはちょっとしたバグである。「\fBバグ\fP」セクションを参照)。
ロングオプションは、短縮しても他のオプションと区別が付くかぎり、短縮できる。
.PP
\&'\fB\-\fP' で始まっていないパラメータで、直前のオプションの必須の引き数でもないものは、
いずれもオプションとは無関係なパラメータである。また、'\fB\-\-\fP'
というパラメータの後にあるパラメータは、常にオプションとは無関係なパラメータと解釈される。
環境変数 \fBPOSIXLY_CORRECT\fP が設定されている場合や、ショートオプションズ文字列
(訳注: 「\fB書式\fP」の \fIoptstring\fP) が '\fB+\fP'
で始まっている場合は、オプションとは無関係な最初のパラメータが見つかった時点で、
残りのすべてのパラメータは、オプションとは無関係なパラメータと解釈される。
.SH 出力
出力は、前のセクションで述べた要素の
(訳注: すなわち、オプション、オプションの引き数、オプションとは無関係なパラメータ)
ひとつひとつに対して生成される。 出力される順番は、オプションとは無関係なパラメータ以外は、
各要素が入力で指定された順番と同じである。出力は、互換 (クォートしない)
モードで行うこともできるし、ホワイトスペースなどの特殊文字が、
オプション引き数やオプションとは無関係なパラメータ中にある場合に、
そうしたものを保護する形で行うこともできる (「\fBクォート\fP」セクションを参照)。
出力はシェルスクリプト中で処理される際に、出力を構成する各要素が、
それぞれ他と区別されるものとして見えることになるので、(ほとんどのシェル言語で
shift コマンドを使って) ひとつひとつ処理することが可能になる。
ただし、クォートなしのモードでのこの処理は、完全ではない。
要素にホワイトスペースや特殊文字が含まれていると、
思いがけないところで要素が分割されてしまうかもしれないのである。
.PP
たとえば、引き数が必須なのに存在しないとか、未知のオプションがあるとかいう理由で、
パラメータの解析中に問題が起きたときは、エラーメッセージが標準エラーに表示され、
問題を起こした要素については、何も出力されない。
そして、ゼロ以外のエラーステータスが返される。
.PP
ショートオプションに対しては、1 個の '\fB\-\fP'
とオプション文字が、ひとつのパラメータとして生成される。
オプションに引き数がある場合は、次のパラメータはその引き数である。
オプションの引き数が任意なとき、その引き数が見つからなかった場合は、
クォーティングモードでは、次のパラメータが生成されるが、空のパラメータになる。
クォートなしのモード (互換モード) では、2 番目のパラメータは生成されない。
なお、\fBgetopt\fP(1) の他の実装では、任意の引数をサポートしていないことが多い。
.PP
1 個の '\fB\-\fP' の後ろに複数のショートオプションが指定されている場合は、
各オプションがそれぞれ独立したパラメータとして出力されることになる。
.PP
ロングオプションに対しては、'\fB\-\-\fP'
と省略なしのオプション名がひとつのパラメータとして生成される。
この動作は、入力中でオプションが短縮されているかどうかや、1 個の '\fB\-\fP'
とともに指定されているかどうか (訳注: \fB\-a\fP オプションを使った場合)
とは、関係がない。引き数の処理は、ショートオプションの場合と同じである。
.PP
通常、オプションとは無関係なパラメータの出力が生成されるのは、
すべてのオプションとその引き数が生成されてからである。
それから、'\fB\-\-\fP' が 1 個のパラメータとして生成され、
その後で、オプションとは無関係なパラメータが、
見つかった順序で、それぞれ独立したパラメータとして生成される。
ただし、ショートオプションズ文字列の最初の文字が '\fB\-\fP'
のときだけは別で、その場合は、オプションとは無関係なパラメータの出力は、
入力中のそれが見つかった位置で生成される (この動作は、「\fB書式\fP」セクションの第 1
の書式が使用されている場合には、サポートされない。
その場合は、ショートオプションズ文字列の前にある '\fB\-\fP' や
\&'\fB+\fP' は、すべて無視される)。
.SH クォート
互換モードでは、オプションの引き数やオプションとは無関係なパラメータ中に、
ホワイトスペースや特殊文字があると、それを適切に処理できない。
そのため、互換モードの出力を渡されたシェルスクリプトは、
その出力をどのように個々のパラメータに分割することが期待されているのか、わからないことになる。
この問題を回避するために、\fBgetopt\fP のこの実装では、クォートによる保護を提供している。
要するに、出力を生成するとき、パラメータをひとつひとつ引用符で囲んでやるのである。この出力を
(たいていは、シェルの \fBeval\fP コマンドを使って)
もう一度シェルに渡してやれば、別々のパラメータに適切に分割されることになる。
.PP
次の場合には、引用符による保護が行われない。環境変数 \fBGETOPT_COMPATIBLE\fP
が設定されている場合、「\fB書式\fP」セクションの第 1
の書式が使われている場合、'\fB\-u\fP' オプションが指定されている場合。
.PP
クォート方式はシェルごとに異なる。自分が使用しているシェルの方式を選ぶには、'\fB\-s\fP'
オプションを使えばよい。現在サポートしているシェルは、'\fBsh\fP', '\fBbash\fP',
\&'\fBcsh\fP', '\fBtcsh\fP' である。実のところ、sh 風のクォート方式と
csh 風のクォート方式という、2 つの系統しか区別していない。
別のシェルスクリプト言語を使用している場合でも、この
2 つの系統のどちらかが多分使えるだろう。
.SH スキャニングモード
ショートオプションズ文字列 (訳注: 「\fB書式\fP」の \fIoptstring\fP)
の先頭には、1 個の '\fB\-\fP' または '\fB+\fP'
を付けて、特別なスキャニングモードを指示することができる。
「\fB書式\fP」セクションの第 1 の呼び出し形式が使用されている場合には、
こうしたプラスやマイナス記号は無視されるが、そのときでも、環境変数
\fBPOSIXLY_CORRECT\fP が設定されているかどうかは、やはり調べられる (訳注: 実際には、
第 1 の書式で \fIoptstring\fP の先頭に '\fB\-\fP'
を付けると、2, 3 番目の書式と混同されて、多分エラーになる)。
.PP
先頭文字が '\fB+\fP' の場合や、環境変数 \fBPOSIXLY_CORRECT\fP
が設定されている場合は、オプションではないパラメータで (すなわち、'\fB\-'\fP
で始まっていないパラメータで)、かつオプションの引き数でもないものが最初に見つかった時点で、
解析はストップする。残りのパラメータはすべて、オプションとは無関係なパラメータと見なされる。
.PP
先頭文字が '\fB\-\fP' の場合、オプションとは無関係なパラメータは、
それが見つかった位置に出力される。それに対して、通常の動作では、
そうしたパラメータは、1 個の '\fB\-\-\fP' というパラメータが生成された後で、
出力の末尾に全部まとめて置かれるのである。 なお、このモードでも、'\fB\-\-\fP'
というパラメータはやはり生成されるが、必ず最後のパラメータになる。
.SH 互換性
このバージョンの \fBgetopt\fP(1)
は、できるだけ他のバージョンと互換性があるように書かれている。
たいていの場合、他のバージョンの \fBgetopt\fP をこのバージョンで置き換えるだけでよく、
既存のシェルスクリプトなどに手を入れる必要はない。さらに、いくつかの利点もある。
.PP
getopt の最初のパラメータの最初の文字が '\fB\-\fP' でない場合、getopt は互換モードになる。
最初のパラメータは、ショートオプションをひとつにまとめた文字列と見なされ、 他のすべての引き数は、解析の対象になる。 この場合でも、環境変数
\fBPOSIXLY_CORRECT\fP が設定されていないかぎり、パラメータの並べ替えは行う。
(すなわち、オプションとは無関係なすべてのパラメータは、最後に出力される)。
.PP
環境変数 \fBGETOPT_COMPATIBLE\fP は \fBgetopt\fP
を強制的に互換モードにする。この環境変数と \fBPOSIXLY_CORRECT\fP
の両方を設定すると、「気難しい」プログラムのために 100% の互換性が得られる。
しかし、通常はどちらも設定する必要がない。
.PP
互換モードでは、ショートオプションズ文字列の先頭に付く '\fB\-\fP' や '\fB+\fP' は無視される。
.SH 返り値
\fBgetopt\fP は、解析に成功した場合は、エラーコード \fB0\fP を返す。 \fBgetopt\fP(3)
がエラーを返した場合は \fB1\fP を返す。
自分自身に対して与えられたパラメータが理解できなかった場合は \fB2\fP
を返す。メモリが足りない (out\-of\-memory) といった内部エラーが起きた場合は \fB3\fP
を返す。\fB\-T\fP オプションを付けて呼び出された場合は \fB4\fP を返す。
.SH 用例
\fBgetopt\fP(1)  の配布では、(ba)sh と (t)csh
用のスクリプトの見本を提供している。インストール場所は
\fI/usr/share/doc/util\-linux/getopt/\fP である
(訳注: \fI/usr/share/doc/util\-linux/examples/\fP などかもしれない)。
.SH 環境変数
.IP POSIXLY_CORRECT
この環境変数は \fBgetopt\fP(3) ルーティンによって調べられる。これが設定されている場合、
オプションでもオプションの引き数でもないパラメータが見つかった時点で、解析は停止する。
それ以降のすべてのパラメータは、'\fB\-\fP'
で始まっているかどうかに関係なく、オプションとは無関係なパラメータとして解釈される。
.IP GETOPT_COMPATIBLE
\fBgetopt\fP に対して強制的に「\fB書式\fP」セクションの第 1
の呼び出し形式を使わせる。
.SH バグ
\fBgetopt\fP(3)
関数は、引き数が任意のロングオプションが空の任意引き数を渡された場合、それを解析できる
(だが、ショートオプションに対しては、それができない)。一方、この \fBgetopt\fP(1)
コマンドは、空の任意引き数を、引き数が存在しないかのように処理している。
.IP "[\fB訳注\fP]" 8
バグとは言っても、不具合ではなく、この \fBgetopt\fP コマンドが \fBgetopt\fP(3)
関数とは、仕様が微妙に違うということを言っているらしい。すなわち、\fBgetopt\fP(3)
(\fBgetopt_long\fP(3)) 関数は、引き数が任意のロングオプションに引数がない場合と、
空の引き数を渡された場合とを区別している。それに対して、この \fBgetopt\fP
コマンドの方は、ロングオプションであれ、ショートオプションであれ、
引き数が任意のオプションに引数がない場合と、空の引き数を渡された場合とを区別せず、
どちらも同じように処理している。
.PP
ショートオプションを全く使いたくない場合の \fBgetopt\fP
コマンドの構文は、あまり直感的ではない
(ショートオプションズ文字列を明示的に空文字列にしなければならないのだ)。
.IP "[\fB訳注\fP]" 8
すなわち、\fBgetopt \-o '' \-\-longoptions ...\fP
のように使用しなければならない。
.SH 作者
Frodo Looijaard <frodo@frodo.looijaard.name>
.SH 関連項目
\fBbash\fP(1), \fBtcsh\fP(1), \fBgetopt\fP(3)
.SH 入手方法
この getopt コマンドは、util\-linux パッケージの一部であり、Linux Kernel Archive
<https://www.kernel.org/pub/linux/utils/util\-linux/>
から入手できる。
