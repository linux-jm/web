--- sfdisk.8.orig	2020-07-18 08:29:56.291717331 +0900
+++ sfdisk.8	2020-07-18 08:34:37.895726601 +0900
@@ -15,6 +15,20 @@
 .\" This file was generated with po4a. Translate the source file.
 .\"
 .\"*******************************************************************
+.\"
+.\" Japanese Version Copyright (c) 2001-2005 Yuichi SATO
+.\"   and 2020 Yoichi Chonan,
+.\"         all rights reserved.
+.\" Translated Sun Mar  4 15:57:26 JST 2001
+.\"         by Yuichi SATO <ysato@h4.dion.ne.jp>
+.\" Updated & Modified Fri Jan 25 05:42:49 JST 2002 by Yuichi SATO
+.\" Updated & Modified Mon Mar 10 04:26:24 JST 2003
+.\"         by Yuichi SATO <ysato444@yahoo.co.jp>
+.\" Updated & Modified Sun May  2 12:41:19 JST 2004 by Yuichi SATO
+.\" Updated & Modified Mon May  9 03:21:52 JST 2005 by Yuichi SATO
+.\" Updated & Modified (util-linux 2.35.2) Sat Jul 18 08:31:34 JST 2020
+.\"         by Yoichi Chonan <cyoichi@maple.con.ne.jp>
+.\"
 .TH SFDISK 8 "June 2015" util\-linux "System Administration"
 .SH 名前
 sfdisk \- ディスクパーティションテーブルの表示や操作を行う
@@ -31,7 +45,14 @@
 によるアドレシングの機能はもはや提供していない。CHS が Linux
 にとって重要だったことは一度もなかったし、
 このアドレシング方法は、最近のデバイスでは全く無意味なのである。
-.sp
+.IP "[\fB訳注\fP]" 8
+util-linux の fdisk
+グループのマニュアルでは、「パーティションテーブル」と「ディスクラベル」の両方を、
+ほぼ同じ意味で、混ぜて使っている。強いて言えば、Linux や DOS
+(GPT や MBR) については「パーティションテーブル」を使い、他の OS
+の場合も含めて、より一般的に言うときは「ディスクラベル」を使うようにしているらしいが、
+必ずしもそうとは言えないところもある。
+.PP
 \fBsfdisk\fP は、(バージョン 2.26 以来) デフォルトの値が使用された場合や、
 パーティションの開始点に相対的なサイズが指定された場合、
 あるいは、サイズに (MiB などの) 乗数を表す接尾辞が使用された場合に、
@@ -41,7 +62,20 @@
 パーティションのサイズが相対的な形で、すなわち乗数接尾辞を付けて指定されているならば、
 I/O リミットに揃えるために、パーティションサイズの最適化が行われるかもしれない
 (すなわち、サイズが増減されるかもしれない)。
-
+.IP "[\fB訳注\fP]" 8
+util-linux 所収の \fBblkid\fP(8) の man によれば、\fBblkid \-i\fP \fIdevice\fP
+で「I/O Limits (aka I/O topology)
+の情報を表示する」ことになっている。そこで、それを実行すると、MINIMUM_IO_SIZE,
+PHYSICAL_SECTOR_SIZE, LOGICAL_SECTOR_SIZE が表示された。I/O
+リミットとは、そうしたもののことなのだろう。特に、PHYSICAL_SECTOR_SIZE
+が重要なようだ。「I/O 境界」「I/O 制約」と訳せるかもしれない。
+.sp
+なお、上のパラグラフでは、「パーティションの開始点に相対的なサイズを指定する」ということが、
+わかりにくいかもしれない。 たとえば、開始点を \fB+100M\fP
+といった形で指定することで、現在の開始点より
+100MiB 後方という指示が可能なのである。\fB\-\-move\-data\fP
+オプションの用例の最初のコマンドがその一例である。
+.PP
 我々が推奨するのは、開始オフセットを全く指定せず、パーティションサイズを
 MiB, GiB などの単位で指定する方法だ。その場合、sfdisk
 は、すべてのパーティションをブロックデバイスの I/O リミットに合わせて整える
@@ -100,6 +134,28 @@
 パーティションテーブルから取得されるデフォルトの値に従い、
 プログラムに埋め込まれたデフォルトは使用しない。
 \fB\-\-append\fP も参照していただきたい。
+.RS
+.IP "[\fB訳注\fP]" 8
+対話セッションを行わず、いわゆる sfdisk
+互換スクリプトの読み込みも行わない場合の、sfdisk
+の典型的、かつ単純な使用法は、次のように指示を標準入力から読み込ませることである。
+.sp
+.nf
+    # sfdisk /dev/sda <<END
+    > 2048,300GiB,L
+    > ,20GiB,S
+    > ,
+    > END
+.fi
+.sp
+上記の指示は、/dev/sda に 3 個のパーティションを作っている。まず、2048
+セクタを開始オフセットとして 300 GiB の Linux filesystem (L)、/dev/sda1
+を作り、続いて開始オフセットの決定を sfdisk にまかせて、20 GiB の
+Linux swap (S)、/dev/sda2 を作る。
+そして最後に残りのすべてを /dev/sda3 にしている 
+(タイプは、自動的にデフォルトの Linux filesystem になる)。
+指示の書式についての詳しいことは、「\fB入力の書式\fP」セクションをご覧いただきたい。
+.RE
 .TP 
 \fB\-A\fP,\fB \-\-activate \fP\fIdevice \fP[\fIpartition\-number...]\fP
 指定されたパーティション (複数指定可) のブート可能フラグを ON
