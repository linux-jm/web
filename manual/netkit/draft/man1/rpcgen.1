.\" @(#)rpcgen.new.1	1.1 90/11/09 TIRPC 1.0; from 40.10 of 10/10/89
.\" Copyright (c) 1988,1990 Sun Microsystems, Inc. - All Rights Reserved.
.\"
.\" Japanese Version Copyright (c) 2000 Yuichi SATO
.\"             all rights reserved.   
.\" Translated Sun Aug 01 1993
.\"     by NetBSD jman proj. <jman@spa.is.uec.ac.jp>
.\" Updated Wed Nov 22 17:46:02 JST 2000
.\"     by Yuichi SATO <sato@complex.eng.hokudai.ac.jp>
.\"     
.\"WORD:	remote procedure call	遠隔手続き呼び出し
.\"
.nr X
.if \nX=0 .ds x} rpcgen 1 "" "\&"
.if \nX=1 .ds x} rpcgen 1 ""
.if \nX=2 .ds x} rpcgen 1 "" "\&"
.if \nX=3 .ds x} rpcgen "" "" "\&"
.TH \*(x}
.\"O .SH NAME
.SH 名前
.\"O \f4rpcgen\f1 \- an RPC protocol compiler
\f4rpcgen\f1 \- RPC プロトコルコンパイラ
.\"O .SH SYNOPSIS
.SH 書式
.ft 4
.nf
rpcgen \f2infile\f4
.fi
.ft 1
.br
.ft 4
.nf
rpcgen [\-D\f2name\f4[=\f2value\f4]] [\-T] [\-K \f2secs\fP] \f2infile\f4
.fi
.ft 1
.br
.ft 4
.nf
rpcgen \-c|\-h|\-l|\-m|\-t [\-o \f2outfile\f4 ] \f2infile\f4
.fi
.ft 1
.br
.ft 4
.nf
rpcgen [\-I] \-s \f2nettype\f4 [\-o \f2outfile\f4] \f2infile\f4
.fi
.ft 1
.br
.ft 4
.nf
rpcgen \-n \f2netid\f4 [\-o \f2outfile\f4] \f2infile\f4
.ft 1
.\"O .SH DESCRIPTION
.SH 説明
.P
.\"O \f4rpcgen\f1
.\"O is a tool that generates C code to implement an RPC protocol.
.\"O The input to
.\"O \f4rpcgen\f1
.\"O is a language similar to C known as
.\"O RPC Language (Remote Procedure Call Language).
\f4rpcgen\f1
は RPC プロトコルを実装する C 言語のコードを生成するツールである。
\f4rpcgen\f1
への入力は
RPC 言語 (遠隔手続き呼び出し言語 Remote Procedure Call Language)
として知られる C 言語に似た言語である。
.P
.\"O \f4rpcgen\f1
.\"O is normally used as in the first synopsis where 
.\"O it takes an input file and generates up to four output files.
.\"O If the
.\"O \f2infile\f1
.\"O is named
.\"O \f4proto.x\f1,
.\"O then
.\"O \f4rpcgen\f1
.\"O will generate a header file in
.\"O \f4proto.h\f1,
.\"O XDR routines in
.\"O \f4proto_xdr.c\f1,
.\"O server-side stubs in
.\"O \f4proto_svc.c\f1,
.\"O and client-side stubs in
.\"O \f4proto_clnt.c\f1.
\f4rpcgen\f1
は通常、1 つの入力ファイルを受け取って 4 つの出力ファイルを生成する、
第 1 の書式で使われる。
入力ファイル
\f2infile\f1
が
\f4proto.x\f1
という名前である場合、
\f4rpcgen\f1
はヘッダファイル
\f4proto.h\f1、
XDR ルーチン
\f4proto_xdr.c\f1、
サーバ側スタブ
\f4proto_svc.c\f1、
クライアント側スタブ
\f4proto_clnt.c\f1
を生成する。
.\"O With the
.\"O \f4\-T\f1
.\"O option,
.\"O it will also generate the RPC dispatch table in
.\"O \f4proto_tbl.i\f1.
.\"O With the
.\"O \f4\-Sc\f1
.\"O option,
.\"O it will also generate  sample code which would illustrate how to use the
.\"O remote procedures on the client side. This code would be created in 
.\"O \f4proto_client.c\f1.
.\"O With the
.\"O \f4\-Ss\f1
.\"O option,
.\"O it will also generate a sample server code which would illustrate how to write
.\"O the remote procedures. This code would be created in 
.\"O \f4proto_server.c\f1.
\f4\-T\f1
オプションを指定すると、さらに RPC ディスパッチテーブル
n\f4proto_tbl.i\f1
も生成する。
\f4\-Sc\f1
オプションを指定すると、クライアント側での遠隔手続きの使用法を説明する
サンプルコードも生成する。
このコードは
\f4proto_client.c\f1
に書き出される。
\f4\-Ss\f1
オプションを指定すると、
遠隔手続きの書き方を説明するサンプルのサーバ用コードを生成する。
このコードは
\f4proto_server.c\f1
に書き出される。
.P
.\"O The server created can be started both by the port monitors
.\"O (for example, \f4inetd\f1 or \f4listen\f1)
.\"O or by itself.
.\"O When it is started by a port monitor,
.\"O it creates servers only for the transport for which 
.\"O the file descriptor \f40\fP was passed.
.\"O The name of the transport must be specified
.\"O by setting up the environmental variable
.\"O \f4PM_TRANSPORT\f1.
生成されたサーバは、
ポートモニタ (例えば \f4inetd\f1 や \f4listen\f1) で起動することも、
それ自身で起動することもできる。
ポートモニタで起動される場合、
ファイルディスクリプタ \f40\fP を引き渡すトランスポートのためだけの
サーバを生成する。
トランスポートの名前は環境変数
\f4PM_TRANSPORT\f1
を設定することで指定しなければならない。
.\"O When the server generated by
.\"O \f4rpcgen\f1
.\"O is executed,
.\"O it creates server handles for all the transports
.\"O specified in
.\"O \f4NETPATH\f1
.\"O environment variable,
.\"O or if it is unset,
.\"O it creates server handles for all the visible transports from
.\"O \f4/etc/netconfig\f1
.\"O file.
\f4rpcgen\f1
で作成されたサーバが実行されると、
サーバは環境変数
\f4NETPATH\f1
で指定された全てのトランスポート用にサーバハンドルを生成する。
環境変数
\f4NETPATH\f1
が設定されていない場合、
\f4/etc/netconfig\f1
ファイルに記述された全ての可視トランスポート用にサーバハンドルを生成する。
.\"O Note:
.\"O the transports are chosen at run time and not at compile time.
.\"O When the server is self-started,
.\"O it backgrounds itself by default.
.\"O A special define symbol
.\"O \f4RPC_SVC_FG\f1
.\"O can be used to run the server process in foreground.
注意:
トランスポートはコンパイル時ではなく実行時に選択される。
サーバが自分自身で開始する場合、
デフォルトではバックグラウンド実行に移る。
サーバプロセスをフォアグラウンドで実行するには、
特殊定義シンボル
\f4RPC_SVC_FG\f1
が使われる。
.P
.\"O The second synopsis provides special features which allow
.\"O for the creation of more sophisticated RPC servers.
.\"O These features include support for user provided
.\"O \f4#defines\f1
.\"O and RPC dispatch tables.
.\"O The entries in the RPC dispatch table contain:
第 2 の書式は、より洗練された RPC サーバを生成する特別な機能を提供する。
これらの機能には、ユーザー定義の
\f4#define\f1
と RPC ディスパッチテーブルのサポートが含まれる。
RPC ディスパッチテーブルのエントリには以下のものがある。
.RS
.PD 0
.TP 3
\(bu
.\"O pointers to the service routine corresponding to that procedure,
その手続きに対応するサービスルーチンへのポインタ
.TP
\(bu
.\"O a pointer to the input and output arguments
入出力引き数へのポインタ
.TP
\(bu
.\"O the size of these routines
これらのルーチンのサイズ
.PD
.RE
.\"O A server can use the dispatch table to check authorization 
.\"O and then to execute the service routine; 
.\"O a client library may use it to deal with the details of storage
.\"O management and XDR data conversion.
サーバは、認証をチェックした後にサービスルーチンを実行するために、
ディスパッチテーブルを使うことができる。
クライアントライブラリは、記憶領域管理と XDR データ変換を詳細に扱うために、
ディスパッチテーブルを使うことができる。
.P
.\"O The other three synopses shown above are used when 
.\"O one does not want to generate all the output files,
.\"O but only a particular one.
.\"O Some examples of their usage is described in the
.\"O EXAMPLE
.\"O section below.
上で示した他の 3 つの書式は、
全ての出力ファイルではなく、特定の 1 つのファイルが必要な場合に使われる。
いくつかの使用例が以下の「例」のセクションで説明されている。
.\"O When 
.\"O \f4rpcgen\f1
.\"O is executed with the
.\"O \f4\-s\f1
.\"O option,
.\"O it creates servers for that particular class of transports.
\f4rpcgen\f1
が
\f4\-s\f1
オプション付きで実行された場合、
特定クラスのトランスポート用のサーバを生成する。
.\"O When
.\"O executed with the
.\"O \f4\-n\f1
.\"O option,
.\"O it creates a server for the transport specified by
.\"O \f2netid\f1.
.\"O If
.\"O \f2infile\f1
.\"O is not specified,
.\"O \f4rpcgen\f1
.\"O accepts the standard input.
\f4\-n\f1
オプション付きで実行された場合、
\f2netid\f1
で指定したトランスポート用のサーバを生成する。
\f2infile\f1
が指定されていない場合、
\f4rpcgen\f1
は標準入力から入力を受け付ける。
.P
.\"O The C preprocessor,
.\"O \f4cc \-E\f1
.\"O [see \f4cc\fP(1)],
.\"O is run on the input file before it is actually interpreted by
.\"O \f4rpcgen\f1.
.\"O For each type of output file,
.\"O \f4rpcgen\f1
.\"O defines a special preprocessor symbol for use by the
.\"O \f4rpcgen\f1
.\"O programmer:
入力ファイルが
\f4rpcgen\f1
によって実際に処理される前に、C プリプロセッサ
\f4cc \-E\f1
[\f4cc\fP(1) を参照] が実行される。
\f4rpcgen\f1
は各タイプの出力ファイルに対して、
\f4rpcgen\f1
プログラマが使う特別なプリプロセッサシンボルを定義する。
.P
.PD 0
.TP 12
\f4RPC_HDR\f1
.\"O defined when compiling into header files
ヘッダファイルにコンパイルする際に定義される。
.TP
\f4RPC_XDR\f1
.\"O defined when compiling into XDR routines
XDR ルーチンにコンパイルする際に定義される。
.TP
\f4RPC_SVC\f1
.\"O defined when compiling into server-side stubs
サーバ側スタブにコンパイルする際に定義される。
.TP
\f4RPC_CLNT\f1
.\"O defined when compiling into client-side stubs
クライアント側スタブにコンパイルする際に定義される。
.TP
\f4RPC_TBL\f1
.\"O defined when compiling into RPC dispatch tables
RPC ディスパッチテーブルにコンパイルする際に定義される。
.PD
.P
.\"O Any line beginning with
.\"O `\f4%\f1'
.\"O is passed directly into the output file,
.\"O uninterpreted by
.\"O \f4rpcgen\f1.
`\f4%\f1'
で始まる全ての行は、
\f4rpcgen\f1
に解釈されることなく、出力ファイルに直接そのまま渡される。
.P
.\"O For every data type referred to in
.\"O \f2infile\f1,
.\"O \f4rpcgen\f1
.\"O assumes that there exists a
.\"O routine with the string
.\"O \f4xdr_\f1
.\"O prepended to the name of the data type.
.\"O If this routine does not exist in the RPC/XDR
.\"O library, it must be provided.
.\"O Providing an undefined data type
.\"O allows customization of XDR routines.
\f2infile\f1
で参照される全てのデータタイプに対して、
\f4rpcgen\f1
はデータタイプ名の前に
\f4xdr_\f1
を付けた名前のルーチンが存在することを仮定する。
このルーチンが RPC/XDR ライブラリにない場合、
そのルーチンを提供しなければならない。
未定義のデータタイプを提供することで
XDR ルーチンをカスタマイズすることができる。
.br
.ne 10
.P
.\"O The following options are available:
以下のオプションが使用可能である。
.TP
\f4\-a\f1
.\"O Generate all the files including sample code for client and server side.
クライアント側とサーバ側のサンプルコードを含む全てのファイルを生成する。
.TP
\f4\-b\f1
.\"O This generates code for the SunOS4.1 style of rpc. It is
.\"O for backward compatibilty.  This is the default.
SunOS4.1 スタイルの RPC コードを生成する。
昔のコードとの互換性のためにある。これがデフォルトである。
.TP
\f4\-5\f1
.\"O This generates code for the SysVr4 style of rpc. It is used by the
.\"O Transport Independent RPC that is in Svr4 systems.
.\"O By default rpcgen generates code for SunOS4.1 stype of rpc.
SysVr4 スタイルの RPC コードを生成する。
これは Svr4 システムのトランスポート独立 RPC
(Transport Independent RPC) で使われる。
デフォルトでは rpcgen は、SunOS4.1 スタイルの RPC コードを生成する。
.TP
\f4\-c\f1
.\"O Compile into XDR routines.
コンパイルして XDR ルーチンを生成する。
.TP
\f4\-C\f1
.\"O Generate code in ANSI C. This option also generates code that could be
.\"O compiled with the C++ compiler.  This is the default.
ANSI C のコードを生成する。
このオプションは C++ コンパイラでもコンパイルできるコードを生成する。
これがデフォルトである。
.TP
\f4\-k\f1
.\"O Generate code in K&R C.  The default is ANSI C.
K&R C のコードを生成する。デフォルトは ANSI C である。
.TP
\f4\-D\f2name\f4[=\f2value\f4]\f1
.\"O Define a symbol
.\"O \f2name\f1.
.\"O Equivalent to the
.\"O \f4#define\f1
.\"O directive in the source.
.\"O If no
.\"O \f2value\f1
.\"O is given,
.\"O \f2value\f1
.\"O is defined as \f41\f1.
.\"O This option may be specified more than once.
シンボル
\f2name\f1
を定義する。
ソース中の
\f4#define\f1
ディレクティブと同じ。
\f2value\f1
が与えられていない場合、
\f2value\f1
は \f41\f1 と定義される。
このオプションは複数回指定してもよい。
.TP
\f4\-h\f1
.\"O Compile into
.\"O \f4C\f1
.\"O data-definitions (a header file).
.\"O \f4\-T\f1
.\"O option can be used in conjunction to produce a 
.\"O header file which supports RPC dispatch tables.
コンパイルして
\f4C\f1
言語のデータ定義 (ヘッダファイル) を生成する。
RPC ディスパッチテーブルをサポートするヘッダファイルを生成したい場合は、
\f4\-T\f1
オプションを同時に指定すること。
.TP
\f4\-I\f1
.\"O Generate a service that can be started from inetd.  The default is
.\"O to generate a static service that handles transports selected with \f4\-s\f1.
.\"O Using \f4\-I\f1 allows starting a service by either method.
inetd から起動できるサービスを生成する。
デフォルトでは、\f4\-s\f1 オプションで選択されるトランスポートを処理する、
静的サービスを生成する。
\f4\-I\f1 を使うことで、サービスをどちらの方法でも起動できるようになる。
.TP
\f4-K\f2 secs\f1
.\"O By default, services created using \f4rpcgen\fP wait \f4120\fP seconds
.\"O after servicing a request before exiting.
.\"O That interval can be changed using the \f4-K\fP flag.
.\"O To create a server that exits immediately upon servicing a request,
.\"O \f4-K\ 0\fP can be used.
.\"O To create a server that never exits, the appropriate argument is
.\"O \f4-K\ -1\fP.
デフォルトでは、\f4rpcgen\fP で生成されたサービスは、
リクエストを処理した後 \f4120\fP 秒待って終了する。
この待機時間は \f4-K\fP フラグを使って変更できる。
リクエストを処理した後すぐに終了するサーバを生成するには、
\f4-K\ 0\fP を指定すること。
決して終了しないサーバを生成するには、
適切な引き数である \f4-K\ -1\fP を指定すること。
.IP
.\"O When monitoring for a server,
.\"O some portmonitors, like
.\"O \f4listen\fP(1M),
.\"O .I always
.\"O spawn a new process in response to a service request.
.\"O If it is known that a server will be used with such a monitor, the
.\"O server should exit immediately on completion.
.\"O For such servers, \f4rpcgen\fP should be used with \f4-K\ -1\fP.
サーバをモニタリングしている場合、ある種のポートモニタ、例えば
\f4listen\fP(1M)
のようなものは、サービスリクエストに応答して
.I 常に
新しいプロセスを生成する。
サーバがそのようなモニタとともに使われることが分かっている場合、
サーバは処理の完了後すぐに終了すべきである。
そのようなサーバを生成するためには、
\f4rpcgen\fP を \f4-K\ -1\fP オプション付きで使うべきである。
.TP
\f4\-l\f1
.\"O Compile into client-side stubs.
コンパイルしてクライアント側スタブを生成する。
.TP
\f4\-m\f1
.\"O Compile into server-side stubs,
.\"O but do not generate a \(lqmain\(rq routine.
.\"O This option is useful for doing callback-routines 
.\"O and for users who need to write their own 
.\"O \(lqmain\(rq routine to do initialization.
コンパイルしてサーバ側スタブファイルを生成するが、
\(lqmain\(rq ルーチンは作成しない。
このオプションは、コールバックルーチンを作成する場合や、
初期化を行うために独自の \(lqmain\(rq ルーチンを記述する必要がある
ユーザーにとって役に立つ。
.TP
\f4\-n \f2netid\f1
.\"O Compile into server-side stubs for the transport
.\"O specified by
.\"O \f2netid\f1.
.\"O There should be an entry for
.\"O \f2netid\f1
.\"O in the
.\"O netconfig database.
.\"O This option may be specified more than once,
.\"O so as to compile a server that serves multiple transports.
コンパイルして
\f2netid\f1
で指定したトランスポート用のサーバ側スタブを生成する。
netconfig データベースに
\f2netid\f1
用のエントリが存在する必要がある。
複数のトランスポートに対してサービスを行うサーバを作成するために、
このオプションを複数回指定することができる。
.TP
\f4\-N\f1
.\"O Use the newstyle of rpcgen. This allows procedures to have multiple arguments. 
.\"O It also uses the style of parameter passing that closely resembles C. So, when 
.\"O passing an argument to a remote procedure you do not have to pass a pointer to
.\"O the argument but the argument itself. This behaviour is different from the oldstyle
.\"O of rpcgen generated code. The newstyle is not the default case because of 
.\"O backward compatibility.
新しいスタイルの rpcgen を使う。手続きが複数の引き数を持てるようにする。
これはまた、C 言語にとてもよく似たパラメータ渡しの方法を用いる。
これにより、遠隔手続きに引き数を渡す場合に、引き数へのポインタではなく
引き数そのものを渡すことができる。
この動作は、以前のスタイルの rpcgen が生成したコードによるものとは異なる。
以前のものとの互換性のため、新しいスタイルはデフォルトになっていない。
.TP
\f4\-o \f2outfile\f1
.\"O Specify the name of the output file.
.\"O If none is specified,
.\"O standard output is used
.\"O (\f4\-c\f1,
.\"O \f4\-h\f1,
.\"O \f4\-l\f1,
.\"O \f4\-m\f1,
.\"O \f4\-n\f1,
.\"O \f4\-s\f1,
.\"O \f4\-s\Sc,
.\"O \f4\-s\Ss,
.\"O and
.\"O \f4\-t\f1
.\"O modes only).
出力ファイル名を指定する。
何も指定されない場合、標準出力に書き出す
(\f4\-c\f1,
\f4\-h\f1,
\f4\-l\f1,
\f4\-m\f1,
\f4\-n\f1,
\f4\-s\f1,
\f4\-Sc\f1,
\f4\-Ss\f1,
\f4\-t\f1 
モード時のみ)。
.TP
\f4\-s \f2nettype\f1
.\"O Compile into server-side stubs for all the 
.\"O transports belonging to the class
.\"O \f2nettype\f1.
.\"O The supported classes are
.\"O \f4netpath\f1,
.\"O \f4visible\f1,
.\"O \f4circuit_n\f1,
.\"O \f4circuit_v\f1,
.\"O \f4datagram_n\f1,
.\"O \f4datagram_v\f1,
.\"O \f4tcp\f1,
.\"O and
.\"O \f4udp\f1
.\"O [see \f4rpc\fP(3N)
.\"O for the meanings associated with these classes].
.\"O This option may be specified more than once.
.\"O Note:
.\"O the transports are chosen at run time and not at compile time.
コンパイルして
\f2nettype\f1
クラスに属する全てのトランスポート用のサーバ側スタブを生成する。
サポートされているクラスは以下の通りである。
\f4netpath\f1,
\f4visible\f1,
\f4circuit_n\f1,
\f4circuit_v\f1,
\f4datagram_n\f1,
\f4datagram_v\f1,
\f4tcp\f1,
\f4udp\f1
[これらのクラスに関連づけられた意味については、
\f4rpc\fP(3N) を参照すること]。
このオプションは複数回指定することができる。
注意:
トランスポートはコンパイル時ではなく実行時に選択される。
.TP
\f4\-Sc\f1
.\"O Generate sample code to show the use of remote procedure and how to bind
.\"O to the server before calling the client side stubs generated by rpcgen.
遠隔手続きの使用法と、rpcgen で生成されたクライアント側スタブを
呼び出す前にサーバをバインドする方法を説明するサンプルコードを生成する。
.TP
\f4\-Ss\f1
.\"O Generate skeleton code for the remote procedures on the server side. You would need
.\"O to fill in the actual code for the remote procedures.
サーバ側遠隔手続きの骨組みとなるコードを生成する。
遠隔手続きの実際のコードを記述する必要がある。
.TP
\f4\-t\f1
.\"O Compile into RPC dispatch table.
コンパイルして RPC ディスパッチテーブルを生成する。
.TP
\f4\-T\f1
.\"O Generate the code to support RPC dispatch tables.
RPC ディスパッチテーブルをサポートするコードを生成する。
.P
.\"O The options 
.\"O \f4\-c\f1,
.\"O \f4\-h\f1,
.\"O \f4\-l\f1,
.\"O \f4\-m\f1,
.\"O \f4\-s\f1
.\"O and
.\"O \f4\-t\f1
.\"O are used exclusively to generate a particular type of file,
.\"O while the options
.\"O \f4\-D\f1
.\"O and
.\"O \f4\-T\f1
.\"O are global and can be used with the other options.
オプション
\f4\-c\f1,
\f4\-h\f1,
\f4\-l\f1,
\f4\-m\f1,
\f4\-s\f1,
\f4\-t\f1
は、特定のタイプのファイルを生成するために、どれか 1 つを単独で使う。
一方、オプション
\f4\-D\f1
と
\f4\-T\f1
は、グローバルオプションで、他のオプションとともに使うことができる。
.br
.ne 5
.\"O .SH NOTES
.SH 注意
.\"O The RPC Language does not support nesting of structures.
.\"O As a work-around,
.\"O structures can be declared at the top-level,
.\"O and their name used inside other structures in 
.\"O order to achieve the same effect.
RPC 言語は構造体の入れ子構造をサポートしない。
対処法として
同様の効果を得るために、構造体をトップレベルで宣言し、
その構造体名を他の構造体の中で使うことができる。
.P
.\"O Name clashes can occur when using program definitions,
.\"O since the apparent scoping does not really apply.
.\"O Most of these can be avoided by giving 
.\"O unique names for programs,
.\"O versions,
.\"O procedures and types.
明確な名前スコープが実際に適応されていないため、
プログラム定義の使用中に名前の衝突が起きる場合がある。
この問題の大部分は、プログラム・バージョン・手続き・タイプに対して
固有の名前を付けることで回避できる。
.P
.\"O The server code generated with
.\"O \f4\-n\f1
.\"O option refers to the transport indicated by
.\"O \f2netid\f1
.\"O and hence is very site specific.
\f4\-n\f1
オプションで生成されたサーバ用コードは、
\f2netid\f1
で指定されたトランスポートを参照するので、
非常にサイト依存したものになる。
.\"O .SH EXAMPLE
.SH 例
.\"O The following example:
以下の例:
.IP
.ft 4
$ rpcgen \-T prot.x
.ft 1
.P
.\"O generates the five files:
.\"O \f4prot.h\f1,
.\"O \f4prot_clnt.c\f1,
.\"O \f4prot_svc.c\f1,
.\"O \f4prot_xdr.c\f1
.\"O and
.\"O \f4prot_tbl.i\f1.
は 5 つのファイル:
\f4prot.h\f1,
\f4prot_clnt.c\f1,
\f4prot_svc.c\f1,
\f4prot_xdr.c\f1,
\f4prot_tbl.i\f1
を生成する。
.P
.\"O The following example sends the C data-definitions (header file)
.\"O to the standard output.
以下の例では、C 言語のデータ定義 (ヘッダファイル) が標準出力に送られる。
.IP
.ft 4
$ rpcgen \-h prot.x
.ft 1
.P
.\"O To send the test version of the
.\"O \f4-DTEST\f1,
.\"O server side stubs for 
.\"O all the transport belonging to the class
.\"O \f4datagram_n\f1
.\"O to standard output, use:
\f4datagram_n\f1
クラスに属する全トランスポート用のサーバ側スタブのテストバージョン
\f4-DTEST\f1
を標準出力に書き出すためには、以下のようにすること:
.IP
.ft 4
$ rpcgen \-s datagram_n \-DTEST prot.x
.ft 1
.P
.\"O To create the server side stubs for the transport indicated
.\"O by
.\"O \f2netid\f1
.\"O \f4tcp\f1,
.\"O use:
\f2netid\f1
\f4tcp\f1
で指定されたトランスポート用のサーバ側スタブを生成するためには、
以下のようにすること:
.IP
.ft 4
$ rpcgen \-n tcp \-o prot_svc.c prot.x
.ft 1
.\"O .SH "SEE ALSO"
.\"O \f4cc\fP(1).
.SH 関連項目
\f4cc\fP(1)
.SH 翻訳者謝辞
この man ページの翻訳にあたり、
FreeBSD jpman project <http://www.jp.freebsd.org/man-jp/>
による翻訳を参考にさせていただいた。
