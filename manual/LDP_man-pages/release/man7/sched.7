.\" Copyright (C) 2014 Michael Kerrisk <mtk.manpages@gmail.com>
.\" and Copyright (C) 2014 Peter Zijlstra <peterz@infradead.org>
.\" and Copyright (C) 2014 Juri Lelli <juri.lelli@gmail.com>
.\" Various pieces from the old sched_setscheduler(2) page
.\" 	Copyright (C) Tom Bjorkholm, Markus Kuhn & David A. Wheeler 1996-1999
.\" 	and Copyright (C) 2007 Carsten Emde <Carsten.Emde@osadl.org>
.\" 	and Copyright (C) 2008 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Worth looking at: http://rt.wiki.kernel.org/index.php
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH SCHED 7 2014\-10\-02 Linux "Linux Programmer's Manual"
.SH 名前
sched \- スケジューリング API の概要
.SH 説明
.SS "API の概要"
Linux のスケジューリング API は以下のとおりである。
.TP 
\fBsched_setscheduler\fP(2)
指定されたスレッドのスケジューリングポリシーとパラメーターを設定する。
.TP 
\fBsched_getscheduler\fP(2)
指定されたスレッドのスケジューリングポリシーを返す。
.TP 
\fBsched_setparam\fP(2)
指定されたスレッドのスケジューリングパラメーターを設定する。
.TP 
\fBsched_getparam\fP(2)
指定されたスレッドのスケジューリングパラメーターを取得する。
.TP 
\fBsched_get_priority_max\fP(2)
指定されたスケジューリングポリシーで利用可能な最小の優先度を返す。
.TP 
\fBsched_get_priority_min\fP(2)
指定されたスケジューリングポリシーで利用可能な最大の優先度を返す。
.TP 
\fBsched_rr_get_interval\fP(2)
「ラウンドロビン」スケジューリングポリシーでスケジューリグされるスレッドで使用される単位時間 (quantum) を取得する。
.TP 
\fBsched_yield\fP(2)
呼び出し元が CPU の使用権を明け渡して、 他のスレッドが実行できるようにする。
.TP 
\fBsched_setaffinity\fP(2)
(Linux 固有) 指定されたスレッドの CPU affinity を設定する。
.TP 
\fBsched_getaffinity\fP(2)
(Linux 固有) 指定されたスレッドの CPU affinity を取得する。
.TP 
\fBsched_setattr\fP(2)
指定されたスレッドのスケジューリングポリシーとパラメーターを設定する。 この (Linux 固有の) システムコールは
\fBsched_setscheduler\fP(2) と \fBsched_setparam\fP(2) の両方の機能を持つ。
.TP 
\fBsched_getattr\fP(2)
.\"
指定されたスレッドのスケジューリングポリシーとパラメーターを取得する。 この (Linux 固有の) システムコールは
\fBsched_getscheduler\fP(2) と \fBsched_getparam\fP(2) の両方の機能を持つ。
.SS "スケジューリングポリシー (scheduling policy)"
スケジューラ (scheduler) とはカーネルの構成要素で、 次に CPU で実行される実行可能なスレッドを決定するものである。
各々のスレッドには、スケジューリングポリシーと 「静的」なスケジューリング優先度 \fIsched_priority\fP が対応付けられる。
スケジューラは、システム上の全スレッドのスケジューリングポリシーと 静的優先度に関する知識に基づいて決定を行う。

通常のスケジューリングポリシー (\fBSCHED_OTHER\fP, \fBSCHED_IDLE\fP, \fBSCHED_BATCH\fP)
の下でスケジューリングされるスレッドでは、 \fIsched_priority\fP はスケジューリングの決定に使用されない
(\fIsched_priority\fP には 0 を指定しなければならない)。

リアルタイムスケジューリングポリシー (\fBSCHED_FIFO\fP, \fBSCHED_RR\fP)  の下でスケジューリングされるスレッドは、
\fIsched_priority\fP の値は 1 (最低) から 99 (最高) の範囲となる
(数字から分かるように、リアルタイムスレッドは常に通常のスレッドよりも 高い優先度を持つ)。 ここで注意すべきなのは、POSIX.1\-2001
が要求しているのは、 リアルタイムポリシーの実装において最低 32 種類の異なる優先度レベルが
サポートされることだけであり、いくつかのシステムではこの最低限の数の 優先度しか提供されていない、ということである。 移植性が必要なプログラムでは、
\fBsched_get_priority_min\fP(2)  と \fBsched_get_priority_max\fP(2)
を使って、あるポリシーがサポートする優先度の範囲を調べるべきである。

概念としては、 スケジューラはその \fIsched_priority\fP の値それぞれに対して 実行可能なスレッドのリストを管理している。
どのスレッドを次に実行するかを決定するために、 スケジューラは静的優先度の最も高い空でないリストを探して、 そのリストの先頭のスレッドを選択する。

各スレッドのスケジューリングポリシーは、 そのスレッドが同じ静的優先度を持つスレッドのリストの中のどこに挿入され、
このリストの中をどのように移動するかを決定する。

全てのスケジューリングはプリエンプティブ (preemptive) である: より高い優先度のスレッドが実行可能になると、現在実行中のスレッドは実行権を
取り上げられ (preempted)、そのスレッドの静的優先度レベルの待ちリストに 戻される。スケジューリングポリシーは同じ静的優先度を持つ実行可能な
スレッドのリストの中で順番のみを決定する。
.SS "SCHED_FIFO: ファーストインファーストアウトスケジューリング"
\fBSCHED_FIFO\fP は 0 より大きな静的優先度でのみ使用できる。このポリシーでは、 \fBSCHED_FIFO\fP
スレッドが実行可能になった場合、 そのポリシーが \fBSCHED_OTHER\fP、 \fBSCHED_BATCH\fP、 \fBSCHED_IDLE\fP の
現在実行中のスレッドは直ちに実行権を取り上げられる。 \fBSCHED_FIFO\fP は時分割のない単純なスケジューリングアルゴリズムである。
\fBSCHED_FIFO\fP ポリシーでスケジューリングされているスレッドには以下の ルールが適用される:
.IP * 3
より高い優先度の他のスレッドによって取って代わられた \fBSCHED_FIFO\fP スレッドはその優先度のリストの先頭に留まり続け、
より高い優先度のスレッド全てが停止 (block) した場合に実行を再開する。
.IP *
\fBSCHED_FIFO\fP スレッドが実行可能になった時、その優先度のリストの最後 に挿入される。
.IP *
.\" In 2.2.x and 2.4.x, the thread is placed at the front of the queue
.\" In 2.0.x, the Right Thing happened: the thread went to the back -- MTK
\fBsched_setscheduler\fP(2), \fBsched_setparam\fP(2), \fBsched_setattr\fP(2) は \fIpid\fP
で指定された \fBSCHED_FIFO\fP (または \fBSCHED_RR\fP) スレッドが 実行可能な場合、リストの最初に置く。
結果として、もし優先度が同じだった場合、 現在実行中のスレッドに先んじるかもしれない。 (POSIX.1\-2001
ではスレッドはリストの最後に行くべきと規定されている。)
.IP *
\fBsched_yield\fP(2)  を呼び出したスレッドはリストの最後に置かれる。
.PP
その他のイベントによって \fBSCHED_FIFO\fP
ポリシーでスケジューリングされるスレッドが同じ優先度の実行可能なスレッドの待ちリストの中を移動することはない。

\fBSCHED_FIFO\fP スレッドは I/O 要求によって停止するか、 より高い優先度のスレッドによって置きかえられるか、
\fBsched_yield\fP(2)  を呼び出すまで実行を続ける。
.SS "SCHED_RR: ラウンドロビン (round\-robin) スケジューリング"
.\" On Linux 2.4, the length of the RR interval is influenced
.\" by the process nice value -- MTK
.\"
\fBSCHED_RR\fP は \fBSCHED_FIFO\fP の単純な拡張である。 上述された
\fBSCHED_FIFO\fP に関する記述は全て \fBSCHED_RR\fP に 適用できる。異なるのは
それぞれのスレッドは最大時間単位までしか実行できない ということである。
\fBSCHED_RR\fP スレッドが時間単位と同じかそれより 長い時間実行されると、
その優先度のリストの最後に置かれる。 より高い優先度のスレッドによって
置きかえられ、その後実行を再開した \fBSCHED_RR\fP スレッドは、そのラウンド
ロビン時間単位を完全に使い切る まで実行される。その時間単位の長さは
\fBsched_rr_get_interval\fP(2) を使って取得できる。
.SS "SCHED_DEADLINE: 散発タスクモデルのデッドラインスケジューリング"
バージョン 3.14 以降では、 Linux はデッドラインスケジューリングポリシー (\fBSCHED_DEADLINE\fP) が提供される。
現在のところ、 このポリシーは GEDF (Global Earliest Deadline First) を使って CBS (Constant
Bandwidth Server) との組み合わせで実装されている。 このポリシーと関連する属性の設定、取得を行うには、 Linux
固有のシステムコール \fBsched_setattr\fP(2) と \fBsched_getattr\fP(2) を使用する必要がある。

散発タスク (sporadic task) はジョブ列を持つタスクで、 各ジョブは期間 (period) あたり多くとも 1 回だけ有効化される。
各ジョブには \fIrelative deadline\fP (相対デッドライン) と \fIcomputation time\fP (計算時間) がある。
相対デッドラインは、そのジョブがそのデッドラインより前に実行が終了すべきであることを示す。 計算時間は、このジョブを実行するのに必要な CPU
時間である。 新しいジョブを実行する必要が出てタスクが起こされる時点は \fIarrival time\fP (到着時刻) と呼ばれる (要求時刻
(request time) や解放時刻 (release time) と呼ばれることもある)。 \fIstart time\fP
はタスクが実行を開始する時刻である。 したがって、 \fIabsolute deadline\fP (絶対デッドライン)
は到着時刻に相対デッドラインを加算することで求められる。

以下の図はこれらの用語をまとめたものである。

.in +4n
.nf
arrival/wakeup                    absolute deadline
     |    start time                    |
     |        |                         |
     v        v                         v
\-\-\-\-\-x\-\-\-\-\-\-\-\-xooooooooooooooooo\-\-\-\-\-\-\-\-x\-\-\-\-\-\-\-\-x\-\-\-
              |<\- comp. time \->|
     |<\-\-\-\-\-\-\- relative deadline \-\-\-\-\-\->|
     |<\-\-\-\-\-\-\-\-\-\-\-\-\-\- period \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\->|
.fi
.in

\fBsched_setattr\fP(2) を使ってスレッドに \fBSCHED_DEADLINE\fP ポリシーを設定する際、 \fIRuntime\fP,
\fIDeadline\fP, \fIPeriod\fP の 3 つのパラメーターを指定することができる。
これらのパラメーターは必ずしも上で述べた用語に対応しているわけではない。 よくある方法としては、 Runtime に平均計算時間
(もしくはハードリアルタイムタスクの場合は最悪ケースの実行時間) よりも大きな値を、 Deadline に相対デッドラインを、 Period
にタスクの期間 (period) を設定する。 したがって、 \fBSCHED_DEADLINE\fP スケジューリングでは、 以下のようになる。

.in +4n
.nf
arrival/wakeup                    absolute deadline
     |    start time                    |
     |        |                         |
     v        v                         v
\-\-\-\-\-x\-\-\-\-\-\-\-\-xooooooooooooooooo\-\-\-\-\-\-\-\-x\-\-\-\-\-\-\-\-x\-\-\-
              |<\-\- Runtime \-\-\-\-\-\-\->|
     |<\-\-\-\-\-\-\-\-\-\-\- Deadline \-\-\-\-\-\-\-\-\-\-\->|
     |<\-\-\-\-\-\-\-\-\-\-\-\-\-\- Period \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\->|
.fi
.in

.\" FIXME It looks as though specifying sched_period as 0 means
.\"       "make sched_period the same as sched_deadline".
.\"       This needs to be documented.
3 つのデッドラインスケジューリングパラメーターは \fIsched_attr\fP 構造体の \fIsched_runtime\fP,
\fIsched_deadline\fP, \fIsched_period\fP フィールドに対応する。 これらのフィールドはナノ秒単位の値である。
\fIsched_period\fP に 0 が指定された場合 \fIsched_deadline\fP と同じ値になる。

カーネルでは以下の関係が成り立つことが求められる。

    sched_runtime <= sched_deadline <= sched_period

.\" See __checkparam_dl in kernel/sched/core.c
これに加えて、 現在の実装では、 すべてのパラメーター値は少なくとも 1024 (実装の粒度である 1 マイクロ秒よりも少しだけ大きな値) で 2^63
よりも小さくなければならない。 これらのチェックのいずれかが失敗すると、 \fBsched_setattr\fP(2) はエラー \fBEINVAL\fP
で失敗する。

CBS によりタスク間の干渉がないことが保証される。 指定された Runtime を超えて実行しようとしたスレッドは絞り込まれることになる。

デッドラインスケジューリングの保証がきちんと機能するためには、 カーネルは \fBSCHEDULING\fP スレッドの集合が指定された制約条件におさまらない
(スケジューリングできない) 状況を防止しなければならない。 そのため、カーネルは \fBSCHED_DEADLINE\fP
ポリシーと属性を設定、変更する際に、受け入れチェック (admittance test) を実行する。
この受け入れチェックは、変更が実行可能かを計算し、もし実行できないようであれば \fBsched_setattr\fP(2) はエラー \fBEBUSY\fP
で失敗する。

例えば、 使用率の合計が利用可能な合計 CPU 数以下である必要がある (ただし、必ずしも十分というわけではない)。 なお、 各スレッドは最大で
Period あたり Runtime だけ実行されることがあるので、 そのスレッドの使用率は Runtime を Period で割ったものとなる。

スレッドが \fBSCHED_DEADLINE\fP ポリシーに受け入れられた場合に保証を実現するため、 \fBSCHED_DEADLINE\fP
スレッドはシステムで (ユーザーが制御可能な) 最高優先度のスレッドとなる。 いずれかの \fBSCHED_DEADLINE\fP
スレッドが実行可能であれば、 他のポリシーでスケジューリングされているスレッドはすべて横取りされる。

\fBSCHED_DEADLINE\fP ポリシーでスケジューリングされているスレッドが \fBfork\fP(2) を呼び出すと、 そのスレッドで
reset\-on\-fork フラグがセットされている場合 (下記参照) を除き、 エラー \fBEAGAIN\fP で失敗する。

.\"
.\" FIXME Calling sched_getparam() on a SCHED_DEADLINE thread
.\"       fails with EINVAL, but sched_getscheduler() succeeds.
.\"       Is that intended? (Why?)
.\"
\fBSCHED_DEADLINE\fP スレッドが \fBsched_yield\fP(2) を呼び出すと、 現在のジョブが CPU
を明け渡し、新しい期間が開始するのを待つ。
.SS "SCHED_OTHER: Linux のデフォルトの時分割スケジューリング"
.\"
\fBSCHED_OTHER\fP は静的優先度 0 でのみ使用できる。 \fBSCHED_OTHER\fP は Linux 標準の時分割スケジューラで、
特別なリアルタイム機構を必要としていない全てのスレッドで使用される。 実行するスレッドは、静的優先度 0 のリストから、このリストの中だけで
決定される「動的な」優先度 (dynamic priority) に基いて決定される。 動的な優先度は (\fBnice\fP(2),
\fBsetpriority\fP(2), \fBsched_setattr\fP(2) により設定される) nice 値に基づいて決定されるもので、
単位時間毎に、スレッドが実行可能だが、スケジューラにより実行が拒否された 場合にインクリメントされる。 これにより、全ての \fBSCHED_OTHER\fP
スレッドでの公平性が保証される。
.SS "SCHED_BATCH: バッチプロセスのスケジューリング"
(Linux 2.6.16 以降)  \fBSCHED_BATCH\fP は静的優先度 0 でのみ使用できる。 このポリシーは (nice 値に基づく)
動的な優先度にしたがってスレッドの スケジューリングが行われるという点で、\fBSCHED_OTHER\fP に似ている。
異なるのは、このポリシーでは、スレッドが常に CPU に負荷のかかる (CPU\-intensive)  処理を行うと、スケジューラが仮定する点である。
スケジューラはスレッドを呼び起こす毎にそのスレッドにスケジューリング上の ペナルティを少し課し、その結果、このスレッドはスケジューリングの決定で
若干冷遇されるようになる。

.\" The following paragraph is drawn largely from the text that
.\" accompanied Ingo Molnar's patch for the implementation of
.\" SCHED_BATCH.
.\" commit b0a9499c3dd50d333e2aedb7e894873c58da3785
.\"
このポリシーは、非対話的な処理だがその nice 値を下げたくない処理や、 (処理のタスク間で) 余計なタスクの置き換えの原因とある対話的な処理なしで
確定的な (deterministic) スケジューリングポリシーを適用したい処理に 対して有効である。
.SS "SCHED_IDLE: 非常に優先度の低いジョブのスケジューリング"
(Linux 2.6.23 以降)  \fBSCHED_IDLE\fP は静的優先度 0 でのみ使用できる。 このポリシーではプロセスの nice
値はスケジューリングに影響を与えない。

.\"
非常に低い優先度でのジョブの実行を目的としたものである (非常に低い優先度とは、ポリシー \fBSCHED_OTHER\fP か \fBSCHED_BATCH\fP
での nice 値 +19 よりさらに低い優先度である)。
.SS 子プロセスでのスケジューリングポリシーのリセット
各スレッドには reset\-on\-fork スケジューリングフラグがある。 このフラグがセットされると、 \fBfork\fP(2)
で作成される子プロセスは特権スケジューリングポリシーを継承しない。 reset\-on\-fork フラグは以下のいずれかの方法でセットできる。
.IP * 3
\fBsched_setscheduler\fP(2) を呼び出す際に \fBSCHED_RESET_ON_FORK\fP フラグを \fIpolicy\fP
引き数に論理和で指定する (Linux 2.6.32 以降)。
.IP *
\fBsched_setattr\fP(2) を呼び出し際に \fIattr.sched_flags\fP に
\fBSCHED_FLAG_RESET_ON_FORK\fP フラグを指定する。
.PP
これらの 2 つの API で使用される定数は名前が違っている点に注意すること。 同様に reset\-on\-fork フラグの状態は
\fBsched_getscheduler\fP(2) と \fBsched_getattr\fP(2) を使って取得できる。

reset\-on\-fork 機能はメディア再生アプリケーションでの利用を意図したものである。 複数の子プロセスを作成することで、 アプリケーションは
\fBRLIMIT_RTTIME\fP リソース上限 (\fBgetrlimit\fP(2) を参照) を避けることができる。

より正確には、 reset\-on\-fork フラグがセットされた場合、それ以降に作成される子プロセスに以下のルールが適用される。
.IP * 3
呼び出したスレッドのスケジューリングポリシーが \fBSCHED_FIFO\fP か \fBSCHED_RR\fP の場合、子プロセスのポリシーは
\fBSCHED_OTHER\fP にリセットされる。
.IP *
子プロセスが負の nice 値を持っている場合、子プロセスの nice 値は 0 にリセットされる。
.PP
.\"
一度 reset\-on\-fork フラグが有効にされた後は、このフラグをリセットできるのは、スレッドが \fBCAP_SYS_NICE\fP
ケーパビリティを持つ場合だけである。このフラグは \fBfork\fP(2) で作成された子プロセスでは無効になる。
.SS 特権とリソース制限
2.6.12 より前のバージョンの Linux カーネルでは、 特権スレッド (\fBCAP_SYS_NICE\fP ケーパビリティを持つスレッド) だけが
0 以外の静的優先度を設定する (すなわち、リアルタイムスケジューリングポリシーを設定する) ことができる。 非特権スレッドができる変更は
\fBSCHED_OTHER\fP ポリシーを設定することだけであり、さらに、 この変更を行えるのは、 呼び出し元の実効ユーザー ID
がポリシーの変更対象スレッド (\fIpid\fP で指定されたスレッド) の実ユーザー ID か実効ユーザー ID と 一致する場合だけである。

\fBSCHED_DEADLINE\fP ポリシーを設定、変更するには、スレッドが特権 (\fBCAP_SYS_NICE\fP) を持っていなければならない。

Linux 2.6.12 以降では、リソース制限 \fBRLIMIT_RTPRIO\fP が定義されており、 スケジューリングポリシーが
\fBSCHED_RR\fP と \fBSCHED_FIFO\fP の場合の、非特権スレッドの静的優先度の上限を定めている。
スケジューリングポリシーと優先度を変更する際のルールは以下の通りである。
.IP * 3
非特権スレッドに 0 以外の \fBRLIMIT_RTPRIO\fP ソフトリミットが設定されている場合、
非特権スレッドはそのスレッドのスケジューリングポリシーと優先度を 変更できるが、優先度を現在の自身の優先度と \fBRLIMIT_RTPRIO\fP
ソフトリミットの大きい方よりも高い値に設定できないという制限が課される。
.IP *
\fBRLIMIT_RTPRIO\fP ソフトリミットが 0 の場合、優先度を下げるか、 リアルタイムでないポリシーへ切り替えるかの変更だけが許可される。
.IP *
ある非特権スレッドが別のスレッドに対してこれらの変更を行う際にも、 同じルールが適用される。変更を行えるのは、変更を行おうとするスレッド の実効ユーザー
ID が変更対象のスレッドの実ユーザー ID か実効ユーザー ID と 一致している場合に限られる。
.IP *
.\" commit c02aa73b1d18e43cfd79c2f193b225e84ca497c8
\fBSCHED_IDLE\fP ポリシーの場合には特別なルールが適用される。 2.6.39 より前の Linux
カーネルでは、このポリシーで動作する非特権スレッドは、 \fBRLIMIT_RTPRIO\fP
リソース上限の値に関わらず、自分のポリシーを変更することができない。 2.6.39 以降の Linux カーネルでは、非特権スレッドは、自分の nice
値が \fBRLIMIT_NICE\fP リソース上限 (\fBgetrlimit\fP(2) 参照)
で許可された範囲である限りは、自分のスケジューリングポリシーを \fBSCHED_BATCH\fP か \fBSCHED_NORMAL\fP
ポリシーに切り替えることができる。
.PP
特権スレッド (\fBCAP_SYS_NICE\fP ケーパビリティを持つスレッド) の場合、 \fBRLIMIT_RTPRIO\fP の制限は無視される;
古いカーネルと同じように、スケジューリングポリシーと優先度に対し 任意の変更を行うことができる。 \fBRLIMIT_RTPRIO\fP
に関するもっと詳しい情報は \fBgetrlimit\fP(2)  を参照のこと。
.SS "リアルタイムプロセスとデッドラインプロセスの CPU 使用量を制限する"
\fBSCHED_FIFO\fP, \fBSCHED_RR\fP, \fBSCHED_DEADLINE\fP でスケジューリングされる
スレッドが停止せずに無限ループに陥ると、 他の全てのより低い優先度のスレッドを永久に停止 (block) させてしまう。 Linux 2.6.25
より前では、 リアルタイムプロセスが暴走してしまい、システムが止まってしまうのを防止する唯一の方法は、 (コンソールで)
シェルをテスト対象のアプリケーションよりも高い静的優先度で実行することだけであった。 これによって期待通りに停止したり終了したりしないリアルタイム
アプリケーションを緊急終了させることが可能になる。

Linux 2.6.25 以降では、 暴走したリアルタイムプロセスやデッドラインプロセスを扱う別の方法が提供されている。 一つは
\fBRLIMIT_RTTIME\fP リソース上限を使ってリアルタイムプロセスが消費できる CPU 時間の上限を設定する方法である。 詳細は
\fBgetrlimit\fP(2) を参照。

Linux 2.6.25 以降では、 2 つの \fI/proc\fP ファイルを使って、リアルタイムでないプロセスが使用できる CPU
時間を一定量予約することができる。 この方法で CPU 時間をいくらか予約しておくことで、 CPU 時間が (例えば) root
シェルに割り当てられ、このシェルから暴走したプロセスを殺すことができる。 これらのファイルでは両方ともマイクロ秒で時間を指定する。
.TP 
\fI/proc/sys/kernel/sched_rt_period_us\fP
このファイルは、 CPU 時間 100% にあたるスケジューリング間隔を指定する。 このファイルの値として 1 から \fBINT_MAX\fP
を指定できる。 この値は実際の時間としては 1 マイクロ秒から約 35 分に相当する。 このファイルのデフォルト値は 1,000,000 (1 秒)
である。
.TP 
\fI/proc/sys/kernel/sched_rt_runtime_us\fP
このファイルの値は、 システム上のリアルタイムスケジューリングやデッドラインスケジューリングの全プロセスが使用できる「期間」を指定する。
このファイルの値として \-1 から \fBINT_MAX\fP\-1 を指定できる。 \-1 を指定すると、実行時間 (runtime) はスケジューリング間隔
(period) と同じになる。 つまり、 CPU 時間はリアルタイムでないプロセスには確保されない (カーネル 2.6.25 より前の Linux
の動作である)。 このファイルのデフォルト値は 950,000 (0.95 秒) である。 これは CPU 時間の 5%
がリアルタイムやデッドラインスケジューリングポリシー以外で動作するプロセスに確保されるという意味する。
.PP
.SS "応答時間 (response time)"
.\" as described in
.\" .BR request_irq (9).
I/O 待ちで停止したより高い優先度のスレッドは再びスケジューリングされる 前にいくらかの応答時間がかかる。デバイスドライバーを書く場合には "slow
interrupt" 割り込みハンドラーを使用することで この応答時間を劇的に減少させることができる。
.SS その他
子プロセスは \fBfork\fP(2)  の際に親プロセスのスケジューリングポリシーとパラメーターを継承する。 \fBexecve\fP(2)
の前後で、スケジューリングポリシーとパラメーターは保持される。

リアルタイムプロセスは大抵、ページングの待ち時間を避けるために \fBmlock\fP(2)  や \fBmlockall\fP(2)
を使ってメモリーロックをしなければならない。
.SH 注意
.PP
もともとは、標準の Linux は一般目的のオペレーティングシステムとして 設計されており、バックグラウンドプロセスや対話的アプリケーション、
リアルタイム性の要求が厳しくないリアルタイムアプリケーション (普通はタイミングの応答期限 (deadline) を満たす必要があるアプリケーション)
を扱うことができた。 Linux カーネル 2.6 では、 カーネルのプリエンプション (タスクの置き換え) が可能であり、 新たに導入された O(1)
スケジューラにより、 アクティブなタスクの数に関わらずスケジューリングに必要な時間は 固定で確定的 (deterministic)
であることが保証されている。 それにも関わらず、カーネル 2.6.17 までは 真のリアルタイムコンピューティングは実現できなかった。
.SS "本流の Linux カーネルでのリアルタイム機能"
.\" FIXME . Probably this text will need some minor tweaking
.\" by about the time of 2.6.30; ask Carsten Emde about this then.
カーネル 2.6.18 から現在まで、 Linux は徐々にリアルタイム機能を備えつつ
あるが、 これらの機能のほとんどは、 Ingo Molnar, Thomas Gleixner,
Steven Rostedt らによって開発された、 以前の \fIrealtime\-preempt\fP パッチ
からのものである。 これらのパッチが本流のカーネルに完全にマージされるま
では (マージの完了はカーネル 2.6.30 あたりの予定)、 最高のリアルタイム
性能を達成するには realtime\-preempt パッチを 組み込まなければならない。
これらのパッチは
.in +4n
.nf

patch\-\fIkernelversion\fP\-rt\fIpatchversion\fP
.fi
.in
.PP
という名前で、
.UR http://www.kernel.org\:/pub\:/linux\:/kernel\:/projects\:/rt/
.UE
からダウンロードできる。

このパッチが適用されず、かつパッチの内容の本流のカーネルへのマージが 完了するまでは、カーネルの設定では \fBCONFIG_PREEMPT_NONE\fP,
\fBCONFIG_PREEMPT_VOLUNTARY\fP, \fBCONFIG_PREEMPT_DESKTOP\fP の 3つのプリエンプションクラス
(preemption class) だけが提供される。 これらのクラスでは、最悪の場合のスケジューリング遅延がそれぞれ
全く減らない、いくらか減る、かなり減る。

パッチが適用された場合、またはパッチの内容の本流のカーネルへのマージが 完了した後では、上記に加えて設定項目として
\fBCONFIG_PREEMPT_RT\fP が利用可能になる。この項目を選択すると、 Linux は通常のリアルタイムオペレーティングシステムに変身する。
この場合には、 FIFO と RR のスケジューリングポリシーは、 真のリアルタイム優先度を持つスレッドを最悪の場合のスケジューリング遅延が
最小となる環境で動作させるために使われることになる。
.SH 関連項目
.ad l
.nh
\fBchrt\fP(1), \fBtaskset\fP(1), \fBgetpriority\fP(2), \fBmlock\fP(2), \fBmlockall\fP(2),
\fBmunlock\fP(2), \fBmunlockall\fP(2), \fBnice\fP(2), \fBsched_get_priority_max\fP(2),
\fBsched_get_priority_min\fP(2), \fBsched_getscheduler\fP(2),
\fBsched_getaffinity\fP(2), \fBsched_getparam\fP(2), \fBsched_rr_get_interval\fP(2),
\fBsched_setaffinity\fP(2), \fBsched_setscheduler\fP(2), \fBsched_setparam\fP(2),
\fBsched_yield\fP(2), \fBsetpriority\fP(2), \fBpthread_getaffinity_np\fP(3),
\fBpthread_setaffinity_np\fP(3), \fBsched_getcpu\fP(3), \fBcapabilities\fP(7),
\fBcpuset\fP(7)
.ad
.PP
\fIProgramming for the real world \- POSIX.4\fP by Bill O. Gallmeister, O'Reilly
& Associates, Inc., ISBN 1\-56592\-074\-0.
.PP
Linux カーネルソースのファイル \fIDocumentation/scheduler/sched\-deadline.txt\fP,
\fIDocumentation/scheduler/sched\-rt\-group.txt\fP,
\fIDocumentation/scheduler/sched\-design\-CFS.txt\fP,
\fIDocumentation/scheduler/sched\-nice\-design.txt\fP
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.79 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
