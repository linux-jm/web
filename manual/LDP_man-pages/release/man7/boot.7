.\" Written by Oron Peled <oron@actcom.co.il>.
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" May be distributed subject to the GPL.
.\" %%%LICENSE_END
.\"
.\" I tried to be as much generic in the description as possible:
.\" - General boot sequence is applicable to almost any
.\" OS/Machine (DOS/PC, Linux/PC, Solaris/SPARC, CMS/S390)
.\" - kernel and init(1) is applicable to almost any UNIX/Linux
.\" - boot scripts are applicable to SYSV-R4 based UNIX/Linux
.\"
.\" Modified 2004-11-03 patch from Martin Schulze <joey@infodrom.org>
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 2002 NAKANO Takeo all rights reserved.
.\" Translated 2002-08-07, NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\" Updated 2005-02-21, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\"
.TH BOOT 7 2010\-09\-19 Linux "Linux Programmer's Manual"
.SH 名前
boot\-scripts \- ブートシーケンスの一般的な解説
.SH 説明
.LP
細かいところはシステムによって異なるが、大まかに言うと、 ブートシーケンスは以下の段階に分けられる: (1) ハードウェアのブート (2)
オペレーティングシステム (OS) ローダー (3) カーネルの起動 (4) init と inittab (5) ブートスクリプト
.SS ハードウェアのブート
電源投入やハードリセットが行われると、 ROM (通常は PROM) に保存されているプログラムに制御が渡される。 PC ではこのプログラムは通常
\fBBIOS\fP と呼ばれる。

普通このプログラムは、まずマシンの基本的な自己診断を行い、
不揮発性メモリーにアクセスして各種のパラメーターを読み込む。
PC では、このメモリーは電池によってバックアップされている CMOS メモリーである。
そのため \fBCMOS\fP と呼ばれることが多い。
しかし PC 以外の世界では、通常 \fBnvram\fP (nonvolatile ram) と呼ばれている。

nvram に保存されているパラメーターはシステムによって異なる。 しかし、ハードウェアブートプログラムは、少なくとも、
ブートデバイスがどれであるか、もしくは ブートデバイスとして探索するデバイスがどれであるかを 知っていなければならない。

ハードウェアブートのシーケンスは、次にブートデバイスにアクセスし、 ブートデバイスのあらかじめ決まった場所に置かれている OS
ローダーをロードし、制御を渡す。
.TP 
注意:
ここではネットワークブートについては触れない。 この話題について調査したい読者は、 DHCP, TFTP, PXE, Etherboot
等について調べてみるとよい。
.SS "OS ローダー"
PC では、OS ローダーはブートデバイスの先頭セクタに置かれる。 これは \fBMBR\fP (Master Boot Record) と呼ばれる。

様々な制約のため、 ほとんどのシステムで第一ローダーは非常に簡単な機能しか持っていない。 PC 以外のシステムでも、
サイズの制限やローダーの機能などにある程度の制限は存在する。 しかしパーティションテーブルを含めて 512 バイトという PC の MBR では、OS
ローダーの全機能をここに押し込むのはまず不可能だ。

したがって大抵の OS では、第一ローダーは第二ローダーを呼ぶようになっており、
後者はあらかじめ指定されたディスクパーティションに置けるようになっている。

Linux における OS ローダーは、ふつう \fBlilo\fP(8)  か \fBgrub\fP(8)
である。両者とも第二ローダーとしてインストールすることもでき (この場合 DOS がインストールした MBR がこれらを指すようにする)、
また第一・第二ローダーの両方としてインストールすることもできる。 後者の場合向けに、両者は特別な MBR イメージを提供している。
これには第二ローダーをルートパーティションからロードするような ブートストラップコードが含まれている。

OS ローダーの主な仕事は、カーネルのディスク上の位置を特定し、 ロードして起動することである。ほとんどの OS ローダーは、
対話モードで使用することもでき、追加のパラメーターをカーネルに渡したり、 デフォルトとは別のカーネルを指定したりすることができる
(例えば、最後にコンパイルしたカーネルが機能しなかった時に バックアップのカーネルを指定して起動するといったことができる)。
.SS カーネルの起動
カーネルはロードされると、デバイスを (ドライバによって)  初期化し、スワッパを起動し (最近の Linux カーネルでは、 スワッパは kswapd
という「カーネルプロセス」になる)、 ルートファイルシステム (/) をマウントする。

カーネルに渡すことのできるパラメーターのいくつかは、 これらの動作に関係する。 (例えばデフォルトのルートファイルシステムを変更したりできる)。
Linux カーネルパラメーターに関するより詳しい情報は \fBbootparam\fP(7)  を読んでほしい。

これらが済んではじめて、 カーネルは最初の (ユーザーランドの) プロセスを生成し、 番号 1 を与える。このプロセスは \fI/sbin/init\fP
プログラムを実行する。 カーネルによって解釈されていないパラメーターはすべて \fI/sbin/init\fP に渡される。
.SS "init と inittab"
init は、起動するとまず \fI/etc/inittab\fP を読み、その後の行動に関する情報を得る。 このファイルは \fIランレベル\fP
によってどのような動作を行うべきであるかを定義する。

これによってシステム管理者の管理が楽になる。各\fIランレベル\fPは提供する
サービスの集合に対応する (例えば、 \fBS\fP は \fIシングルユーザー\fP、 \fB2\fP で
は大抵のネットワークサービスを起動する)。
システム管理者は、 \fBinit\fP(1) を用いて現在のランレベルを変更でき、
\fBrunlevel\fP(8) によって現在のランレベルを確認できる。

しかし、このファイルを編集して個々のサービスを管理するのは不便なので、 inittab は単にスクリプトの集合に対するブートストラップになっている。
実際の個々のサービスの起動や停止は、これらのスクリプトで行う。
.SS ブートスクリプト
.TP 
注意:
以下の説明は System V Release 4 をベースとしたシステムに関するものである。 現在の大抵の商用 UNIX システム (Solaris,
HP\-UX, Irix, Tru64) や、 メジャーな Linux ディストリビューション (Red Hat, Debian, Mandriva,
SUSE, Ubuntu) はこれをベースにしたものである。 システムによっては、ブートスクリプトの機構が いくらか異なることもある
(Slackware Linux, FreeBSD, OpenBSD など)。
.LP
管理すべき各サービス (メール、nfs サーバ、cron などなど)  それぞれに対して、ブートスクリプトがひとつずつ特定のディレクトリ (ほとんどの
Linux で \fI/etc/init.d\fP)  に配置される。これらのスクリプトは、 それぞれ引数としてひとつの単語を取る。"start"
が指定されると そのサービスを起動し、"stop" が指定されるとサービスを停止する。 スクリプトは他の「便利な」引数を取ってもよい (例えば
"restart" で停止・起動を順番に行ったり、"status" でサービスの状態を表示するなど)。 スクリプトを引数なしで実行すると、
指定できる引数の一覧が表示される。
.SS 順序づけディレクトリ
あるランレベルで、特定のスクリプトを指定した順序で実行させるため、 \fI順序付けディレクトリ (sequencing directory)\fP
という仕組みが存在する。 これらはふつう \fI/etc/rc[0\-6S].d\fP である。各ディレクトリの内部には、 \fI/etc/init.d\fP
ディレクトリに置かれたスクリプトへのリンク (ふつうはシンボリックリンク)  が置かれる。

第一スクリプト (通常 \fI/etc/rc\fP)  は \fBinittab\fP(5)  から呼ばれ、
順序付けディレクトリに置かれたリンク経由で各サービススクリプトを呼び出す。 名前が \(aqS\(aq ではじまるリンクは "start"
という引数をつけて呼び出され (すなわちサービスが起動し)。名前が \(aqK\(aq ではじまるリンクは "stop" という引数をつけて呼び出される
(すなわちサービスが停止する)。

同じランレベルの内部での起動や停止の順序を規定するために、 リンクの名前には順序を示す数字が含まれる。 また、名前をわかりやすくするため、
リンク名の末尾には対応するサービスの名前がつけられる。 例えば、 \fI/etc/rc2.d/S80sendmail\fP というリンクは、sendmail
サービスをランレベル 2 において起動する。 これは、 \fI/etc/rc2.d/S12syslog\fP よりも後に、また
\fI/etc/rc2.d/S90xfs\fP よりも先に実行される。

ブートの順序とランレベルを管理するには、 これらのリンクを管理しなければならない。 しかし多くの Linux ディストリビューションでは、
これらの作業を手助けしてくれるツールが存在する (例えば \fBchkconfig\fP(8)  など)。
.SS ブートの設定
デーモンの起動時には、 コマンドラインオプションやパラメーターを指定できるのが普通である。
システム管理者がこれらのパラメーターを変更したいと思ったときに、 ブートスクリプトそのものを編集しなくてもすむよう、
設定ファイルが用いられる。これらは特定のディレクトリ (Red Hat システムでは \fI/etc/sysconfig\fP)
に置かれ、ブートスクリプトから参照される。

古い UNIX システムでは、これらのファイルには デーモンに与える実際のコマンドラインオプションが書かれていた。 しかし最近の Linux システム
(や HP\-UX) では、 これらのファイルには単にシェル変数が書かれているだけである。 \fI/etc/init.d\fP
に置かれたブートスクリプトは、これらの設定ファイルを \fBsource\fP し、その変数の値を用いる。
.SH ファイル
.LP
\fI/etc/init.d/\fP, \fI/etc/rc[S0\-6].d/\fP, \fI/etc/sysconfig/\fP
.SH 関連項目
\fBinittab\fP(5), \fBbootparam\fP(7), \fBinit\fP(1), \fBrunlevel\fP(8), \fBshutdown\fP(8)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.79 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
