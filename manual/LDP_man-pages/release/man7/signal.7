.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\" and Copyright (c) 2002, 2006, 2020 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" and Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 17:34:08 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Sun Jan  7 01:41:27 1996 by Andries Brouwer (aeb@cwi.nl)
.\" Modified Sun Apr 14 12:02:29 1996 by Andries Brouwer (aeb@cwi.nl)
.\" Modified Sat Nov 13 16:28:23 1999 by Andries Brouwer (aeb@cwi.nl)
.\" Modified 10 Apr 2002, by Michael Kerrisk <mtk.manpages@gmail.com>
.\" Modified  7 Jun 2002, by Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Added information on real-time signals
.\" Modified 13 Jun 2002, by Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Noted that SIGSTKFLT is in fact unused
.\" 2004-12-03, Modified mtk, added notes on RLIMIT_SIGPENDING
.\" 2006-04-24, mtk, Added text on changing signal dispositions,
.\"		signal mask, and pending signals.
.\" 2008-07-04, mtk:
.\"     Added section on system call restarting (SA_RESTART)
.\"     Added section on stop/cont signals interrupting syscalls.
.\" 2008-10-05, mtk: various additions
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 1997 Takafumi Naka
.\"     and 2005-2008 Akihiro MOTOKI
.\"         all rights reserved.
.\" Translated 1997-02-13, Takafumi Naka <takafumi@yk.rim.or.jp>
.\" Modified 1999-06-22, Tatsuo SEKINE <tsekine@isoternet.org>
.\" Modified 1999-07-18, Takafumi Naka <takafumi@yk.rim.or.jp>
.\" Modified 1999-12-06, NAKANO Takeo <nakano@apm.seikei.ac.jp>, LDP v1.28
.\" Updated 2003-07-24, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2005-02-23, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2006-07-28, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v2.36
.\" Updated 2007-05-28, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v2.50
.\" Updated 2007-09-08, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v2.64
.\" Updated 2008-08-11, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v3.05
.\" Updated 2008-11-21, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v3.13
.\" Updated 2010-04-10, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v3.24
.\" Updated 2012-05-29, Akihiro MOTOKI <amotoki@gmail.com>
.\" Updated 2013-03-26, Akihiro MOTOKI <amotoki@gmail.com>
.\"
.TH SIGNAL 7 2020\-12\-21 Linux "Linux Programmer's Manual"
.SH 名前
signal \- シグナルの概要
.SH 説明
Linux は POSIX 信頼シグナル (reliable signal; 以後 "標準シグナル"と表記)  と POSIX
リアルタイムシグナルの両方に対応している。
.SS シグナル処理方法
シグナルはそれぞれ現在の「処理方法 (disposition)」を保持しており、 この処理方法によりシグナルが配送された際にプロセスが
どのような振舞いをするかが決まる。
.PP
後述の表の "動作" の欄のエントリーは各シグナルのデフォルトの 処理方法を示しており、以下のような意味を持つ。
.IP Term
デフォルトの動作はプロセス終了。
.IP Ign
デフォルトの動作はこのシグナルの無視。
.IP Core
デフォルトの動作はプロセス終了とコアダンプ出力 (\fBcore\fP(5)  参照)。
.IP Stop
デフォルトの動作はプロセスの一時停止。
.IP Cont
デフォルトの動作は、プロセスが停止中の場合にその実行の再開。
.PP
プロセスは、 \fBsigaction\fP(2)  や \fBsignal\fP(2)  を使って、シグナルの処理方法を変更することができる
(\fBsignal\fP(2)  の方がシグナルハンドラーを設定する際の移植性が低い; 詳細は \fBsignal\fP(2)  を参照)。
シグナルの配送時に起こる動作として プロセスが選択できるのは、次のいずれか一つである。 デフォルトの動作を実行する、シグナルを無視する、
\fIシグナルハンドラー (signal handler)\fP でシグナルを捕捉する。シグナルハンドラーとは、シグナル配送時に
自動的に起動されるプログラマ定義の関数である。
.PP
デフォルトでは、シグナルハンドラーは通常のプロセスのスタック上で起動される。 シグナルハンドラーが代替スタック (alternate stack)
を使用するように設定する こともできる。代替スタックを使用するように設定する方法と、どのような際に 代替スタックが役に立つかについての議論については
\fBsigaltstack\fP(2) を参照のこと。
.PP
シグナルの処理方法はプロセス単位の属性である。 マルチスレッドのアプリケーションでは、あるシグナルの処理方法は 全てのスレッドで同じである。
.PP
\fBfork\fP(2) 経由で作成された子プロセスは、親プロセスのシグナルの処理方法の コピーを継承する。 \fBexecve\fP(2)
の前後で、ハンドラーが設定されているシグナルの処理方法はデフォルトにリセットされ、 無視が設定されているシグナルの処理方法は変更されずそのままとなる。
.SS シグナルの送信
以下のシステムコールとライブラリ関数を使って、 呼び出し者はシグナルを送信することができる。
.TP 
\fBraise\fP(3)
呼び出したスレッドにシグナルを送る。
.TP 
\fBkill\fP(2)
指定されたプロセスや、指定されたプロセスグループの全メンバー、 システムの全プロセスにシグナルを送る。
.TP 
\fBpidfd_send_signal\fP(2)
Sends a signal to a process identified by a PID file descriptor.
.TP 
\fBkillpg\fP(3)
指定されたプロセスグループの全メンバーにシグナルを送る。
.TP 
\fBpthread_kill\fP(3)
呼び出し者と同じプロセス内の指定された POSIX スレッドにシグナルを送る。
.TP 
\fBtgkill\fP(2)
指定されたプロセス内の指定されたスレッドにシグナルを送る (このシステムコールを使って \fBpthread_kill\fP(3)  は実装されている)。
.TP 
\fBsigqueue\fP(3)
指定されたプロセスに付属データとともにリアルタイムシグナルを送る。
.SS シグナルが捕捉されるのを待つ
以下のシステムコールを使って、シグナルが捕捉されるまで 呼び出したスレッドの実行を中断 (suspend) することができる
(ハンドラーが設定されていないシグナルによりそのプロセスが終了した 場合にも実行の停止は終了する)。
.TP 
\fBpause\fP(2)
何かシグナルが捕捉されるまで実行を停止する。
.TP 
\fBsigsuspend\fP(2)
.\"
一時的にシグナルマスク (下記参照) を変更し、 マスクされていないシグナルのいずれかが捕捉されるまで 実行を中断する。
.SS シグナルの同期受信
シグナルハンドラー経由でシグナルを非同期 (asynchronously) で捕捉する以外にも、 シグナルを同期 (synchronously)
して受け付けることもできる。 同期して受け付けるとは、シグナルが配送されるまで実行を停止 (block)
するということである。シグナルを受け付けた際に、カーネルは そのシグナルに関する情報を呼び出し者に返す。 これを行う一般的な方法が二つある。
.IP * 2
\fBsigwaitinfo\fP(2), \fBsigtimedwait\fP(2), \fBsigwait\fP(3)
は、指定されたシグナル集合のシグナルの一つが配送されるまで実行を中断する。 どのシステムコールや関数でも、配送されたシグナルに関する情報が返される。
.IP *
\fBsignalfd\fP(2)  が返すファイルディスクリプターを使うと、呼び出し元に配送された シグナルに関する情報を読み出すことができる。
このファイルディスクリプターからの \fBread\fP(2)  は、 \fBsignalfd\fP(2)
の呼び出し時に指定されたシグナル集合のシグナルの一つが呼び出し元に 配送されるまで停止 (block) する。 \fBread\fP(2)
が返すバッファーにはシグナルに関する情報を格納した構造体が入っている。
.SS シグナルマスクと処理待ちシグナル
シグナルは \fIブロック (block)\fP されることがある。ブロックされると、そのシグナルは その後ブロックを解除されるまで配送されなくなる。
シグナルが生成されてから配送されるまでの間、そのシグナルは \fI処理待ち (pending)\fP であると呼ばれる。
.PP
プロセス内の各スレッドは、それぞれ独立な \fIシグナルマスク (signal mask)\fP を持つ。シグナルマスクはそのスレッドが現在ブロックしている
シグナル集合を示すものである。 スレッドは、 \fBpthread_sigmask\fP(3)  を使って自分のシグナルマスクを操作できる。
伝統的なシングルスレッドのアプリケーションでは、 \fBsigprocmask\fP(2)  を使って、シグナルマスクを操作できる。
.PP
\fBfork\fP(2)  経由で作成された子プロセスは親プロセスのシグナルマスクのコピーを継承する。 \fBexecve\fP(2)
の前後でシグナルマスクは保持される。
.PP
A signal may be process\-directed or thread\-directed.  A process\-directed
signal is one that is targeted at (and thus pending for)  the process as a
whole.  A signal may be process\-directed because it was generated by the
kernel for reasons other than a hardware exception, or because it was sent
using \fBkill\fP(2)  or \fBsigqueue\fP(3).  A thread\-directed signal is one that
is targeted at a specific thread.  A signal may be thread\-directed because
it was generated as a consequence of executing a specific machine\-language
instruction that triggered a hardware exception (e.g., \fBSIGSEGV\fP for an
invalid memory access, or \fBSIGFPE\fP for a math error), or because it was
targeted at a specific thread using interfaces such as \fBtgkill\fP(2)  or
\fBpthread_kill\fP(3).
.PP
.\" Joseph C. Sible notes:
.\" On Linux, if the main thread has the signal unblocked, then the kernel
.\" will always deliver the signal there, citing this kernel code
.\"
.\"     Per this comment in kernel/signal.c since time immemorial:
.\"
.\"     /*
.\"     * Now find a thread we can wake up to take the signal off the queue.
.\"     *
.\"     * If the main thread wants the signal, it gets first crack.
.\"     * Probably the least surprising to the average bear.
.\"     */
.\"
.\" But this does not mean the signal will be delivered only in the
.\" main thread, since if a handler is already executing in the main thread
.\" (and thus the signal is blocked in that thread), then a further
.\" might be delivered in a different thread.
.\"
A process\-directed signal may be delivered to any one of the threads that
does not currently have the signal blocked.  If more than one of the threads
has the signal unblocked, then the kernel chooses an arbitrary thread to
which to deliver the signal.
.PP
スレッドは、 \fBsigpending\fP(2)  を使って、現在処理待ちのシグナル集合を取得することができる。
この集合は、プロセス宛ての処理待ちシグナルと 呼び出したスレッド宛てのシグナルの両方から構成される。
.PP
.\"
\fBfork\fP(2)  経由で作成された子プロセスでは、処理待ちのシグナル集合は空の集合で初期化される。 \fBexecve\fP(2)
の前後で、処理待ちのシグナル集合は保持される。
.SS "Execution of signal handlers"
Whenever there is a transition from kernel\-mode to user\-mode execution
(e.g., on return from a system call or scheduling of a thread onto the CPU),
the kernel checks whether there is a pending unblocked signal for which the
process has established a signal handler.  If there is such a pending
signal, the following steps occur:
.IP 1. 3
The kernel performs the necessary preparatory steps for execution of the
signal handler:
.RS
.IP a) 3
The signal is removed from the set of pending signals.
.IP b)
If the signal handler was installed by a call to \fBsigaction\fP(2)  that
specified the \fBSA_ONSTACK\fP flag and the thread has defined an alternate
signal stack (using \fBsigaltstack\fP(2)), then that stack is installed.
.IP c)
Various pieces of signal\-related context are saved into a special frame that
is created on the stack.  The saved information includes:
.RS
.IP + 2
the program counter register (i.e., the address of the next instruction in
the main program that should be executed when the signal handler returns);
.IP +
architecture\-specific register state required for resuming the interrupted
program;
.IP +
the thread's current signal mask;
.IP +
the thread's alternate signal stack settings.
.RE
.IP
(If the signal handler was installed using the \fBsigaction\fP(2)
\fBSA_SIGINFO\fP flag, then the above information is accessible via the
\fIucontext_t\fP object that is pointed to by the third argument of the signal
handler.)
.IP d)
Any signals specified in \fIact\->sa_mask\fP when registering the handler
with \fBsigprocmask\fP(2)  are added to the thread's signal mask.  The signal
being delivered is also added to the signal mask, unless \fBSA_NODEFER\fP was
specified when registering the handler.  These signals are thus blocked
while the handler executes.
.RE
.IP 2.
The kernel constructs a frame for the signal handler on the stack.  The
kernel sets the program counter for the thread to point to the first
instruction of the signal handler function, and configures the return
address for that function to point to a piece of user\-space code known as
the signal trampoline (described in \fBsigreturn\fP(2)).
.IP 3.
The kernel passes control back to user\-space, where execution commences at
the start of the signal handler function.
.IP 4.
When the signal handler returns, control passes to the signal trampoline
code.
.IP 5.
The signal trampoline calls \fBsigreturn\fP(2), a system call that uses the
information in the stack frame created in step 1 to restore the thread to
its state before the signal handler was called.  The thread's signal mask
and alternate signal stack settings are restored as part of this procedure.
Upon completion of the call to \fBsigreturn\fP(2), the kernel transfers control
back to user space, and the thread recommences execution at the point where
it was interrupted by the signal handler.
.PP
Note that if the signal handler does not return (e.g., control is
transferred out of the handler using \fBsiglongjmp\fP(3), or the handler
executes a new program with \fBexecve\fP(2)), then the final step is not
performed.  In particular, in such scenarios it is the programmer's
responsibility to restore the state of the signal mask (using
\fBsigprocmask\fP(2)), if it is desired to unblock the signals that were
blocked on entry to the signal handler.  (Note that \fBsiglongjmp\fP(3)  may or
may not restore the signal mask, depending on the \fIsavesigs\fP value that was
specified in the corresponding call to \fBsigsetjmp\fP(3).)
.PP
.\"
From the kernel's point of view, execution of the signal handler code is
exactly the same as the execution of any other user\-space code.  That is to
say, the kernel does not record any special state information indicating
that the thread is currently excuting inside a signal handler.  All
necessary state information is maintained in user\-space registers and the
user\-space stack.  The depth to which nested signal handlers may be invoked
is thus limited only by the user\-space stack (and sensible software
design!).
.SS 標準シグナル
Linux supports the standard signals listed below.  The second column of the
table indicates which standard (if any)  specified the signal: "P1990"
indicates that the signal is described in the original POSIX.1\-1990
standard; "P2001" indicates that the signal was added in SUSv2 and
POSIX.1\-2001.
.TS
l c c l
____
lB c c l.
シグナル	標準	動作	コメント
SIGABRT	P1990	Core	\fBabort\fP(3) からの中断 (Abort) シグナル
SIGALRM	P1990	Term	\fBalarm\fP(2) からのタイマーシグナル
SIGBUS	P2001	Core	バスエラー (不正なメモリーアクセス)
SIGCHLD	P1990	Ign	子プロセスの一時停止 (stop) または終了
SIGCLD	\-	Ign	\fBSIGCHLD\fP と同義
SIGCONT	P1990	Cont	一時停止 (stop) からの再開
SIGEMT	\-	Term	Emulator trap
SIGFPE	P1990	Core	浮動小数点例外
SIGHUP	P1990	Term	制御端末(controlling terminal)のハングアップ検出、
			または制御しているプロセスの死
SIGILL	P1990	Core	不正な命令
SIGINFO	\-		\fBSIGPWR\fP と同義
SIGINT	P1990	Term	キーボードからの割り込み (Interrupt)
SIGIO	\-	Term	入出力が可能になった (4.2BSD)
SIGIOT	\-	Core	IOT トラップ。 \fBSIGABRT\fP と同義
SIGKILL	P1990	Term	Kill シグナル
SIGLOST	\-	Term	ファイルロックが失われた (未使用)
SIGPIPE	P1990	Term	パイプ破壊:
			readers; see \fBpipe\fP(7)
SIGPOLL	P2001	Term	ポーリング可能なイベント (Sys V);
			\fBSIGIO\fP と同義
SIGPROF	P2001	Term	profiling タイマーの時間切れ
SIGPWR	\-	Term	電源喪失 (Power failure) (System V)
SIGQUIT	P1990	Core	キーボードによる中止 (Quit)
SIGSEGV	P1990	Core	不正なメモリー参照
SIGSTKFLT	\-	Term	数値演算プロセッサにおけるスタックフォルト (未使用)
SIGSTOP	P1990	Stop	プロセスの一時停止 (stop)
SIGTSTP	P1990	Stop	端末より入力された一時停止 (stop)
SIGSYS	P2001	Core	Bad system call (SVr4);
			see also \fBseccomp\fP(2)
SIGTERM	P1990	Term	終了 (termination) シグナル
SIGTRAP	P2001	Core	トレース/ブレークポイント トラップ
SIGTTIN	P1990	Stop	バックグランドプロセスの端末入力
SIGTTOU	P1990	Stop	バックグランドプロセスの端末出力
SIGUNUSED	\-	Core	\fBSIGSYS\fP と同義
SIGURG	P2001	Ign	ソケットの緊急事態 (urgent condition) (4.2BSD)
SIGUSR1	P1990	Term	ユーザー定義シグナル 1
SIGUSR2	P1990	Term	ユーザー定義シグナル 2
SIGVTALRM	P2001	Term	仮想アラームクロック (4.2BSD)
SIGXCPU	P2001	Core	CPU時間制限超過 (4.2BSD);
			see \fBsetrlimit\fP(2)
SIGXFSZ	P2001	Core	ファイルサイズ制限の超過 (4.2BSD);
			see \fBsetrlimit\fP(2)
SIGWINCH	\-	Ign	ウィンドウ リサイズ シグナル (4.3BSD, Sun)
.TE
.PP
シグナル \fBSIGKILL\fP と \fBSIGSTOP\fP はキャッチ、ブロック、無視できない。
.PP
Linux 2.2 以前では、 \fBSIGSYS\fP, \fBSIGXCPU\fP, \fBSIGXFSZ\fP および SPARC と MIPS
以外のアーキテクチャーでの \fBSIGBUS\fP のデフォルトの振る舞いは (コアダンプ出力なしの) プロセス終了であった。 (他の UNIX
システムにも \fBSIGXCPU\fP と \fBSIGXFSZ\fP のデフォルトの動作がコアダンプなしのプロセス終了のものがある。)  Linux 2.4
では、POSIX.1\-2001 での要求仕様に準拠して、 これらのシグナルで、プロセスを終了させ、コアダンプを出力する ようになっている。
.PP
\fBSIGEMT\fP は POSIX.1\-2001 に規定されていないが、 その他の多くの UNIX システムに存在する。
デフォルトの動作は多くの場合、コアダンプ出力を伴うプロセスの終了である。
.PP
\fBSIGPWR\fP は (POSIX.1\-2001 に規定されていないが) このシグナルが存在する 他の UNIX
システムでは多くの場合、デフォルト動作は無視である。
.PP
.\"
\fBSIGIO\fP は (POSIX.1\-2001 に規定されていないが) いくつかの他の UNIX システムでは デフォルト動作は無視である。
.SS "Queueing and delivery semantics for standard signals"
If multiple standard signals are pending for a process, the order in which
the signals are delivered is unspecified.
.PP
.\"
Standard signals do not queue.  If multiple instances of a standard signal
are generated while that signal is blocked, then only one instance of the
signal is marked as pending (and the signal will be delivered just once when
it is unblocked).  In the case where a standard signal is already pending,
the \fIsiginfo_t\fP structure (see \fBsigaction\fP(2))  associated with that
signal is not overwritten on arrival of subsequent instances of the same
signal.  Thus, the process will receive the information associated with the
first instance of the signal.
.SS "Signal numbering for standard signals"
The numeric value for each signal is given in the table below.  As shown in
the table, many signals have different numeric values on different
architectures.  The first numeric value in each table row shows the signal
number on x86, ARM, and most other architectures; the second value is for
Alpha and SPARC; the third is for MIPS; and the last is for PARISC.  A dash
(\-) denotes that a signal is absent on the corresponding architecture.
.TS
l c c c c l
l c c c c l
______
lB c c c c l.
シグナル	x86/ARM	Alpha/	MIPS	PARISC	Notes
	most others	SPARC
SIGHUP	\01	\01	\01	\01
SIGINT	\02	\02	\02	\02
SIGQUIT	\03	\03	\03	\03
SIGILL	\04	\04	\04	\04
SIGTRAP	\05	\05	\05	\05
SIGABRT	\06	\06	\06	\06
SIGIOT	\06	\06	\06	\06
SIGBUS	\07	10	10	10
SIGEMT	\-	\07	\07	\-
SIGFPE	\08	\08	\08	\08
SIGKILL	\09	\09	\09	\09
SIGUSR1	10	30	16	16
SIGSEGV	11	11	11	11
SIGUSR2	12	31	17	17
SIGPIPE	13	13	13	13
SIGALRM	14	14	14	14
SIGTERM	15	15	15	15
SIGSTKFLT	16	\-	\-	\07
SIGCHLD	17	20	18	18
SIGCLD	\-	\-	18	\-
SIGCONT	18	19	25	26
SIGSTOP	19	17	23	24
SIGTSTP	20	18	24	25
SIGTTIN	21	21	26	27
SIGTTOU	22	22	27	28
SIGURG	23	16	21	29
SIGXCPU	24	24	30	12
SIGXFSZ	25	25	31	30
SIGVTALRM	26	26	28	20
SIGPROF	27	27	29	21
SIGWINCH	28	28	20	23
SIGIO	29	23	22	22
SIGPOLL					Same as SIGIO
SIGPWR	30	29/\-	19	19
SIGINFO	\-	29/\-	\-	\-
SIGLOST	\-	\-/29	\-	\-
SIGSYS	31	12	12	31
SIGUNUSED	31	\-	\-	31
.TE
.PP
Note the following:
.IP * 3
Where defined, \fBSIGUNUSED\fP is synonymous with \fBSIGSYS\fP.  Since glibc 2.26,
\fBSIGUNUSED\fP is no longer defined on any architecture.
.IP *
.\"
Signal 29 is \fBSIGINFO\fP/\fBSIGPWR\fP (synonyms for the same value) on Alpha but
\fBSIGLOST\fP on SPARC.
.SS リアルタイムシグナル
Starting with version 2.2, Linux supports real\-time signals as originally
defined in the POSIX.1b real\-time extensions (and now included in
POSIX.1\-2001).  The range of supported real\-time signals is defined by the
macros \fBSIGRTMIN\fP and \fBSIGRTMAX\fP.  POSIX.1\-2001 requires that an
implementation support at least \fB_POSIX_RTSIG_MAX\fP (8) real\-time signals.
.PP
The Linux kernel supports a range of 33 different real\-time signals,
numbered 32 to 64.  However, the glibc POSIX threads implementation
internally uses two (for NPTL) or three (for LinuxThreads) real\-time signals
(see \fBpthreads\fP(7)), and adjusts the value of \fBSIGRTMIN\fP suitably (to 34
or 35).  Because the range of available real\-time signals varies according
to the glibc threading implementation (and this variation can occur at run
time according to the available kernel and glibc), and indeed the range of
real\-time signals varies across UNIX systems, programs should \fInever refer
to real\-time signals using hard\-coded numbers\fP, but instead should always
refer to real\-time signals using the notation \fBSIGRTMIN\fP+n, and include
suitable (run\-time) checks that \fBSIGRTMIN\fP+n does not exceed \fBSIGRTMAX\fP.
.PP
標準シグナルと異なり、リアルタイムシグナルには 事前に定義された意味はない。 リアルタイムシグナルの全部をアプリケーションで定義した用途に使える。
.PP
ハンドリングしないリアルタイムシグナルのデフォルトの動作は 受信したプロセスの終了である。
.PP
リアルタイムシグナルは以下の特徴がある:
.IP 1. 4
リアルタイムシグナルは複数の実体をキューに入れることができる。 一方、標準シグナルの場合、そのシグナルがブロックされている間に
同じシグナルの複数のインスタンスが配送されても、 1 つだけがキューに入れられる。
.IP 2. 4
シグナルが \fBsigqueue\fP(3)  を用いて送信された場合、 付属データ (整数かポインター) をシグナルと共に送信できる。 受信側プロセスが
\fBsigaction\fP(2)  に \fBSA_SIGINFO\fP フラグを指定してシグナルハンドラーを設定した場合、 このデータは
\fIsiginfo_t\fP 構造体の \fIsi_value\fP フィールド経由でハンドラーの第 2 引数として渡され、 利用することができる。
さらに、この構造体の \fIsi_pid\fP と \fIsi_uid\fP フィールドでシグナルを送信したプロセスの PID と実ユーザー ID を
得ることができる。
.IP 3. 4
リアルタイムシグナルでは配送される順序が保証される。 同じタイプのリアルタイムシグナルは送信された順番に到着する。
異なるリアルタイムシグナルが一つのプロセスに送信された場合、 番号の小さいシグナルから先に到着する。
(つまり小さい番号のシグナルが高い優先順位を持つ。)  対照的に、一つのプロセスに対して複数の標準シグナルが処理待ちとなった場合、
これらのシグナルが配送される順序は不定である。
.PP
一つのプロセスに対して標準シグナルとリアルタイムシグナルの両方が 処理待ちの場合、POSIX はどちらが先に配送されるかを規定していない。 Linux
では、他の多くの実装と同様、このような場合には 標準シグナルが優先される。
.PP
POSIX によれば、1 プロセス毎に最低 \fB_POSIX_SIGQUEUE_MAX\fP (32)
個のリアルタイムシグナルをキューに入れられるべきとしている。 しかし、 Linux では違った実装になっている。カーネル 2.6.7 までは
(2.6.7 を含む)、全プロセスでキューに入っているリアルタイムシグナル の数の合計についてシステム全体での制限がある。 この制限は
\fI/proc/sys/kernel/rtsig\-max\fP ファイルで見ることができ、 (権限があれば) 変更もできる。 関係するファイルとして、
\fI/proc/sys/kernel/rtsig\-nr\fP を見ることで、いくつのリアルタイムシグナルが現在キューに入っているかを 知ることができる。
Linux 2.6.8 で、これらの \fI/proc\fP 経由のインターフェースは、 \fBRLIMIT_SIGPENDING\fP
リソース制限に置き換えられた。 これは、キューに入るシグナル数に関してユーザー単位に 上限を指定するものである。 詳しくは
\fBsetrlimit\fP(2)  を参照。
.PP
The addition of real\-time signals required the widening of the signal set
structure (\fIsigset_t\fP)  from 32 to 64 bits.  Consequently, various system
calls were superseded by new system calls that supported the larger signal
sets.  The old and new system calls are as follows:
.TS
lb lb
l l.
Linux 2.0 and earlier	Linux 2.2 and later
\fBsigaction\fP(2)	\fBrt_sigaction\fP(2)
\fBsigpending\fP(2)	\fBrt_sigpending\fP(2)
\fBsigprocmask\fP(2)	\fBrt_sigprocmask\fP(2)
\fBsigreturn\fP(2)	\fBrt_sigreturn\fP(2)
\fBsigsuspend\fP(2)	\fBrt_sigsuspend\fP(2)
\fBsigtimedwait\fP(2)	\fBrt_sigtimedwait\fP(2)
.TE
.\"
.SS シグナルハンドラーによるシステムコールやライブラリ関数への割り込み
システムコールやライブラリが停止 (block) している間にシグナルハンドラーが 起動されると、以下のどちらかとなる。
.IP * 2
シグナルが返った後、呼び出しは自動的に再スタートされる。
.IP *
呼び出しはエラー \fBEINTR\fP で失敗する。
.PP
これらの二つの挙動のうちどちらが起こるかは、インターフェイスにより依存し、 シグナルハンドラーが \fBSA_RESTART\fP フラグ
(\fBsigaction\fP(2)  参照) を使って設定されていたかにも依存する。 詳細は UNIX システムによって異なる。 Linux
における詳細を以下で説明する。
.PP
.\" The following system calls use ERESTARTSYS,
.\" so that they are restartable
If a blocked call to one of the following interfaces is interrupted by a
signal handler, then the call is automatically restarted after the signal
handler returns if the \fBSA_RESTART\fP flag was used; otherwise the call fails
with the error \fBEINTR\fP:
.IP * 2
\fBread\fP(2), \fBreadv\fP(2), \fBwrite\fP(2), \fBwritev\fP(2), and \fBioctl\fP(2)  calls
on "slow" devices.  A "slow" device is one where the I/O call may block for
an indefinite time, for example, a terminal, pipe, or socket.  If an I/O
call on a slow device has already transferred some data by the time it is
interrupted by a signal handler, then the call will return a success status
(normally, the number of bytes transferred).  Note that a (local) disk is
not a slow device according to this definition; I/O operations on disk
devices are not interrupted by signals.
.IP *
停止 (block) する可能性のある \fBopen\fP(2)  (例えば、FIFO のオープン時; \fBfifo\fP(7)  参照)。
.IP *
\fBwait\fP(2), \fBwait3\fP(2), \fBwait4\fP(2), \fBwaitid\fP(2), \fBwaitpid\fP(2).
.IP *
.\" If a timeout (setsockopt()) is in effect on the socket, then these
.\" system calls switch to using EINTR.  Consequently, they and are not
.\" automatically restarted, and they show the stop/cont behavior
.\" described below.  (Verified from 2.6.26 source, and by experiment; mtk)
.\" FIXME What about sendmmsg()?
ソケットインターフェイス: \fBaccept\fP(2), \fBconnect\fP(2), \fBrecv\fP(2), \fBrecvfrom\fP(2),
\fBrecvmmsg\fP(2), \fBrecvmsg\fP(2), \fBsend\fP(2), \fBsendto\fP(2), \fBsendmsg\fP(2).
但し、ソケットにタイムアウトが設定されていない場合 (下記参照)。
.IP *
ファイルロック用インターフェイス: \fBflock\fP(2), \fBfcntl\fP(2) の \fBF_SETLKW\fP と \fBF_OFD_SETLKW\fP
操作。
.IP *
POSIX メッセージキューインターフェイス: \fBmq_receive\fP(3), \fBmq_timedreceive\fP(3),
\fBmq_send\fP(3), \fBmq_timedsend\fP(3).
.IP *
.\" commit 72c1bbf308c75a136803d2d76d0e18258be14c7a
\fBfutex\fP(2)  \fBFUTEX_WAIT\fP (Linux 2.6.22 以降; それ以前は常に \fBEINTR\fP で失敗していた)。
.IP *
\fBgetrandom\fP(2).
.IP *
\fBpthread_mutex_lock\fP(3), \fBpthread_cond_wait\fP(3) と関連 API。
.IP *
\fBfutex\fP(2)  \fBFUTEX_WAIT_BITSET\fP.
.IP *
.\" as a consequence of the 2.6.22 changes in the futex() implementation
POSIX セマフォインターフェイス: \fBsem_wait\fP(3), \fBsem_timedwait\fP(3)  (Linux 2.6.22 以降;
それ以前は常に \fBEINTR\fP で失敗していた)。
.IP *
.\" commit 1ca39ab9d21ac93f94b9e3eb364ea9a5cf2aba06
\fBread\fP(2)  from an \fBinotify\fP(7)  file descriptor (since Linux 3.8;
beforehand, always failed with \fBEINTR\fP).
.PP
.\" These are the system calls that give EINTR or ERESTARTNOHAND
.\" on interruption by a signal handler.
以下のインターフェイスは、 \fBSA_RESTART\fP を使っているどうかに関わらず、シグナルハンドラーにより割り込まれた後、
再スタートすることは決してない。 これらは、シグナルハンドラーにより割り込まれると、常にエラー \fBEINTR\fP で失敗する。
.IP * 2
\fBsetsockopt\fP(2)  を使ってタイムアウト (\fBSO_RCVTIMEO\fP) が設定されている「入力」ソケットインターフェース:
\fBaccept\fP(2), \fBrecv\fP(2), \fBrecvfrom\fP(2), \fBrecvmmsg\fP(2) (NULL 以外の
\fItimeout\fP 引数も指定されている場合), \fBrecvmsg\fP(2)
.IP *
.\" FIXME What about sendmmsg()?
"Output" socket interfaces, when a timeout (\fBSO_RCVTIMEO\fP)  has been set on
the socket using \fBsetsockopt\fP(2): \fBconnect\fP(2), \fBsend\fP(2), \fBsendto\fP(2),
and \fBsendmsg\fP(2).
.IP *
シグナル待ちに使われるインターフェイス: \fBpause\fP(2), \fBsigsuspend\fP(2), \fBsigtimedwait\fP(2),
\fBsigwaitinfo\fP(2).
.IP *
ファイルディスクリプター多重インターフェイス: \fBepoll_wait\fP(2), \fBepoll_pwait\fP(2), \fBpoll\fP(2),
\fBppoll\fP(2), \fBselect\fP(2), \fBpselect\fP(2).
.IP *
.\" On some other systems, SA_RESTART does restart these system calls
System V IPC インターフェイス: \fBmsgrcv\fP(2), \fBmsgsnd\fP(2), \fBsemop\fP(2),
\fBsemtimedop\fP(2).
.IP *
スリープ用のインターフェイス: \fBclock_nanosleep\fP(2), \fBnanosleep\fP(2), \fBusleep\fP(3).
.IP *
\fBio_getevents\fP(2).
.PP
\fBsleep\fP(3)  関数も、ハンドラーにより割り込まれた場合、決して再スタートされることはない。 しかし、成功となり、残っている停止時間を返す。
.SS 一時停止シグナルによるシステムコールやライブラリ関数への割り込み
Linux では、シグナルハンドラーが設定されていない場合でも、 いくつかのブロッキング型のインターフェイスは、 プロセスが一時停止 (stop)
シグナルの一つにより停止され、 \fBSIGCONT\fP により再開された後に、エラー \fBEINTR\fP で失敗する可能性がある。 この挙動は
POSIX.1 で認められておらず、他のシステムでは起こらない。
.PP
この挙動を示す Linux のインターフェイスは以下の通りである。
.IP * 2
\fBsetsockopt\fP(2)  を使ってタイムアウト (\fBSO_RCVTIMEO\fP) が設定されている「入力」ソケットインターフェース:
\fBaccept\fP(2), \fBrecv\fP(2), \fBrecvfrom\fP(2), \fBrecvmmsg\fP(2) (NULL 以外の
\fItimeout\fP 引数も指定されている場合), \fBrecvmsg\fP(2)
.IP *
.\" FIXME What about sendmmsg()?
"Output" socket interfaces, when a timeout (\fBSO_RCVTIMEO\fP)  has been set on
the socket using \fBsetsockopt\fP(2): \fBconnect\fP(2), \fBsend\fP(2), \fBsendto\fP(2),
and \fBsendmsg\fP(2), if a send timeout (\fBSO_SNDTIMEO\fP)  has been set.
.IP * 2
\fBepoll_wait\fP(2), \fBepoll_pwait\fP(2).
.IP *
\fBsemop\fP(2), \fBsemtimedop\fP(2).
.IP *
\fBsigtimedwait\fP(2), \fBsigwaitinfo\fP(2).
.IP *
.\" commit 1ca39ab9d21ac93f94b9e3eb364ea9a5cf2aba06
Linux 3.7 and earlier: \fBread\fP(2)  from an \fBinotify\fP(7)  file descriptor
.IP *
Linux 2.6.21 以前: \fBfutex\fP(2)  \fBFUTEX_WAIT\fP, \fBsem_timedwait\fP(3),
\fBsem_wait\fP(3).
.IP *
Linux 2.6.8 以前: \fBmsgrcv\fP(2), \fBmsgsnd\fP(2).
.IP *
Linux 2.4 以前: \fBnanosleep\fP(2).
.SH 準拠
POSIX.1 (注記した内容以外)。
.SH 注意
For a discussion of async\-signal\-safe functions, see \fBsignal\-safety\fP(7).
.PP
The \fI/proc/[pid]/task/[tid]/status\fP file contains various fields that show
the signals that a thread is blocking (\fISigBlk\fP), catching (\fISigCgt\fP), or
ignoring (\fISigIgn\fP).  (The set of signals that are caught or ignored will
be the same across all threads in a process.)  Other fields show the set of
pending signals that are directed to the thread (\fISigPnd\fP)  as well as the
set of pending signals that are directed to the process as a whole
(\fIShdPnd\fP).  The corresponding fields in \fI/proc/[pid]/status\fP show the
information for the main thread.  See \fBproc\fP(5)  for further details.
.SH バグ
There are six signals that can be delivered as a consequence of a hardware
exception: \fBSIGBUS\fP, \fBSIGEMT\fP, \fBSIGFPE\fP, \fBSIGILL\fP, \fBSIGSEGV\fP, and
\fBSIGTRAP\fP.  Which of these signals is delivered, for any given hardware
exception, is not documented and does not always make sense.
.PP
For example, an invalid memory access that causes delivery of \fBSIGSEGV\fP on
one CPU architecture may cause delivery of \fBSIGBUS\fP on another
architecture, or vice versa.
.PP
For another example, using the x86 \fIint\fP instruction with a forbidden
argument (any number other than 3 or 128)  causes delivery of \fBSIGSEGV\fP,
even though \fBSIGILL\fP would make more sense, because of how the CPU reports
the forbidden operation to the kernel.
.SH 関連項目
\fBkill\fP(1), \fBclone\fP(2), \fBgetrlimit\fP(2), \fBkill\fP(2),
\fBpidfd_send_signal\fP(2), \fBrestart_syscall\fP(2), \fBrt_sigqueueinfo\fP(2),
\fBsetitimer\fP(2), \fBsetrlimit\fP(2), \fBsgetmask\fP(2), \fBsigaction\fP(2),
\fBsigaltstack\fP(2), \fBsignal\fP(2), \fBsignalfd\fP(2), \fBsigpending\fP(2),
\fBsigprocmask\fP(2), \fBsigreturn\fP(2), \fBsigsuspend\fP(2), \fBsigwaitinfo\fP(2),
\fBabort\fP(3), \fBbsd_signal\fP(3), \fBkillpg\fP(3), \fBlongjmp\fP(3),
\fBpthread_sigqueue\fP(3), \fBraise\fP(3), \fBsigqueue\fP(3), \fBsigset\fP(3),
\fBsigsetops\fP(3), \fBsigvec\fP(3), \fBsigwait\fP(3), \fBstrsignal\fP(3),
\fBswapcontext\fP(3), \fBsysv_signal\fP(3), \fBcore\fP(5), \fBproc\fP(5), \fBnptl\fP(7),
\fBpthreads\fP(7), \fBsigevent\fP(7)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
