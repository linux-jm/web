.\"	$OpenBSD: elf.5,v 1.12 2003/10/27 20:23:58 jmc Exp $
.\"Copyright (c) 1999 Jeroen Ruigrok van der Werven
.\"All rights reserved.
.\"
.\" %%%LICENSE_START(PERMISSIVE_MISC)
.\"Redistribution and use in source and binary forms, with or without
.\"modification, are permitted provided that the following conditions
.\"are met:
.\"1. Redistributions of source code must retain the above copyright
.\"   notice, this list of conditions and the following disclaimer.
.\"2. Redistributions in binary form must reproduce the above copyright
.\"   notice, this list of conditions and the following disclaimer in the
.\"   documentation and/or other materials provided with the distribution.
.\"
.\"THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\"ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\"IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\"ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\"FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\"DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\"OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\"HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\"LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\"OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\"SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"	$FreeBSD: src/share/man/man5/elf.5,v 1.21 2001/10/01 16:09:23 ru Exp $
.\"
.\" Slightly adapted - aeb, 2004-01-01
.\" 2005-07-15, Mike Frysinger <vapier@gentoo.org>, various fixes
.\" 2007-10-11, Mike Frysinger <vapier@gentoo.org>, various fixes
.\" 2007-12-08, mtk, Converted from mdoc to man macros
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 2004-2005 Yuichi SATO
.\"         all rights reserved.
.\" Translated Thu Dec 16 02:17:58 JST 2004
.\"         by Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated & Modified Sat Sep 10 02:29:40 JST 2005 by Yuichi SATO
.\" Updated 2008-02-12, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v2.77
.\" Updated 2012-04-30, Akihiro MOTOKI <amotoki@gmail.com>
.\" Updated 2013-03-26, Akihiro MOTOKI <amotoki@gmail.com>
.\" Updated 2013-05-06, Akihiro MOTOKI <amotoki@gmail.com>
.\"
.TH ELF 5 2013\-04\-17 Linux "Linux Programmer's Manual"
.SH 名前
elf \- 実行可能リンクフォーマット (ELF) ファイルのフォーマット
.SH 書式
.nf
.\" .B #include <elf_abi.h>
\fB#include <elf.h>\fP
.fi
.SH 説明
ヘッダーファイル \fI<elf.h>\fP は ELF 実行可能バイナリファイルのフォーマットを定義する。
これらのファイルとしては、通常の実行可能ファイル・ 再配置可能オブジェクトファイル・コアファイル・共有ライブラリがある。
.PP
ELF ファイルフォーマットを使う実行可能ファイルは、 ELF ヘッダーの後にプログラムヘッダーテーブルまたは セクションヘッダーテーブル
(またはその両方) が続く構成である。 ELF ヘッダーは常にファイルのオフセット 0 にある。
プログラムヘッダーテーブルとセクションヘッダーテーブルの ファイル内でのオフセットは、ELF ヘッダーに定義されている。 この 2
つのテーブルはファイルの残りの部分の詳細を記述する。
.PP
.\" Applications which wish to process ELF binary files for their native
.\" architecture only should include
.\" .I <elf_abi.h>
.\" in their source code.
.\" These applications should need to refer to
.\" all the types and structures by their generic names
.\" "Elf_xxx"
.\" and to the macros by
.\" ELF_xxx".
.\" Applications written this way can be compiled on any architecture,
.\" regardless of whether the host is 32-bit or 64-bit.
.\" .PP
.\" Should an application need to process ELF files of an unknown
.\" architecture, then the application needs to explicitly use either
.\" "Elf32_xxx"
.\" or
.\" "Elf64_xxx"
.\" type and structure names.
.\" Likewise, the macros need to be identified by
.\" "ELF32_xxx"
.\" or
.\" "ELF64_xxx".
.\" .PP
このヘッダーファイルは上記のヘッダーを C 言語の構造体で記述し、 また動的セクション・再配置可能セクション・シンボルテーブルの構造体も 含んでいる。
.PP
以下の型は N ビットアーキテクチャーで使われる (N=32,64 であり \fIElfN\fP は \fIElf32\fP または \fIElf64\fP を表し、
\fIuintN_t\fP は \fIuint32_t\fP または \fIuint64_t\fP を表す):
.in +4n
.nf

.\" Elf32_Size  Unsigned object size
ElfN_Addr       符号なしのプログラムアドレス, uintN_t
ElfN_Off        符号なしのファイルオフセット, uintN_t
ElfN_Section    符号なしのセクションインデックス, uint16_t
ElfN_Versym     符号なしのバージョンシンボル情報, uint16_t
Elf_Byte        unsigned char
ElfN_Half       uint16_t
ElfN_Sword      int32_t
ElfN_Word       uint32_t
ElfN_Sxword     int64_t
ElfN_Xword      uint64_t
.fi
.in
.PP
(注意: *BSD での用語は少し異なる。 \fIElf64_Half\fP は \fIElf32_Half\fP の 2 倍であり、
\fIElf64Quarter\fP が \fIuint16_t\fP に用いられる。 混乱を避けるため、以下では、これらの型はサイズが自明な型に置き換えてある。)
.PP
このファイルフォーマットが定義する全てのデータ構造体は、 関連するクラスの "自然な" サイズと配置の指針に従う。
必要な場合、データ構造体では明示的なパディング (padding, 詰め込み)  が行なわれる。これは 4 バイトオブジェクトに対する 4
バイト配置を保証するためや、 構造体のサイズを 4 の倍数にするためなどである。
.PP
ELF ヘッダーは型 \fIElf32_Ehdr\fP または \fIElf64_Ehdr\fP で記述される:
.in +4n
.nf

#define EI_NIDENT 16

typedef struct {
    unsigned char e_ident[EI_NIDENT];
    uint16_t      e_type;
    uint16_t      e_machine;
    uint32_t      e_version;
    ElfN_Addr     e_entry;
    ElfN_Off      e_phoff;
    ElfN_Off      e_shoff;
    uint32_t      e_flags;
    uint16_t      e_ehsize;
    uint16_t      e_phentsize;
    uint16_t      e_phnum;
    uint16_t      e_shentsize;
    uint16_t      e_shnum;
    uint16_t      e_shstrndx;
} ElfN_Ehdr;
.fi
.in
.PP
.\" .Bl -tag -width "e_phentsize"
フィールドは以下の意味を持つ:
.TP  12
\fIe_ident\fP
このバイト配列は、プロセッサやファイルの他の部分には依存せずに、 ファイルを解釈 (interpret) するために指定される。
この配列内のすべてのものは、接頭辞 \fBEI_\fP で始まるマクロの名前が付き、接頭辞 \fBELF\fP で始まる値を持つ。 以下のマクロが定義されている:
.RS 12
.\" .Bl -tag -width "EI_VERSION" \" EI_ABIVERSION
.TP  12
\fBEI_MAG0\fP
マジックナンバーの第 1 バイト。 \fBELFMAG0\fP で埋めなければならない。 (0: 0x7f)
.TP 
\fBEI_MAG1\fP
マジックナンバーの第 2 バイト。 \fBELFMAG1\fP で埋めなければならない。 (1: \(aqE\(aq)
.TP 
\fBEI_MAG2\fP
マジックナンバーの第 3 バイト。 \fBELFMAG2\fP で埋めなければならない。 (2: \(aqL\(aq)
.TP 
\fBEI_MAG3\fP
マジックナンバーの第 4 バイト。 \fBELFMAG3\fP で埋めなければならない。 (3: \(aqF\(aq)
.TP 
\fBEI_CLASS\fP
第 5 バイトは、このバイナリのアーキテクチャーを示す:
.RS 12
.\" .Bl -tag -width "ELFCLASSNONE" -compact
.TP  14
.PD 0
\fBELFCLASSNONE\fP
このクラスは不正である。
.TP 
\fBELFCLASS32\fP
32 ビットアーキテクチャーを定義する。 ファイルと仮想アドレス空間が 4 ギガバイトまでのマシンをサポートする。
.TP 
\fBELFCLASS64\fP
64 ビットアーキテクチャーを定義する。
.PD
.RE
.\" .El
.TP 
\fBEI_DATA\fP
.\" .Bl -tag -width "ELFDATA2LSB" -compact
第 6 バイトはファイル内のプロセッサ固有データの データエンコーディングを指定する。 現在のところ以下のエンコーディングがサポートされている:
.RS 12
.TP  14
.PD 0
\fBELFDATANONE\fP
不明なデータフォーマット。
.TP 
\fBELFDATA2LSB\fP
2 の補数、リトルエンディアン。
.TP 
\fBELFDATA2MSB\fP
2 の補数、ビッグエンディアン。
.PD
.RE
.\" .El
.TP 
.PD 0
\fBEI_VERSION\fP
.\" .Bl -tag -width "EV_CURRENT" -compact
第 7 バイトは ELF 仕様のバージョン番号である:
.RS 12
.TP  14
\fBEV_NONE\fP
不正なバージョン。
.TP 
\fBEV_CURRENT\fP
現在のバージョン。
.PD
.RE
.\".El
.TP 
\fBEI_OSABI\fP
.\" .Bl -tag -width "ELFOSABI_STANDALONE" -compact
第 8 バイトはオブジェクトのターゲットとなるオペレーティングシステムと ABI を示す。他の ELF
構造体のフィールドには、プラットフォーム固有の意味を持つフラグや値を持つものもある。これらのフィールドの解釈は、このバイトの値によって決定される。以下に例を挙げる。
.RS 12
.TP  20
.PD 0
\fBELFOSABI_NONE\fP
.\" 0
ELFOSABI_SYSV と同じ。
.TP 
\fBELFOSABI_SYSV\fP
.\" 0
.\" synonym: ELFOSABI_NONE
UNIX System V ABI.
.TP 
\fBELFOSABI_HPUX\fP
.\" 1
HP\-UX ABI.
.TP 
\fBELFOSABI_NETBSD\fP
.\" 2
NetBSD ABI.
.TP 
\fBELFOSABI_LINUX\fP
.\" 3
.\" .TP
.\" .BR ELFOSABI_HURD
.\" Hurd ABI.
.\" 4
.\" .TP
.\" .BR ELFOSABI_86OPEN
.\" 86Open Common IA32 ABI.
.\" 5
Linux ABI.
.TP 
\fBELFOSABI_SOLARIS\fP
.\" 6
.\" .TP
.\" .BR ELFOSABI_MONTEREY
.\" Monterey project ABI.
.\" Now replaced by
.\" ELFOSABI_AIX
.\" 7
Solaris ABI.
.TP 
\fBELFOSABI_IRIX\fP
.\" 8
IRIX ABI.
.TP 
\fBELFOSABI_FREEBSD\fP
.\" 9
FreeBSD ABI.
.TP 
\fBELFOSABI_TRU64\fP
.\" 10
.\" ELFOSABI_MODESTO
.\" 11
.\" ELFOSABI_OPENBSD
.\" 12
TRU64 UNIX ABI.
.TP 
\fBELFOSABI_ARM\fP
.\" 97
ARM アーキテクチャー ABI.
.TP 
\fBELFOSABI_STANDALONE\fP
.\" 255
.\" .El
スタンドアロン (組み込み) ABI.
.PD
.RE
.TP 
\fBEI_ABIVERSION\fP
第 9 バイトはオブジェクトがターゲットとしている ABI のバージョンを示す。 このフィールドは互換性のない ABI
のバージョンを区別するために使われる。 このバージョン番号の解釈は、 \fBEI_OSABI\fP フィールドで識別される ABI に依存する。
この仕様に準拠するアプリケーションでは、値 0 を使う。
.TP 
\fBEI_PAD\fP
.\" As reported by Yuri Kozlov and confirmed by Mike Frysinger, EI_BRAND is
.\" not in GABI (http://www.sco.com/developers/gabi/latest/ch4.eheader.html)
.\" It looks to be a BSDism
.\" .TP
.\" .BR EI_BRAND
.\" Start of architecture identification.
パディングの開始。 これらのバイトは予約されており、0 に設定されている。 これらを読み込むプログラムは、これらのバイトを無視すべきである。
現在使われていないバイトに意味が与えられる場合、 \fBEI_PAD\fP の値は将来変更されるかもしれない。
.TP 
\fBEI_NIDENT\fP
.\" .El
\fIe_ident\fP 配列のサイズ。
.RE
.TP 
\fIe_type\fP
この構造体のメンバはオブジェクトファイルタイプを示す:
.RS 12
.\" .Bl -tag -width "ET_NONE" -compact
.TP  12
.PD 0
\fBET_NONE\fP
不明なタイプ。
.TP 
\fBET_REL\fP
再配置可能ファイル。
.TP 
\fBET_EXEC\fP
実行可能ファイル。
.TP 
\fBET_DYN\fP
共有オブジェクト。
.TP 
\fBET_CORE\fP
コアファイル。
.PD
.RE
.\" .El
.TP 
\fIe_machine\fP
このメンバは個々のファイルに必要とされるアーキテクチャーを指定する。 例:
.RS 12
.\" .Bl -tag -width "EM_MIPS_RS4_BE" -compact
.TP  12
.PD 0
\fBEM_NONE\fP
.\" 0
不明なマシン。
.TP 
\fBEM_M32\fP
.\" 1
AT&T WE 32100.
.TP 
\fBEM_SPARC\fP
.\" 2
Sun Microsystems SPARC.
.TP 
\fBEM_386\fP
.\" 3
Intel 80386.
.TP 
\fBEM_68K\fP
.\" 4
Motorola 68000.
.TP 
\fBEM_88K\fP
.\" 5
.\" .TP
.\" .BR EM_486
.\" Intel 80486.
.\" 6
Motorola 88000.
.TP 
\fBEM_860\fP
.\" 7
Intel 80860.
.TP 
\fBEM_MIPS\fP
.\" 8
.\" EM_S370
.\" 9
.\" .TP
.\" .BR EM_MIPS_RS4_BE
.\" MIPS RS4000 (big-endian only). Deprecated.
.\" 10
.\" EM_MIPS_RS3_LE (MIPS R3000 little-endian)
.\" 10
MIPS RS3000 (ビッグエンディアンのみ)。
.TP 
\fBEM_PARISC\fP
.\" 15
HP/PA.
.TP 
\fBEM_SPARC32PLUS\fP
.\" 18
拡張命令セット付き SPARC。
.TP 
\fBEM_PPC\fP
.\" 20
PowerPC.
.TP 
\fBEM_PPC64\fP
.\" 21
PowerPC 64\-bit.
.TP 
\fBEM_S390\fP
.\" 22
IBM S/390
.TP 
\fBEM_ARM\fP
.\" 40
Advanced RISC Machines
.TP 
\fBEM_SH\fP
.\" 42
Renesas SuperH
.TP 
\fBEM_SPARCV9\fP
.\" 43
SPARC v9 64\-bit.
.TP 
\fBEM_IA_64\fP
.\" 50
Intel Itanium
.TP 
\fBEM_X86_64\fP
.\" 62
AMD x86\-64
.TP 
\fBEM_VAX\fP
.\" 75
.\" EM_CRIS
.\" 76
.\" .TP
.\" .BR EM_ALPHA
.\" Compaq [DEC] Alpha.
.\" .TP
.\" .BR EM_ALPHA_EXP
.\" Compaq [DEC] Alpha with enhanced instruction set.
DEC Vax.
.PD
.RE
.\" .El
.TP 
\fIe_version\fP
.\" .Bl -tag -width "EV_CURRENT" -compact
このメンバはファイルバージョンを示す:
.RS 12
.TP  12
.PD 0
\fBEV_NONE\fP
不正なバージョン。
.TP 
\fBEV_CURRENT\fP
.\" .El
現在のバージョン。
.PD
.RE
.TP 
\fIe_entry\fP
このメンバは、システムが最初に制御を渡す、 つまりプロセスを開始する仮想アドレスを指定する。 ファイルにエントリーポイントが関連付けられていない場合、
このメンバには 0 が入る。
.TP 
\fIe_phoff\fP
このメンバはプログラムヘッダーテーブルの ファイルオフセット (バイト単位) を保持する。 ファイルにプログラムヘッダーテーブルがない場合、
このメンバには 0 が入る。
.TP 
\fIe_shoff\fP
このメンバはセクションヘッダーテーブルの ファイルオフセット (バイト単位) を保持する。 ファイルにセクションヘッダーテーブルがない場合、
このメンバには 0 が入る。
.TP 
\fIe_flags\fP
このメンバはファイルに関連付けられたプロセッサ固有のフラグを保持する。 フラグの名前は EF_`machine_flag' という形式である。
現在のところフラグは定義されていない。
.TP 
\fIe_ehsize\fP
このメンバは ELF ヘッダーサイズ (バイト単位) を保持する。
.TP 
\fIe_phentsize\fP
このメンバはこのファイルのプログラムヘッダーテーブルの 1 エントリーあたりのサイズ (バイト単位) を保持する; 全てのエントリーは同じサイズである。
.TP 
\fIe_phnum\fP
このメンバはプログラムヘッダーテーブルにあるエントリーの数を保持する。 よって \fIe_phentsize\fP と \fIe_phnum\fP
の積がテーブルサイズ (バイト単位) になる。 ファイルにプログラムヘッダーがない場合、 \fIe_phnum\fP は値 0 を保持する。
.IP
.\" This is a Linux extension, added in Linux 2.6.34.
.\" .Bl -tag -width "PN_XNUM"
プログラムヘッダーテーブルのエントリー数が \fBPN_XNUM\fP (0xffff) 以上の場合、
このメンバは \fBPN_XNUM\fP (0xffff) になり、プログラムヘッダーテーブルの
エントリーの実際の数は、セクションヘッダーテーブルの最初のエントリーの
\fIsh_info\fP メンバに格納される。それ以外の場合、セクションヘッダーテーブルの
最初のエントリーの \fIsh_info\fP メンバには値 0 が格納される。
.RS 12
.TP  9
\fBPN_XNUM\fP
\fIe_phnum\fP が保持できる最大値を表し、 0xffff に定義されている。 \fIe_phnum\fP
はプログラムヘッダーの実際の数がどこに割り当てられているかを示す。
.PD
.RE
.\" .El
.IP
.TP 
\fIe_shentsize\fP
このメンバはセクションヘッダーのサイズ (バイト単位) を保持する。 セクションヘッダーはセクションヘッダーテーブルの 1 つのエントリーである;
全てのエントリーは同じサイズである。
.TP 
\fIe_shnum\fP
このメンバはセクションヘッダーテーブルにあるエントリーの数を保持する。 よって \fIe_shentsize\fP と \fIe_shnum\fP
の積はセクションヘッダーテーブルのサイズ (バイト単位) になる。 ファイルにセクションヘッダーテーブルがない場合、 \fIe_shnum\fP は値 0
を保持する。
.IP
セクションヘッダーテーブルのエントリー数が \fBSHN_LORESERVE\fP (0xff00) 以上の場合、
\fIe_shnum\fP には値 0 が入り、セクションヘッダーテーブルのエントリーの実際の数は
セクションヘッダーテーブルの最初のエントリーの \fIsh_size\fP メンバに格納される。
それ以外の場合、セクションヘッダーテーブルの最初のエントリーの \fIsh_info\fP メンバ
には値 0 が格納される。
.TP 
\fIe_shstrndx\fP
このメンバはセクション名文字列テーブルに関連付けられたエントリーの セクションヘッダーテーブルインデックスを保持する。
ファイルにセクション名文字列テーブルがない場合、 このメンバは値 \fBSHN_UNDEF\fP を保持する。 \fBSHN_UNDEF\fP.
.IP
セクション名前文字列テーブルのインデックスが \fBSHN_LORESERVE\fP (0xff00) 以上の
場合、このメンバには \fBSHN_XINDEX\fP (0xffff) が入り、セクション名前文字列
テーブルの実際のインデックスはセクションヘッダーテーブルの最初のエントリーの
\fIsh_link\fP メンバに格納される。それ以外の場合、セクションヘッダーテーブルの
最初のエントリーの \fIsh_link\fP メンバには値 0 が格納される。
.RS 12
.\" .Bl -tag -width "SHN_LORESERVE"
.TP  14
\fBSHN_UNDEF\fP
この値は未定義・存在しない・無関係その他、 意味のないセクションの参照であることを表す。 例えば、セクション番号 \fBSHN_UNDEF\fP
に関連づけて「定義」されたシンボルは、「未定義」なシンボルである。
.TP 
\fBSHN_LORESERVE\fP
この値は予約済みのインデックス領域の下限を指定する。
.TP 
\fBSHN_LOPROC\fP
この値以上で \fBSHN_HIPROC\fP 以下の値はプロセッサ固有の意味に予約されている。
.TP 
\fBSHN_HIPROC\fP
この値以下で \fBSHN_HIPROC\fP 以上の値はプロセッサ固有の意味に予約されている。
.TP 
\fBSHN_ABS\fP
この値は対応する参照の絶対値を指定する。 例えば、セクション番号 \fBSHN_ABS\fP に関連づけられたシンボルは絶対値を保持し、再配置に影響されない。
.TP 
\fBSHN_COMMON\fP
このセクションに関連して定義されたシンボルは、 Fortran の COMMON や C の未割り当て external 変数のような、
共通シンボルである。
.TP 
\fBSHN_HIRESERVE\fP
この値は予約されたインデックスの範囲の上限を指定する。 \fBSHN_LORESERVE\fP と \fBSHN_HIRESERVE\fP は含まれる。
この値はセクションヘッダーテーブルを参照しない。 つまり、セクションヘッダーテーブルは 予約されたインデックスのエントリーを \fI含まない 。\fP
.RE
.\" .El
.\" .El
.PP
実行可能ファイルまたは共有オブジェクトファイルのプログラムヘッダーテーブルは、 システムによるプログラム実行準備に必要な、
セグメント等の情報を記述する構造体の配列である。 オブジェクトファイルの \fIセグメント\fP には 1 つ以上の \fIセクション\fP が含まれる。
プログラムヘッダーは実行可能ファイルと共有オブジェクトファイルでのみ意味を持つ。 ファイルは自身のプログラムヘッダーサイズを ELF ヘッダーの
\fIe_phentsize\fP メンバと \fIe_phnum\fP メンバで指定する。 ELF プログラムヘッダーは \fIElf32_Phdr\fP 型または
\fIElf64_Phdr\fP 型で記述される (どちらになるかはアーキテクチャー依存):
.in +4n
.nf

typedef struct {
    uint32_t   p_type;
    Elf32_Off  p_offset;
    Elf32_Addr p_vaddr;
    Elf32_Addr p_paddr;
    uint32_t   p_filesz;
    uint32_t   p_memsz;
    uint32_t   p_flags;
    uint32_t   p_align;
} Elf32_Phdr;
.fi
.in
.in +4n
.nf

typedef struct {
    uint32_t   p_type;
    uint32_t   p_flags;
    Elf64_Off  p_offset;
    Elf64_Addr p_vaddr;
    Elf64_Addr p_paddr;
    uint64_t   p_filesz;
    uint64_t   p_memsz;
    uint64_t   p_align;
} Elf64_Phdr;
.fi
.in
.PP
.\" .Bl -tag -width "p_offset"
32 ビットと 64 ビットのプログラムヘッダーの主な違いは、構造体における \fIp_flags\fP メンバの位置にある。
.TP  12
\fIp_type\fP
.\" .Bl -tag -width "PT_DYNAMIC"
Phdr 構造体のこのメンバは、 この配列要素がどのような種類のセグメントを記述しているか、 またはこの配列要素の情報をどのように解釈するか、を表す。
.RS 12
.TP  12
\fBPT_NULL\fP
この配列要素は使用されておらず、その他のメンバの値は未定義である。 これにより、このプログラムヘッダーのエントリーは無視される。
.TP 
\fBPT_LOAD\fP
この配列要素は \fIp_filesz\fP と \fIp_memsz\fP で記述されるロード可能セグメントを指定する。
このファイルからのバイトデータが、このメモリーセグメントの先頭からマップされる。 セグメントのメモリーサイズ \fISy\fPp_memsz がファイルサイズ
\fISy\fPp_filesz より大きい場合、 「余った」バイトは値 0 となり、 そのセグメント初期化データの後ろに置かれると定められている。
ファイルサイズはメモリーサイズより大きくてはいけない。 プログラムヘッダーテーブルのロード可能セグメントエントリーは、 \fIp_vaddr\fP
メンバの昇順にソートされて出現する。
.TP 
\fBPT_DYNAMIC\fP
この配列要素は動的リンク情報を指定する。
.TP 
\fBPT_INTERP\fP
この配列要素は、インタープリターとして起動されるパス名 (ヌル文字終端)  の位置とサイズを指定する。 このセグメント型は
(共有オブジェクトにもあるかも知れないが)  実行可能ファイルでのみ意味を持つ。 ただし、このセグメント型は 1 つのファイルに 2
回以上出現してはならない。 もし存在する場合、このセグメント型は 全てのロード可能セグメントエントリーより前になければならない。
.TP 
\fBPT_NOTE\fP
この配列要素は補足情報 (auxiliary information) の位置とサイズを指定する。
.TP 
\fBPT_SHLIB\fP
このセグメント型は予約されているが、意味は指定されていない。 この型の配列要素を保持するプログラムは ABI に準拠しない。
.TP 
\fBPT_PHDR\fP
この配列要素は、もし存在しているならば、 ファイルおよびプログラムのメモリーイメージ双方における
プログラムヘッダーテーブル自身の位置とサイズを指定する。 このセグメント型は 1 つのファイルに 2 回以上出現してはならない。
さらに、このセグメント型が存在してもよいのは、プログラムヘッダーテーブルが プログラムのメモリーイメージの一部である場合のみである。
もし存在する場合、これは全てのロード可能セグメントエントリーより 前になければならない。
.TP 
\fBPT_LOPROC\fP
この値以上で \fBPT_HIPROC\fP 以下の値はプロセッサ固有の意味に予約されている。
.TP 
\fBPT_HIPROC\fP
この値以下で \fBPT_LOPROC\fP 以上の値はプロセッサ固有の意味に予約されている。
.TP 
\fBPT_GNU_STACK\fP
.\" .El
GNU 拡張であり、Linux カーネルが \fIp_flags\fP のメンバーにセットされたフラグ経由でスタックの状態を制御するために使用する。
.RE
.TP 
\fIp_offset\fP
このメンバは、セグメントの先頭バイトがある (ファイル先頭からの) オフセットを保持する。
.TP 
\fIp_vaddr\fP
このメンバは、セグメントの先頭バイトがある メモリーの仮想アドレスを保持する。
.TP 
\fIp_paddr\fP
物理アドレスが意味をもつシステムでは、 このメンバはセグメントの物理アドレスとして予約されている。 BSD ではこのメンバは使用されない。0
でなければならない。
.TP 
\fIp_filesz\fP
このメンバはセグメントのファイルイメージのバイト数を保持する。 これは 0 でもよい。
.TP 
\fIp_memsz\fP
このメンバはセグメントのメモリーイメージのバイト数を保持する。 これは 0 でもよい。
.TP 
\fIp_flags\fP
.\" .Bl -tag -width "PF_X" -compact
このメンバはセグメントに関連するフラグのビットマスクを保持する:
.RS 12
.TP 
.PD 0
\fBPF_X\fP
実行可能セグメント。
.TP 
\fBPF_W\fP
書き込み可能セグメント.
.TP 
\fBPF_R\fP
読み込み可能セグメント。
.PD
.RE
.\" .El
.IP
テキストセグメントは一般にフラグ \fBPF_X\fP と \fBPF_R\fP を持つ。 データセグメントは一般に \fBPF_X\fP, \fBPF_W\fP,
\fBPF_R\fP を持つ。
.TP 
\fIp_align\fP
.\" .El
このメンバは、セグメントがメモリーおよびファイルにおいて配置 (align)  される値を保持する。
ロード可能プロセスセグメントは、ページサイズを法として \fIp_vaddr\fP と \fIp_offset\fP と合同でなければならない
(訳注:「p_vaddr mod ページサイズ = p_offset mod ページサイズ」 でなければならない)。。 0 と 1
という値は配置が必要ないことを意味する。 それ以外の場合、 \fIp_align\fP は正で 2 の整数乗でなければならず、 \fIp_vaddr\fP は
\fIp_align\fP を法として \fIp_offset\fP と合同でなければならない (訳注:「p_vaddr mod p_align =
p_offset mod p_align」でなければならない)。
.PP
ファイルのセクションヘッダーテーブルには、 全てのファイルセクションの場所が記述されている。 セクションヘッダーテーブルは \fIElf32_Shdr\fP
構造体または \fIElf64_Shdr\fP 構造体の配列である。 ELF ヘッダーの \fIe_shoff\fP メンバはファイルの先頭から
セクションヘッダーテーブルへのバイトオフセットである。 \fIe_shnum\fP はセクションヘッダーテーブルに含まれるエントリーの数を保持する。
\fIe_shentsize\fP は各エントリーのサイズ (バイト単位) を保持する。
.PP
.\" .Bl -tag -width "SHN_LORESERVE"
セクションヘッダーテーブルインデックスは、この配列の添字である。
いくつかのセクションヘッダーテーブルインデックスは予約されている。予約されて
いるのは、最初のエントリーと、\fBSHN_LORESERVE\fP と \fBSHN_HIRESERVE\fP の間の
インデックスである。
最初のエントリーは、ELF 拡張で \fIe_phnum\fP, \fIe_shnum\fP, \fIe_strndx\fP に使用
される。それ以外の場合、最初のエントリーの各フィールドには 0 が設定される。
オブジェクトファイルにはこれらの特別なインデックスに対応するセクションはない。
.RS
.TP  14
\fBSHN_UNDEF\fP
この値は、未定義 (undefined)、不足 (missing)、無関係 (irrelevant)、その他無意味なセクション参照を示す。
.TP 
\fBSHN_LORESERVE\fP
この値は予約済みのインデックス領域の下限を指定する。
.TP 
\fBSHN_LOPROC\fP
この値以上で \fBSHN_HIPROC\fP 以下の値はプロセッサ固有の意味に予約されている。
.TP 
\fBSHN_HIPROC\fP
この値以下で \fBSHN_HIPROC\fP 以上の値はプロセッサ固有の意味に予約されている。
.TP 
\fBSHN_ABS\fP
この値は対応する参照の絶対値を指定する。 例えば、セクション番号 \fBSHN_ABS\fP に関連して定義されているシンボルは、
絶対値を保持しているので、再配置に影響されない。
.TP 
\fBSHN_COMMON\fP
このセクションに関連して定義されているシンボルは、 FORTRAN の COMMON や C の未割り当て外部変数のような共通シンボルである。
.TP 
\fBSHN_HIRESERVE\fP
この値は予約済みのインデックス領域の上限を指定する。 システムは \fBSHN_LORESERVE\fP と \fBSHN_HIRESERVE\fP
を含む範囲を予約する。 セクションヘッダーテーブルは予約されたインデックスに対応するエントリーを持たない。
.RE
.\" .El
.PP
セクションヘッダーは以下の構造体を持つ:
.in +4n
.nf

typedef struct {
    uint32_t   sh_name;
    uint32_t   sh_type;
    uint32_t   sh_flags;
    Elf32_Addr sh_addr;
    Elf32_Off  sh_offset;
    uint32_t   sh_size;
    uint32_t   sh_link;
    uint32_t   sh_info;
    uint32_t   sh_addralign;
    uint32_t   sh_entsize;
} Elf32_Shdr;
.fi
.in
.in +4n
.nf

typedef struct {
    uint32_t   sh_name;
    uint32_t   sh_type;
    uint64_t   sh_flags;
    Elf64_Addr sh_addr;
    Elf64_Off  sh_offset;
    uint64_t   sh_size;
    uint32_t   sh_link;
    uint32_t   sh_info;
    uint64_t   sh_addralign;
    uint64_t   sh_entsize;
} Elf64_Shdr;
.fi
.in
.PP
.\" .Bl -tag -width "sh_addralign"
32 ビットと 64 ビットのセクションヘッダーには実際の違いはない。
.TP  10
\fIsh_name\fP
このメンバはセクション名を定める。 この値はセクションヘッダー文字列テーブルセクションのインデックスであり、 ヌル文字で終端された文字列の場所を示す。
.TP 
\fIsh_type\fP
.\" .Bl -tag -width "SHT_PROGBITS"
このメンバはセクションの内容と意味が含まれるカテゴリーを示す。
.RS 10
.TP  15
\fBSHT_NULL\fP
この値はセクションヘッダーが不活性であることを示す。 これは関連するセクションを持たない。 このセクションヘッダーの他のメンバは、未定義の値を持つ。
.TP 
\fBSHT_PROGBITS\fP
このセクションはプログラムにより定義される情報を保持する。 この情報の形式と意味は、ひとえにプログラムによって決定される。
.TP 
\fBSHT_SYMTAB\fP
このセクションはシンボルテーブルを保持する。 一般には \fBSHT_SYMTAB\fP はリンク編集のためのシンボルを提供するが、 動的リンクにも使われる。
完全なシンボルテーブルとして、動的リンクには不要な 多くのシンボルを保持できる。 オブジェクトファイルも \fBSHT_DYNSYM\fP
セクションを持つことができる。
.TP 
\fBSHT_STRTAB\fP
このセクションは文字列テーブルを保持する。 オブジェクトファイルは複数の文字列テーブルセクションを持つことができる。
.TP 
\fBSHT_RELA\fP
このセクションは明示的な加数 (addend) を持つ再配置エントリーを保持する。 再配置エントリーの型は、オブジェクトファイルの 32
ビットクラスでは \fIElf32_Rela\fP である。 オブジェクトファイルは複数の再配置セクションを持つことができる。
.TP 
\fBSHT_HASH\fP
このセクションはシンボルハッシュテーブルを保持する。 動的リンクされるオブジェクトは、 シンボルハッシュテーブルを含んでいなければならない。
オブジェクトファイルは 1 つのハッシュテーブルのみを持つことができる。
.TP 
\fBSHT_DYNAMIC\fP
このセクションは動的リンクの情報を保持する。 オブジェクトファイルは 1 つの動的セクションのみを持つことができる。
.TP 
\fBSHT_NOTE\fP
このセクションはファイルに何らかの印を付ける情報を保持する。
.TP 
\fBSHT_NOBITS\fP
このタイプのセクションはファイルの領域を使わないという以外は、 \fBSHT_PROGBITS\fP と似ている。 このセクションは 1 バイトも含まないが、
\fIsh_offset\fP メンバは概念的なファイルオフセットを持つ。
.TP 
\fBSHT_REL\fP
このセクションは明示的な加数を持たない再配置オフセットを保持する。 再配置オフセットの型は、オブジェクトファイルの 32 ビットクラスでは
\fIElf32_Rel\fP である。 オブジェクトファイルは複数の再配置セクションを持つことができる。
.TP 
\fBSHT_SHLIB\fP
このセクションは予約されているが、意味は指定されていない。
.TP 
\fBSHT_DYNSYM\fP
このセクションは動的リンクシンボルの最小セットを保持する。 オブジェクトファイルは \fBSHT_SYMTAB\fP セクションも含むことができる。
.TP 
\fBSHT_LOPROC\fP
この値以上で \fBSHT_HIPROC\fP 以下の範囲はプロセッサ固有の意味に予約されている。
.TP 
\fBSHT_HIPROC\fP
この値以下で \fBSHT_LOPROC\fP 以上の範囲はプロセッサ固有の意味に予約されている。
.TP 
\fBSHT_LOUSER\fP
この値はアプリケーションプログラムのために予約される インデックス範囲の下限を指定する。
.TP 
\fBSHT_HIUSER\fP
.\" .El
この値はアプリケーションプログラムのために予約される インデックス範囲の上限を指定する。 \fBSHT_LOUSER\fP から \fBSHT_HIUSER\fP
の間のセクションタイプは、 現在または将来のシステム定義セクションタイプと衝突することなく、 アプリケーションで使用することができる。
.RE
.TP 
\fIsh_flags\fP
.\" .Bl -tag -width "SHF_EXECINSTR" -compact
様々な属性を記述するための 1 ビットのフラグをサポートするセクション。 フラグビットが \fIsh_flags\fP
に設定された場合、そのセクションについての属性は "オン" になる。 それ以外の場合、属性が "オフ" であるか属性が適用されない。 未定義の属性は 0
に設定される。
.RS 10
.TP  15
\fBSHF_WRITE\fP
このセクションはプロセス実行中に書き込み可能なデータを含む。
.TP 
\fBSHF_ALLOC\fP
このセクションはプロセス実行中にメモリーを使用する。 制御セクションの中には、オブジェクトファイルのメモリーイメージには 存在しないものもある。
そうしたセクションの場合、この属性はオフである。
.TP 
\fBSHF_EXECINSTR\fP
このセクションは実行可能なマシン命令を含む。
.TP 
\fBSHF_MASKPROC\fP
このマスクに含まれる全てのビットはプロセッサ固有の意味に予約されている。
.RE
.\" .El
.TP 
\fIsh_addr\fP
このセクションがプロセスのメモリーイメージにある場合、 このメンバはセクションの最初のバイトが存在するアドレスを保持する。 それ以外の場合、このメンバは
0 である。
.TP 
\fIsh_offset\fP
このメンバの値は、ファイルの先頭からセクションの最初のバイトへの バイトオフセットを保持する。 セクションタイプ \fBSHT_NOBITS\fP
はファイルの領域を全く使用せず、このタイプの \fIsh_offset\fP メンバはファイルの概念的な位置を示す。
.TP 
\fIsh_size\fP
このメンバはセクションのサイズ (バイト単位) を保持する。 セクションタイプが \fBSHT_NOBITS\fP でない限り、そのセクションはファイル中の
\fIsh_size\fP バイトを使用する。 タイプが \fBSHT_NOBITS\fP のセクションはサイズが 0 でないが、ファイルの領域を使用しない。
.TP 
\fIsh_link\fP
このメンバは、セクションヘッダーテーブルインデックスリンクを保持する。 この解釈はセクションタイプに依存する。
.TP 
\fIsh_info\fP
このメンバは追加情報を保持する。 この解釈はセクションタイプに依存する。
.TP 
\fIsh_addralign\fP
アドレス配置に制約があるセクションもある。 セクションが倍長語 (doubleword) を保持する場合、
システムは全てのセクションについて倍長語の配置を保証しなければならない。 つまり、 \fIsh_addr\fP の値は \fIsh_addralign\fP
の値を法として 0 と合同でなければならない (訳注:「sh_addr mod sh_addralign = 0 でなければならない)。 2 の 0
乗と正の整数乗のみが許可される。 0 または 1 はセクションの配置に制約がないことを意味する。
.TP 
\fIsh_entsize\fP
.\" .El
シンボルテーブルのような固定サイズエントリーのテーブルを保持する セクションもある。 このようなセクションでは、 このメンバは各エントリーのサイズ
(バイト単位) を表す。 このメンバが 0 の場合、 そのセクションは固定サイズエントリーのテーブルを保持しない。
.PP
.\" .Bl -tag -width ".shstrtab"
さまざまなセクションにプログラム情報・制御情報が保持される:
.TP  10
\&\fI.bss\fP
このセクションはプログラムのメモリーイメージに配置される 非初期化データを保持する。 定義上、システムはプログラムの実行開始時に、データを 0
で初期化する。 このセクションのタイプは \fBSHT_NOBITS\fP である。 属性タイプは \fBSHF_ALLOC\fP と \fBSHF_WRITE\fP
である。
.TP 
\&\fI.comment\fP
このセクションはバージョン制御情報を保持する。 このセクションのタイプは \fBSHT_PROGBITS\fP である。 属性タイプは使用されない。
.TP 
\&\fI.ctors\fP
このセクションは C++ コンストラクター関数への初期化されたポインターを保持する。 このセクションのタイプは \fBSHT_PROGBITS\fP である。
属性タイプは \fBSHF_ALLOC\fP と \fBSHF_WRITE\fP である。
.TP 
\&\fI.data\fP
このセクションはプログラムのメモリーイメージに配置される 初期化済みデータを保持する。 このセクションのタイプは \fBSHT_PROGBITS\fP
である。 属性タイプは \fBSHF_ALLOC\fP と \fBSHF_WRITE\fP である。
.TP 
\&\fI.data1\fP
このセクションはプログラムのメモリーイメージに配置される 初期化済みデータを保持する。 このセクションのタイプは \fBSHT_PROGBITS\fP
である。 属性タイプは \fBSHF_ALLOC\fP と \fBSHF_WRITE\fP である。
.TP 
\&\fI.debug\fP
このセクションはシンボリックデバッグ用の情報を保持する。 その内容は指定されていない。 このセクションのタイプは \fBSHT_PROGBITS\fP
である。 属性タイプは使用されない。
.TP 
\&\fI.dtors\fP
このセクションは C++ デストラクタ関数への初期化されたポインターを保持する。 このセクションのタイプは \fBSHT_PROGBITS\fP である。
属性タイプは \fBSHF_ALLOC\fP と \fBSHF_WRITE\fP である。
.TP 
\&\fI.dynamic\fP
このセクションは動的リンク情報を保持する。 このセクションの属性は \fBSHF_ALLOC\fP ビットを含む。 \fBSHF_WRITE\fP
ビットが設定されるか否かはプロセッサによる。 このセクションのタイプは \fBSHT_DYNAMIC\fP である。 上記の属性を参照すること。
.TP 
\&\fI.dynstr\fP
このセクションは動的リンクに必要な文字列を保持する。 最も一般的には、この文字列はシンボルテーブルエントリーと 関連づけられた名前を表す。
このセクションのタイプは \fBSHT_STRTAB\fP である。 使用される属性タイプは \fBSHF_ALLOC\fP である。
.TP 
\&\fI.dynsym\fP
このセクションは動的リンクシンボルテーブルを保持する。 このセクションのタイプは \fBSHT_DYNSYM\fP である。 使用される属性タイプは
\fBSHF_ALLOC\fP である。
.TP 
\&\fI.fini\fP
このセクションはプロセス終了コードに置かれる実行可能命令を保持する。 プロセスが正常に終了した場合、システムはこのセクションにある
コードを配置して実行する。 このセクションのタイプは \fBSHT_PROGBITS\fP である。 使用される属性タイプは \fBSHF_ALLOC\fP と
\fBSHF_EXECINSTR\fP である。
.TP 
\&\fI.gnu.version\fP
このセクションはバージョンシンボルテーブルを保持する。 その内容は \fIElfN_Half\fP 要素の配列である。 このセクションのタイプは
\fBSHT_GNU_versym\fP である。 使用される属性タイプは \fBSHF_ALLOC\fP である。
.TP 
\&\fI.gnu.version_d\fP
このセクションはバージョンシンボルの定義を保持する。 その内容は \fIElfN_Verdef\fP 構造体のテーブルである。 このセクションのタイプは
\fBSHT_GNU_verdef\fP である。 使用される属性タイプは \fBSHF_ALLOC\fP である。
.TP 
\&\fI.gnu.version_r\fP
このセクションはバージョンシンボルが必要とする要素を保持する。 その内容は \fIElfN_Verneed\fP 構造体のテーブルである。
このセクションのタイプは \fBSHT_GNU_versym\fP である。 使用される属性タイプは \fBshf_alloc\fP である。
.TP 
\&\fI.got\fP
このセクションはグローバルオフセットテーブルを保持する。 このセクションのタイプは \fBSHT_PROGBITS\fP である。
属性はプロセッサ毎に異なる。
.TP 
\&\fI.hash\fP
このセクションはシンボルハッシュテーブルを保持する。 セクションのタイプは \fBSHT_HASH\fP である。 使用される属性は \fBSHF_ALLOC\fP
である。
.TP 
\&\fI.init\fP
このセクションはプロセス初期化コードに配置される実行可能命令を保持する。 プログラムが実行を開始すると、
システムはメインプログラムエントリーポイントを呼び出す前に、 このセクションにあるコードを配置して実行する。 このセクションはのタイプは
\fBSHT_PROGBITS\fP である。 使用される属性は \fBSHF_ALLOC\fP と \fBSHF_EXECINSTR\fP である。
.TP 
\&\fI.interp\fP
このセクションはプログラムインタープリターのパス名を保持する。 ファイルにこのセクションを含むロード可能セグメントがある場合、 そのセクションの属性には
\fBSHF_ALLOC\fP ビットが含まれる。 それ以外の場合このビットはオフになる。 このセクションのタイプは \fBSHT_PROGBITS\fP である。
.TP 
\&\fI.line\fP
このセクションはシンボリックデバッグのための行番号情報を保持する。 ここにはプログラムソースコードとマシンコードの対応関係が記述される。
内容は指定されていない。 このセクションのタイプは \fBSHT_PROGBITS\fP である。 属性タイプは使用されない。
.TP 
\&\fI.note\fP
このセクションは "Note Section" 形式で情報を保持する。このセクションのタイプ
は \fBSHT_NOTE\fP である。属性タイプは使用されない。通常 OpenBSD ネイティブ実行
可能ファイルは自身を識別するために \fI.note.openbsd.ident\fP セクションを持つ。
これによりカーネルは、ファイルをロードする際に 互換 ELF バイナリエミュレーショ
ンテストを回避できる。
.TP 
\&\fI.note.GNU\-stack\fP
このセクションは Linux のオブジェクトファイルで スタック属性を宣言するのに使用される。 セクションのタイプは \fBSHT_PROGBITS\fP
である。使用される属性は \fBSHF_EXECINSTR\fP だけである。この属性は GNU リンカーに対して オブジェクトファイルが実行可能なスタック
(executable stack) を必要とする 示すものである。
.TP 
\&\fI.plt\fP
このセクションは手続き (procedure) リンクテーブルを保持する。 このセクションのタイプは \fBSHT_PROGBITS\fP である。
属性はプロセッサ毎に異なる。
.TP 
\&\fI.relNAME\fP
このセクションは以下に記述される再配置情報を保持する。 ファイルが再配置を含むロード可能セグメントを持っている場合、 このセクションの属性は
\fBSHF_ALLOC\fP ビットを含む。 それ以外の場合、そのビットはオフである。 慣例として、 "NAME"
は再配置が適用されるセクションが指定される。 よって \fB.text\fP についての再配置セクションは、通常は \fB.rel.text\fP
という名前を持つ。 このセクションのタイプは \fBSHT_REL\fP である。
.TP 
\&\fI.relaNAME\fP
このセクションは以下に記述される再配置情報を保持する。 ファイルが再配置を含むロード可能セグメントを持っている場合、 このセクションの属性は
\fBSHF_ALLOC\fP ビットを含む。 それ以外の場合、そのビットはオフである。 慣例として、 "NAME"
は再配置が適用されるセクションが指定される。 よって \fB.text\fP についての再配置セクションは、通常は \fB.rela.text\fP
という名前を持つ。 このセクションのタイプは \fBSHT_RELA\fP である。
.TP 
\&\fI.rodata\fP
このセクションはリードオンリーのデータを保持する。 このデータはプロセスイメージにおける書き込み不可能なセグメントに置かれる。 このセクションのタイプは
\fBSHT_PROGBITS\fP である。 使用される属性は \fBSHF_ALLOC\fP である。
.TP 
\&\fI.rodata1\fP
このセクションはリードオンリーのデータを保持する。 このデータはプロセスイメージにおける書き込み不可能なセグメントに置かれる。 このセクションのタイプは
\fBSHT_PROGBITS\fP である。 使用される属性は \fBSHF_ALLOC\fP である。
.TP 
\&\fI.shstrtab\fP
このセクションはセクション名を保持する。 このセクションのタイプは \fBSHT_STRTAB\fP である。 属性タイプは使用されない。
.TP 
\&\fI.strtab\fP
このセクションは文字列を保持する。 最も一般的なのは、シンボルテーブルエントリーに関連づけられた 名前を表す文字列である。
ファイルがシンボル文字列テーブルを含むロード可能セグメントを持つ場合、 セクションの属性は \fBSHF_ALLOC\fP ビットを含む。
それ以外の場合、そのビットはオフである。 このセクションのタイプは \fBSHT_STRTAB\fP である。
.TP 
\&\fI.symtab\fP
このセクションはシンボルテーブルを保持する。 ファイルがシンボルテーブルを含むロード可能セグメントを持つ場合、 セクションの属性は
\fBSHF_ALLOC\fP ビットを含む。 それ以外の場合、ビットはオフである。 このセクションのタイプは \fBSHT_SYMTAB\fP である。
.TP 
\&\fI.text\fP
.\" .El
このセクションはプログラムの "テキスト" または実行可能命令を保持する。 セクションのタイプは \fBSHT_PROGBITS\fP である。
使用される属性は \fBSHF_ALLOC\fP と \fBSHF_EXECINSTR\fP である。
.PP
文字列テーブルセクションはヌル文字で終端されたキャラクター配列 (通常文字列と呼ばれるもの) を保持する。 オブジェクトファイルはこれらの文字列を
シンボル名とセクション名を表すために使う。 文字列は、文字列テーブルセクションへのインデックスとして参照される。 インデックス 0
の最初のバイトは、ヌルバイト (\(aq\e0\(aq) を 保持すると定義されている。
同様に文字列テーブルの最後のバイトもヌル文字を保持すると定義されている。 これは全ての文字列がヌルバイトで終端されていることを保証するためである。
.PP
オブジェクトファイルのシンボルテーブルは、 プログラムのシンボル定義と参照を配置または再配置するのに 必要な情報を保持する。
.in +4n
.nf

typedef struct {
    uint32_t      st_name;
    Elf32_Addr    st_value;
    uint32_t      st_size;
    unsigned char st_info;
    unsigned char st_other;
    uint16_t      st_shndx;
} Elf32_Sym;
.fi
.in
.in +4n
.nf

typedef struct {
    uint32_t      st_name;
    unsigned char st_info;
    unsigned char st_other;
    uint16_t      st_shndx;
    Elf64_Addr    st_value;
    uint64_t      st_size;
} Elf64_Sym;
.fi
.in
.PP
.\" .Bl -tag -width "st_value"
32 ビット版と 64 ビット版は同じメンバを持ち、単に順番が異なるだけである。
.TP  10
\fIst_name\fP
このメンバはオブジェクトファイルのシンボル文字列テーブルの インデックスを保持する。 シンボル文字列テーブルはシンボル名の文字表現を保持する。 この値が
0 でない場合、シンボル名を得るための文字テーブルインデックスを表す。 それ以外の場合、シンボルテーブルは名前を持たない。
.TP 
\fIst_value\fP
このメンバは関連づけられたシンボルの値を表す。
.TP 
\fIst_size\fP
多くのシンボルにはそれに関連づけられたサイズがある。 シンボルがサイズを持たない場合、またはサイズが不明な場合、 このメンバは 0 である。
.TP 
\fIst_info\fP
.\" .Bl -tag -width "STT_SECTION"
このメンバはシンボルのタイプとバインディング (binding) 属性を指定する:
.RS 10
.TP  12
\fBSTT_NOTYPE\fP
シンボルのタイプが定義されていない。
.TP 
\fBSTT_OBJECT\fP
シンボルはデータオブジェクトに関連づけられている。
.TP 
\fBSTT_FUNC\fP
シンボルは関数またはその他の実行コードに関連づけられている。
.TP 
\fBSTT_SECTION\fP
シンボルはセクションに関連づけられている。 このタイプのシンボルテーブルエントリーは、 主として再配置のために存在し、通常は \fBSTB_LOCAL\fP
バインディングを持つ。
.TP 
\fBSTT_FILE\fP
慣例として、シンボルの名前は オブジェクトファイルに関連づけられたソースファイルの名前を指定する。 ファイルシンボルは \fBSTB_LOCAL\fP
バインディングを持ち、そのセクションインデックスは \fBSHN_ABS\fP である。 ファイルシンボルは、ファイルに他の \fBSTB_LOCAL\fP
シンボルがある場合は、それよりも先に来る。
.TP 
\fBSTT_LOPROC\fP
この値以上で \fBSTT_HIPROC\fP 以下の範囲はプロセッサ固有の意味に予約されている。
.TP 
\fBSTT_HIPROC\fP
.\" .El
.\" .Bl -tag -width "STB_GLOBAL"
この値以下で \fBSTT_LOPROC\fP 以上の範囲はプロセッサ固有の意味に予約されている。
.TP 
\fBSTB_LOCAL\fP
局所的シンボルはその定義を含むオブジェクトファイルの外からは見えない。 同じ名前の局所的シンボルは、お互いに影響を受けることなく、
複数のファイルに存在できる。
.TP 
\fBSTB_GLOBAL\fP
大域的シンボルは結びつけられている全てのオブジェクトファイルから見える。 1 つのファイルで大域的シンボルが定義されていたら、
他のファイルでは同じシンボルへの参照は未定義でなければならない。
.TP 
\fBSTB_WEAK\fP
弱シンボルは大域的シンボルに似ているが、その定義は優先度が低い。
.TP 
\fBSTB_LOPROC\fP
この値以上で \fBSTB_HIPROC\fP 以下の範囲はプロセッサ固有の意味に予約されている。
.TP 
\fBSTB_HIPROC\fP
この値以下で \fBSTB_LOPROC\fP 以上の範囲はプロセッサ固有の意味に予約されている。
.IP
バインディングとタイプフィールドを パックしたりアンパックしたりするマクロがある:
.IP
\fBELF32_ST_BIND\fP(info)  または \fBELF64_ST_BIND\fP(info)  \fIst_info\fP
の値からバインディングを取り出す。
.IP
\fBELF32_ST_TYPE\fP(info)  または \fBELF64_ST_TYPE\fP(info)
.br
\fIst_info\fP の値からタイプを取り出す。
.IP
\fBELF32_ST_INFO\fP(bind, type)  または \fBELF64_ST_INFO\fP(bind, type)
.br
バインディングとタイプを \fIst_info\fP の値に変換する。
.RE
.\" .El
.TP 
\fIst_other\fP
.\" .Bl -tag -width "STV_PROTECTED"
このメンバはシンボルの visibility (見える範囲) を規定する。
.RS 10
.TP  16
.PD 0
\fBSTV_DEFAULT\fP
デフォルトのシンボル visibility ルール。
.TP 
\fBSTV_INTERNAL\fP
プロセッサ固有の隠しクラス。
.TP 
\fBSTV_HIDDEN\fP
シンボルは他のモジュールからは利用できない。
.TP 
\fBSTV_PROTECTED\fP
横取りできず (not preemptible)、公開されない。
.PD
.PP
visibility 種別を抽出するためのマクロがある。
.PP
\fBELF32_ST_VISIBILITY\fP(other)  または \fBELF64_ST_VISIBILITY\fP(other)
.RE
.\" .El
.TP 
\fIst_shndx\fP
.\" .El
各シンボルテーブルエントリーは、いくつかのセクションに関連して "定義されている"。
このメンバは関連するセクションヘッダーテーブルインデックスを保持する。
.PP
再配置はシンボル参照とシンボル定義を結合するプロセスである。 再配置可能ファイルはセクションの内容をどのように修正するかに関する
情報を持たなければならない。 これにより、実行可能ファイルと共有オブジェクトファイルは
プロセスのプログラムイメージについての正しい情報を持つことができる。 再配置エントリーは以下のようなデータである。
.PP
加数を必要としない再配置構造体。
.in +4n
.nf

typedef struct {
    Elf32_Addr r_offset;
    uint32_t   r_info;
} Elf32_Rel;
.fi
.in
.in +4n
.nf

typedef struct {
    Elf64_Addr r_offset;
    uint64_t   r_info;
} Elf64_Rel;
.fi
.in
.PP
加数を必要とする再配置構造体。
.in +4n
.nf

typedef struct {
    Elf32_Addr r_offset;
    uint32_t   r_info;
    int32_t    r_addend;
} Elf32_Rela;
.fi
.in
.in +4n
.nf

typedef struct {
    Elf64_Addr r_offset;
    uint64_t   r_info;
    int64_t    r_addend;
} Elf64_Rela;
.fi
.in
.\" .Bl -tag -width "r_offset"
.TP  12
\fIr_offset\fP
このメンバは再配置動作が適用される位置を与える。 再配置可能ファイルの場合、この値はセクションの先頭から 再配置で影響を受ける格納単位 (storage
unit) までのバイトオフセットである。 実行可能ファイルまたは共有オブジェクトの場合、 この値は再配置で影響を受ける格納単位の仮想アドレスである。
.TP 
\fIr_info\fP
このメンバは、再配置が行われなければならないシンボルテーブルインデックスと、 適用される再配置のタイプの両方を与える。
再配置タイプはプロセッサ毎に異なる。 テキストが再配置エントリーの再配置タイプ またはシンボルテーブルインデックスを参照している場合、
それぞれエントリーの \fIr_info\fP メンバに対して、それぞれ \fBELF[32|64]_R_TYPE\fP と \fBELF[32|64]_R_SYM\fP
を適用した結果を意味する。
.TP 
\fIr_addend\fP
.\" .El
このメンバは定数の加数を指定する。 この加数は再配置可能フィールドに格納される値を計算するために使われる。
.PP
\&.dynamic セクションは、関連する動的リンク情報を保持している 一連の構造体を保持する。 d_tag メンバは d_un の解釈を制御する。
.in +4n
.nf

typedef struct {
    Elf32_Sword    d_tag;
    union {
        Elf32_Word d_val;
        Elf32_Addr d_ptr;
    } d_un;
} Elf32_Dyn;
extern Elf32_Dyn _DYNAMIC[];
.fi
.in
.in +4n
.nf

typedef struct {
    Elf64_Sxword    d_tag;
    union {
        Elf64_Xword d_val;
        Elf64_Addr  d_ptr;
    } d_un;
} Elf64_Dyn;
extern Elf64_Dyn _DYNAMIC[];
.fi
.in
.\" .Bl -tag -width "d_tag"
.TP  10
\fId_tag\fP
.\" .Bl -tag -width "DT_SYMBOLIC"
このメンバは以下の値を持つことができる:
.RS 10
.TP  12
\fBDT_NULL\fP
動的セクションの終りのマーク
.TP 
\fBDT_NEEDED\fP
必要なライブラリの名前への文字列テーブルオフセット
.TP 
\fBDT_PLTRELSZ\fP
PLT 再配置 (reloc) テーブルのサイズ (バイト単位)
.TP 
\fBDT_PLTGOT\fP
PLT と GOT (または何れか一方) のアドレス
.TP 
\fBDT_HASH\fP
シンボルハッシュテーブルのアドレス
.TP 
\fBDT_STRTAB\fP
文字列テーブルのアドレス
.TP 
\fBDT_SYMTAB\fP
シンボルテーブルのアドレス
.TP 
\fBDT_RELA\fP
Rela 再配置テーブルのアドレス
.TP 
\fBDT_RELASZ\fP
Rela テーブルのサイズ (バイト単位)
.TP 
\fBDT_RELAENT\fP
Rela テーブルエントリーのサイズ (バイト単位)
.TP 
\fBDT_STRSZ\fP
文字列テーブルのサイズ (バイト単位)
.TP 
\fBDT_SYMENT\fP
シンボルテーブルエントリーのサイズ (バイト単位)
.TP 
\fBDT_INIT\fP
初期化関数のアドレス
.TP 
\fBDT_FINI\fP
終了関数のアドレス
.TP 
\fBDT_SONAME\fP
共有オブジェクトの名前への文字列テーブルオフセット
.TP 
\fBDT_RPATH\fP
ライブラリ検索パスへの文字列テーブルオフセット (推奨されない)
.TP 
\fBDT_SYMBOLIC\fP
リンカーがシンボルの実行可能ファイルより前に この共有オブジェクトを検索した場合は、警告を出す。
.TP 
\fBDT_REL\fP
Rel 再配置テーブルのアドレス
.TP 
\fBDT_RELSZ\fP
Rel テーブルのサイズ (バイト単位)
.TP 
\fBDT_RELENT\fP
Rel テーブルエントリーのサイズ (バイト単位)
.TP 
\fBDT_PLTREL\fP
PLT が参照する再配置テーブルのタイプ (Rela または Rel)
.TP 
\fBDT_DEBUG\fP
デバッグのために使用されている。内容は定義されていない。
.TP 
\fBDT_TEXTREL\fP
これが指定されていない場合、 書き込み不可のセグメントには再配置は適用されない。
.TP 
\fBDT_JMPREL\fP
PLT 専用の再配置エントリーのアドレス
.TP 
\fBDT_BIND_NOW\fP
実行可能ファイルに制御を譲る前に、 全ての再配置を処理するように動的リンカーに指示する。
.TP 
\fBDT_RUNPATH\fP
ライブラリ検索パスへの文字列テーブルオフセット
.TP 
\fBDT_LOPROC\fP
プロセッサ固有の意味の開始
.TP 
\fBDT_HIPROC\fP
プロセッサ固有の意味の終了
.RE
.\" .El
.TP 
\fId_val\fP
このメンバは様々な意味に解釈される整数値である。
.TP 
\fId_ptr\fP
このメンバはプログラムの仮想アドレスを表す。 これらのアドレスを解釈する際に、 実際のアドレスは元々のファイルの値と
メモリーの基底アドレスから計算される。 ファイルにはこれらのアドレスを修正するための 再配置エントリーを含めてはならない。
.TP 
\fI_DYNAMIC\fP
.\" .El
\&.dynamic セクションにある全ての動的構造体を含む配列。 これは自動的にリンカーに渡される。
.SH 注意
.\" OpenBSD
.\" ELF support first appeared in
.\" OpenBSD 1.2,
.\" although not all supported platforms use it as the native
.\" binary file format.
ELF は System V で初めて登場した。 ELF 自体は System V で初めて登場した。 ELF フォーマットは採択された標準である。
.PP
.\" .SH AUTHORS
.\" The original version of this manual page was written by
.\" .An Jeroen Ruigrok van der Werven
.\" .Aq asmodai@FreeBSD.org
.\" with inspiration from BSDi's
.\" .Bsx
.\" .Nm elf
.\" man page.
\fIe_phnum\fP, \fIe_shnum\fP, \fIe_strndx\fP に対する拡張は、いずれも Linux での拡張で
ある。Sun, BSD, AMD64 もこれに対応している。詳しい情報は、関連項目を参照。
.SH 関連項目
\fBas\fP(1), \fBgdb\fP(1), \fBld\fP(1), \fBobjdump\fP(1), \fBexecve\fP(2), \fBcore\fP(5)
.PP
Hewlett\-Packard, \fIElf\-64 Object File Format\fP.
.PP
Santa Cruz Operation, \fISystem V Application Binary Interface\fP.
.PP
UNIX System Laboratories, "Object Files", \fIExecutable and Linking Format
(ELF)\fP.
.PP
Sun Microsystems, \fILinker and Libraries Guide\fP.
.PP
AMD64 ABI Draft, \fISystem V Application Binary Interface AMD64 Architecture
Processor Supplement\fP.
.PP
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.79 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
