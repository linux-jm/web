.\" Copyright (c) 1995 Michael Chastain (mec@shell.portal.com), 15 April 1995.
.\" and Copyright (C) 2014 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Modified 1997-01-31 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1997-07-30 by Paul Slootman <paul@wurtel.demon.nl>
.\" Modified 2004-05-27 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 1997 HANATAKA Shinya
.\"         all rights reserved.
.\" Translated 1997-12-17, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Updated and Modified 2001-06-12,Yuichi SATO <ysato@h4.dion.ne.jp>
.\" Updated and Modified 2004-12-28, Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated 2006-07-16, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v2.34
.\"
.TH ADJTIMEX 2 2014\-12\-31 Linux "Linux Programmer's Manual"
.SH 名前
adjtimex \- カーネルの時計を調整する
.SH 書式
.nf
\fB#define _BSD_SOURCE\fP      /* feature_test_macros(7) 参照 */
\fB#include <sys/timex.h>\fP

\fBint adjtimex(struct timex *\fP\fIbuf\fP\fB);\fP
.fi
.SH 説明
Linux は David L. Mill の時計調節アルゴリズムを使用している (RFC\ 5905 を参照)。 システムコール
\fBadjtimex\fP()  はこのアルゴリズムの調節のパラメーターを読み取ったり、設定したりする。 この関数は \fItimex\fP
構造体へのポインターを受け取り、その値でカーネルのパラメーターを更新して、 同じ構造体に現在のカーネルの値を返す。 この構造体は以下のように宣言される:
.PP
.in +4n
.nf
struct timex {
    int  modes;      /* モードの選択 */
    long offset;     /* 時刻オフセット; STA_NANO ステータスフラグが
                        設定されるとナノ秒で、それ以外はマイクロ秒 */
    long freq;       /* 周波数オフセット。 単位は 2^\-16 ppm
                        (parts per million)。 「注意」を参照 */
    long maxerror;   /* 最大エラー (マイクロ秒) */
    long esterror;   /* 推定エラー (マイクロ秒) */
    int  status;     /* クロックコマンド/ステータス */
    long constant;   /* PLL (phase\-locked loop) 時刻定数 */
    long precision;  /* クロック精度 (マイクロ秒、読み出し専用) */
    long tolerance;  /* クロック周波数耐性 (ppm、読み出し専用) */
    struct timeval time;
                     /* 現在時刻 (読み出し専用、 ADJ_SETOFFSET の
                        場合以外); リターン時は time.tv_usec は
                        STA_NANO ステータスフラグが設定されると
                        ナノ秒で、それ以外はマイクロ秒 */
    long tick;       /* クロック tick 間のマイクロ秒 */
    long ppsfreq;    /* PPS (pulse per second) 周波数 (単位は
                        2^\-16 ppm、「注意」を参照、読み出し専用) */
    long jitter;     /* PPS ジッター (読み出し専用); STA_NANO
                        ステータスフラグが設定されるとナノ秒、
                        それ以外はマイクロ秒 */
    int  shift;      /* PPS interval duration (秒、読み出し専用) */
    long stabil;     /* PPS 安定性 (2^\-16 ppm、「注意」を参照、
                        読み出し専用) */
    long jitcnt;     /* PPS ジッター上限超過 (読み出し専用) */
    long calcnt;     /* PPS 校正間隔 (読み出し専用) */
    long errcnt;     /* PPS 校正エラー (読み出し専用) */
    long stbcnt;     /* PPS 安定性上限超過 (読み出し専用) */
    int tai;         /* TAI オフセット、直前の ADJ_TAI 命令で設定
                        したもの (秒、読み出し専用、
                        Linux 2.6.26 以降) */
    /* これ以降のパディングバイトは将来の拡張用である */
};
.fi
.in
.PP
\fImodes\fP フィールドは (必要に応じて) どのパラメーターを設定するか決定する。 以下のビット値の 0 個以上の ビット \fIOR\fP
からなるビットマスクである。
.TP 
\fBADJ_OFFSET\fP
\fIbuf.offset\fP を時刻オフセットを設定する。
.TP 
\fBADJ_FREQUENCY\fP
\fIbuf.freq\fP を周波数オフセットを設定する。
.TP 
\fBADJ_MAXERROR\fP
\fIbuf.maxerror\fP を最大時刻エラーを設定する。
.TP 
\fBADJ_ESTERROR\fP
\fIbuf.esterror\fP を推定時刻エラー (estimated time error) を設定する。
.TP 
\fBADJ_STATUS\fP
\fIbuf.status\fP をクロックステータスを設定する。
.TP 
\fBADJ_TIMECONST\fP
\fIbuf.constant\fP を PLL の時刻定数を設定する。 (下記の) \fBSTA_NANO\fP ステータスフラグがクリアされた場合、
カーネルはこの値に 4 を足す。
.TP 
\fBADJ_SETOFFSET\fP (Linux 2.6.29 以降)
.\" commit 094aa1881fdc1b8889b442eb3511b31f3ec2b762
.\" Author: Richard Cochran <richardcochran@gmail.com>
\fIbuf.time\fP を現在時刻に加算する。 \fIbuf.status\fP に \fBADJ_NANO\fP フラグが指定された場合、
\fIbuf.time.tv_usec\fP はナノ秒として解釈される。 そうでない場合はマイクロ秒として解釈される。
.TP 
\fBADJ_MICRO\fP (Linux 2.6.36 以降)
.\" commit eea83d896e318bda54be2d2770d2c5d6668d11db
.\" Author: Roman Zippel <zippel@linux-m68k.org>
マイクロ秒単位の精度を選択する。
.TP 
\fBADJ_NANO\fP (Linux 2.6.36 以降)
.\" commit eea83d896e318bda54be2d2770d2c5d6668d11db
.\" Author: Roman Zippel <zippel@linux-m68k.org>
ナノ秒単位の精度を選択する。 \fBADJ_MICRO\fP と \fBADJ_NANO\fP の一方のみを指定すること。
.TP 
\fBADJ_TAI\fP (Linux 2.6.26 以降)
.\" commit 153b5d054ac2d98ea0d86504884326b6777f683d
\fIbuf\->constant\fP を TAI (Atomic International Time) オフセットを設定する。

\fBADJ_TAI\fP は \fBADJ_TIMECONST\fP と組み合わせて使わないこと。 \fBADJ_TIMECONST\fP も
\fIbuf\->constant\fP フィールド利用するからである。

TAI の詳細な説明および TAI と UTC の違いについては
.UR http://www.bipm.org/en/bipm/tai/tai.html
\fIBIPM\fP
.UE
を参照。
.TP 
\fBADJ_TICK\fP
\fIbuf.tick\fP を tick 値に設定する。
.PP
.\" In general, the other bits are ignored, but ADJ_OFFSET_SINGLESHOT 0x8001
.\" ORed with ADJ_NANO (0x2000) gives 0xa0001 == ADJ_OFFSET_SS_READ!!
上記の代わりに、 \fImodes\fP に以下の値 (複数ビットのマスク) のいずれかを指定することもできる。 この場合は他のビットは \fImodes\fP
に指定すべきではない。
.TP 
\fBADJ_OFFSET_SINGLESHOT\fP
.\" In user space, ADJ_OFFSET_SINGLESHOT is 0x8001
.\" In kernel space it is 0x0001, and must be ANDed with ADJ_ADJTIME (0x8000)
古い形式の \fBadjtime\fP(): 時刻を \fIbuf.offset\fP で指定された値で (徐々に) 調整する。 \fIbuf.offset\fP
はマイクロ秒単位の調整値である。
.TP 
\fBADJ_OFFSET_SS_READ\fP (Linux 2.6.28 以降で機能する)
.\" In user space, ADJ_OFFSET_SS_READ is 0xa001
.\" In kernel space there is ADJ_OFFSET_READONLY (0x2000) anded with
.\" ADJ_ADJTIME (0x8000) and ADJ_OFFSET_SINGLESHOT (0x0001) to give 0xa001)
.\" commit 52bfb36050c8529d9031d2c2513b281a360922ec
.\" commit 916c7a855174e3b53d182b97a26b2e27a29726a1
\fBADJ_OFFSET_SINGLESHOT\fP 操作を行った後でまだ残っている調整すべき時刻量を (\fIbuf.offset\fP で) 返す。
この機能は Linux 2.6.24 で追加されたが、 Linux 2.6.28 までは正常に動作しなかった。
.PP
通常のユーザーは \fImodes\fP の値は 0 か \fBADJ_OFFSET_SS_READ\fP のいずれかに制限されている。
スーパーユーザーのみが全てのパラメーターを設定できる。

\fIbuf.status\fP フィールドはビットマスクで、 このフィールドを使って NTP 実装に関連するステータスビットの設定や取得を行うことができる。
マスクのビットのいくつかは読み書き両用で、 他のビットは読み出し専用である。
.TP 
\fBSTA_PLL\fP
Phase Locked Loop (PLL) の更新を有効にする (読み書き両用)。 \fBADJ_OFFSET\fP 経由で設定できる。
.TP 
\fBSTA_PPSFREQ\fP
PPS freq discipline を有効にする (読み書き両用)
.TP 
\fBSTA_PPSTIME\fP
PPS time discipline を有効にする (読み書き両用)
.TP 
\fBSTA_FLL\fP
Frequency Locked Loop (FLL) モードを選択する (読み書き両用)
.TP 
\fBSTA_INS\fP
閏秒を挿入する (読み書き両用)
.TP 
\fBSTA_DEL\fP
閏秒を削除する (読み書き両用)
.TP 
\fBSTA_UNSYNC\fP
クロックを非同期状態にする (読み書き両用)
.TP 
\fBSTA_FREQHOLD\fP
周波数を保持する (読み書き両用)
.TP 
\fBSTA_PPSSIGNAL\fP
PPS 信号が存在する (読み出し専用)
.TP 
\fBSTA_PPSJITTER\fP
PPS 信号のジッターが超過している (読み出し専用)
.TP 
\fBSTA_PPSWANDER\fP
PPS 信号の wander が超過している (読み出し専用)
.TP 
\fBSTA_PPSERROR\fP
PPS 信号の校正エラー (読み出し専用)
.TP 
\fBSTA_CLOCKERR\fP
クロックハードウェア障害 (読み出し専用)
.TP 
\fBSTA_NANO\fP (Linux 2.6.26 以降)
.\" commit eea83d896e318bda54be2d2770d2c5d6668d11db
.\" Author: Roman Zippel <zippel@linux-m68k.org>
精度 (0 = マイクロ秒、 1 = ナノ秒; 読み出し専用)。 \fBADJ_NANO\fP でセットし、 \fBADJ_MICRO\fP でクリアする。
.TP 
\fBSTA_MODE\fP (Linux 2.6.26 以降)
.\" commit eea83d896e318bda54be2d2770d2c5d6668d11db
.\" Author: Roman Zippel <zippel@linux-m68k.org>
モード (0 = Phase Locked Loop, 1 = Frequency Locked Loop; 読み出し専用)
.TP 
\fBSTA_CLK\fP (Linux 2.6.26 以降)
.\" commit eea83d896e318bda54be2d2770d2c5d6668d11db
.\" Author: Roman Zippel <zippel@linux-m68k.org>
.\" FIXME It would be helpful to have some explanation of what
.\"       "Clock source" is.
クロック源 (0 = A, 1 = B; 読み出し専用)
.PP
\fIstatus\fP の読み出し専用ビットを設定しようとした場合は黙って無視される。
.SH 返り値
成功した場合、 \fBadjtimex\fP()  は クロックの状態、つまり、以下のいずれかの値を返す。
.TP  12
\fBTIME_OK\fP
クロックが同期している。
.TP 
\fBTIME_INS\fP
閏秒を挿入した。
.TP 
\fBTIME_DEL\fP
閏秒を削除した。
.TP 
\fBTIME_OOP\fP
閏秒が処理中である。
.TP 
\fBTIME_WAIT\fP
閏秒が発生した。
.TP 
\fBTIME_ERROR\fP
クロックが同期していない。 シンボル名 \fBTIME_BAD\fP は \fBTIME_ERROR\fP の同義語であり、 過去互換性のために提供されている。
.PP
失敗した場合は \fBadjtimex\fP()  は \-1 を返し、 \fIerrno\fP が設定される。
.SH エラー
.TP 
\fBEFAULT\fP
\fIbuf\fP が書き込み可能なメモリーを指していない。
.TP 
\fBEINVAL\fP
\fIbuf.offset\fP へ \-131071 〜 +131071 の範囲以外の値を設定しようとしたか、 \fIbuf.status\fP
に上記以外の値を設定しようとしたか、 \fIbuf.tick\fP に 900000/\fBHZ\fP 〜 1100000/\fBHZ\fP
の範囲以外の値を設定しようとした。 ここで \fBHZ\fP はシステムのタイマー割り込みの周期である。
.TP 
\fBEPERM\fP
\fIbuf.modes\fP が 0 でも \fBADJ_OFFSET_SS_READ\fP でもなく、かつ呼び出し元が十分な特権を持っていない。 Linux
では \fBCAP_SYS_TIME\fP ケーパビリティが必要である。
.SH 注意
構造体 \fItimex\fP では、 \fIfreq\fP, \fIppsfreq\fP, \fIstabil\fP は小数部が 16 ビットの ppm (parts per
million) である。 つまり、 これらのフィールドの値 1 は 2^\-16 ppm で、 2^16=65536 が 1 ppm である。 入力
(\fIfreq\fP の場合) でも出力でもこの通りである。
.SH 準拠
\fBadjtimex\fP()  は Linux 特有であり、 移植を意図したプログラムで使用すべきではない。 システムクロックを調整する方法で、
移植性があるが自由度は劣る方法については \fBadjtime\fP(3)  を参照のこと。
.SH 関連項目
\fBsettimeofday\fP(2), \fBadjtime\fP(3), \fBcapabilities\fP(7), \fBtime\fP(7),
\fBadjtimex\fP(8)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.79 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
