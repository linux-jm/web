.\" Copyright 1993 Rickard E. Faith (faith@cs.unc.edu) and
.\" and Copyright 2002 Michael Kerrisk
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Fri Jan 31 16:26:07 1997 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Fri Dec 11 17:57:27 1998 by Jamie Lokier <jamie@imbolc.ucc.ie>
.\" Modified 24 Apr 2002 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Substantial rewrites and additions
.\" 2005-05-10 mtk, noted that lock conversions are not atomic.
.\"
.\" FIXME Maybe document LOCK_MAND, LOCK_RW, LOCK_READ, LOCK_WRITE
.\" which only have effect for SAMBA.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 1996 Takeshi Ueno
.\"         all rights reserved.
.\" Translated 1996-07-03, Takeshi Ueno <tueno@vio.co.jp>
.\" Modified 1997-12-14, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Modified 1999-08-14, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Modified 2002-09-24, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Modified 2005-02-26, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2005-09-06, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\"
.TH FLOCK 2 2017\-09\-15 Linux "Linux Programmer's Manual"
.SH 名前
flock \- オープンされたファイルに対するアドバイザリロックの適用、解除を行う
.SH 書式
\fB#include <sys/file.h>\fP
.PP
\fBint flock(int \fP\fIfd\fP\fB, int \fP\fIoperation\fP\fB);\fP
.SH 説明
オープンされたファイルにアドバイザリロック (advisory lock) の適用 や解除を行う。 ファイルは \fIfd\fP で指定する。引数
\fIoperation\fP には以下のいずれか一つを指定する:
.RS 4
.TP  9
\fBLOCK_SH\fP
共有ロックを適用する。 指定したファイルに対して、 一つ以上のプロセスが同時に共有ロックを保持することができる。
.TP 
\fBLOCK_EX\fP
排他ロックを適用する。 指定したファイルに対して、 ただ一つのプロセスだけが同時に排他ロックを保持することができる。
.TP 
\fBLOCK_UN\fP
このプロセスが保持している既存のロックを解除する。
.RE
.PP
\fBflock\fP()  を呼び出したときに、指定したロック種別と異なるロックが別プロセスによって 保持されていると、 \fBflock\fP()  は停止
(block) されることがある。 非停止 (nonblocking) タイプの要求を行うためには、 上記の操作 (operation) に
\fBLOCK_NB\fP を論理和の形で指定する。
.PP
一つのファイルに共有ロックと排他ロックを同時に設定することはできない。
.PP
\fBflock\fP() によって作られるロックは、 オープンファイル記述 (open file description) (\fBopen\fP(2) 参照)
と関連付けられる。 したがって、ファイルディスクリプターの複製 (\fBfork\fP(2)  や \fBdup\fP(2)  などにより作成される)
は同じロックを参照し、 これらのファイルディスクリプターのどれを使っても このロックを変更したり解放したりできる。 また、ロックの解放は、
上記の複数のファイルディスクリプターのいずれかに対して 明示的に \fBLOCK_UN\fP 操作を指示した場合か、これらのファイルディスクリプターがすべて
閉じられた場合に行われる。
.PP
あるプロセスが \fBopen\fP(2)  (もしくは同様の方法) を使って同じファイルに対して 複数のファイルディスクリプターを取得した場合、
\fBflock\fP()  はこれら複数のファイルディスクリプターを各々独立のものとして扱う。
これらのファイルディスクリプターの一つを使ってファイルをロックしようと
した際、そのロック要求は、呼び出し元のプロセスがそのファイルの別のファイルディスクリプター経由ですでに設定しているロックによって拒否される場合がある。
.PP
一つのプロセスは、一つのファイルに対して (共有ロックと排他ロックのうち)  いずれか一種類のロックしか設定できない。 既にロックされたファイルに対して
\fBflock\fP()  を呼び出すと、既存のロックを新しいロックモードに変更することになる。
.PP
\fBflock\fP()  により作成されたロックは \fBexecve\fP(2)  の前後で保存される。
.PP
共有ロックも排他ロックも、ファイルがどのモードでオープンされたかに 関係なく適用することができる。
.SH 返り値
成功した場合は 0 が返される。エラーの場合は \-1 が返され、 \fIerrno\fP が適切に設定される。
.SH エラー
.TP 
\fBEBADF\fP
\fIfd\fP がオープンされたファイルディスクリプターではない。
.TP 
\fBEINTR\fP
ロックの獲得を待っている間に、ハンドラーにより捕捉されたシグナルを 受信し、 \fBflock\fP()  が中断された。 \fBsignal\fP(7)  参照。
.TP 
\fBEINVAL\fP
\fIoepration\fP が無効である。
.TP 
\fBENOLCK\fP
ロックレコードを割り当てるためのメモリーが不足している。
.TP 
\fBEWOULDBLOCK\fP
指定したファイルがロックされており、 \fBLOCK_NB\fP フラグが指定されている。
.SH 準拠
4.4BSD (\fBflock\fP()  コールは 4.2BSD で最初に登場した)。 \fBfcntl\fP(2)  で実装されているものなどを含めると、
\fBflock\fP()  の機能はほとんどの UNIX システムで実装されている。
.SH 注意
.\" E.g., according to the flock(2) man page, FreeBSD since at least 5.3
kernel 2.0 以降では、 \fBflock\fP()  は、GNU C ライブラリでの \fBfcntl\fP(2)
を呼び出してのエミュレーションではなく、 それ自体がシステムコールとして実装されている。 この実装では、 \fBflock\fP()  と
\fBfcntl\fP(2)  で適用されるロックの種別には相互作用がなくなり、 \fBflock\fP()  がデッドロックを検出しなくなる。 (ただし、最近の
BSD などいくつかのシステムでは、 \fBflock\fP() と \fBfcntl\fP(2) ロックが互いに影響することが「ある」という点に注意すること。)
.PP
\fBflock\fP()  アドバイザリロックだけを適用する。したがって、ファイルに適切なアクセス権を 付与していれば、プロセスは \fBflock\fP()
の使用に無視して、ファイルへの入出力を行うことができる。
.PP
\fBflock\fP()  と \fBfcntl\fP(2)  は fork されたプロセスと \fBdup\fP(2)  で違った動作をする。 \fBflock\fP()
を \fBfcntl\fP(2)  を使って実装しているシステムでは、 \fBflock\fP()
の動作はこのマニュアルページに記載されているものとは違うだろう。
.PP
.\" Kernel 2.5.21 changed things a little: during lock conversion
.\" it is now the highest priority process that will get the lock -- mtk
ロックの変換 (共有ロックから排他ロックへ、もしくはその反対) がアトミックに 行われることは保証されていない:
既存のロックがまず削除され、それから新しい ロックが設定される。この 2つのステップの間に、他のプロセスからの処理待ちの
ロック要求が認められるかもしれず、結果として変換は停止 (block) したり、 (\fBLOCK_NB\fP が指定された場合には) 失敗したりする。
(これは元々の BSD の動作であり、多くの他の実装でも起こる。)
.SS "NFS での詳細"
In Linux kernels up to 2.6.11, \fBflock\fP()  does not lock files over NFS
(i.e., the scope of locks was limited to the local system).  Instead, one
could use \fBfcntl\fP(2)  byte\-range locking, which does work over NFS, given a
sufficiently recent version of Linux and a server which supports locking.
.PP
Since Linux 2.6.12, NFS clients support \fBflock\fP()  locks by emulating them
as \fBfcntl\fP(2)  byte\-range locks on the entire file.  This means that
\fBfcntl\fP(2)  and \fBflock\fP()  locks \fIdo\fP interact with one another over
NFS.  It also means that in order to place an exclusive lock, the file must
be opened for writing.
.PP
.\" commit 5eebde23223aeb0ad2d9e3be6590ff8bbfab0fc2
Since Linux 2.6.37, the kernel supports a compatibility mode that allows
\fBflock\fP()  locks (and also \fBfcntl\fP(2)  byte region locks) to be treated as
local; see the discussion of the \fIlocal_lock\fP option in \fBnfs\fP(5).
.SH 関連項目
 \fBflock\fP(1), \fBclose\fP(2), \fBdup\fP(2), \fBexecve\fP(2), \fBfcntl\fP(2), \fBfork\fP(2),
\fBopen\fP(2), \fBlockf\fP(3), \fBlslocks\fP(8)
.PP
Linux カーネルソース内の \fIDocumentation/filesystems/locks.txt\fP (以前のカーネルでは
\fIDocumentation/locks.txt\fP)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
