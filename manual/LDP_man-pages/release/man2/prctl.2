.\" Copyright (C) 1998 Andries Brouwer (aeb@cwi.nl)
.\" and Copyright (C) 2002, 2006, 2008, 2012, 2013 Michael Kerrisk <mtk.manpages@gmail.com>
.\" and Copyright Guillem Jover <guillem@hadrons.org>
.\" and Copyright (C) 2014 Dave Hansen / Intel
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Thu Nov 11 04:19:42 MET 1999, aeb: added PR_GET_PDEATHSIG
.\" Modified 27 Jun 02, Michael Kerrisk
.\" 	Added PR_SET_DUMPABLE, PR_GET_DUMPABLE,
.\"	PR_SET_KEEPCAPS, PR_GET_KEEPCAPS
.\" Modified 2006-08-30 Guillem Jover <guillem@hadrons.org>
.\"	Updated Linux versions where the options where introduced.
.\"	Added PR_SET_TIMING, PR_GET_TIMING, PR_SET_NAME, PR_GET_NAME,
.\"	PR_SET_UNALIGN, PR_GET_UNALIGN, PR_SET_FPEMU, PR_GET_FPEMU,
.\"	PR_SET_FPEXC, PR_GET_FPEXC
.\" 2008-04-29 Serge Hallyn, Document PR_CAPBSET_READ and PR_CAPBSET_DROP
.\" 2008-06-13 Erik Bosman, <ejbosman@cs.vu.nl>
.\"     Document PR_GET_TSC and PR_SET_TSC.
.\" 2008-06-15 mtk, Document PR_SET_SECCOMP, PR_GET_SECCOMP
.\" 2009-10-03 Andi Kleen, document PR_MCE_KILL
.\" 2012-04 Cyrill Gorcunov, Document PR_SET_MM
.\" 2012-04-25 Michael Kerrisk, Document PR_TASK_PERF_EVENTS_DISABLE and
.\"				PR_TASK_PERF_EVENTS_ENABLE
.\" 2012-09-20 Kees Cook, update PR_SET_SECCOMP for mode 2
.\" 2012-09-20 Kees Cook, document PR_SET_NO_NEW_PRIVS, PR_GET_NO_NEW_PRIVS
.\" 2012-10-25 Michael Kerrisk, Document PR_SET_TIMERSLACK and
.\"                             PR_GET_TIMERSLACK
.\" 2013-01-10 Kees Cook, document PR_SET_PTRACER
.\" 2012-02-04 Michael kerrisk, document PR_{SET,GET}_CHILD_SUBREAPER
.\" 2014-11-10 Dave Hansen, document PR_MPX_{EN,DIS}ABLE_MANAGEMENT
.\"
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 1998-1999 HANATAKA Shinya
.\"         all rights reserved.
.\" Translated 1999-04-03, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Updated 2002-12-20, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2005-09-06, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2005-10-07, Akihiro MOTOKI
.\" Updated 2007-01-08, Akihiro MOTOKI, LDP v2.43
.\" Updated 2007-10-12, Akihiro MOTOKI, LDP v2.66
.\" Updated 2008-08-12, Akihiro MOTOKI, LDP v3.05
.\"
.TH PRCTL 2 2015\-02\-01 Linux "Linux Programmer's Manual"
.SH 名前
prctl \- プロセスの操作を行なう
.SH 書式
.nf
\fB#include <sys/prctl.h>\fP
.sp
\fBint prctl(int \fP\fIoption\fP\fB, unsigned long \fP\fIarg2\fP\fB, unsigned long \fP\fIarg3\fP\fB,\fP
\fB          unsigned long \fP\fIarg4\fP\fB, unsigned long \fP\fIarg5\fP\fB);\fP
.fi
.SH 説明
\fBprctl\fP()  の動作は最初の引き数によって決定される (この値は \fI<linux/prctl.h>\fP に定義されている)。
残りの引き数は最初の引き数によって変化する。 一番目の引き数として以下のものを指定できる:
.TP 
\fBPR_CAPBSET_READ\fP (Linux 2.6.25 以降)
で指定されたケーパビリティが呼び出したスレッドのケーパビリティ バインディングセット (capability bounding set)
に含まれている場合、 (関数の結果として) 1 を返し、そうでない場合 0 を返す (ケーパビリティ定数は
\fI<linux/capability.h>\fP で定義されている)。 ケーパビリティバウンディングセットは、 \fBexecve\fP(2)
を呼び出した際に、ファイルの許可 (permitted) ケーパビリティの中で そのプロセスが獲得できるケーパビリティを指示するものである。

\fIarg2\fP に指定されたケーパビリティが有効でない場合、 呼び出しはエラー \fBEINVAL\fP で失敗する。
.TP 
\fBPR_CAPBSET_DROP\fP (Linux 2.6.25 以降)
呼び出したスレッドがケーパビリティ \fBCAP_SETPCAP\fP を持っている場合、 呼び出したスレッドのケーパビリティバウンディングセットから
\fIarg2\fP で指定されたケーパビリティを外す。 呼び出したスレッドの子プロセスは変更後のバウンディングセットを 継承する。

呼び出したスレッドが \fBCAP_SETPCAP\fP を持っていない場合、呼び出しはエラー \fBEPERM\fP で失敗する。 \fIarg2\fP
に指定されたケーパビリティが有効でない場合、 \fBEINVAL\fP で失敗する。 ファイルケーパビリティがカーネルで有効になっていない場合
(この場合にはバウンディングセットがサポートされない)、 \fBEINVAL\fP で失敗する。
.TP 
\fBPR_SET_CHILD_SUBREAPER\fP (Linux 3.4 以降)
.\" commit ebec18a6d3aa1e7d84aab16225e87fd25170ec2b
\fIarg2\fP が 0 以外の場合、 呼び出し元プロセスの "child subreaper" 属性をセットする。 \fIarg2\fP が 0 の場合、
この属性をクリアする。 プロセスが child subreaper のマークが付いている場合、 このプロセスの子プロセスやその子孫にはすべて
subreaper のマークが付与される。 subreaper は事実上その子孫のプロセスに対して \fBinit\fP(1) の役割を果たす。
孤児になったプロセス (直接の親プロセスがすでに終了しているプロセス) が終了した際、 そのプロセスに subreaper のマークが付いていると、
最も近い存在する先祖の subreaper プロセスに \fBSIGCHLD\fP シグナルが送られ、 そのプロセスの \fBwait\fP
を使って終了ステータスを知ることができる。
.TP 
\fBPR_GET_CHILD_SUBREAPER\fP (Linux 3.4 以降)
呼び出し元の "child subreaper" 設定を、 \fI(int\ *) arg2\fP が指す場所に返す。
.TP 
\fBPR_SET_DUMPABLE\fP (Linux 2.3.20 以降)
.\" See http://marc.theaimsgroup.com/?l=linux-kernel&m=115270289030630&w=2
.\" Subject:    Fix prctl privilege escalation (CVE-2006-2451)
.\" From:       Marcel Holtmann <marcel () holtmann ! org>
.\" Date:       2006-07-12 11:12:00
(Linux 2.3.20 以降)
デフォルトの振る舞いではコアダンプを引き起こすようなシグナルを受信したときに、呼び出し元のプロセスでコアダンプを生成するかどうかを決定するフラグを設定する
(通常このフラグは、デフォルトではセットされているが、 set\-user\-ID あるいは set\-group\-ID プログラムが実行されたり、
さまざまなシステムコールによってプロセスの UID や GID が操作されたときに クリアされる)。 2.6.12 以前のカーネルでは、 \fIarg2\fP
は 0 (プロセスはダンプ不可) あるいは 1 (プロセスはダンプ可能) の どちらかでなければならない。 2.6.13 から 2.6.17
までのカーネルでは、値 2 も認められていた。 この値を指定すると、通常はダンプされないバイナリが root だけが 読み込み可能な形でダンプされた。
セキュリティ上の理由から、この機能は削除された (\fBproc\fP(5) の \fI/proc/sys/fs/suid_dumpable\fP の説明も参照)。
ダンプ不可のプロセスを \fBptrace\fP(2) \fBPTRACE_ATTACH\fP 経由で接続することはできない。
.TP 
\fBPR_GET_DUMPABLE\fP (Linux 2.3.20 以降)
.\" Since Linux 2.6.13, the dumpable flag can have the value 2,
.\" but in 2.6.13 PR_GET_DUMPABLE simply returns 1 if the dumpable
.\" flags has a nonzero value.  This was fixed in 2.6.14.
(Linux 2.3.20 以降)  呼び出し元プロセスにおけるダンプ可能フラグの 現在の状態を (関数の結果として) 返す。
.TP 
\fBPR_SET_ENDIAN\fP (Linux 2.6.18 以降、PowerPC のみ)
.\" Respectively 0, 1, 2
呼び出し元プロセスのエンディアン設定 (endian\-ness) を \fIarg2\fP で指定された値に設定する。 指定できる値は
\fBPR_ENDIAN_BIG\fP, \fBPR_ENDIAN_LITTLE\fP, \fBPR_ENDIAN_PPC_LITTLE\fP (PowerPC
擬似リトルエンディアン)  のいずれか一つである。
.TP 
\fBPR_GET_ENDIAN\fP (Linux 2.6.18 以降、PowerPC のみ)
呼び出し元プロセスのエンディアン設定 (endian\-ness) を \fI(int\ *) arg2\fP が指す場所に格納して返す。
.TP 
\fBPR_SET_FPEMU\fP (Linux 2.4.18 以降, 2.5.9, ia64 のみ)
浮動小数点エミュレーション (floating\-point emulation) 制御ビットを \fIarg2\fP で指定された値に設定する。
指定できる値は \fBPR_FPEMU_NOPRINT\fP (浮動小数点命令アクセスを黙って エミュレートする) か \fBPR_FPEMU_SIGFPE\fP
(浮動小数点命令をエミュレートせず、 代わりに \fBSIGFPE\fP を送る) である。
.TP 
\fBPR_GET_FPEMU\fP (Linux 2.4.18 以降, 2.5.9, ia64 のみ)
浮動小数点エミュレーション制御ビットの値を \fI(int\ *) arg2\fP が指す場所に格納して返す。
.TP 
\fBPR_SET_FPEXC\fP (Linux 2.4.21 および 2.5.32 以降、PowerPC のみ)
浮動小数点例外モード (floating\-point exception mode) を \fIarg2\fP で指定された値に設定する。
指定できるのは以下の値である: \fBPR_FP_EXC_SW_ENABLE\fP (FPEXC で浮動小数点例外を有効にする)、
\fBPR_FP_EXC_DIV\fP (0 除算)、 \fBPR_FP_EXC_OVF\fP (オーバーフロー)、 \fBPR_FP_EXC_UND\fP
(アンダーフロー)、 \fBPR_FP_EXC_RES\fP (不正確な結果 (inexact result))、 \fBPR_FP_EXC_INV\fP
(不正な命令 (invalid operation))、 \fBPR_FP_EXC_DISABLED\fP (浮動小数点例外を無効にする)、
\fBPR_FP_EXC_NONRECOV\fP (async nonrecoverable exception mode)、
\fBPR_FP_EXC_ASYNC\fP (async recoverable exception mode)、 \fBPR_FP_EXC_PRECISE\fP
(precise exception mode)。
.TP 
\fBPR_GET_FPEXC\fP(Linux 2.4.21 および 2.5.32 以降、PowerPC のみ)
浮動小数点例外モードの値を \fI(int\ *) arg2\fP が指す場所に格納して返す。
.TP 
\fBPR_SET_KEEPCAPS\fP (Linux 2.2.18 以降)
スレッドの「ケーパビリティ保持」フラグを設定する。 このフラグは、スレッドの実 UID、実効 UID、保存 set\-user\-ID
のうち少なくとも一つが 0 であった状態から、これら全てが 0 以外に変更されたとき、
スレッドの許可ケーパビリティ集合がクリアされるかどうかを決定する。
デフォルトでは、このような変更が行われた場合、許可ケーパビリティセットはクリアされる。「ケーパビリティ保持」フラグを設定すると、許可ケーパビリティセットはクリアされなくなる。
\fIarg2\fP は 0 (許可ケーパビリティをクリアする) か 1 (許可ケーパビリティを保持する) の どちらかでなければならない。 (このような
ID の変更が行われた場合、「ケーパビリティ保持」フラグの設定に関わらず、スレッドの\fI実効\fPケーパビリティセットは常にクリアされる。)
\fBexecve\fP(2) が呼び出されると、「ケーパビリティ保持」フラグは 0 にリセットされる。
.TP 
\fBPR_GET_KEEPCAPS\fP (Linux 2.2.18 以降)
呼び出し元スレッドにおける「ケーパビリティ保持」フラグの 現在の状態を (関数の結果として) 返す。
.TP 
\fBPR_SET_NAME\fP (Linux 2.6.9 以降)
.\" TASK_COMM_LEN in include/linux/sched.h
呼び出し元スレッドのプロセス名を \fI(char\ *) arg2\fP が指す場所に格納された値を使って設定する。 名前は終端の NULL
バイトを含めて最大で 16 バイトである (終端の NULL バイトを含めた文字列の長さが 16 バイトを超える場合、 文字列は黙って切り詰められる)。
これは、 \fBpthread_setname_np\fP(3) で設定でき、 \fBpthread_getname_np\fP(3)
で取得できるのと同じ属性である。 同様に、 \fItid\fP が呼び出し元スレッドの ID の場合、 この属性は
\fI/proc/self/task/[tid]/comm\fP 経由でもアクセス可能である。
.TP 
\fBPR_GET_NAME\fP (Linux 2.6.11 以降)
呼び出し元スレッドの名前を \fI(char\ *) arg2\fP が指す場所に格納して返す。 バッファーは最大で 16
バイトを格納できるようにすべきである。 返される文字列はヌル終端される。
.TP 
\fBPR_SET_NO_NEW_PRIVS\fP (Linux 3.5 以降)
呼び出し元プロセスの \fIno_new_privs\fP ビットを \fIarg2\fP の値に設定する。 \fIno_new_privs\fP が 1
に設定されると、 \fBexecve\fP(2) は、 \fBexecve\fP(2) の呼び出しなしでは実行できなかったことに対する特権を許可しなくなる
(例えば、 set\-user\-ID/set\-group\-ID 許可ビットやファイルケーパビリティが動作しなくなる)。 一度設定される、
このビットは解除することができない。 このビットの設定は \fBfork\fP(2) や \fBclone\fP(2) で作成された子プロセスに継承され、
\fBexecve\fP(2) の前後で保持される。

詳しい情報は、カーネルソースファイル \fIDocumentation/prctl/no_new_privs.txt\fP を参照。
.TP 
\fBPR_GET_NO_NEW_PRIVS\fP (Linux 3.5 以降)
現在のプロセスの \fIno_new_privs\fP ビットの値を (関数の結果として) 返す。 値 0 は通常の \fBexecve\fP(2)
の動作を意味する。 値 1 は \fBexecve\fP(2) が上記で述べた特権を制限する動作をすることを示す。
.TP 
\fBPR_SET_PDEATHSIG\fP (Linux 2.1.57 以降)
親プロセス死亡シグナル (parent process death signal) を \fIarg2\fP に設定する (設定できるシグナル値の範囲は
1..maxsig であり、0 は通知の解除である)。 呼び出し元プロセスの親プロセスが死んだ際に、ここで設定した値が
シグナルとして通知される。この値は \fBfork\fP(2) の子プロセスでは解除される。 (Linux 2.4.36 以降および 2.6.23 以降では)
set\-user\-ID もしくは set\-group\-ID されたバイナリを実行した場合にも、このフラグは解除される。この値は \fBexecve\fP(2)
の前後で保持される。
.TP 
\fBPR_GET_PDEATHSIG\fP (Linux 2.3.15 以降)
親プロセス死亡シグナルの現在の値を \fI(int\ *) arg2\fP が指す場所に格納して返す。
.TP 
\fBPR_SET_PTRACER\fP (Linux 3.4 以降)
.\" commit 2d514487faf188938a4ee4fb3464eeecfbdcf8eb
.\" commit bf06189e4d14641c0148bea16e9dd24943862215
この設定は Yama LSM が有効になっていてモード 1 ("restricted ptrace") の場合のみに意味を持つ (モードは
\fI/proc/sys/kernel/yama/ptrace_scope\fP で参照可能)。 "ptrace プロセス ID" が \fIarg2\fP
で渡された場合、 呼び出し元は ptracer プロセスがそのプロセスが直接のプロセスの先祖であるかのよう呼び出したプロセスを \fBptrace\fP
できる、 と宣言しているということだ。 \fBPR_SET_PTRACER\fP 操作を行う毎に、 直前の "ptracer プロセス ID"
は置きかえられる。 \fIarg2\fP で \fBPR_SET_PTRACER\fP を 0 に設定すると、 呼び出し元の "ptracer プロセス ID"
がクリアされる。 \fIarg2\fP が \fBPR_SET_PTRACER\fP の場合、 Yama が導入した ptrace
の制限は呼び出し元プロセスに対しては無効になる。

詳しい情報は、カーネルソースファイル \fIDocumentation/security/Yama.txt\fP を参照。
.TP 
\fBPR_SET_SECCOMP\fP (Linux 2.6.23 以降)
.\" See http://thread.gmane.org/gmane.linux.kernel/542632
.\" [PATCH 0 of 2] seccomp updates
.\" andrea@cpushare.com
呼び出したスレッドのセキュアコンピューティング (seccomp) モードを設定する。 最近の \fBseccomp\fP(2) システムコールは
\fBPR_SET_SECCOMP\fP の上位互換の機能を提供する。

seccomp モードは \fIarg2\fP で指定できる (seccomp 定数は \fI<linux/seccomp.h>\fP
で定義されている)。

\fIarg2\fP を \fBSECCOMP_MODE_STRICT\fP に設定すると、 そのスレッドが呼び出しを許可されるシステムコールは
\fBread\fP(2), \fBwrite\fP(2), \fB_exit\fP(2), \fBsigreturn\fP(2) だけになる。
それ以外のシステムコールを呼び出すと、シグナル \fBSIGKILL\fP が配送される。 パイプやソケットから読み込んだ、
信頼できないバイトコードを実行する必要がある大量の演算を行うアプリケーションにおいて、 strict secure computing モードは役立つ。
この操作は利用できるのは、 カーネルが \fBCONFIG_SECCOMP\fP を有効にして作成されている場合だけである。

\fIarg2\fP を \fBSECCOMP_MODE_FILTER\fP (Linux 3.5 以降) に設定すると、 許可されるシステムコールは
\fIarg3\fP で渡された Berkeley Packet Filter へのポインターで定義される。 この引き数は \fIstruct
sock_fprog\fP へのポインターである。 これは任意のシステムコールやシステムコール引き数をフィルタリングするために設計された。
このモードはカーネルで \fBCONFIG_SECCOMP_FILTER\fP が有効になっている場合にのみ利用可能である。

\fBSECCOMP_MODE_FILTER\fP フィルターで \fBfork\fP(2) が許可されている場合、 seccomp モードは \fBfork\fP(2)
で作成された子プロセスに継承される。 \fBexecve\fP(2) が許可されている場合、 seccomp モードは \fBexecve\fP(2)
の前後で維持される。 フィルターで \fBprctl\fP() コールが許可されている場合、 追加でフィルターが定義され、
これらのフィルターは許可されないものが見つかるまで指定された順序で実行される。

詳しい情報は、カーネルソースファイル \fIDocumentation/prctl/seccomp_filter.txt\fP を参照。
.TP 
\fBPR_GET_SECCOMP\fP (Linux 2.6.23 以降)
呼び出したスレッドの secure computing モードを (関数の結果として) 返す。 呼び出したスレッドが secure computing
モードでなかった場合、 この操作は 0 を返し、 呼び出したスレッドが strict secure computing モードの場合、
\fBprctl\fP()  を呼び出すとシグナル \fBSIGKILL\fP がそのプロセスに送信される。 呼び出したスレッドがフィルタモードで、
このシステムコールが seccomp フィルタにより許可されている場合、 2 を返し、 そうでない場合プロセスは \fBSIGKILL\fP シグナルで
kill されづ。 この操作が利用できるのは、カーネルが \fBCONFIG_SECCOMP\fP を有効にして作成されている場合だけである。

Linux 3.8 以降では、 \fI/proc/[pid]/status\fP の \fIseccomp\fP フィールドからも同じ情報を取得できる。
この方法の場合はプロセスが kill される危険はない。 \fBproc\fP(5) を参照。
.TP 
\fBPR_SET_SECUREBITS\fP (Linux 2.6.26 以降)
呼び出したスレッドの "securebits" フラグを \fIarg2\fP で渡された値に設定する。 \fBcapabilities\fP(7)  参照。
.TP 
\fBPR_GET_SECUREBITS\fP (Linux 2.6.26 以降)
呼び出したスレッドの "securebits" フラグを (関数の結果として) 返す。 \fBcapabilities\fP(7)  参照。
.TP 
\fBPR_SET_THP_DISABLE\fP (Linux 3.15 以降)
.\" commit a0715cc22601e8830ace98366c0c2bd8da52af52
呼び出したスレッドの "THP disable" (THP 無効) フラグの状態を設定する。 \fIarg2\fP が 0
以外の場合、フラグは有効になり、そうでない場合はクリーンされる。 このフラグを設定する方法により、 コードを変更できなかったり
\fBmadvise\fP(2) の malloc hook をが有効ではないジョブ (この方法は静的に割り当てられたデータには有効ではない)に対して、
transparent huge pages を無効にする手段が提供される。 "THP disable" フラグの設定は \fBfork\fP(2)
で作成された子プロセスに継承され、 \fBexecve\fP の前後で維持される。
.TP 
\fBPR_GET_THP_DISABLE\fP (Linux 3.15 以降)
呼び出し元スレッドの "THP disable" フラグの現在の設定を (関数の結果として) 返す。フラグがセットされている場合は 1
が、セットされていない場合は 0 が返る。
.TP 
\fBPR_GET_TID_ADDRESS\fP (Linux 3.5 以降)
.\" commit 300f786b2683f8bb1ec0afb6e1851183a479c86d
\fBset_tid_address\fP(2) や \fBclone\fP(2) \fBCLONE_CHILD_CLEARTID\fP フラグで設定された
\fIclear_child_tid\fP を取得し、 \fI(int\ **)\ arg2\fP が指す場所に格納して返す。 この機能はカーネルが
\fBCONFIG_CHECKPOINT_RESTORE\fP オプションを有効にして作成されている場合にのみ利用できる。
.TP 
\fBPR_SET_TIMERSLACK\fP (Linux 2.6.28 以降)
.\" See https://lwn.net/Articles/369549/
.\" commit 6976675d94042fbd446231d1bd8b7de71a980ada
.\" It seems that it's not possible to set the timer slack to zero;
.\" The minimum value is 1? Seems a little strange.
呼び出し元スレッドの現在の timer slack を \fIarg2\fP で指定されたナノ秒に設定する。 \fIarg2\fP が 0 以下の場合、 現在の
timer slack をそのスレッドのデフォルトの timer slack 値にリセットする。 カーネルは timer slack を使って、
呼び出し元スレッドのタイマー満了のうち、どのくらい近いものグルーピングする (一纏めにする) かを決める。 その結果、
そのスレッドのタイマーの満了は最大で指定されたナノ秒分だけ遅れる場合がある。 タイマー満了をグルーピングすることで、 CPU
を起こす回数が最小化されシステムの消費電力を減らすことができる。

.\" List obtained by grepping for futex usage in glibc source
timer slack の影響を受けるのは、 システムコール \fBselect\fP(2), \fBpselect\fP(2), \fBpoll\fP(2),
\fBppoll\fP(2), \fBepoll_wait\fP(2), \fBepoll_pwait\fP(2), \fBclock_nanosleep\fP(2),
\fBnanosleep\fP(2), \fBfutex\fP(2) により設定されたタイマー満了である
(また、 futex を使って実装されているライブラリ関数 \fBpthread_cond_timedwait\fP(3),
\fBpthread_mutex_timedlock\fP(3), \fBpthread_rwlock_timedrdlock\fP(3),
\fBpthread_rwlock_timedwrlock\fP(3), \fBsem_timedwait\fP(3) も影響を受ける)。

timer slack はリアルタイムスケジューリングポリシーでスケジューリングされるスレッドには提供されない
(\fBsched_setscheduler\fP(2) 参照)。

各スレッドには timer slack に関連する値が 2 つある。 「デフォルト値」と「現在値」である。
現在値はタイマー満了のグルーピングを制御する。 新しいスレッドが作成される際、 2 つの timer slack
値はそのスレッドを作成したスレッドの現在値と同じに設定される。 その後、 スレッドは \fBPR_SET_TIMERSLACK\fP で現在の timer
slack 値を調整できる (デフォルト値は変更できない)。 すべてのプロセスの先祖となる \fIinit\fP (PID 1) の timer slack
値は 50,000 ナノ秒 (50 ミリ秒) である。 timer slack 値は \fBexecve\fP(2) の前後で保持される。
.TP 
\fBPR_GET_TIMERSLACK\fP (Linux 2.6.28 以降)
呼び出し元スレッドの現在のタイマーのスラック値を (関数の結果として) 返す。
.TP 
\fBPR_SET_TIMING\fP (Linux 2.6.0\-test4 以降)
.\" 0
.\" 1
.\" PR_TIMING_TIMESTAMP doesn't do anything in 2.6.26-rc8,
.\" and looking at the patch history, it appears
.\" that it never did anything.
(通常の、伝統的に使われてきた) 統計的なプロセスタイミングを使用するか、 正確なタイムスタンプに基づくプロセスタイミングを使用するかを設定する。
\fIarg2\fP に指定できる値は \fBPR_TIMING_STATISTICAL\fP か \fBPR_TIMING_TIMESTAMP\fP である。
\fBPR_TIMING_TIMESTAMP\fP は現在のところ実装されていない (このモードに設定しようとするとエラー \fBEINVAL\fP
が起こることだろう)。
.TP 
\fBPR_GET_TIMING\fP (Linux 2.6.0\-test4 以降)
現在使用中のプロセスタイミングを決める方法を (関数の結果として) 返す。
.TP 
\fBPR_TASK_PERF_EVENTS_DISABLE\fP (Linux 2.6.31 以降)
呼び出したプロセスに接続されたすべての性能カウンターを無効にする。 カウンターがこのプロセスにより作成されたか他のプロセスにより作成されたかは関係ない。
呼び出したプロセスが他のプロセス用に作成した性能カウンターは影響を受けない。 性能カウンターの詳細については Linux カーネルソースの
\fItools/perf/design.txt\fP を参照。
.IP
.\" commit 1d1c7ddbfab358445a542715551301b7fc363e28
以前は \fBPR_TASK_PERF_COUNTERS_DISABLE\fP と呼ばれていた。 Linux 2.6.32 で名前が変更された
(数値は同じままである)。
.TP 
\fBPR_TASK_PERF_EVENTS_ENABLE\fP (Linux 2.6.31 以降)
\fBPR_TASK_PERF_EVENTS_DISABLE\fP の逆。 呼び出したプロセスに接続された性能カウンターを有効にする。
.IP
.\" commit 1d1c7ddbfab358445a542715551301b7fc363e28
.\" commit cdd6c482c9ff9c55475ee7392ec8f672eddb7be6
以前は \fBPR_TASK_PERF_COUNTERS_ENABLE\fP と呼ばれていた。 Linux 2.6.32 で名前が変更された。
.TP 
\fBPR_SET_TSC\fP (Linux 2.6.26 以降, x86 のみ)
そのプロセスがタイムスタンプカウンターを読み出せるかを決定する フラグの状態を設定する。 読み出しを許可する場合は \fIarg2\fP に
\fBPR_TSC_ENABLE\fP を、そのプロセスがタイムスタンプカウンターを読み出そうとした際に \fBSIGSEGV\fP を発生させる場合には
\fBPR_TSC_SIGSEGV\fP を渡す。
.TP 
\fBPR_GET_TSC\fP (Linux 2.6.26 以降, x86 のみ)
そのプロセスがタイムスタンプカウンターを読み出せるかを決定する フラグの状態を \fI(int\ *) arg2\fP が指す場所に格納して返す。
.TP 
\fBPR_SET_UNALIGN\fP
(ia64 では Linux 2.3.48 以降; parisc では Linux 2.6.15 以降; PowerPC では Linux 2.6.18
以降; Alpha では　Linux 2.6.22 以降; これらのアーキテクチャーのみ)  unaligned アクセス制御ビットを \fIarg2\fP
で指定された値に設定する。 指定できる値は \fBPR_UNALIGN_NOPRINT\fP (unaligned なユーザーアクセスを黙って 修正する) か
\fBPR_UNALIGN_SIGBUS\fP (unaligned なユーザーアクセスがあった場合 \fBSIGBUS\fP を生成する) である。
.TP 
\fBPR_GET_UNALIGN\fP
(バージョンとアーキテクチャーの情報は \fBPR_SET_UNALIGN\fP 参照)  unaligned アクセス制御ビットの値を \fI(int\ *)
arg2\fP が指す場所に格納して返す。
.TP 
\fBPR_MCE_KILL\fP (Linux 2.6.32 以降)
現在のスレッドの machine check memory corruption kill ポリシーを設定する。 \fIarg2\fP が
\fBPR_MCE_KILL_CLEAR\fP の場合、 このスレッドの memory corruption kill ポリシーをクリアし、
システム全体のデフォルト値を使用する (システム全体のデフォルトは \fI/proc/sys/vm/memory_failure_early_kill\fP
で定義される。 \fBproc\fP(5) 参照)。 \fIarg2\fP が \fBPR_MCE_KILL_SET\fP の場合、 スレッド固有の memory
corruption kill ポリシーを使用する。 この場合、 \fIarg3\fP によりこのポリシーが \fIearly kill\fP
(\fBPR_MCE_KILL_EARLY\fP か、 \fIlate kill\fP (\fBPR_MCE_KILL_LATE\fP) か、 システム全体のデフォルト値
(\fBPR_MCE_KILL_DEFAULT\fP) が指定される。 early kill は、 ハードウェアメモリー破壊 (corruption)
がスレッドのアドレス空間内で検出されるとすぐに、 そのスレッドが \fBSIGBUS\fP シグナルを受信することを意味する。 late kill
モードでは、 メモリー破壊が起こったページにアクセスした場合にのみ、 そのプロセスが kill される。 \fBSIGBUS\fP シグナルの詳細は
\fBsigaction\fP(2) を参照。 このポリシーは子プロセスに継承される。 未使用の残りの \fBprctl\fP() の引き数は将来の互換性のため 0
にしなければならない。
.TP 
\fBPR_MCE_KILL_GET\fP (Linux 2.6.32 以降)
現在のプロセス単位の machine check kill ポリシーを返す。 未使用の \fBprctl\fP() の引き数はすべて 0
にしなければならない。
.TP 
\fBPR_SET_MM\fP (Linux 3.3 以降)
.\" commit 028ee4be34a09a6d48bdf30ab991ae933a7bc036
呼び出したプロセスのカーネルメモリーマップディスクリプターのフィールドを変更する。 これらのフィールドは通常カーネルと動的リンカーにより設定される
(詳しい情報は \fBld.so\fP を参照)。 通常のアプリケーションはこの機能を利用すべきではない。 しかしながら、自分を書き換えるプログラムなど、
プログラムが自分自身のメモリーマップを変更するのが有用な場面もある。 この機能はカーネルが \fBCONFIG_CHECKPOINT_RESTORE\fP
オプションを有効にして作成されている場合にのみ利用できる。 呼び出したプロセスは \fBCAP_SYS_RESOURCE\fP
ケーパビリティを持っていなければならない。 \fIarg2\fP の値には以下のいずれかを指定し、 \fIarg3\fP でそのオプションの新しい値を指定する。
.RS
.TP 
\fBPR_SET_MM_START_CODE\fP
プログラムテキストを実行できるアドレスの上限を設定する。 対応するメモリー領域は読み出し可能で実行可能でなければならないが、
書き込み可能だったり共有可能だったりしてはならない (詳しい情報は \fBmprotect\fP(2) と \fBmmap\fP(2) 参照)。
.TP 
\fBPR_SET_MM_END_CODE\fP
プログラムテキストを実行できるアドレスの下限を設定する。 対応するメモリー領域は読み出し可能で実行可能でなければならないが、
書き込み可能だったり共有可能だったりしてはならない。
.TP 
\fBPR_SET_MM_START_DATA\fP
初期化済データや未初期化 (bss) データを配置する領域のアドレス上限を指定する。 対応するメモリー領域は読み書き可能でなければならないが、
実行可能だったり共有可能だったりしてはならない。
.TP 
\fBPR_SET_MM_END_DATA\fP
初期化済データや未初期化 (bss) データを配置する領域のアドレス下限を指定する。 対応するメモリー領域は読み書き可能でなければならないが、
実行可能だったり共有可能だったりしてはならない。
.TP 
\fBPR_SET_MM_START_STACK\fP
スタックの開始アドレスを設定する。 対応するメモリー領域は読み書き可能でなければならない。
.TP 
\fBPR_SET_MM_START_BRK\fP
\fBbrk\fP(2) コールで拡張できるプログラムのヒープ領域のアドレス上限を設定する。
このアドレスは、プログラムの現在のデータセグメントの最終アドレスより大きくなければならない。 また、
変更後のヒープとデータセグメントのサイズを合わせたサイズが \fBRLIMIT_DATA\fP リソースリミットを超えることはできない
(\fBsetrlimit\fP(2) 参照)。
.TP 
\fBPR_SET_MM_BRK\fP
現在の \fBbrk\fP(2) 値を設定する。 このアドレスの要件は \fBPR_SET_MM_START_BRK\fP オプションと同じである。
.P
.\" commit fe8c7f5cbf91124987106faa3bdf0c8b955c4cf7
以下のオプションは Linux 3.5 以降で利用できる。
.TP 
\fBPR_SET_MM_ARG_START\fP
プログラムのコマンドラインを配置するアドレスの上限を設定する。
.TP 
\fBPR_SET_MM_ARG_END\fP
プログラムのコマンドラインを配置するアドレスの下限を設定する。
.TP 
\fBPR_SET_MM_ENV_START\fP
プログラムの環境情報 (environment) を配置するアドレスの上限を設定する。
.TP 
\fBPR_SET_MM_ENV_END\fP
プログラムの環境情報 (environment) を配置するアドレスの下限を設定する。
.IP
\fBPR_SET_MM_ARG_START\fP, \fBPR_SET_MM_ARG_END\fP, \fBPR_SET_MM_ENV_START\fP,
\fBPR_SET_MM_ENV_END\fP で指定されるアドレスはプロセスのスタック領域に属している必要がある。
したがって、これらのメモリー領域は読み書き可能でなければならない。 また、 (カーネル設定によっては) \fBMAP_GROWSDOWN\fP
属性がセットされていなければならない (\fBmmap\fP(2) 参照)。
.TP 
\fBPR_SET_MM_AUXV\fP
新しい補助ベクトル (auxiliary vector) を設定する。 \fIarg3\fP 引き数はベクトルのアドレスを指定し、 \fIarg4\fP
はベクトルのサイズを指定する。
.TP 
\fBPR_SET_MM_EXE_FILE\fP
.\" commit b32dfe377102ce668775f8b6b1461f7ad428f8b6
\fI/proc/pid/exe\fP シンボリックリンクを \fIarg3\fP
引き数で渡された新しい実行可能なファイルディスクリプターを指すシンボリックリンクで置き換える。 ファイルディスクリプターは通常の \fBopen\fP(2)
コールで取得すべきである。
.IP
シンボリックリンクを変更するには、 既存の実行可能なメモリー領域のすべてをアンマップする必要がある。これにはカーネル自身が作成した領域も含まれる
(例えば、カーネルは通常 ELF \fI.text\fP セクションに少なくとも一つの実行可能なメモリー領域を作成する)。
.IP
二つ目の制限は、このような変更はプロセスの生存期間で一度だけ行うことができるという点である。 一度変更を行った後で変更を行おうとすると拒否される。
この動作は、 システム管理者が、 システムで動作するすべてのプロセスが行う、 普通でないシンボリックリンクの変更を監視するのを楽にする。
.RE
.TP 
\fBPR_MPX_ENABLE_MANAGEMENT\fP, \fBPR_MPX_DISABLE_MANAGEMENT\fP (Linux 3.19 以降) 
.\" commit fe3d197f84319d3bce379a9c0dc17b1f48ad358c
.\" See also http://lwn.net/Articles/582712/
.\" See also https://gcc.gnu.org/wiki/Intel%20MPX%20support%20in%20the%20GCC%20compiler
.\" commit e9d1b4f3c60997fe197bf0243cb4a41a44387a88
Memory Protection eXtensions (MPX) の境界テーブル (bounds table)
のカーネル管理の有効化/無効化を行う。 引き数 \fIarg2\fP, \fIarg3\fP, \fIarg4\fP, \fIarg5\fP は 0 でなければならない。

MPX は、 ポインターの境界チェックを行うハードウェア支援機構である。 この機能は、 境界情報を格納するレジスター群と、
境界チェックをどの命令に課すかを CPU に教えるための特別な命令プレフィックスの集合で構成される。 これらのレジスター数は限られており、
レジスター数よりも多くのポインターがある場合には、 その内容をテーブル群に退避する (spilled) 必要がある。 これらのテーブル群は「境界テーブル
(bounds tables)」と呼ばれ、 MPX \fBprctl\fP 命令はカーネルがこれらの割り当てと解放を行うかどうかを制御する。

管理が有効になっている場合、 カーネルが境界テーブルの割り当てと解放を担当する。 最初に存在しない境界テーブルを使おうとした際に上がる #BR
例外を捕捉し、 ユーザー空間に例外を配送せずに、 テーブルの割り当てを行い、 新しいテーブルに境界情報 (bounds directory)
を書き込む。 解放に関しては、 カーネルが割り当てられていないメモリーに対応する境界テーブルが存在するかを確認し、 そうであれば解放を行う。

\fBPR_MPX_ENABLE_MANAGEMENT\fP を使って MPX 管理を有効にする前に、
アプリケーションはまず境界情報管理用のユーザー空間バッファーを割り当て、 その管理情報の場所を \fIbndcfgu\fP
レジスターに設定しなければならない。

CPU やカーネルが MPX をサポートしていない場合、 これらの呼び出しは失敗する。 カーネルによる MPX のサポートは
\fBCONFIG_X86_INTEL_MPX\fP 設定オプションで有効にできる。 CPU が MPX をサポートしているかを確認するには、 以下のように
\&'mpx' CPUID ビットを見ればよい。

  cat /proc/cpuinfo | grep ' mpx '

MPX が有効になっている間は、 スレッドはロング (64 ビット) モードのオン/オフの切り替えはできない。

プロセス内のすべてのスレッドがこれらの呼び出しの影響を受ける。

\fBfork\fP(2) で作成された子プロセスは MPX 管理の状態を継承する。 \fBexecve\fP(2) の中で、 MPX 管理は
\fBPR_MPX_DISABLE_MANAGEMENT\fP が呼ばれた場合と同じ状態がリセットされる。

.\"
Intel MPX についての詳しい情報は、カーネルソースファイル \fIDocumentation/x86/intel_mpx.txt\fP を参照。
.SH 返り値
成功すると、 \fBPR_GET_DUMPABLE\fP, \fBPR_GET_KEEPCAPS\fP, \fBPR_GET_NO_NEW_PRIVS\fP,
\fBPR_GET_THP_DISABLE\fP, \fBPR_CAPBSET_READ\fP, \fBPR_GET_TIMING\fP,
\fBPR_GET_TIMERSLACK\fP, \fBPR_GET_SECUREBITS\fP, \fBPR_MCE_KILL_GET\fP,
\fBPR_GET_SECCOMP\fP は上述の負でない値を返す (なお、\fBPR_GET_SECCOMP\fP は返らない場合もある)。 \fIoption\fP
が他の値の場合は成功時に 0 を返す。 エラーの場合、\-1 を返し、 \fIerrno\fP に適切な値を設定する。
.SH エラー
.TP 
\fBEFAULT\fP
\fIarg2\fP が不正なアドレスである。
.TP 
\fBEFAULT\fP
\fIoption\fP が \fBPR_SET_SECCOMP\fP で、 \fIarg2\fP が \fBSECCOMP_MODE_FILTER\fP で、 カーネルが
\fBCONFIG_SECCOMP_FILTER\fP を有効にして作成されており、 \fIarg3\fP が無効なアドレスである。
.TP 
\fBEINVAL\fP
\fIoption\fP の値が理解できない。
.TP 
\fBEINVAL\fP
\fIoption\fP が \fBPR_MCE_KILL\fP, \fBPR_MCE_KILL_GET\fP, \fBPR_SET_MM\fP のいずれかで、かつ未使用の
\fBprctl\fP() 引き数に 0 が指定されていなかった。
.TP 
\fBEINVAL\fP
\fIarg2\fP が指定された \fIoption\fP で有効な値ではない。
.TP 
\fBEINVAL\fP
\fIoption\fP が \fBPR_SET_SECCOMP\fP か \fBPR_GET_SECCOMP\fP だが、カーネルが \fBCONFIG_SECCOMP\fP
を有効にして作成されていなかった。
.TP 
\fBEINVAL\fP
\fIoption\fP が \fBPR_SET_SECCOMP\fP で、 \fIarg2\fP が \fBSECCOMP_MODE_FILTER\fP で、 カーネルが
\fBCONFIG_SECCOMP\fP を有効にして作成されていなかった。
.TP 
\fBEINVAL\fP
\fIoption\fP が \fBPR_SET_MM\fP で、以下のいずれかが真である。
.RS
.IP * 3
\fIarg4\fP が \fIarg5\fP で 0 以外である。
.IP *
\fIarg3\fP が \fBTASK_SIZE\fP よりも大きい  (\fBTASK_SIZE\fP
はこのアーキテクチャーでユーザー空間アドレススペースの最大サイズである)。
.IP *
\fIarg2\fP が \fBPR_SET_MM_START_CODE\fP, \fBPR_SET_MM_END_CODE\fP,
\fBPR_SET_MM_START_DATA\fP, \fBPR_SET_MM_END_DATA\fP, \fBPR_SET_MM_START_STACK\fP
のどれかで、対応するメモリー領域のアクセス許可が要件を満たしていない。
.IP *
\fIarg2\fP が \fBPR_SET_MM_START_BRK\fP か \fBPR_SET_MM_BRK\fP で、 \fIarg3\fP
データセグメントの末尾と同じかそれより前か、 \fIarg3\fP に \fBRLIMIT_DATA\fP リソースリミットを超えてしまうような値が指定されている。
.RE
.TP 
\fBEINVAL\fP
\fIoption\fP が \fBPR_SET_PTRACER\fP で \fIarg2\fP が 0, \fBPR_SET_PTRACER_ANY\fP, 既存プロセスの
PID のいずれでもない。
.TP 
\fBEINVAL\fP
\fIoption\fP が \fBPR_SET_PDEATHSIG\fP で、 \fIarg2\fP で指定された値は無効なシグナル番号である。
.TP 
\fBEINVAL\fP
\fIoption\fP が \fBPR_SET_DUMPABLE\fP で、 \fIarg2\fP が \fBSUID_DUMP_DISABLE\fP でも
\fBSUID_DUMP_USER\fP でもない。
.TP 
\fBEINVAL\fP
\fIoption\fP が \fBPR_SET_TIMING\fP で、 \fIarg2\fP が \fBPR_TIMING_STATISTICAL\fP ではない。
.TP 
\fBEINVAL\fP
\fIoption\fP が \fBPR_SET_NO_NEW_PRIVS\fP で、 \fIarg2\fP が 1 以外か、 \fIarg3\fP, \fIarg4\fP,
\fIarg5\fP のどれかが 0 ではない。
.TP 
\fBEINVAL\fP
\fIoption\fP が \fBPR_GET_NO_NEW_PRIVS\fP で、 \fIarg2\fP, \fIarg3\fP, \fIarg4\fP, \fIarg5\fP
のどれかが 0 ではない。
.TP 
\fBEINVAL\fP
\fIoption\fP が \fBPR_SET_THP_DISABLE\fP で \fIarg3\fP, \fIarg4\fP, \fIarg5\fP のどれかが 0 ではない。
.TP 
\fBEINVAL\fP
\fIoption\fP が \fBPR_GET_THP_DISABLE\fP で \fIarg2\fP, \fIarg3\fP, \fIarg4\fP, \fIarg5\fP のいずれが
0 ではない。
.TP 
\fBEPERM\fP
\fIoption\fP が \fBPR_SET_SECUREBITS\fP で、呼び出し元がケーパビリティ \fBCAP_SETPCAP\fP を持っていない。
または、"locked" フラグを解除しようとした。 または、locked フラグがセットされているフラグをセットしようとした
(\fBcapabilities\fP(7)  参照)。
.TP 
\fBEPERM\fP
\fIoption\fP が \fBPR_SET_KEEPCAPS\fP で、呼び出し元のフラグ \fBSECURE_KEEP_CAPS_LOCKED\fP
がセットされている (\fBcapabilities\fP(7)  参照)。
.TP 
\fBEPERM\fP
\fIoption\fP が \fBPR_CAPBSET_DROP\fP で、呼び出し元がケーパビリティ \fBCAP_SETPCAP\fP を持っていない。
.TP 
\fBEPERM\fP
\fIoption\fP が \fBPR_SET_MM\fP で、呼び出し元がケーパビリティ \fBCAP_SYS_RESOURCE\fP を持っていない。
.TP 
\fBEACCES\fP
\fIoption\fP が \fBPR_SET_MM\fP、かつ \fIarg3\fP が \fBPR_SET_MM_EXE_FILE\fP で、ファイルが実行可能ではない。
.TP 
\fBEBUSY\fP
\fIoption\fP が \fBPR_SET_MM\fP で、 \fIarg3\fP が \fBPR_SET_MM_EXE_FILE\fP で、
\fI/proc/pid/exe\fP シンボリックリンクを変更しようとしたが、 禁止されている。
.TP 
\fBEBADF\fP
.\" The following can't actually happen, because prctl() in
.\" seccomp mode will cause SIGKILL.
.\" .TP
.\" .B EPERM
.\" .I option
.\" is
.\" .BR PR_SET_SECCOMP ,
.\" and secure computing mode is already 1.
\fIoption\fP が \fBPR_SET_MM\fP で、 \fIarg3\fP が \fBPR_SET_MM_EXE_FILE\fP で、 \fIarg4\fP
で渡されたファイルディスクリプターが有効ではない。
.TP 
\fBENXIO\fP
\fIoption\fP が \fBPR_MPX_ENABLE_MANAGEMENT\fP か \fBPR_MPX_DISABLE_MANAGEMENT\fP で、
カーネルか CPU が MPX の管理をサポートしていない。 カーネルとプロセスが MPX をサポートしているか確認すること。
.SH バージョン
.\" The library interface was added in glibc 2.0.6
\fBprctl\fP()  システムコールは Linux 2.1.57 で導入された。
.SH 準拠
このコールは Linux 特有である。 IRIX には \fBprctl\fP()  システムコールがあるが (MIPS アーキテクチャーにおいて
irix_prctl として Linux 2.1.44 で同様に導入された)、 そのプロトタイプは
.sp
\fBptrdiff_t prctl(int \fP\fIoption\fP\fB, int \fP\fIarg2\fP\fB, int \fP\fIarg3\fP\fB);\fP
.sp
である。ユーザー当りのプロセス最大数を取得するオプション、 プロセスの使用できる最大プロッサー数を取得するオプション、
現在特定のプロセスが停止(block)させられているかどうか調べるオプション、 スタックサイズの最大値の取得や設定を行なうオプションなどがある。
.SH 関連項目
\fBsignal\fP(2), \fBcore\fP(5)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.79 の一部である。
プロジェクトの説明とバグ報告に関する情報は \%http://www.kernel.org/doc/man\-pages/ に書かれている。
