.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"             and Copyright (C) 1993 Ian Jackson
.\"             and Copyright (C) 2006, 2014 Michael Kerrisk.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified 1993-07-24 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1996-09-08 by Arnt Gulbrandsen <agulbra@troll.no>
.\" Modified 1997-01-31 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2001-05-17 by aeb
.\" Modified 2004-06-23 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 1997 HANATAKA Shinya
.\"         all rights reserved.
.\" Translated Fri Dec 12 00:42:31 JST 1997
.\"         by HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Modified Tue Sep  5 02:03:33 JST 2000
.\"         by Yuichi SATO <ysato@h4.dion.ne.jp>
.\" Modified Sat Jun  2 08:48:36 JST 2001 by Yuichi SATO
.\" Modified Sun Jul  7 02:58:51 JST 2002 by Yuichi SATO
.\" Updated & Modified Sun Jan  9 23:28:11 JST 2005
.\"         by Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated 2012-05-08, Akihiro MOTOKI <amotoki@gmail.com>
.\"
.TH UNLINK 2 2017\-09\-15 Linux "Linux Programmer's Manual"
.SH 名前
unlink, unlinkat \- 名前を削除し、場合によってはそれが参照しているファイルも削除する
.SH 書式
.nf
\fB#include <unistd.h>\fP
.PP
\fBint unlink(const char *\fP\fIpathname\fP\fB);\fP

\fB#include <fcntl.h>           \fP/* AT_* 定数の定義 */
\fB#include <unistd.h>\fP
.PP
\fBint unlinkat(int \fP\fIdirfd\fP\fB, const char *\fP\fIpathname\fP\fB, int \fP\fIflags\fP\fB);\fP
.fi
.PP
.RS -4
glibc 向けの機能検査マクロの要件 (\fBfeature_test_macros\fP(7)  参照):
.RE
.PP
\fBunlinkat\fP():
.PD 0
.ad l
.RS 4
.TP  4
glibc 2.10 以降:
_POSIX_C_SOURCE\ >=\ 200809L
.TP 
glibc 2.10 より前:
_ATFILE_SOURCE
.RE
.ad
.PD
.SH 説明
\fBunlink\fP()  はファイルシステム上の名前を削除する。 もしその名前がファイルへの最後のリンク (link) であり、
どのプロセスもそのファイルをオープン (open) していなければ、 ファイルは削除される。
ファイルが使用していたディスク上の領域は再利用が可能になる。
.PP
名前がファイルへの最後のリンクであっても、どこかのプロセスが そのファイルを開いているなら、ファイルの最後のファイルディスクリプター (file
descriptor) が閉じられるまでファイルは存在し続ける。
.PP
名前が指しているのがシンボリックリンクなら、そのリンクを削除する。
.PP
名前が指しているのがソケット、FIFO、デバイスの場合、名前は削除されるが、 そのソケットなどを開いているプロセスはそのまま使い続けることができる。
.SS unlinkat()
\fBunlinkat\fP() システムコールは、\fBunlink\fP() と \fBrmdir\fP(2) のいずれかと全く同じ動作をする
(どちらと同じになるかは \fIflags\fP に \fBAT_REMOVEDIR\fP フラグが指定されたかにより決まる) が、以下で説明する点が異なる。
.PP
\fIpathname\fP で指定されたパス名が相対パスの場合、このパス名はファイルディスクリプター \fIdirfd\fP
が参照するディレクトリに対する相対パスと解釈される (\fBunlink\fP() や \fBrmdir\fP(2)
に相対パス名を渡した場合のように、呼び出したプロセスのカレントワーキングディレクトリに対する相対パスではない)。
.PP
\fIpathname\fP で指定されたパス名が相対パスで、 \fIdirfd\fP が特別な値 \fBAT_FDCWD\fP の場合、 (\fBunlink\fP() や
\fBrmdir\fP(2) と同様に) \fIpathname\fP は呼び出したプロセスのカレントワーキングディレクトリに対する相対パスと解釈される。
.PP
\fIpathname\fP で指定されたパス名が絶対パスの場合、 \fIdirfd\fP は無視される。
.PP
\fIflags\fP はビットマスクで、0 もしくは \fBunlinkat\fP()
の動作を制御するフラグ値を論理和の形で指定することができる。現在のところ、定義されているフラグはひとつだけである。
.TP 
\fBAT_REMOVEDIR\fP
デフォルトでは、 \fBunlinkat\fP() は \fIpathname\fP に対して \fBunlink\fP() と等価な動作をする。
\fBAT_REMOVEDIR\fP フラグが指定された場合、 \fIpathname\fP に対して \fBrmdir\fP(2) と等価な動作をする。
.PP
\fBunlinkat\fP() の必要性についての説明については \fBopenat\fP(2) を参照。
.SH 返り値
成功した場合は 0 が返される。エラーの場合は \-1 が返され、 \fIerrno\fP が適切に設定される。
.SH エラー
.TP 
\fBEACCES\fP
\fIpathname\fP を含んでいるディレクトリの書き込み許可がプロセスの実効 (effective)  ユーザー ID に与えられていないか、
\fIpathname\fP の中のディレクトリのどれかに検索許可が与えられていない (\fBpath_resolution\fP(7)  も参照すること)。
.TP 
\fBEBUSY\fP
システムか別のプロセスがそのファイルを使用中のため、
ファイル \fIpathname\fP を unlink できない。
例えば、そのファイルがマウントポイントの場合や、
NFS クライアントソフトウェアがそのファイルがアクティブであるが
名前なし inode (nameless inode) であることを示すために作成した
場合 ("NFS silly renamed") などがある。
.TP 
\fBEFAULT\fP
\fIpathname\fP がアクセス可能なアドレス空間の外を指している。
.TP 
\fBEIO\fP
I/O エラーが発生した。
.TP 
\fBEISDIR\fP
\fIpathname\fP がディレクトリを参照している。 (これは POSIX で規定されていない値で、Linux 2.1.132 以降で返される。)
.TP 
\fBELOOP\fP
\fIpathname\fP を解決する際に遭遇したシンボリックリンクが多過ぎる。
.TP 
\fBENAMETOOLONG\fP
\fIpathname\fP が長過ぎる。
.TP 
\fBENOENT\fP
\fIpathname\fP に対応するものが存在しないか、壊れたシンボリックリンクであるか、 \fIpathname\fP が空である。
.TP 
\fBENOMEM\fP
十分なカーネルメモリーがない。
.TP 
\fBENOTDIR\fP
\fIpathname\fP のディレクトリ部分が、実際には、ディレクトリでない。
.TP 
\fBEPERM\fP
システムがディレクトリに対する unlink 操作を許可していない。 またはディレクトリに対する unlink 操作のために必要な特権を
呼び出し元のプロセスが持っていない。 (これは POSIX で規定されているエラーの返し方である。 上述の通り、この場合には Linux は
\fBEISDIR\fP を返す。)
.TP 
\fBEPERM\fP (Linux のみ)
ファイルシステムがファイルに対する unlink 操作を許していない。
.TP 
\fBEPERM\fP または \fBEACCES\fP
\fIpathname\fP を含んでいるディレクトリにスティッキービット (sticky\-bit)  (\fBS_ISVTX\fP)
が設定されていて、プロセスの実効ユーザー ID が削除しようとするファイルの UID でもそれを含んでいるディレクトリのものでもなく、
かつプロセスに特権がない (Linux では \fBCAP_FOWNER\fP ケーパビリティ (capability) がない)。
.TP 
\fBEPERM\fP
The file to be unlinked is marked immutable or append\-only.  (See
\fBioctl_iflags\fP(2).)
.TP 
\fBEROFS\fP
\fIpathname\fP が読み込み専用のファイルシステムのファイルを参照している。
.PP
\fBunlink\fP() と \fBrmdir\fP(2) で発生するのと同じエラーが \fBunlinkat\fP() でも起こる。 \fBunlinkat\fP()
では以下のエラーも発生する。
.TP 
\fBEBADF\fP
\fIdirfd\fP が有効なファイルディスクリプターではない。
.TP 
\fBEINVAL\fP
無効なフラグ値が \fIflags\fP に指定された。
.TP 
\fBEISDIR\fP
\fIpathname\fP がディレクトリを参照していて、 \fIflags\fP に \fBAT_REMOVEDIR\fP がされていなかった。
.TP 
\fBENOTDIR\fP
\fIpathname\fP が相対パスで、 \fIdirfd\fP がディレクトリ以外のファイルを参照しているファイルディスクリプターである。
.SH バージョン
\fBunlinkat\fP()  はカーネル 2.6.16 で Linux に追加された。 ライブラリによるサポートはバージョン 2.4 で glibc
に追加された。
.SH 準拠
.\" SVr4 documents additional error
.\" conditions EINTR, EMULTIHOP, ETXTBSY, ENOLINK.
\fBunlink\fP(): SVr4, 4.3BSD, POSIX.1\-2001, POSIX.1\-2008.
.PP
\fBunlinkat\fP(): POSIX.1\-2008.
.SH 注意
.SS "glibc での注意"
\fBunlinkat\fP() が利用できない古いカーネルでは、 glibc ラッパー関数は \fBunlink\fP() と \fBrmdir\fP(2)
を使用するモードにフォールバックする。 \fIpathname\fP が相対パスの場合、 glibc は \fIdirfd\fP 引数に対応する
\fI/proc/self/fd\fP のシンボリックリンクに基づいてパス名を構成する。
.SH バグ
NFS プロトコルに内在する問題により、まだ使用中のファイルが想定外に消えてしまうことがありえる。
.SH 関連項目
\fBrm\fP(1), \fBunlink\fP(1), \fBchmod\fP(2), \fBlink\fP(2), \fBmknod\fP(2), \fBopen\fP(2),
\fBrename\fP(2), \fBrmdir\fP(2), \fBmkfifo\fP(3), \fBremove\fP(3),
\fBpath_resolution\fP(7), \fBsymlink\fP(7)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
