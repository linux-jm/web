.\" Copyright (c) 1983, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)getpeername.2	6.5 (Berkeley) 3/10/91
.\"
.\" Modified Sat Jul 24 16:37:50 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Thu Jul 30 14:37:50 1993 by Martin Schulze <joey@debian.org>
.\" Modified Sun Mar 28 21:26:46 1999 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 17 Jul 2002, Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Added 'socket' to NAME, so that "man -k socket" will show this page.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 1997-1999 HANATAKA Shinya
.\"         all rights reserved.
.\" Translated Sat Apr  3 14:53:19 JST 1999
.\"         by HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Updated Tue Nov 26 JST 2002 by Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2013-05-06, Akihiro MOTOKI <amotoki@gmail.com>
.\" Updated 2013-07-22, Akihiro MOTOKI <amotoki@gmail.com>
.\"
.TH GETPEERNAME 2 2017\-09\-15 Linux "Linux Programmer's Manual"
.SH 名前
getpeername \- 接続している相手ソケットの名前を取得する
.SH 書式
\fB#include <sys/socket.h>\fP
.PP
\fBint getpeername(int \fP\fIsockfd\fP\fB, struct sockaddr *\fP\fIaddr\fP\fB, socklen_t
*\fP\fIaddrlen\fP\fB);\fP
.SH 説明
\fBgetpeername\fP()  は、ソケット(socket)  \fIsockfd\fP に接続している相手のアドレスを、 \fIaddr\fP
が指すバッファーに格納して返す。 \fIaddrlen\fP 引数は、 \fIaddr\fP が指している領域のサイズに初期化しておかなければならない。
関数が返る時には、 \fIaddrlen\fP には実際に返された名前のサイズが (バイト単位で) 格納される。
提供されたバッファーが小さすぎた場合には、名前は切り詰められる。
.PP
渡されたバッファーが小さ過ぎた場合は、返されるアドレスの末尾が切り詰められる。 この場合には、 \fIaddrlen\fP
には、呼び出し時に指定された値よりも大きな値が格納される。
.SH 返り値
成功した場合は 0 が返される。エラーの場合は \-1 が返され、 \fIerrno\fP が適切に設定される。
.SH エラー
.TP 
\fBEBADF\fP
引数 \fIsockfd\fP が有効なファイルディスクリプターでない。
.TP 
\fBEFAULT\fP
\fIaddr\fP 引数の指しているメモリーが有効なプロセスのアドレス空間の 一部でない。
.TP 
\fBEINVAL\fP
\fIaddrlen\fP が不正である (例えば、負で場合など)。
.TP 
\fBENOBUFS\fP
この操作を行なうのに十分な資源がシステムに存在しない。
.TP 
\fBENOTCONN\fP
ソケットが接続していない。
.TP 
\fBENOTSOCK\fP
ファイルディスクリプター \fIsockfd\fP がソケットを参照していない。
.SH 準拠
POSIX.1\-2001, POSIX.1\-2008, SVr4, 4.4BSD (\fBgetpeername\fP()  関数コールは 4.2BSD
で初めて登場した)。
.SH 注意
For background on the \fIsocklen_t\fP type, see \fBaccept\fP(2).
.PP
ストリームソケットでは、 いったん \fBconnect\fP(2) が実行されると、 どのソケットも \fBgetpeername\fP()
を使って相手ソケットのアドレスを取得できる。 一方、データグラムソケットはコネクションレスである (接続がない)。 データグラムソケットに対する
\fBconnect\fP(2) の呼び出しは、 \fBwrite\fP(2) や \fBrecv\fP(2)
で送信される出力データグラムの相手アドレスを設定するだけである。
\fBconnect\fP(2) の呼び出し元は、 \fBgetpeername\fP()
を使って、それ以前にそのソケットに設定された相手アドレスを取得することができる。 しかし、相手ソケットはこの情報を知らないので、 相手ソケットで
\fBgetpeername\fP() を呼び出しても、 役に立つ情報は得られない (相手側でも \fBconnect\fP(2) が呼び出されている場合を除く)。
なお、データグラムの受信側では \fBrecvfrom\fP(2) を使って送信元アドレスを 取得できることも覚えておいてほしい。
.SH 関連項目
\fBaccept\fP(2), \fBbind\fP(2), \fBgetsockname\fP(2), \fBip\fP(7), \fBsocket\fP(7),
\fBunix\fP(7)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
