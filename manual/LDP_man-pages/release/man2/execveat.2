.\" Copyright (c) 2014 Google, Inc., written by David Drysdale
.\" and Copyright (c) 2015, Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH EXECVEAT 2 2017\-09\-15 Linux "Linux Programmer's Manual"
.SH 名前
execveat \- ディレクトリファイルディスクリプターからの相対パスで指定されるプログラムを実行する
.SH 書式
\fB#include <unistd.h>\fP
.PP
\fBint execveat(int \fP\fIdirfd\fP\fB, const char *\fP\fIpathname\fP\fB,\fP
.br
\fB char *const \fP\fIargv\fP\fB[], char *const \fP\fIenvp\fP\fB[],\fP
.br
\fB int \fP\fIflags\fP\fB);\fP
.SH 説明
.\" commit 51f39a1f0cea1cacf8c787f652f26dfee9611874
\fBexecveat\fP() システムコールは \fIdirfd\fP と \fIpathname\fP の組み合わせで参照されるプログラムを実行する。
\fBexecve\fP(2) と全く同様に動作するが、 以下で説明する点が異なる。
.PP
\fIpathname\fP で指定されたパス名が相対パスの場合、このパス名はファイルディスクリプター \fIdirfd\fP
が参照するディレクトリに対する相対パスと解釈される (\fBexecve\fP(2)
に相対パス名を渡した場合のように、呼び出したプロセスのカレントワーキングディレクトリに対する相対パスではない)。
.PP
\fIpathname\fP で指定されたパス名が相対パスで、 \fIdirfd\fP が特別な値 \fBAT_FDCWD\fP の場合、 (\fBexecve\fP(2)
と同様に) \fIpathname\fP は呼び出したプロセスのカレントワーキングディレクトリに対する相対パスと解釈される。
.PP
\fIpathname\fP で指定されたパス名が絶対パスの場合、 \fIdirfd\fP は無視される。
.PP
\fIpathname\fP が空文字列で、 \fBAT_EMPTY_PATH\fP フラグが指定されている場合、 ファイルディスクリプター \fIdirfd\fP
は実行するファイルを指定する (すなわち \fIdirfd\fP はディレクトリではなく実行ファイルを参照する)。
.PP
\fIflags\fP 引数は、以下に示す値の 0 個以上を指定できるビットマスクである。
.TP 
\fBAT_EMPTY_PATH\fP
\fIpathname\fP が空文字列の場合、 \fIdirfd\fP が参照するファイルに対して動作を行う (\fIdirfd\fP は \fBopen\fP(2()
\fBO_PATH\fP フラグを使って取得できる)。
.TP 
\fBAT_SYMLINK_NOFOLLOW\fP
\fIdirfd\fP と NULL でない \fIpathname\fP で指定されたファイルがシンボリックリンクの場合、 呼び出しはエラー \fBELOOP\fP
で失敗する。
.SH 返り値
成功すると \fBexecveat\fP()  は返らない。エラーの場合は \-1 を返し、 \fIerrno\fP を適切に設定する。
.SH エラー
\fBexecve\fP() で発生するのと同じエラーが \fBexecveat\fP() でも起こる。 \fBexecveat\fP() では以下のエラーも発生する。
.TP 
\fBEBADF\fP
\fIdirfd\fP が適切なファイルディスクリプターでない。
.TP 
\fBEINVAL\fP
\fIflags\fP に無効なフラグが指定された。
.TP 
\fBELOOP\fP
\fIflags\fP に \fBAT_SYMLINK_NOFOLLOW\fP が指定されていて、 \fIdirfd\fP と NULL でない \fIpathname\fP
で指定されたファイルがシンボリックリンクである。
.TP 
\fBENOENT\fP
\fIdirfd\fP と \fIpathname\fP で指定されるプログラムはインタープリタープログラムを使用する必要があるが (例えば "#!"
で始まるスクリプト)、 ファイルディスクリプター \fIdirfd\fP が \fBO_CLOEXEC\fP フラグ付きでオープンされており、
その結果プログラムファイルは起動されたインタープリターにアクセスできないことになる。 「バグ」を参照。
.TP 
\fBENOTDIR\fP
\fIpathname\fP が相対パスで、 \fIdirfd\fP がディレクトリ以外のファイルを参照しているファイルディスクリプターである。
.SH バージョン
.\" FIXME . check for glibc support in a future release
\fBexecveat\fP()  はバージョン 3.19 で Linux に追加された。 GNU C ライブラリによるサポートは検討中である。
.SH 準拠
\fBexecveat\fP() システムコールは Linux 固有である。
.SH 注意
\fBopenat\fP(2) で説明されている理由に加え、 \fBexecveat\fP() システムコールは、 \fBfexecve\fP(3) を \fI/proc\fP
ファイルシステムがマウントされていないシステムで実装するためにも必要である。
.PP
スクリプトファイルを実行するように要求された際、 スクリプトインタープリターに渡される \fIargv[0]\fP は、 \fI/dev/fd/N\fP 形式または
\fI/dev/fd/N/P\fP 形式の文字列である。 ここで \fIN\fP は \fIdirfd\fP 引数で渡されたファイルディスクリプター数である。
最初の形式の文字列となるのは、 \fBAT_EMPTY_PATH\fP が使用された場合である。 2 番目の形式の文字列になるのは、 スクリプトが
\fIdirfd\fP と \fIpathname\fP の両方を使って指定された場合である。 このとき \fIP\fP は \fIpathname\fP
に指定された値である。
.PP
\fBfexecve\fP(3) で説明されているのと同じ理由で、 \fBexecveat\fP() を使う際の理にかなった方法は \fIdirfd\fP に
close\-on\-exec フラグをセットすることである (ただし「バグ」を参照のこと)。
.SH バグ
上記で説明したエラー \fBENOENT\fP は、 以下の形式の呼び出しに渡すファイルディスクリプターで close\-on\-exec
フラグをセットできないことを意味している。
.PP
    execveat(fd, "", argv, envp, AT_EMPTY_PATH);
.PP
.\" For an example, see Michael Kerrisk's 2015-01-10 reply in this LKML
.\" thread (http://thread.gmane.org/gmane.linux.kernel/1836105/focus=20229):
.\"
.\"     Subject: [PATCHv10 man-pages 5/5] execveat.2: initial man page.\"                        for execveat(2
.\"     Date: Mon, 24 Nov 2014 11:53:59 +0000
しかしながら、 close\-on\-exec フラグをセットできないということは、
スクリプトを参照するファイルディスクリプターはスクリプト自身に見えてしまうということである。 ファイルディスクリプターを無駄に使うだけでなく、
ファイルディスクリプターが見えてしまうことにより、 スクリプトが \fBexecveat\fP()
を再帰的に利用する状況ではファイルディスクリプターの枯渇につながる可能性がある。
.SH 関連項目
\fBexecve\fP(2), \fBopenat\fP(2), \fBfexecve\fP(3)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
