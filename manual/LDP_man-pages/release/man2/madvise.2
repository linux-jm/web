.\" Copyright (C) 2001 David Gómez <davidge@jazzfree.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Based on comments from mm/filemap.c. Last modified on 10-06-2001
.\" Modified, 25 Feb 2002, Michael Kerrisk, <mtk.manpages@gmail.com>
.\"	Added notes on MADV_DONTNEED
.\" 2010-06-19, mtk, Added documentation of MADV_MERGEABLE and
.\"     MADV_UNMERGEABLE
.\" 2010-06-15, Andi Kleen, Add documentation of MADV_HWPOISON.
.\" 2010-06-19, Andi Kleen, Add documentation of MADV_SOFT_OFFLINE.
.\" 2011-09-18, Doug Goldstein <cardoe@cardoe.com>
.\"     Document MADV_HUGEPAGE and MADV_NOHUGEPAGE
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 2001 NAKANO Takeo all rights reserved.
.\" Translated Thu Aug 16 2001 by NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\" Updated Tue 8 Oct 2002 by NAKANO Takeo
.\" Updated 2007-01-08, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v2.43
.\" Updated 2013-05-01, Akihiro MOTOKI <amotoki@gmail.com>
.\" Updated 2013-07-31, Akihiro MOTOKI <amotoki@gmail.com>
.\"
.TH MADVISE 2 2014\-12\-31 Linux "Linux Programmer's Manual"
.SH 名前
madvise \- メモリー利用に関するアドバイスを与える
.SH 書式
\fB#include <sys/mman.h>\fP
.sp
\fBint madvise(void *\fP\fIaddr\fP\fB, size_t \fP\fIlength\fP\fB, int \fP\fIadvice\fP\fB);\fP
.sp
.in -4n
glibc 向けの機能検査マクロの要件 (\fBfeature_test_macros\fP(7)  参照):
.in
.sp
\fBmadvise\fP(): _BSD_SOURCE
.SH 説明
\fBmadvise\fP()  システムコールは、アドレス \fIaddr\fP からはじまる \fIlength\fP
バイトのメモリーブロックのページング入出力をどう扱えば良いか、 カーネルにアドバイスする。 これを用いると、 アプリケーションからカーネルに、
マップされたメモリーや共有メモリーをどのように扱ってほしいか伝えることができ、 カーネルはそれに応じて先読みやキャッシュなどの適切な手法を選択できる。
このコールはアプリケーションの動作そのものには影響しない (\fBMADV_DONTNEED\fP の場合は別) が、 性能には影響しうる。
なおこのアドバイスを受け入れるかどうかはカーネルに任される。
.LP
アドバイスは引き数 \fIadvice\fP によって与える。以下のいずれかを指定できる。
.TP 
\fBMADV_NORMAL\fP
特別な扱いは行わない。これがデフォルトである。
.TP 
\fBMADV_RANDOM\fP
ページ参照はランダムな順序で行われそうだ。 (したがって、先読みはあまり効果がなさそうだ。)
.TP 
\fBMADV_SEQUENTIAL\fP
ページ参照はシーケンシャルな順序で行われそうだ。 (したがって与えた範囲のページは積極的に先読みしておくと良いだろう。
またアクセスが終わったら速やかに解放して良い。)
.TP 
\fBMADV_WILLNEED\fP
近い将来にアクセスされそうだ。 (したがってこれらのページを今のうちに先読みしておくといいだろう。)
.TP 
\fBMADV_DONTNEED\fP
しばらくアクセスはなさそうだ。 (現時点でアプリケーションは与えた範囲の処理を終えている。 したがってカーネルはこれに関連するリソースを解放して良い。)
これ以降この範囲のページへのアクセスがあると、 成功はするが、メモリーの内容をマップ元のファイルからロードし直すことになる (\fBmmap\fP(2)
を見よ) か、 または元ファイルがないマップページでは アクセスがあったときに 0 埋めが行われることになる。
.TP 
\fBMADV_REMOVE\fP (Linux 2.6.16 以降)
.\" 2.6.18-rc5
.\" Databases want to use this feature to drop a section of their
.\" bufferpool (shared memory segments) - without writing back to
.\" disk/swap space.  This feature is also useful for supporting
.\" hot-plug memory on UML.
指定された範囲のページと関連するバッキングストアを解放する。 現在のところ、 shmfs/tmpfs だけがこれに対応している。
他のファイルシステムでは \fBENOSYS\fP が返される。
.TP 
\fBMADV_DONTFORK\fP (Linux 2.6.16 以降)
.\" See http://lwn.net/Articles/171941/
.\" [PATCH] madvise MADV_DONTFORK/MADV_DOFORK
.\" Currently, copy-on-write may change the physical address of
.\" a page even if the user requested that the page is pinned in
.\" memory (either by mlock or by get_user_pages).  This happens
.\" if the process forks meanwhile, and the parent writes to that
.\" page.  As a result, the page is orphaned: in case of
.\" get_user_pages, the application will never see any data hardware
.\" DMA's into this page after the COW.  In case of mlock'd memory,
.\" the parent is not getting the realtime/security benefits of mlock.
.\"
.\" In particular, this affects the Infiniband modules which do DMA from
.\" and into user pages all the time.
.\"
.\" This patch adds madvise options to control whether memory range is
.\" inherited across fork. Useful e.g. for when hardware is doing DMA
.\" from/into these pages.  Could also be useful to an application
.\" wanting to speed up its forks by cutting large areas out of
.\" consideration.
.\"
.\" SEE ALSO: http://lwn.net/Articles/171941/
.\" "Tweaks to madvise() and posix_fadvise()", 14 Feb 2006
\fBfork\fP(2)  が行われた後、指定された範囲のページを子プロセスが利用できないようにする。 この機能は、書き込み時コピー
(copy\-on\-write) 方式で、 \fBfork\fP(2)  の後で親プロセスがページに書き込みを行った場合に
ページの物理位置が変化しないようにするのに有効である (ページの再配置はハードウェアがそのページに DMA 転送を行うような場合に
問題を起こすことがある)。
.TP 
\fBMADV_DOFORK\fP (Linux 2.6.16 以降)
\fBMADV_DONTFORK\fP の影響を取り消し、デフォルトの動作に戻す。 つまり、 \fBfork\fP(2)
の前後でマッピングは継承されるようになる。
.TP 
\fBMADV_HWPOISON\fP (Linux 2.6.32 以降)
ページに毒入れを行い、ハードウェアメモリーの破損のようにそのページを取り扱う。 この操作は特権 (\fBCAP_SYS_ADMIN\fP を持った)
プロセスだけが利用できる。 この操作の結果、呼び出したプロセスは \fBSIGBUS\fP を受け取り、そのページはアンマップされる。
この機能はメモリーのエラー処理コードをテストするためのものである。 カーネルで \fBCONFIG_MEMORY_FAILURE\fP
が有効になっている場合にのみ利用可能である。
.TP 
\fBMADV_SOFT_OFFLINE\fP (Linux 2.6.33 以降)
\fIaddr\fP と \fIlength\fP で指定された範囲のページをソフトオフラインにする。 指定された範囲の各ページのメモリーの内容は保持され
(すなわち、次にアクセスされた際に、同じ内容が見えるが、新しい物理ページフレームになる)、 元のフレームはオフラインになる (すなわち、
そのフレームは使用される、通常のメモリー管理からは取り除かれる)。 \fBMADV_SOFT_OFFLINE\fP 操作の影響は呼び出したプロセスには見えない
(つまり呼び出したプロセスの動作は変化しない)。 この機能はメモリーのエラー処理コードをテストすることを目的に作られた。 カーネルで
\fBCONFIG_MEMORY_FAILURE\fP が有効になっている場合にのみ利用可能である。
.TP 
\fBMADV_MERGEABLE\fP (Linux 2.6.32 以降)
Kernel Samepage Merging (KSM; カーネルによる同じページの統合) を \fIaddr\fP と \fIlength\fP
で指定された領域に対して有効にする。 カーネルは、 統合可能の印がついたユーザーメモリーの領域を定期的にスキャンし、内容が全く同じページを探す。
内容が全く同じページがあれば、それらのページは書き込み保護 (write\-protected) がかかった一つのページで置き換えられる
(プロセスが後でページの内容を更新しようとした際には自動的にページのコピーが行われる)。 KSM はプライベートな無名ページ (anonymous
pages) だけを統合する (\fBmmap\fP(2) 参照)。 KSM 機能は、 同じデータのインスタンスを大量に生成するアプリケーション (KVM
などの仮想化システム) での利用を想定している。 この機能はプロセッシング能力を大量に消費する場合があり、注意して使用すること。 詳細は Linux
カーネルソースファイル \fIDocumentation/vm/ksm.txt\fP を参照。 \fBMADV_MERGEABLE\fP と
\fBMADV_UNMERGEABLE\fP は、 カーネルで \fBCONFIG_KSM\fP オプションを有効になっている場合にのみ利用できる。
.TP 
\fBMADV_UNMERGEABLE\fP (Linux 2.6.32 以降)
指定されたアドレス範囲に関して、それ以前に行われた \fBMADV_MERGEABLE\fP 操作の効果を取り消す。 KSM は、  \fIaddr\fP と
\fIlength\fP で指定されたアドレス範囲の統合済みのすべてのページの統合解除を行う。
.TP 
\fBMADV_HUGEPAGE\fP (Linux 2.6.38 以降)
.\" http://lwn.net/Articles/358904/
.\" https://lwn.net/Articles/423584/
Transparent Huge Pages (THP) を \fIaddr\fP と \fIlength\fP で指定された領域に対して有効にする。
現在のところ、Transparent Huge Pages はプライベートな無名ページ (anonymous pages) についてのみ機能する。
カーネルは定期的にヒュージページ (huge page) 候補の印がついたページをスキャンし、ヒュージページと置き換える。
また、カーネルはその領域がヒュージページのサイズに合っている場合、ヒュージページを直接割り当てる (\fBposix_memalign\fP(2) 参照)。
この機能は、大きなデータマッピングを使用し、一度にそのメモリーの大きな範囲にアクセスするようなアプリケーション (例えば QEMU
のような仮想化システム) で使うことを主に想定されている。 この機能は非常に簡単にメモリーを浪費してしまう (例えば、1 バイトしかアクセスしない
2MB のマッピングが、 4KB ページではなく 2MB の実際のメモリーを使ってしまう)。 詳細は Linux カーネルソースファイル
\fIDocumentation/vm/transhuge.txt\fP を参照。 \fBMADV_HUGEPAGE\fP と \fBMADV_NOHUGEPAGE\fP
は、 カーネルで \fBCONFIG_TRANSPARENT_HUGEPAGE\fP オプションを有効になっている場合にのみ利用できる。
.TP 
\fBMADV_NOHUGEPAGE\fP (Linux 2.6.38 以降)
\fIaddr\fP と \fIlength\fP で指定されたアドレス範囲のメモリーがヒュージページに組み込まれないようにする。
.TP 
\fBMADV_DONTDUMP\fP (Linux 3.4 以降)
コアダンプから \fIaddr\fP と \fIlength\fP で指定された範囲のページを除外する。 これは、
コアダンプに含めても役に立たないことが分かっている大きなメモリー領域があるアプリケーションで有用である。 \fBMADV_DONTDUMP\fP の効果は
\fI/proc/PID/coredump_filter\fP ファイル経由で設定されたビットマスクよりも優先される (\fBcore\fP(5) 参照)。
.TP 
\fBMADV_DODUMP\fP (Linux 3.4 以降)
以前の \fBMADV_DONTDUMP\fP の効果を取り消す。
.SH 返り値
\fBmadvise\fP()  は成功すると 0 を返す。 エラーが起こると \-1 を返し、 \fIerrno\fP を適切な値に設定する。
.SH エラー
.TP 
\fBEAGAIN\fP
何らかのカーネルリソースが一時的に利用できなかった。
.TP 
\fBEBADF\fP
指定したマップは存在するが、ファイルではないところをマップしている。
.TP 
\fBEINVAL\fP
このエラーは以下の理由で発生する。
.RS
.IP * 3
.\" .I len
.\" is zero,
\fIlen\fP が負の値である。
.IP *
\fIaddr\fP がページ境界ではない。
.IP *
\fIadvice\fP が有効な値でない。
.IP *
アプリケーションがロックされたページや共有ページを (\fBMADV_DONTNEED\fP で) 解放
しようとしている。
.IP *
\fIadvice\fP に \fBMADV_MERGEABLE\fP か \fBMADV_UNMERGEABLE\fP が指定されたが、 カーネルの設定が
\fBCONFIG_KSM\fP が有効になっていなかった。
.RE
.TP 
\fBEIO\fP
(\fBMADV_WILLNEED\fP の場合) この範囲のページングを行うと、 プロセスの RSS (resident set size)
の最大値を越えてしまう。
.TP 
\fBENOMEM\fP
(\fBMADV_WILLNEED\fP の場合) メモリーが足りず、ページングに失敗した。
.TP 
\fBENOMEM\fP
指定した範囲のアドレスが、現在マップされていない。 あるいはプロセスのアドレス空間の内部にない。
.SH バージョン
.\" commit d3ac21cacc24790eb45d735769f35753f5b56ceb
Linux 3.18 以降では、このシステムコールのサポートは任意となり、利用できるかはカーネルが \fBCONFIG_ADVISE_SYSCALLS\fP
オプションを有効にしてコンパイルされているかに依存する。
.SH 準拠
.\" FIXME . Write a posix_madvise(3) page.
POSIX.1b.  POSIX.1\-2001 では、 \fBposix_madvise\fP(3)  を \fBPOSIX_MADV_NORMAL\fP,
\fBPOSIX_MADV_RANDOM\fP などの定数とともに記述していた (それぞれの振る舞いはここで述べたものに近い)。 ファイルアクセスに対しても
\fBposix_fadvise\fP(2)  という類似の関数が存在する。

\fBMADV_REMOVE\fP, \fBMADV_DONTFORK\fP, \fBMADV_DOFORK\fP, \fBMADV_HWPOISON\fP,
\fBMADV_MERGEABLE\fP, \fBMADV_UNMERGEABLE\fP は Linux 固有である。
.SH 注意
.SS "Linux での注意"
.LP
現在の Linux の実装 (2.4.0) では、 このシステムコールをアドバイスというよりは命令と見ている。
したがってこのアドバイスに対して通常行われる動作が不可能な場合は、 エラーを返すことがある (上記の エラー の記述を参照)。
この振舞いは標準とは異なる。
.LP
.\" .SH HISTORY
.\" The
.\" .BR madvise ()
.\" function first appeared in 4.4BSD.
Linux の実装では \fIaddr\fP のアドレスはページ境界の値でなければならない。また \fIlength\fP は 0 であっても構わない。 また
Linux 版の \fBmadvise\fP()  では、指定されたアドレス範囲にマップされていない部分があると、
これらを無視して残りの部分にアドバイスを適用する (しかしシステムコールに対してはちゃんと \fBENOMEM\fP を返す)。
.SH 関連項目
\fBgetrlimit\fP(2), \fBmincore\fP(2), \fBmmap\fP(2), \fBmprotect\fP(2), \fBmsync\fP(2),
\fBmunmap\fP(2), \fBprctl\fP(2), \fBcore\fP(5)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.79 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
