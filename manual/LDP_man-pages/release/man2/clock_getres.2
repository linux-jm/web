.\" Copyright (c) 2003 Nick Clifford (zaf@nrc.co.nz), Jan 25, 2003
.\" Copyright (c) 2003 Andries Brouwer (aeb@cwi.nl), Aug 24, 2003
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 2003-08-23 Martin Schulze <joey@infodrom.org> improvements
.\" 2003-08-24 aeb, large parts rewritten
.\" 2004-08-06 Christoph Lameter <clameter@sgi.com>, SMP note
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 2004-2005 Yuichi SATO
.\"         all rights reserved.
.\" Translated 2004-07-19, Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated & Modified 2005-01-10, Yuichi SATO
.\" Updated 2010-04-11, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2012-04-27, Akihiro MOTOKI <amotoki@gmail.com>
.\" Updated 2012-05-08, Akihiro MOTOKI <amotoki@gmail.com>
.\" Updated 2012-05-29, Akihiro MOTOKI <amotoki@gmail.com>
.\" Updated 2013-05-06, Akihiro MOTOKI <amotoki@gmail.com>
.\"
.TH CLOCK_GETRES 2 2013\-12\-28 "" "Linux Programmer's Manual"
.SH 名前
clock_getres, clock_gettime, clock_settime \- クロックと時間の関数
.SH 書式
\fB#include <time.h>\fP
.sp
\fBint clock_getres(clockid_t \fP\fIclk_id\fP\fB, struct timespec *\fP\fIres\fP\fB);\fP

\fBint clock_gettime(clockid_t \fP\fIclk_id\fP\fB, struct timespec *\fP\fItp\fP\fB);\fP

\fBint clock_settime(clockid_t \fP\fIclk_id\fP\fB, const struct timespec
*\fP\fItp\fP\fB);\fP
.sp
\fI\-lrt\fP とリンクする (バージョン 2.17 より前の glibc のみ)
.sp
.in -4n
glibc 向けの機能検査マクロの要件 (\fBfeature_test_macros\fP(7)  参照):
.in
.sp
.ad l
\fBclock_getres\fP(), \fBclock_gettime\fP(), \fBclock_settime\fP():
.RS
_POSIX_C_SOURCE\ >=\ 199309L
.RE
.ad b
.SH 説明
関数 \fBclock_getres\fP()  は 指定されたクロック \fIclk_id\fP の分解能 (精度) を探し出す。 \fIres\fP が NULL
でない場合、その分解能を \fIres\fP で指される \fIstruct timespec\fP に格納する。 クロックの分解能は実装に依存し、
特定のプロセスによって設定することはできない。 \fBclock_settime\fP()  の引き数 \fItp\fP で指される時間の値が \fIres\fP
の倍数でない場合、 \fIres\fP の倍数に切り詰められる。
.PP
関数 \fBclock_gettime\fP()  と \fBclock_settime\fP()  は、指定されたクロック \fIclk_id\fP
の時間を取得または設定する。
.PP
\fIres\fP と \fItp\fP 引き数は \fItimespec\fP 構造体であり、 \fI<time.h>\fP で以下のように規定されている:
.sp
.in +4n
.nf
struct timespec {
    time_t   tv_sec;        /* seconds */
    long     tv_nsec;       /* nanoseconds */
};
.fi
.in
.PP
\fIclk_id\fP 引き数は特定のクロックの識別子であり、そのクロックで動作する。 クロックはシステム全体に適用することもでき、
その場合は全てのプロセスから見ることができる。 また 1 つのプロセス内でのみ時間を計測する場合は、 プロセス毎に適用することもできる。
.LP
全ての実装においてシステム全体のリアルタイムクロックがサポートされ、 \fBCLOCK_REALTIME\fP で識別される。 時間は紀元 (the
Epoch) からの秒とナノ秒で表される。 時間が変更された場合、相対的な時間間隔のタイマーは影響を受けないが、 絶対的な時点のタイマーは影響を受ける。
.LP
さらにいくつかのクロックが実装されているかもしれない。 対応する時間の値を解釈する方法とタイマーへの影響は、定められていない。
.LP
glibc と Linux カーネルの最新のバージョンでは、
以下のクロックがサポートされている。
.TP 
\fBCLOCK_REALTIME\fP
実時間を計測するシステム全体で一意な時間。
このクロックを設定するには適切な特権が必要である。
このクロックは、システム時間の不連続な変化 (例えば、システム管理者が
システム時間を手動で変更した場合など) や \fBadjtime\fP や NTP が行う
段階的な調整の影響を受ける。
.TP 
\fBCLOCK_REALTIME_COARSE\fP (Linux 2.6.32 以降; Linux 特有)
.\" Added in commit da15cfdae03351c689736f8d142618592e3cebc3
高速だが精度が低い \fBCLOCK_REALTIME\fP。速度が非常に必要で、かつ高精度のタイムスタンプが不要な場合に使用するとよい。
.TP 
.TP 
\fBCLOCK_MONOTONIC\fP
設定することができないクロックで、ある開始時点からの単調増加の時間で
表現されるクロック (開始時点がどの時点となるかは規定されていない)。
この時計は、システム時間の不連続な変化 (例えば、システム管理者がシステ
ム時間を手動で変更した場合など) の影響を受けないが、
\fBadjtime\fP(3) や NTP が行う段階的な調整の影響を受ける。
.TP 
\fBCLOCK_MONOTONIC_COARSE\fP (Linux 2.6.32 以降; Linux 特有)
.\" Added in commit da15cfdae03351c689736f8d142618592e3cebc3
高速だが精度が低い \fBCLOCK_MONOTONIC\fP。速度が非常に必要で、かつ高精度のタイムスタンプが不要な場合に使用するとよい。
.TP 
\fBCLOCK_MONOTONIC_RAW\fP (Linux 2.6.28 以降; Linux 特有)
.\" Added in commit 2d42244ae71d6c7b0884b5664cf2eda30fb2ae68, John Stultz
\fBCLOCK_MONOTONIC\fP と同様だが、NTP による調整や \fBadjtime\fP(3) が行う
段階的な調整の影響を受けない、ハードウェアによる生の時刻へのアクセス
ができる。
.TP 
\fBCLOCK_BOOTTIME\fP (Linux 2.6.39 以降; Linux 固有)
.\" commit 7fdd7f89006dd5a4c702fa0ce0c272345fa44ae0
.\" commit 70a08cca1227dc31c784ec930099a4417a06e7d0
\fBCLOCK_MONOTONIC\fP と同じだが、システムがサスペンドされている時間も含まれる点が異なる。
これを使うと、アプリケーションはサスペンド状態も扱える "monotonic" なクロックを得ることができる。 しかも、
\fBCLOCK_REALTIME\fP における複雑な処理を行う必要もなくなる。 \fBCLOCK_REALTIME\fP では、
\fBsettimeofday\fP(2) を使って時刻を変更した場合、時刻に不連続な変化が発生するからだ。
.TP 
\fBCLOCK_PROCESS_CPUTIME_ID\fP (Linux 2.6.12 以降)
プロセス単位の CPU タイムクロック (そのプロセスの全スレッドで消費される CPU 時間を計測する)。
.TP 
\fBCLOCK_THREAD_CPUTIME_ID\fP (Linux 2.6.12 以降)
スレッド固有の CPU タイムクロック。
.SH 返り値
\fBclock_gettime\fP(), \fBclock_settime\fP(), \fBclock_getres\fP()  は成功した場合に 0
を返し、失敗した場合に \-1 を返す (失敗した場合、 \fIerrno\fP が適切に設定される)。
.SH エラー
.TP 
\fBEFAULT\fP
\fItp\fP がアクセス可能なアドレス空間の外を指した。
.TP 
\fBEINVAL\fP
.\" Linux also gives this error on attempts to set CLOCK_PROCESS_CPUTIME_ID
.\" and CLOCK_THREAD_CPUTIME_ID, when probably the proper error should be
.\" EPERM.
指定された \fIclk_id\fP がこのシステムでサポートされていない。
.TP 
\fBEPERM\fP
指示されたクロックを設定する権限が \fBclock_settime\fP()  にない。
.SH バージョン
これらのシステムコールは Linux 2.6 で初めて登場した。
.SH 準拠
SUSv2, POSIX.1\-2001.
.SH 可用性
これらの関数が利用可能な POSIX システムでは、\fI<unistd.h>\fP においてシンボル \fB_POSIX_TIMERS\fP が
0 より大きい値に定義されている。 シンボル \fB_POSIX_MONOTONIC_CLOCK\fP, \fB_POSIX_CPUTIME\fP,
\fB_POSIX_THREAD_CPUTIME\fP は \fBCLOCK_MONOTONIC\fP, \fBCLOCK_PROCESS_CPUTIME_ID\fP,
\fBCLOCK_THREAD_CPUTIME_ID\fP が利用可能なことを示す。 (\fBsysconf\fP(3)  も参照すること。)
.SH 注意
.SS "SMP システムに関する歴史的な注意事項"
Linux が \fBCLOCK_PROCESS_CPUTIME_ID\fP と \fBCLOCK_THREAD_CPUTIME_ID\fP
クロックのカーネルによるサポートを追加する前は、 glibc はこれらのクロックは多くのプラットフォームで CPU のタイマーレジスター (i386
上の TSC、Itanium 上の AR.ITC) を用いて実現されていた。 これらのレジスターは CPU 間で異なる可能性があり、 プロセスが他の
CPU に移動させられた場合、 結果としてこれらのクロックが\fB偽の結果\fP (bogus results) を返すかもしれない。
.PP
SMP システムの各 CPU が別々のクロック源を持つ場合、 タイマーレジスター間の相互関係を管理する方法はない。 これは各 CPU
が微妙に異なる周波数で動作するためである。 これが真実の場合 (訳註: 各 CPU が別々のクロック源を持つ場合)、
\fIclock_getcpuclockid(0)\fP は \fBENOENT\fP を返して、その状況を表す。 2 つのクロックは、プロセスが特定の CPU
上に留まっていることが 保証できる場合にのみ有効である。
.PP
SMP システムの各プロセッサは全く同じ時刻に起動する訳ではないので、 各タイマーレジスターは通常はあるオフセットで動作している。
オフセットをブート時に制限するコードが含まれるアーキテクチャーもある。 しかし、このコードがオフセットを正確に調整することは保証できない。 glibc
は (Linux カーネルとは異なり) オフセットを扱うためのコードを提供しない。
通常はこれらのオフセットが小さいので、多くの場合でその影響は無視できる。

glibc 2.4 以降では、 このページで説明したシステムコールのラッパー関数は、 \fBCLOCK_PROCESS_CPUTIME_ID\fP と
\fBCLOCK_THREAD_CPUTIME_ID\fP のカーネル実装が利用できるシステム (すなわち Linux 2.6.12 以降)
ではカーネル実装を利用することで、 上述の問題を回避している。
.SH バグ
.\" See http://bugzilla.kernel.org/show_bug.cgi?id=11972
POSIX.1\-2001 では、 「適切な特権 (appropriate privileges)」を持ったプロセスは、
\fBclock_settime\fP()  を使って、クロック \fBCLOCK_PROCESS_CPUTIME_ID\fP と
\fBCLOCK_THREAD_CPUTIME_ID\fP を設定することができるとされている。 Linux では、これらのクロックは設定可能ではない
(すなわち、どのプロセスも「適切な特権」を持たない)。
.SH 関連項目
\fBdate\fP(1), \fBgettimeofday\fP(2), \fBsettimeofday\fP(2), \fBtime\fP(2),
\fBadjtime\fP(3), \fBclock_getcpuclockid\fP(3), \fBctime\fP(3), \fBftime\fP(3),
\fBpthread_getcpuclockid\fP(3), \fBsysconf\fP(3), \fBtime\fP(7)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.79 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
