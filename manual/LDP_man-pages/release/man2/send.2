.\" Copyright (c) 1983, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\" Modified 1993-07-24 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1996-10-22 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Oct 1998 by Andi Kleen
.\" Modified Oct 2003 by aeb
.\" Modified 2004-07-01 by mtk
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 1996 HANATAKA Shinya all rights reserved.
.\" Translated 1997-02-23, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Updated 1999-08-15, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Updated 2000-01-13, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2001-01-30, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2005-03-14, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2005-12-26, Akihiro MOTOKI
.\" Updated 2006-04-15, Akihiro MOTOKI, LDP v2.29
.\" Updated 2008-04-13, Akihiro MOTOKI, LDP v3.20
.\" Updated 2012-05-04, Akihiro MOTOKI <amotoki@gmail.com>
.\" Updated 2013-03-26, Akihiro MOTOKI <amotoki@gmail.com>
.\"
.TH SEND 2 2020\-11\-01 Linux "Linux Programmer's Manual"
.SH 名前
send, sendto, sendmsg \- ソケットへメッセージを送る
.SH 書式
.nf
\fB#include <sys/types.h>\fP
\fB#include <sys/socket.h>\fP
.PP
\fBssize_t send(int \fP\fIsockfd\fP\fB, const void *\fP\fIbuf\fP\fB, size_t \fP\fIlen\fP\fB, int \fP\fIflags\fP\fB);\fP
.PP
\fBssize_t sendto(int \fP\fIsockfd\fP\fB, const void *\fP\fIbuf\fP\fB, size_t \fP\fIlen\fP\fB, int \fP\fIflags\fP\fB,\fP
\fB               const struct sockaddr *\fP\fIdest_addr\fP\fB, socklen_t \fP\fIaddrlen\fP\fB);\fP
.PP
\fBssize_t sendmsg(int \fP\fIsockfd\fP\fB, const struct msghdr *\fP\fImsg\fP\fB, int \fP\fIflags\fP\fB);\fP
.fi
.SH 説明
システムコール \fBsend\fP(), \fBsendto\fP(), \fBsendmsg\fP()  は、もう一方のソケットへメッセージを転送するのに使用される。
.PP
\fBsend\fP()  は、ソケットが \fI接続された (connected)\fP 状態にある場合にのみ使用できる
(つまり、どの相手に送信するかは既知である)。 \fBsend\fP()  と \fBwrite\fP(2)  の違いは、引数に \fIflags\fP
があるかどうかだけである。 引数 \fIflags\fP にフラグが指定されない場合、 \fBsend\fP()  は \fBwrite\fP(2)  と等価である。
また、
.PP
    send(sockfd, buf, len, flags);
.PP
は以下と等価である。
.PP
    sendto(sockfd, buf, len, flags, NULL, 0);
.PP
引数 \fIsockfd\fP は、データを送信するパケットのファイルディスクリプターである。
.PP
\fBsendto\fP()  は、接続型 (connection\-mode) のソケット (\fBSOCK_STREAM\fP,
\fBSOCK_SEQPACKET\fP)  で 使用された場合、引数 \fIdest_addr\fP と \fIaddrlen\fP は無視される (各々の引数が
NULL と 0 でない場合は \fBEISCONN\fP エラーも返される)。 また、ソケットが実際には接続されていなかった時には \fBENOTCONN\fP
エラーが返される。 接続型のソケット以外で使用された場合は、接続先のアドレスは \fIdest_addr\fP で与えられ、そのサイズは \fIaddrlen\fP
で指定される。 \fBsendmsg\fP()  では、接続先のアドレスは \fImsg.msg_name\fP で与えられ、そのサイズは
\fImsg.msg_namelen\fP で指定される。
.PP
\fBsend\fP()  と \fBsendto\fP()  では、メッセージは \fIbuf\fP に格納されており、その長さは \fIlen\fP であると解釈される。
\fBsendmsg\fP()  では、メッセージは 配列 \fImsg.msg_iov\fP の各要素が指す位置に格納されている。 \fBsendmsg\fP()
では、補助データ (制御情報とも呼ばれる) を送信することもできる。
.PP
メッセージ長が長過ぎるために、そのソケットが使用するプロトコルでは、 メッセージをソケットに渡されたままの形で送信することができない場合、
\fBEMSGSIZE\fP エラーが返され、そのメッセージは転送されない。
.PP
\fBsend\fP()  では、配送の失敗の通知は明示的に行われる。 ローカル側でエラーが検出された場合は、返り値 \-1 として通知される。
.PP
メッセージがソケットの送信バッファーに入れることができない場合、 \fBsend\fP()  は通常は停止 (block) する (ソケットが非停止
(nonblocking) I/O モード でない場合)。非停止モードの場合にはエラー \fBEAGAIN\fP か \fBEWOULDBLOCK\fP
で失敗する。 いつデータをさらに送信できるようになるかを知るために、 \fBselect\fP(2)  コールを使用することができる。
.SS フラグ引数
.\" FIXME . ? document MSG_PROXY (which went away in 2.3.15)
\fIflags\fP 引数は、以下のフラグの (0 個以上の) ビット単位の論理和を とったものを指定する。
.TP 
\fBMSG_CONFIRM\fP (Linux 2.3.15 以降)
転送処理に進展があった、つまり相手側から成功の応答を受けたことをリンク層に 知らせる。リンク層がこの通知を受け取らなかった場合には、通常どおり
(ユニキャスト ARP を使うなどの方法で) 近傍 (neighbor) の再検索を行う。 \fBSOCK_DGRAM\fP と \fBSOCK_RAW\fP
のソケットに対してのみ有効で、現在のところ IPv4 と IPv6 のみ実装されている。 詳しくは \fBarp\fP(7)  参照のこと。
.TP 
\fBMSG_DONTROUTE\fP
パケットを送り出すのにゲートウェイを使用せず、 直接接続されているネットワーク上のホストだけに送る。 通常、このフラグは診断 (diagnostic)
やルーティングプログラムに よってのみ使用される。このフラグは、経路制御が行われるプロトコルファミリー
に対してのみ定義されている。パケットソケットには定義されていない。
.TP 
\fBMSG_DONTWAIT\fP (Linux 2.2 以降)
Enables nonblocking operation; if the operation would block, \fBEAGAIN\fP or
\fBEWOULDBLOCK\fP is returned.  This provides similar behavior to setting the
\fBO_NONBLOCK\fP flag (via the \fBfcntl\fP(2)  \fBF_SETFL\fP operation), but differs
in that \fBMSG_DONTWAIT\fP is a per\-call option, whereas \fBO_NONBLOCK\fP is a
setting on the open file description (see \fBopen\fP(2)), which will affect all
threads in the calling process and as well as other processes that hold file
descriptors referring to the same open file description.
.TP 
\fBMSG_EOR\fP (Linux 2.2 以降)
レコードの終了を指示する (\fBSOCK_SEQPACKET\fP のようにこの概念に対応しているソケット種別のときに有効)。
.TP 
\fBMSG_MORE\fP (Linux 2.4.4 以降)
呼び出し元にさらに送るデータがあることを示す。 このフラグは TCP ソケットとともに使用され、 \fBTCP_CORK\fP
ソケットオプションと同じ効果が得られる (\fBtcp\fP(7)  を参照)。 \fBTCP_CORK\fP との違いは、このフラグを使うと呼び出し単位で
この機能を有効にできる点である。
.IP
Linux 2.6 以降では、このフラグは UDP ソケットでもサポートされており、
このフラグ付きで送信された全てのデータを一つのデータグラムにまとめて 送信することを、カーネルに知らせる。まとめられたデータグラムは、
このフラグを指定せずにこのシステムコールが実行された際に初めて送信される (\fBudp\fP(7)  に記載されているソケットオプション
\fBUDP_CORK\fP も参照)。
.TP 
\fBMSG_NOSIGNAL\fP (Linux 2.2 以降)
Don't generate a \fBSIGPIPE\fP signal if the peer on a stream\-oriented socket
has closed the connection.  The \fBEPIPE\fP error is still returned.  This
provides similar behavior to using \fBsigaction\fP(2)  to ignore \fBSIGPIPE\fP,
but, whereas \fBMSG_NOSIGNAL\fP is a per\-call feature, ignoring \fBSIGPIPE\fP sets
a process attribute that affects all threads in the process.
.TP 
\fBMSG_OOB\fP
\fI帯域外 (out\-of\-band)\fP データをサポートするソケット (例えば \fBSOCK_STREAM\fP)  で \fI帯域外\fP
データを送る。下位プロトコルも \fI帯域外\fP データをサポートしている必要がある。
.SS sendmsg()
\fBsendmsg\fP() で利用されている \fImsghdr\fP 構造体は以下の通り。
.PP
.in +4n
.EX
struct msghdr {
    void         *msg_name;       /* 追加のアドレス */
    socklen_t     msg_namelen;    /* アドレスのサイズ */
    struct iovec *msg_iov;        /* scatter/gather 配列 */
    size_t        msg_iovlen;     /* msg_iov の要素数 */
    void         *msg_control;    /* 補助データ (後述) */
    size_t        msg_controllen; /* 補助データバッファー長 */
    int           msg_flags;      /* フラグ (未使用) */
};
.EE
.in
.PP
フィールド \fImsg_name\fP は、 未接続のソケットでデータグラムの宛先アドレスを指定するのに使用される。
このフィールドはアドレスを格納したバッファーを指す。 フィールド \fImsg_namelen\fP にはアドレスの大きさを設定しなければならない。
接続済のソケットについては、これらのフィールドにはそれぞれ NULL と 0 を指定しなければならない。
.PP
フィールド \fBmsg_iov\fP と \fImsg_iovlen\fP は scatter\-gather 用の場所を指定する。 \fBwritev\fP(2)
と同じ。
.PP
You may send control information (ancillary data) using the \fImsg_control\fP
and \fImsg_controllen\fP members.  The maximum control buffer length the kernel
can process is limited per socket by the value in
\fI/proc/sys/net/core/optmem_max\fP; see \fBsocket\fP(7).  For further information
on the use of ancillary data in various socket domains, see \fBunix\fP(7)  and
\fBip\fP(7).
.PP
.\" Still to be documented:
.\"  Send file descriptors and user credentials using the
.\"  msg_control* fields.
フィールド \fImsg_flags\fP は無視される。
.SH 返り値
成功した場合、これらのシステムコールは送信されたバイト数を返す。 エラーの場合、 \-1 を返し、 \fIerrno\fP を適切に設定にする。
.SH エラー
これらはソケット層で発生する一般的なエラーである。これ以外に、下層の プロトコルモジュールで生成されたエラーが返されるかもしれない。
これらについては、それぞれのマニュアルを参照すること。
.TP 
\fBEACCES\fP
(UNIX ドメインソケットの場合; パス名で識別される。)

ソケットファイルへの書き込み許可がなかったか、パス名へ到達するまでの
ディレクトリのいずれかに対する検索許可がなかった。
(\fBpath_resolution\fP(7) も参照のこと)
.IP
(UDP ソケットの場合) ユニキャストアドレスであるかのように、
ネットワークアドレスやブロードキャストアドレスへの送信が試みられた。
.TP 
\fBEAGAIN\fP または \fBEWOULDBLOCK\fP
.\" Actually EAGAIN on Linux
ソケットが非停止に設定されており、 要求された操作が停止した。 POSIX.1\-2001 は、この場合にどちらのエラーを返すことも認めており、 これら
2 つの定数が同じ値を持つことも求めていない。 したがって、移植性が必要なアプリケーションでは、両方の可能性を 確認すべきである。
.TP 
\fBEAGAIN\fP
(インターネットドメインデータグラムソケットの場合) \fIsockfd\fP が参照するソケットがそれ以前にアドレスにバインドされておらず、
そのソケットに一時ポートをバインドしようとした際に、 一時ポートとして使用する範囲のポート番号がすべて使用中であった。 \fBip\fP(7) の
\fI/proc/sys/net/ipv4/ip_local_port_range\fP の議論を参照のこと。
.TP 
\fBEALREADY\fP
Another Fast Open is in progress.
.TP 
\fBEBADF\fP
\fIsockfd\fP が有効なオープンされたファイルディスクリプターでない。
.TP 
\fBECONNRESET\fP
接続が接続相手によりリセットされた。
.TP 
\fBEDESTADDRREQ\fP
ソケットが接続型 (connection\-mode) ではなく、 かつ送信先のアドレスが設定されていない。
.TP 
\fBEFAULT\fP
ユーザー空間として不正なアドレスがパラメーターとして指定された。
.TP 
\fBEINTR\fP
データが送信される前に、シグナルが発生した。 \fBsignal\fP(7)  参照。
.TP 
\fBEINVAL\fP
不正な引数が渡された。
.TP 
\fBEISCONN\fP
接続型ソケットの接続がすでに確立していたが、受信者が指定されていた。 (現在のところ、この状況では、このエラーが返されるか、
受信者の指定が無視されるか、のいずれかとなる)
.TP 
\fBEMSGSIZE\fP
.\" (e.g., SOCK_DGRAM )
そのソケット種別 ではソケットに渡されたままの形でメッセージを送信する必要があるが、 メッセージが大き過ぎるため送信することができない。
.TP 
\fBENOBUFS\fP
ネットワークインターフェースの出力キューが一杯である。 一般的には、一時的な輻輳 (congestion) のためにインターフェースが
送信を止めていることを意味する。 (通常、Linux ではこのようなことは起こらない。デバイスのキューが
オーバーフローした場合にはパケットは黙って捨てられる)
.TP 
\fBENOMEM\fP
メモリーが足りない。
.TP 
\fBENOTCONN\fP
ソケットが接続されておらず、接続先も指定されていない。
.TP 
\fBENOTSOCK\fP
ファイルディスクリプター \fIsockfd\fP がソケットを参照していない。
.TP 
\fBEOPNOTSUPP\fP
引数 \fIflags\fP のいくつかのビットが、そのソケット種別では不適切なものである。
.TP 
\fBEPIPE\fP
接続指向のソケットでローカル側が閉じられている。 この場合、 \fBMSG_NOSIGNAL\fP が設定されていなければ、プロセスには \fBSIGPIPE\fP
も同時に送られる。
.SH 準拠
4.4BSD, SVr4, POSIX.1\-2001.  (これらのインターフェースは 4.2BSD で最初に登場した)。
.PP
POSIX.1\-2001 には、 \fBMSG_OOB\fP と \fBMSG_EOR\fP フラグだけが記載されている。 POSIX.1\-2008 では
\fBMSG_NOSIGNAL\fP が規格に追加されている。 \fBMSG_CONFIRM\fP フラグは Linux での拡張である。
.SH 注意
.\" glibc bug for msg_controllen raised 12 Mar 2006
.\" http://sourceware.org/bugzilla/show_bug.cgi?id=2448
.\" The problem is an underlying kernel issue: the size of the
.\" __kernel_size_t type used to type these fields varies
.\" across architectures, but socklen_t is always 32 bits,
.\" as (at least with GCC) is int.
According to POSIX.1\-2001, the \fImsg_controllen\fP field of the \fImsghdr\fP
structure should be typed as \fIsocklen_t\fP, and the \fImsg_iovlen\fP field
should be typed as \fIint\fP, but glibc currently types both as \fIsize_t\fP.
.PP
\fBsendmmsg\fP(2)  には、一度の呼び出しでの複数のデータグラムの送信に使用できる
Linux 固有の システムコールに関する情報が書かれている。
.SH バグ
Linux は \fBENOTCONN\fP を返す状況で \fBEPIPE\fP を返すことがある。
.SH 例
\fBsendto\fP()  の利用例が \fBgetaddrinfo\fP(3)  に記載されている。
.SH 関連項目
\fBfcntl\fP(2), \fBgetsockopt\fP(2), \fBrecv\fP(2), \fBselect\fP(2), \fBsendfile\fP(2),
\fBsendmmsg\fP(2), \fBshutdown\fP(2), \fBsocket\fP(2), \fBwrite\fP(2), \fBcmsg\fP(3),
\fBip\fP(7), \fBipv6\fP(7), \fBsocket\fP(7), \fBtcp\fP(7), \fBudp\fP(7), \fBunix\fP(7)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
