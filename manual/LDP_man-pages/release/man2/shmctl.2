.\" Copyright (c) 1993 Luigi P. Bai (lpb@softint.com) July 28, 1993
.\" and Copyright 1993 Giorgio Ciucci <giorgio@crcc.it>
.\" and Copyright 2004, 2005 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified 1993-07-28, Rik Faith <faith@cs.unc.edu>
.\" Modified 1993-11-28, Giorgio Ciucci <giorgio@crcc.it>
.\" Modified 1997-01-31, Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2001-02-18, Andries Brouwer <aeb@cwi.nl>
.\" Modified 2002-01-05, 2004-05-27, 2004-06-17,
.\"    Michael Kerrisk <mtk.manpages@gmail.com>
.\" Modified 2004-10-11, aeb
.\" Modified, Nov 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Language and formatting clean-ups
.\"	Updated shmid_ds structure definitions
.\"	Added information on SHM_DEST and SHM_LOCKED flags
.\"	Noted that CAP_IPC_LOCK is not required for SHM_UNLOCK
.\"		since kernel 2.6.9
.\" Modified, 2004-11-25, mtk, notes on 2.6.9 RLIMIT_MEMLOCK changes
.\" 2005-04-25, mtk -- noted aberrant Linux behavior w.r.t. new
.\"	attaches to a segment that has already been marked for deletion.
.\" 2005-08-02, mtk: Added IPC_INFO, SHM_INFO, SHM_STAT descriptions.
.\" 2018-03-20, dbueso: Added SHM_STAT_ANY description.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 1997 HANATAKA Shinya
.\"         all rights reserved.
.\" Translated 1997-03-01, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Updated & Modified 2001-06-13, Yuichi SATO <ysato@h4.dion.ne.jp>
.\" Updated & Modified 2005-01-05, Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated & Modified 2005-09-06, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated & Modified 2005-10-08, Akihiro MOTOKI
.\" Updated 2006-07-21, Akihiro MOTOKI, LDP v2.36
.\" Updated 2013-05-06, Akihiro MOTOKI <amotoki@gmail.com>
.\"
.TH SHMCTL 2 2020\-12\-21 Linux "Linux Programmer's Manual"
.SH 名前
shmctl \- System V 共有メモリー (shared memory) を制御する
.SH 書式
.ad l
\fB#include <sys/ipc.h>\fP
.br
\fB#include <sys/shm.h>\fP
.PP
\fBint shmctl(int \fP\fIshmid\fP\fB, int \fP\fIcmd\fP\fB, struct shmid_ds *\fP\fIbuf\fP\fB);\fP
.ad b
.SH 説明
\fBshmctl\fP()  は、識別子が \fIshmid\fP の System\ V 共有メモリーセグメントに対して \fIcmd\fP
で指示した制御命令を実行する。
.PP
\fIbuf\fP 引数は、 \fIshmid_ds\fP 構造体へのポインターである。 この構造体は \fI<sys/shm.h>\fP
で以下のように定義されている
.PP
.in +4n
.EX
struct shmid_ds {
    struct ipc_perm shm_perm;    /* 所有権と許可 */
    size_t          shm_segsz;   /* セグメントのサイズ (バイト) */
    time_t          shm_atime;   /* 最後の付加 (attach) の時刻 */
    time_t          shm_dtime;   /* 最後の分離 (detach) の時刻 */
    time_t          shm_ctime;   /* 作成時刻 / shmctl() による
                                    最後の変更時刻 */
    pid_t           shm_cpid;    /* 作成者 (creator) の PID */
    pid_t           shm_lpid;    /* 最後の shmat(2)/shmdt(2) の PID */
    shmatt_t        shm_nattch;  /* 現在付加されている数 */
    ...
};
.EE
.in
.PP
\fIshmid_ds\fP 構造体のフィールドは以下の通りである。
.TP  12
\fIshm_perm\fP
This is an \fIipc_perm\fP structure (see below) that specifies the access
permissions on the shared memory segment.
.TP 
\fIshm_segsz\fP
共有メモリーセグメントのサイズ (バイト単位)。
.TP 
\fIshm_atime\fP
Time of the last \fBshmat\fP(2)  system call that attached this segment.
.TP 
\fIshm_dtime\fP
Time of the last \fBshmdt\fP(2)  system call that detached tgis segment.
.TP 
\fIshm_ctime\fP
Time of creation of segment or time of the last \fBshmctl\fP()  \fBIPC_SET\fP
operation.
.TP 
\fIshm_cpid\fP
その共有メモリーセグメントを作成したプロセスの ID。
.TP 
\fIshm_lpid\fP
ID of the last process that executed a \fBshmat\fP(2)  or \fBshmdt\fP(2)  system
call on this segment.
.TP 
\fIshm_nattch\fP
Number of processes that have this segment attached.
.PP
\fIipc_perm\fP 構造体は以下のように定義されている (強調されたフィールドは \fBIPC_SET\fP を使って設定可能である):
.PP
.in +4n
.EX
struct ipc_perm {
    key_t          __key;    /* shmget(2) に与えられるキー */
    uid_t          \fBuid\fP;      /* 所有者の実効 UID */
    gid_t          \fBgid\fP;      /* 所有者の実効 GID */
    uid_t          cuid;     /* 作成者の実効 UID */
    gid_t          cgid;     /* 作成者の実効 GID */
    unsigned short \fBmode\fP;     /* \fB許可\fP + SHM_DEST と
                                SHM_LOCKED フラグ */
    unsigned short __seq;    /* シーケンス番号 */
};
.EE
.in
.PP
The least significant 9 bits of the \fImode\fP field of the \fIipc_perm\fP
structure define the access permissions for the shared memory segment.  The
permission bits are as follows:
.TS
l l.
0400	Read by user
0200	Write by user
0040	Read by group
0020	Write by group
0004	Read by others
0002	Write by others
.TE
.PP
Bits 0100, 0010, and 0001 (the execute bits) are unused by the system.  (It
is not necessary to have execute permission on a segment in order to perform
a \fBshmat\fP(2)  call with the \fBSHM_EXEC\fP flag.)
.PP
\fIcmd\fP として有効な値は以下の通り:
.TP 
\fBIPC_STAT\fP
\fIshmid\fP に関連づけられたカーネルデータ構造体の情報を \fIbuf\fP で指された \fIshmid_ds\fP 構造体にコピーする。
呼び出し元は共有メモリーセグメントに対する 読み込み許可を持たなければならない。
.TP 
\fBIPC_SET\fP
Write the values of some members of the \fIshmid_ds\fP structure pointed to by
\fIbuf\fP to the kernel data structure associated with this shared memory
segment, updating also its \fIshm_ctime\fP member.
.IP
以下のフィールドが更新される: \fIshm_perm.uid\fP, \fIshm_perm.gid\fP および \fIshm_perm.mode\fP (の下位 9
ビット)。
.IP
The effective UID of the calling process must match the owner
(\fIshm_perm.uid\fP)  or creator (\fIshm_perm.cuid\fP)  of the shared memory
segment, or the caller must be privileged.
.TP 
\fBIPC_RMID\fP
セグメントに破棄済みのマークを付ける。 セグメントは、実際には最後プロセスがセグメントを分離した (関連する \fIshmid_ds\fP 構造体の
\fIshm_nattch\fP メンバーが 0 になった) 後でのみ破棄される。
呼び出し元はそのセグメントの所有者か作成者であるか、特権を持たなければならない。 \fIbuf\fP 引数は無視される。
.IP
セグメントに破棄のマークが付けられると、 関連するデータ構造体において \fIshm_perm.mode\fP フィールドの (標準ではない)
\fBSHM_DEST\fP フラグが設定される。 このデータ構造体は \fBIPC_STAT\fP で取得される。
.IP
呼び出し元は最終的にはセグメントを忘れずに破棄\fIしなければならない\fP。 そうでなれば、フォールト (fault) されたページは メモリーかスワップ
(swap) に残り続ける。
.IP
\fBproc\fP(5) の \fI/proc/sys/kernel/shm_rmid_forced\fP の説明も参照のこと。
.TP 
\fBIPC_INFO\fP (Linux 固有)
システム全体での共有メモリーの制限とパラメーターに関する情報を、 \fIbuf\fP が指す構造体に入れて返す。 この構造体は \fIshminfo\fP 型である
(そのためキャストが必要である)。 \fIshminfo\fP は \fB_GNU_SOURCE\fP 機能検査マクロが定義された場合に
\fI<sys/shm.h>\fP で以下のように定義される:
.IP
.in +4n
.EX
struct  shminfo {
    unsigned long shmmax; /* 最大セグメントサイズ */
    unsigned long shmmin; /* 最小セグメントサイズ。
                             常に 1 */
    unsigned long shmmni; /* 最大セグメント数 */
    unsigned long shmseg; /* プロセスが付加できる
                             セグメントの最大数。
                             カーネル内では未使用 */
    unsigned long shmall; /* 共有メモリーの最大ページ数。
                             システム全体での値 */
};
.EE
.in
.IP
設定 \fIshmmni\fP, \fIshmmax\fP, \fIshmall\fP は \fI/proc\fP にある同じ名前のファイル経由で変更可能である。 詳しくは
\fBproc\fP(5)  を参照。
.TP 
\fBSHM_INFO\fP (Linux 固有)
共有メモリーが消費しているシステム資源に関する情報を 格納した \fIshm_info\fP 構造体を返す。 この構造体は、 \fB_GNU_SOURCE\fP
機能検査マクロが定義された場合に \fI<sys/shm.h>\fP で以下のように定義される:
.IP
.in +4n
.EX
struct shm_info {
    int           used_ids; /* 現在存在するセグメント数 */
    unsigned long shm_tot;  /* 共有メモリーのページ総数 */
    unsigned long shm_rss;  /* メモリー上にある (スワップされて
                               いない) 共有メモリーページ数 */
    unsigned long shm_swp;  /* スワップされている共有メモリー
                               ページ数 */
    unsigned long swap_attempts;
                            /* Linux 2.4 以降では未使用 */
    unsigned long swap_successes;
                            /* Linux 2.4 以降では未使用 */
};
.EE
.in
.TP 
\fBSHM_STAT\fP (Linux 固有)
\fBIPC_STAT\fP と同じく \fIshmid_ds\fP 構造体を返す。 但し、 \fIshmid\fP
引数は、セグメント識別子ではなく、システム上の全ての共有メモリー セグメントに関する情報を管理するカーネルの内部配列へのインデックス である。
.TP 
\fBSHM_STAT_ANY\fP (Linux\-specific, Linux 4.17 以降)
Return a \fIshmid_ds\fP structure as for \fBSHM_STAT\fP.  However,
\fIshm_perm.mode\fP is not checked for read access for \fIshmid\fP, meaning that
any user can employ this operation (just as any user may read
\fI/proc/sysvipc/shm\fP to obtain the same information).
.PP
呼び出し元は、\fIcmd\fP に以下の値を指定することで、共有メモリーセグメントが スワップされることを防止したり、許可したりできる:
.TP 
\fBSHM_LOCK\fP (Linux 固有)
共有メモリーセグメントをスワップすることを防止する。 ロックが有効になった後、呼び出し元は、
存在することが要求された全てのページをフォールトさせなければならない。 セグメントがロックされると、 関連するデータ構造体において
\fIshm_perm.mode\fP フィールドの (標準的ではない)  \fBSHM_LOCKED\fP フラグが設定される。 このデータ構造体は
\fBIPC_STAT\fP で取得される。
.TP 
\fBSHM_UNLOCK\fP (Linux 固有)
セグメントのロックを解除し、スワップアウトすることを可能にする。
.PP
.\" There was some weirdness in 2.6.9: SHM_LOCK and SHM_UNLOCK could
.\" be applied to a segment, regardless of ownership of the segment.
.\" This was a botch-up in the move to RLIMIT_MEMLOCK, and was fixed
.\" in 2.6.10.  MTK, May 2005
2.6.10 より前のカーネルでは、特権プロセスだけが \fBSHM_LOCK\fP と \fBSHM_UNLOCK\fP を利用することができた。 2.6.10
以降のカーネルでは、非特権プロセスであっても次の条件を満たせば これらの操作を利用することができる。その条件とは、プロセスの実効 UID
がそのセグメントの所有者もしくは作成者の UID と一致し、 (\fBSHM_LOCK\fP の場合には) ロックするメモリーの合計が
\fBRLIMIT_MEMLOCK\fP リソース上限 (\fBsetrlimit\fP(2)  参照) の範囲内に入っていることである。
.SH 返り値
\fBIPC_INFO\fP と \fBSHM_INFO\fP 操作は、成功すると、全ての共有メモリーセグメントに関する情報を
管理しているカーネルの内部配列の使用中エントリーのインデックスの うち最大値を返す (この情報は、システムの全ての共有メモリーセグメントに関する情報を
取得するために、操作 \fBSHM_STAT\fP か \fBSHM_STAT_ANY\fP を繰り返し実行する際に使用できる)。 \fBSHM_STAT\fP
操作は、成功すると、 \fIshmid\fP で指定されたインデックスを持つ共有メモリーセグメントの識別子を返す。 他の操作は、成功の場合 0 を返す。
.PP
エラーの場合は \-1 を返し、 \fIerrno\fP を適切に設定する。
.SH エラー
.TP 
\fBEACCES\fP
\fBIPC_STAT\fP or \fBSHM_STAT\fP is requested and \fIshm_perm.mode\fP does not allow
read access for \fIshmid\fP, and the calling process does not have the
\fBCAP_IPC_OWNER\fP capability in the user namespace that governs its IPC
namespace.
.TP 
\fBEFAULT\fP
\fIcmd\fP 引数に \fBIPC_SET\fP か \fBIPC_STAT\fP が指定されたが \fIbuf\fP で指されているアドレスにアクセスできない。
.TP 
\fBEIDRM\fP
\fIshmid\fP が削除 (remove) された識別子 (identifier) を指している。
.TP 
\fBEINVAL\fP
\fIshmid\fP が有効な識別子でないか、 \fIcmd\fP が有効なコマンドでない。 もしくは、操作 \fBSHM_STAT\fP か
\fBSHM_STAT_ANY\fP の場合に、 \fIshmid\fP で指定されたインデックス値が現在未使用の配列のスロットを参照していた。
.TP 
\fBENOMEM\fP
(2.6.9 以降のカーネルにおいて)  \fBSHM_LOCK\fP が指定され、 ロックされる予定のセグメントのサイズ
(ロックされる共有メモリーセグメントの合計バイト数) が、 呼び出したプロセスの実ユーザー ID についての制限を超えた。 この制限は
\fBRLIMIT_MEMLOCK\fP ソフト資源制限で定義される (\fBsetrlimit\fP(2)  を参照)。
.TP 
\fBEOVERFLOW\fP
\fBIPC_STAT\fP が試みられ、GID や UID の値が \fIbuf\fP で指示される構造体に格納するには大き過ぎる。
.TP 
\fBEPERM\fP
\fBIPC_SET\fP か \fBIPC_RMID\fP が試みられ、 呼び出したプロセスの実効ユーザー ID が作成者 (\fIshm_perm.cuid\fP)
でも所有者 (\fIshm_perm.uid\fP)  でもなく、プロセスが特権を持たない (Linux では \fBCAP_SYS_ADMIN\fP
ケーパビリティを持たない)。
.IP
または (2.6.9 より前のカーネルで)  \fBSHM_LOCK\fP または \fBSHM_UNLOCK\fP が指定されているが、プロセスが特権を持たない
(Linux では \fBCAP_IPC_LOCK\fP ケーパビリティを持たない)。 (Linux 2.6.9 以降では、
\fBRLIMIT_MEMLOCK\fP が 0 で呼び出し元が特権を持たない場合にも、このエラーが起こる。)
.SH 準拠
.\" SVr4 documents additional error conditions EINVAL,
.\" ENOENT, ENOSPC, ENOMEM, EEXIST.  Neither SVr4 nor SVID documents
.\" an EIDRM error condition.
POSIX.1\-2001, POSIX.1\-2008, SVr4.
.SH 注意
.\" Like Linux, the FreeBSD man pages still document
.\" the inclusion of these header files.
Linux や POSIX の全てのバージョンでは、 \fI<sys/types.h>\fP と \fI<sys/ipc.h>\fP
のインクルードは必要ない。しかしながら、いくつかの古い実装ではこれらのヘッダーファイルのインクルードが必要であり、 SVID
でもこれらのインクルードをするように記載されている。このような古いシステムへの移植性を意図したアプリケーションではこれらのファイルをインクルードする必要があるかもしれない。
.PP
\fBIPC_INFO\fP, \fBSHM_STAT\fP, \fBSHM_INFO\fP 操作は、 \fBipcs\fP(1)
プログラムで割り当て済の資源に関する情報を提供するために 使用されている。将来、これらの操作は変更されたり、 \fI/proc\fP
ファイルシステムのインターフェースに移動されるかもしれない。
.PP
Linux では、 \fIshmctl(IPC_RMID)\fP を使ってすでに削除マークがつけられている共有メモリーセグメントを あるプロセスが付加
(attach)  (\fBshmat\fP(2))  することを許可している。 この機能は他の UNIX の実装では利用できない。
移植性を考慮したアプリケーションではこれに依存しないようにすべきである。
.PP
\fI構造体 shmid_ds\fP 内の多くのフィールドは、 Linux 2.2 では \fIshort\fP 型だったが、Linux 2.4 では
\fIlong\fP 型になった。 この利点を生かすには、glibc\-2.1.91 以降の環境下で 再コンパイルすれば十分である。
カーネルは新しい形式の呼び出しと古い形式の呼び出しを \fIcmd\fP 内の \fBIPC_64\fP フラグで区別する。
.SH 関連項目
\fBmlock\fP(2), \fBsetrlimit\fP(2), \fBshmget\fP(2), \fBshmop\fP(2), \fBcapabilities\fP(7),
\fBsysvipc\fP(7)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
