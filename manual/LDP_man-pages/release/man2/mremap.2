.\" Copyright (c) 1996 Tom Bjorkholm <tomb@mydata.se>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" 1996-04-11 Tom Bjorkholm <tomb@mydata.se>
.\"            First version written (1.3.86)
.\" 1996-04-12 Tom Bjorkholm <tomb@mydata.se>
.\"            Update for Linux 1.3.87 and later
.\" 2005-10-11 mtk: Added NOTES for MREMAP_FIXED; revised EINVAL text.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 1997 HANATAKA Shinya
.\"         all rights reserved.
.\" Translated 1997-02-23, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Updated 2002-11-26, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2005-10-09, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2006-04-16, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v2.28
.\" Updated 2012-05-01, Akihiro MOTOKI <amotoki@gmail.com>
.\" Updated 2013-03-26, Akihiro MOTOKI <amotoki@gmail.com>
.\" Updated 2013-07-22, Akihiro MOTOKI <amotoki@gmail.com>
.\"
.TH MREMAP 2 2010\-06\-10 Linux "Linux Programmer's Manual"
.SH 名前
mremap \- 仮想メモリーアドレスを再マッピングする
.SH 書式
.nf
\fB#define _GNU_SOURCE\fP         /* feature_test_macros(7) 参照 */
.br
\fB#include <sys/mman.h>\fP
.sp
\fBvoid *mremap(void *\fP\fIold_address\fP\fB, size_t \fP\fIold_size\fP\fB,\fP
\fB             size_t \fP\fInew_size\fP\fB, int \fP\fIflags\fP\fB, ... /* void *\fP\fInew_address\fP\fB */);\fP
.fi
.SH 説明
\fBmremap\fP()  は既存のメモリーマッピングの拡張 (または縮小) を行う。 同時に移動されることもある (\fIflags\fP
引き数と利用可能な仮想アドレス空間によって決まる)。

\fIold_address\fP は拡張 (または縮小) しようとする仮想メモリーブロック の元のアドレスである。\fIold_address\fP
はページ境界に合っていなければ ならない点に注意すること。\fIold_size\fP は元の仮想メモリーブロックの サイズである。 \fInew_size\fP
は要求する変更後の仮想メモリーブロックのサイズである。 5 番目の引き数として \fInew_address\fP を指定することができる。下記の
\fBMREMAP_FIXED\fP の説明を参照のこと。

Linux ではメモリーはページに分割される。ユーザープロセスは (一つまたは)  複数のリニアな仮想メモリーセグメントを持つ。
それぞれの仮想メモリーセグメントは一つ以上の実メモリーページ にマッピングされている (マッピング情報はページテーブルで管理される)。
仮想メモリーセグメントにはセグメント毎の保護 (アクセス権) が設定されており、 メモリーが不正にアクセスされた場合 (例えば読み込み専用のセグメントに
書き込んだ場合)、セグメンテーション侵害 (segmentation violation) を
引き起こす。また、セグメント外の仮想メモリーにアクセスした場合にも セグメンテーション侵害が発生する。

\fBmremap\fP()  は Linux のページテーブル方式を使用する。 \fBmremap\fP()
は仮想アドレスとメモリーページのマッピングを変更する。これは非常に効率的な \fBrealloc\fP(3)  を実装するのに使用されている。

\fIflags\fP ビットマスク引数は 0 または以下のフラグを含む:
.TP 
\fBMREMAP_MAYMOVE\fP
デフォルトでは、現在の位置にマッピングを拡張するための 十分な空きがなければ \fBmremap\fP()  は失敗する。
このフラグが指定されると、カーネルは必要があればマッピングを 新しい仮想アドレスに再配置することができる
マッピングが再配置されると、古いマッピング位置への絶対ポインターは 無効になる (マッピングの開始アドレスからの相対オフセットは有効のままである)。
.TP 
\fBMREMAP_FIXED\fP (Linux 2.3.31 以降)
このフラグは \fBmmap\fP(2)  の \fBMAP_FIXED\fP フラグと似たような目的で用いられる。 このフラグが指定されると、
\fBmremap\fP()  は 5 番目の引き数 \fIvoid\ *new_address\fP
を受け取り、この引数はマッピングが移動されるべきアドレスを指定する。 このアドレスはページ境界に合っていなければならない。 \fInew_address\fP
と \fInew_size\fP で指定されるアドレス範囲に過去のマッピングがあった場合、 そのマッピングはアンマップされる (unmapped)。
\fBMREMAP_FIXED\fP を指定した場合は、 \fBMREMAP_MAYMOVE\fP も指定しなければならない。
.PP
\fIold_address\fP と \fIold_size\fP で指定されるメモリーセグメントが (\fBmlock\fP(2)  や同様のもので)
ロックされている場合、セグメントのサイズが変わったり 再配置されたりした時にロックも維持される。
その結果、プロセスによってロックされるメモリーの量は変化する。
.SH 返り値
成功した場合は \fBmremap\fP()  は新しい仮想メモリー領域へのポインターを返す。 エラーの場合は \fBMAP_FAILED\fP (すなわち
\fI(void\ *)\ \-1\fP) が返され、 \fIerrno\fP が適切に設定される。
.SH エラー
.TP 
\fBEAGAIN\fP
呼び出し元がロックされているメモリーセグメントを拡張しようとしたが、 \fBRLIMIT_MEMLOCK\fP
リソース制限を越えずにこれを行うことができない。
.TP 
\fBEFAULT\fP
「セグメンテーション違反(segmentation fault)」 \fIold_address\fP から
\fIold_address\fP+\fIold_size\fP の 範囲のアドレスのどれかがこのプロセスにおいて不正な仮想メモリーアドレスである。
たとえ要求したアドレス空間全体を含むようなマッピングがあったとしても、 それらのマッピングが異なった型ならば \fBEFAULT\fP を受け取るだろう。
.TP 
\fBEINVAL\fP
不正な引き数が与えられた。 可能性のある原因は以下の通りである: たいていは \fIold_address\fP がページ境界に 合ってない;
\fIflags\fP に \fBMREMAP_MAYMOVE\fP または \fBMREMAP_FIXED\fP 以外の値が指定されている; \fInew_size\fP
がゼロ; \fInew_size\fP または \fInew_address\fP の値が不正; \fInew_address\fP と \fInew_size\fP
で指定される新しいアドレス範囲が \fIold_address\fP と \fIold_size\fP で指定される古いアドレス範囲と重なっている;
\fBMREMAP_FIXED\fP が指定されているが \fBMREMAP_MAYMOVE\fP が指定されていない。
.TP 
\fBENOMEM\fP
現在の仮想アドレスではメモリー領域が拡張できず、 \fBMREMAP_MAYMOVE\fP フラグが \fIflags\fP に設定されていない。 または十分な
(仮想) メモリーが存在しない。
.SH 準拠
.\" 4.2BSD had a (never actually implemented)
.\" .BR mremap (2)
.\" call with completely different semantics.
このコールは Linux 特有であり、移植を意図したプログラムで 使用すべきではない。
.SH 注意
バージョン 2.4 より前の glibc では、 \fBMREMAP_FIXED\fP の定義は公開されておらず、 \fBmremap\fP()  のプロトタイプは
\fInew_address\fP 引き数を取らなかった。
.SH 関連項目
\fBbrk\fP(2), \fBgetpagesize\fP(2), \fBgetrlimit\fP(2), \fBmlock\fP(2), \fBmmap\fP(2),
\fBsbrk\fP(2), \fBrealloc\fP(3), \fBmalloc\fP(3)

ページ分割されたメモリーについてもっと詳しく知りたいならば、あなたのお気に入りのオペレーティングシステムの教科書を参照してほしい (例えば、
\fIModern Operating Systems\fP by Andrew S. Tanenbaum, \fIInside Linux\fP by
Randolf Bentson, \fIThe Design of the UNIX Operating System\fP by Maurice
J. Bach.)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.79 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
