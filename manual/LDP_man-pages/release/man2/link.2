.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"             and Copyright (C) 1993 Michael Haardt, Ian Jackson.
.\" and Copyright (C) 2006, 2014 Michael Kerrisk
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified 1993-07-23 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1994-08-21 by Michael Haardt
.\" Modified 2004-06-23 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" Modified 2005-04-04, as per suggestion by Michael Hardt for rename.2
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 1997 HANATAKA Shinya
.\"         all rights reserved.
.\" Translated Thu Dec 11 23:47:55 JST 1997
.\"         by HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Updated & Modified Tue Feb  8 06:36:08 JST 2005
.\"         by Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated & Modified Fri Apr 22 02:05:00 JST 2005 by Yuichi SATO
.\" Updated 2008-09-07, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v3.08
.\" Updated 2013-05-06, Akihiro MOTOKI <amotoki@gmail.com>
.\"
.TH LINK 2 2020\-12\-21 Linux "Linux Programmer's Manual"
.SH 名前
link, linkat \- ファイルの新しい名前を作成する
.SH 書式
.nf
\fB#include <unistd.h>\fP
.PP
\fBint link(const char *\fP\fIoldpath\fP\fB, const char *\fP\fInewpath\fP\fB);\fP
.PP
\fB#include <fcntl.h>           \fP/* AT_* 定数の定義 */
\fB#include <unistd.h>\fP
.PP
\fBint linkat(int \fP\fIolddirfd\fP\fB, const char *\fP\fIoldpath\fP\fB,\fP
\fB           int \fP\fInewdirfd\fP\fB, const char *\fP\fInewpath\fP\fB, int \fP\fIflags\fP\fB);\fP
.fi
.PP
.RS -4
glibc 向けの機能検査マクロの要件 (\fBfeature_test_macros\fP(7)  参照):
.RE
.PP
\fBlinkat\fP():
.PD 0
.ad l
.RS 4
.TP  4
glibc 2.10 以降:
_POSIX_C_SOURCE\ >=\ 200809L
.TP 
glibc 2.10 より前:
_ATFILE_SOURCE
.RE
.ad
.PD
.SH 説明
\fBlink\fP()  は存在するファイルへの新しいリンク (link)  (ハードリンク (hard link) ともいう) を作成する。
.PP
\fInewpath\fP が存在する場合には、上書きは\fIされない\fP。
.PP
この新しい名前は全ての操作において古い名前と完全に同じように使用される; 両方の名前は同じファイルを参照しており (それで同じ許可
(permission) や所有者 (ownership) となるので)、 どちらの名前が本来のものであるか判別できない。
.SS linkat()
\fBlinkat\fP() システムコールは \fBlink\fP() と全く同様に動作するが、以下で説明する点が異なる。
.PP
\fIoldpath\fP で指定されたパス名が相対パスの場合、このパス名はファイルディスクリプター \fIolddirfd\fP
が参照するディレクトリに対する相対パスと解釈される (\fBlink\fP(2)
に相対パス名を渡した場合のように、呼び出したプロセスのカレントワーキングディレクトリに対する相対パスではない)。
.PP
\fIoldpath\fP で指定されたパス名が相対パスで、 \fIolddirfd\fP が特別な値 \fBAT_FDCWD\fP の場合、 (\fBlink\fP(2)
と同様に) \fIoldpath\fP は呼び出したプロセスのカレントワーキングディレクトリに対する相対パスと解釈される。
.PP
\fIoldpath\fP で指定されたパス名が絶対パスの場合、 \fIolddirfd\fP は無視される。
.PP
\fInewpath\fP の解釈は \fIoldpath\fP と同じである。 相対パスのパス名がファイルディスクリプター \fInewdirfd\fP
が参照するディレクトリと解釈される点だけが異なる。
.PP
以下の値のビット単位の論理和を \fIflags\fP に指定できる。
.TP 
\fBAT_EMPTY_PATH\fP (Linux 2.6.39 以降)
.\" commit 11a7b371b64ef39fc5fb1b6f2218eef7c4d035e3
.\" Before glibc 2.16, defining _ATFILE_SOURCE sufficed
\fIoldpath\fP が空文字列の場合、 \fIolddirfd\fP が参照するファイルへのリンクを作成する (\fIolddirfd\fP は
\fBopen\fP(2) の \fBO_PATH\fP フラグを使って取得する)。 この場合、 \fIolddirfd\fP
はディレクトリ以外の任意の型のファイルを参照することができる。 一般的には、 ファイルのリンクカウントが 0 の場合は、この操作は成功しない (ただし、
\fBO_TMPFILE\fP が指定され \fBO_EXCL\fP を指定せずに作成されたファイルは例外である)。 このフラグを使用するためには、 呼び出し元は
\fBCAP_DAC_READ_SEARCH\fP ケーパビリティを持っていなければならない。 このフラグは Linux 固有で、 この定義を得るには
\fB_GNU_SOURCE\fP を定義すること。
.TP 
\fBAT_SYMLINK_FOLLOW\fP (Linux 2.6.18 以降)
\fBlinkat\fP() は (\fBlink\fP() 同様) デフォルトでは \fIoldpath\fP がシンボリックリンクの場合リンクの展開を行わない。
フラグ \fBAT_SYMLINK_FOLLOW\fP を \fIflags\fP に指定することができ、指定した場合 \fIoldpath\fP
がシンボリックリンクの場合リンクの展開が行われる。 procfs がマウントされている場合、これは \fBAT_EMPTY_PATH\fP
の代替として以下のように使うことができる。
.IP
.in +4n
.EX
linkat(AT_FDCWD, "/proc/self/fd/<fd>", newdirfd,
       newname, AT_SYMLINK_FOLLOW);
.EE
.in
.PP
カーネル 2.6.18 より前では、 \fIflags\fP 引数は未使用で、 0 を指定しなければならなかった。
.PP
\fBlinkat\fP() の必要性についての説明については \fBopenat\fP(2) を参照。
.SH 返り値
成功した場合は 0 が返される。エラーの場合は \-1 が返され、 \fIerrno\fP が適切に設定される。
.SH エラー
.TP 
\fBEACCES\fP
\fInewpath\fP を含んでいるディレクトリへの書き込みが許されていないか、 \fIoldpath\fP または \fInewpath\fP
へのディレクトリのどれかに検索許可がない (\fBpath_resolution\fP(7)  を参照)。
.TP 
\fBEDQUOT\fP
ディスクブロックか inode がそのファイルシステムのユーザークォータに達していた。
.TP 
\fBEEXIST\fP
\fInewpath\fP が既に存在する。
.TP 
\fBEFAULT\fP
\fIoldpath\fP や \fInewpath\fP がアクセス可能なアドレス空間の外を指している。
.TP 
\fBEIO\fP
I/O エラーが発生した。
.TP 
\fBELOOP\fP
\fIoldpath\fP または \fInewpath\fP を解決する際に遭遇したシンボリックリンクが多過ぎる。
.TP 
\fBEMLINK\fP
The file referred to by \fIoldpath\fP already has the maximum number of links
to it.  For example, on an \fBext4\fP(5)  filesystem that does not employ the
\fIdir_index\fP feature, the limit on the number of hard links to a file is
65,000; on \fBbtrfs\fP(5), the limit is 65,535 links.
.TP 
\fBENAMETOOLONG\fP
\fIoldpath\fP または \fInewpath\fP が長過ぎる。
.TP 
\fBENOENT\fP
\fIoldpath\fP または \fInewpath\fP のディレクトリ部分が存在しないか、 壊れた(dangling)シンボリックリンクである。
.TP 
\fBENOMEM\fP
十分なカーネルメモリーがない。
.TP 
\fBENOSPC\fP
そのファイルを含んでいるデバイスに新しいディレクトリエントリーを 作成するための空きがない。
.TP 
\fBENOTDIR\fP
\fIoldpath\fP または \fInewpath\fP のディレクトリ部分が、実際には、ディレクトリでない。
.TP 
\fBEPERM\fP
\fIoldpath\fP がディレクトリである。
.TP 
\fBEPERM\fP
\fIoldpath\fP と \fInewpath\fP を含んでいるファイルシステムがハードリンクをサポートしていない。
.TP 
\fBEPERM\fP (Linux 3.6 以降)
呼び出し元にこのファイルへのハードリンクを作成する許可がなかった (\fBproc\fP(5) の
\fI/proc/sys/fs/protected_hardlinks\fP の説明を参照)。
.TP 
\fBEPERM\fP
\fIoldpath\fP is marked immutable or append\-only.  (See \fBioctl_iflags\fP(2).)
.TP 
\fBEROFS\fP
ファイルが読み込み専用のファイルシステムに存在する。
.TP 
\fBEXDEV\fP
\fIoldpath\fP と \fInewpath\fP が同じマウントされたファイルシステムに存在しない。 (Linux は 1
つのファイルシステムを複数のマウント位置に マウントすることを許可している。 しかし \fBlink\fP()  は、たとえ同じファイルシステムであっても、
別々のマウント位置を跨いでは動作しない。)
.PP
\fBlinkat\fP() では以下のエラーも発生する。
.TP 
\fBEBADF\fP
\fIolddirfd\fP か \fInewdirfd\fP が有効なファイルディスクリプターでない。
.TP 
\fBEINVAL\fP
無効なフラグ値が \fIflags\fP に指定された。
.TP 
\fBENOENT\fP
\fBAT_EMPTY_PATH\fP が \fIflags\fP に指定されたが、呼び出し元が \fBCAP_DAC_READ_SEARCH\fP
ケーパビリティを持っていなかった。
.TP 
\fBENOENT\fP
以下の呼び出しで作成されたファイルディスクリプターに対応する \fI/proc/self/fd/NN\fP ファイルに対してリンクを行おおうとした。
.IP
.in +4n
.EX
open(path, O_TMPFILE | O_EXCL, mode);
.EE
.in
.IP
\fBopen\fP(2) 参照。
.TP 
\fBENOENT\fP
削除済みのファイルに対応する \fI/proc/self/fd/NN\fP ファイルに対してリンクを行おおうとした。
.TP 
\fBENOENT\fP
\fIoldpath\fP が相対パス名で、 \fIolddirfd\fP が削除されたディレクトリを参照している。 または、 \fInewpath\fP
が相対パス名で、 \fInewdirfd\fP が削除されたディレクトリを参照している。
.TP 
\fBENOTDIR\fP
\fIoldpath\fP が相対パスで、 \fIolddirfd\fP がディレクトリ以外のファイルを参照している。または \fInewpath\fP と
\fInewdirfd\fP に関して同じ状況である。
.TP 
\fBEPERM\fP
\fIflags\fP に \fBAT_EMPTY_PATH\fP が指定され、 \fIoldpath\fP が空文字列で、 \fIolddirfd\fP
がディレクトリを参照している。
.SH バージョン
\fBlinkat\fP()  はカーネル 2.6.16 で Linux に追加された。 ライブラリによるサポートはバージョン 2.4 で glibc
に追加された。
.SH 準拠
.\" SVr4 documents additional ENOLINK and
.\" EMULTIHOP error conditions; POSIX.1 does not document ELOOP.
.\" X/OPEN does not document EFAULT, ENOMEM or EIO.
\fBlink\fP(): SVr4, 4.3BSD, POSIX.1\-2001 (但し「注意」を参照), POSIX.1\-2008.
.PP
\fBlinkat\fP(): POSIX.1\-2008.
.SH 注意
\fBlink\fP()  でファイルシステムを超えてハードリンクを作成することはできない。 このような場合は \fBsymlink\fP(2)  を使用すること。
.PP
.\" more precisely: since kernel 1.3.56
.\" For example, the default Solaris compilation environment
.\" behaves like Linux, and contributors to a March 2005
.\" thread in the Austin mailing list reported that some
.\" other (System V) implementations did/do the same -- MTK, Apr 05
POSIX.1\-2001 では、 \fIoldpath\fP がシンボリックリンクである場合、 \fBlink\fP()  は \fIoldpath\fP
の参照を解決すべきであると記述されている。 しかし、カーネル 2.0 以降の Linux ではそのようになっていない。 \fIoldpath\fP
がシンボリックリンクである場合、 \fInewpath\fP は同じシンボリックリンクファイルへの (ハード) リンクとして作成される (つまり
\fInewpath\fP は \fIoldpath\fP が参照していた同じファイルへのシンボリックリンクになる)。 他のいくつかの実装でも Linux
と同じように動作する。 POSIX.1\-2008 では \fBlink\fP()  の仕様が変更され、 \fIoldpath\fP
がシンボリックリンクの場合にシンボリックリンクの参照を 解決するかどうかは実装依存となった。
リンク作成時のシンボリックリンクの扱いについての詳細な制御を行う場合には \fBlinkat\fP() を使用すること。
.SS "glibc での注意"
\fBlinkat\fP() が利用できない古いカーネルでは、 \fBAT_SYMLINK_FOLLOW\fP が指定されていない場合、 glibc ラッパー関数は
\fBlink\fP() を使用するモードにフォールバックする。 \fIoldpath\fP と \fInewpath\fP が相対パスの場合、 glibc は
\fIolddirfd\fP と \fInewdirfd\fP 引数に対応する \fI/proc/self/fd\fP
のシンボリックリンクに基づいてそれぞれパス名を構成する。
.SH バグ
NFS ファイルシステムでは、NFS サーバーがリンクを作成した後に、 それを伝える前に死んだ場合には返り値が不正な場合がある。
リンクが作成できたかどうか見つけるためには \fBstat\fP(2)  を使用すること。
.SH 関連項目
\fBln\fP(1), \fBopen\fP(2), \fBrename\fP(2), \fBstat\fP(2), \fBsymlink\fP(2), \fBunlink\fP(2),
\fBpath_resolution\fP(7), \fBsymlink\fP(7)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
