.\" Copyright (c) 1992 Drew Eckhardt <drew@cs.colorado.edu>, March 28, 1992
.\" and Copyright (c) Michael Kerrisk, 2001, 2002, 2005, 2013
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" May be distributed under the GNU General Public License.
.\" %%%LICENSE_END
.\"
.\" Modified by Michael Haardt <michael@moria.de>
.\" Modified 24 Jul 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified 21 Aug 1994 by Michael Chastain <mec@shell.portal.com>:
.\"   New man page (copied from 'fork.2').
.\" Modified 10 June 1995 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 25 April 1998 by Xavier Leroy <Xavier.Leroy@inria.fr>
.\" Modified 26 Jun 2001 by Michael Kerrisk
.\"     Mostly upgraded to 2.4.x
.\"     Added prototype for sys_clone() plus description
.\"	Added CLONE_THREAD with a brief description of thread groups
.\"	Added CLONE_PARENT and revised entire page remove ambiguity
.\"		between "calling process" and "parent process"
.\"	Added CLONE_PTRACE and CLONE_VFORK
.\"	Added EPERM and EINVAL error codes
.\"	Renamed "__clone" to "clone" (which is the prototype in <sched.h>)
.\"	various other minor tidy ups and clarifications.
.\" Modified 26 Jun 2001 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Updated notes for 2.4.7+ behavior of CLONE_THREAD
.\" Modified 15 Oct 2002 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Added description for CLONE_NEWNS, which was added in 2.4.19
.\" Slightly rephrased, aeb.
.\" Modified 1 Feb 2003 - added CLONE_SIGHAND restriction, aeb.
.\" Modified 1 Jan 2004 - various updates, aeb
.\" Modified 2004-09-10 - added CLONE_PARENT_SETTID etc. - aeb.
.\" 2005-04-12, mtk, noted the PID caching behavior of NPTL's getpid()
.\"	wrapper under BUGS.
.\" 2005-05-10, mtk, added CLONE_SYSVSEM, CLONE_UNTRACED, CLONE_STOPPED.
.\" 2005-05-17, mtk, Substantially enhanced discussion of CLONE_THREAD.
.\" 2008-11-18, mtk, order CLONE_* flags alphabetically
.\" 2008-11-18, mtk, document CLONE_NEWPID
.\" 2008-11-19, mtk, document CLONE_NEWUTS
.\" 2008-11-19, mtk, document CLONE_NEWIPC
.\" 2008-11-19, Jens Axboe, mtk, document CLONE_IO
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 2001 HANATAKA Shinya
.\"     and Copyright(c) 2002, 2005-2008 Akihiro MOTOKI
.\" Translated 2001-08-17, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Modified 2002-09-24, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Modified 2005-02-02, Akihiro MOTOKI
.\" Updated 2005-04-17, Akihiro MOTOKI
.\" Updated 2005-09-10, Akihiro MOTOKI
.\" Updated 2006-03-05, Akihiro MOTOKI, LDP v2.25
.\" Updated 2007-01-05, Akihiro MOTOKI, LDP v2.43
.\" Updated 2007-05-01, Akihiro MOTOKI, LDP v2.46
.\" Updated 2007-06-13, Akihiro MOTOKI, LDP v2.55
.\" Updated 2008-08-04, Akihiro MOTOKI, LDP v3.05
.\" Updated 2008-11-09, Akihiro MOTOKI, LDP v3.10
.\" Updated 2009-03-02, Akihiro MOTOKI, LDP v3.19
.\" Updated 2010-04-11, Akihiro MOTOKI, LDP v3.24
.\" Updated 2012-05-08, Akihiro MOTOKI <amotoki@gmail.com>
.\" Updated 2013-05-06, Akihiro MOTOKI <amotoki@gmail.com>
.\"
.TH CLONE 2 2014\-09\-21 Linux "Linux Programmer's Manual"
.SH 名前
clone, __clone2 \- 子プロセスを作成する
.SH 書式
.nf
/* glibc ラッパー関数のプロトタイプ */

\fB#include <sched.h>\fP

\fBint clone(int (*\fP\fIfn\fP\fB)(void *), void *\fP\fIchild_stack\fP\fB,\fP
\fB          int \fP\fIflags\fP\fB, void *\fP\fIarg\fP\fB, ... \fP
\fB          /* pid_t *\fP\fIptid\fP\fB, struct user_desc *\fP\fItls\fP\fB, pid_t *\fP\fIctid\fP\fB */ );\fP

/* 素のシステムコールのプロトタイプ */

\fBlong clone(unsigned long \fP\fIflags\fP\fB, void *\fP\fIchild_stack\fP\fB,\fP
\fB          void *\fP\fIptid\fP\fB, void *\fP\fIctid\fP\fB,\fP
\fB          struct pt_regs *\fP\fIregs\fP\fB);\fP
.fi
.sp
.in -4n
glibc ラッパー関数の機能検査マクロの要件 (\fBfeature_test_macros\fP(7) 参照):
.in
.sp
\fBclone\fP():
.ad l
.RS 4
.PD 0
.TP  4
glibc 2.14 以降:
_GNU_SOURCE
.TP  4
.\" See http://sources.redhat.com/bugzilla/show_bug.cgi?id=4749
glibc 2.14 より前:
_BSD_SOURCE || _SVID_SOURCE
    /* _GNU_SOURCE も定義される */
.PD
.RE
.ad b
.SH 説明
\fBclone\fP() は、 \fBfork\fP(2) と似た方法で新しいプロセスを作成する。

このページでは、 glibc の \fBclone\fP() ラッパー関数とその裏で呼ばれるシステムコールの両方について説明している。
メインの説明はラッパー関数に関するものである。 素のシステムコールにおける差分はこのページの最後の方で説明する。

\fBfork\fP(2) とは異なり、\fBclone\fP() では、子プロセス (child process)
と呼び出し元のプロセスとが、メモリー空間、ファイルディスクリプターのテーブル、シグナルハンドラーのテーブルなどの 実行コンテキストの一部を共有できる。
(このマニュアルにおける「呼び出し元のプロセス」は、通常は 「親プロセス」と一致する。但し、後述の \fBCLONE_PARENT\fP の項も参照のこと)

\fBclone\fP()  の主要な使用法はスレッド (threads) を実装することである:
一つのプログラムの中の複数のスレッドは共有されたメモリー空間で 同時に実行される。

\fBclone\fP()  で子プロセスが作成された時に、作成された子プロセスは関数 \fIfn\fP(\fIarg\fP)  を実行する。 (この点が
\fBfork\fP(2)  とは異なる。 \fBfork\fP(2)  の場合、子プロセスは \fBfork\fP(2)  が呼び出された場所から実行を続ける。)
\fIfn\fP 引き数は、子プロセスが実行を始める時に子プロセスが呼び出す 関数へのポインターである。 \fIarg\fP 引き数はそのまま \fIfn\fP
関数へと渡される。

\fIfn\fP(\fIarg\fP)  関数が終了すると、子プロセスは終了する。 \fIfn\fP によって返された整数が子プロセスの終了コードとなる。 子プロセスは、
\fBexit\fP(2)  を呼んで明示的に終了することもあるし、致命的なシグナルを受信した 場合に終了することもある。

\fIchild_stack\fP 引き数は、子プロセスによって使用されるスタックの位置を指定する。
子プロセスと呼び出し元のプロセスはメモリーを共有することがあるため、 子プロセスは呼び出し元のプロセスと同じスタックで実行することができない。
このため、呼び出し元のプロセスは子プロセスのスタックのためのメモリー空間を 用意して、この空間へのポインターを \fBclone\fP()
へ渡さなければならない。 (HP PA プロセッサ以外の) Linux が動作する全てのプロセッサでは、 スタックは下方 (アドレスが小さい方向)
へと伸びる。このため、普通は \fIchild_stack\fP は子プロセスのスタックのために用意したメモリー空間の一番大きい アドレスを指すようにする。

\fIflags\fP の下位 1 バイトは子プロセスが死んだ場合に親プロセスへと送られる \fI終了シグナル (termination signal)\fP
の番号を指定する。このシグナルとして \fBSIGCHLD\fP 以外が指定された場合、親プロセスは、 \fBwait\fP(2)
で子プロセスを待つ際に、オプションとして \fB__WALL\fP または \fB__WCLONE\fP を指定しなければならない。
どのシグナルも指定されなかった場合、子プロセスが終了した時に親プロセス にシグナルは送られない。

\fIflags\fP には、以下の定数のうち 0個以上をビット毎の論理和 (bitwise\-or)
をとったものを指定できる。これらの定数は呼び出し元のプロセスと 子プロセスの間で何を共有するかを指定する:
.TP 
\fBCLONE_CHILD_CLEARTID\fP (Linux 2.5.49 以降)
子プロセスが終了したときに子プロセスのメモリー内の \fIctid\fP が指す場所にある子プロセスのスレッド ID を消去し、 そのアドレスで futex
を wake (起床) させる。 このアドレスは \fBset_tid_address\fP(2)  システムコールで変更することができる。
この機能はスレッドライブラリで使用される。
.TP 
\fBCLONE_CHILD_SETTID\fP (Linux 2.5.49 以降)
子プロセスのメモリー内の \fIctid\fP が指す場所に子プロセスのスレッド ID を格納する。
.TP 
\fBCLONE_FILES\fP (Linux 2.0 以降)
\fBCLONE_FILES\fP が設定された場合、呼び出し元のプロセスと子プロセスはファイルディスクリプターの テーブルを共有する。
呼び出し元プロセスとその子プロセスの一方が作成した ファイルディスクリプターは、もう一方においても有効である。
同じように、一方のプロセスがファイルディスクリプターを閉じたり、 (\fBfcntl\fP(2)  \fBF_SETFD\fP 操作を使って)
ディスクリプターに関連するフラグを変更したりすると、 もう一方のプロセスにも影響する。

\fBCLONE_FILES\fP が設定されていない場合、子プロセスは、 \fBclone\fP()
が実行された時点で、呼び出し元のプロセスがオープンしている全ての ファイルディスクリプターのコピーを継承する
(子プロセスの複製されたファイルディスクリプターは、 対応する呼び出し元のプロセスのファイルディスクリプターと 同じファイル記述 (\fBopen\fP(2)
参照) を参照する)。 これ以降に、呼び出し元のプロセスと子プロセスの一方が ファイルディスクリプターの操作 (ファイルディスクリプターの
オープン・クローズや、ファイルディスクリプターフラグの変更)  を行っても、もう一方のプロセスには影響を与えない。
.TP 
\fBCLONE_FS\fP (Linux 2.0 以降)
\fBCLONE_FS\fP が設定された場合、呼び出し元のプロセスと子プロセスが同じファイルシステム
情報を共有する。ファイルシステム情報は、ファイルシステムのルート (root)、 カレントワーキングディレクトリ (current working
directory)  や umask などである。 呼び出し元のプロセスや子プロセスのどちらか一方によって \fBchroot\fP(2),
\fBchdir\fP(2), \fBumask\fP(2)  が呼び出されると、もう一方のプロセスにも影響が及ぶ。

\fBCLONE_FS\fP が設定されていない場合、子プロセスは、 \fBclone\fP()
が実行された時点での、呼び出し元のプロセスのファイルシステム情報のコピーを 使用する。 これ以降は、呼び出し元のプロセスと子プロセスの一方が
\fBchroot\fP(2), \fBchdir\fP(2), \fBumask\fP(2)  を呼び出しても、もう一方のプロセスには影響を与えない。
.TP 
\fBCLONE_IO\fP (Linux 2.6.25 以降)
\fBCLONE_IO\fP が設定された場合、新しいプロセスは呼び出し元のプロセスと I/O コンテキストを共有する。
このフラグが設定されていない場合には、 (\fBfork\fP(2)  の場合と同様) 新しいプロセスは自分専用の I/O コンテキストを持つ。

.\" The following based on text from Jens Axboe
.\" the anticipatory and CFQ scheduler
.\" with CFQ and AS.
I/O コンテキストは、ディスクスケジュールの I/O スコープである (言い換えると、I/O コンテキストは I/O スケジューラがプロセス I/O
の スケジューリングをモデル化するのに使用される)。 複数のプロセスが同じ I/O コンテキストを共有する場合、 これらのプロセスは I/O
スケジューラからは一つとして扱われる。 結果として、これらのプロセスはディスクアクセスの時間を共有するようになる。 いくつかの I/O
スケジューラでは、 二つのプロセスが I/O コンテキストを共有している場合、 これらのプロセスはディスクアクセスを交互に行うことができる。
同じプロセスの複数のスレッドが I/O を実行している場合 (例えば \fBaio_read\fP(3))、 \fBCLONE_IO\fP を利用することで I/O
性能を良くすることができる。

カーネルの設定が \fBCONFIG_BLOCK\fP オプション付きでない場合、 このフラグは何の意味も持たない。
.TP 
\fBCLONE_NEWIPC\fP (Linux 2.6.19 以降)
\fBCLONE_NEWIPC\fP が設定された場合、新しい IPC 名前空間 (namespace) でプロセスを作成する。
このフラグが設定されていない場合、 (\fBfork\fP(2)  の場合と同様) 呼び出し元のプロセスと同じ IPC 名前空間でプロセスが 作成される。
このフラグは、コンテナの実装での使用を意図して用意されたものである。

.\" commit 7eafd7c74c3f2e67c27621b987b28397110d643f
.\" https://lwn.net/Articles/312232/
IPC 名前空間は、独立の System\ V IPC オブジェクト空間 (\fBsvipc\fP(7) 参照) を提供する 。 (Linux 2.6.30
以降では) 独立した POSIX メッセージキュー空間 (\fBmq_overview\fP(7) 参照) も提供される。 これらの IPC
機構に共通の特徴として、 IPC オブジェクトはファイルシステムのパス名とは違った仕組みで識別されるという点がある。

ある IPC 名前空間に作成されたオブジェクトは、 その名前空間のメンバーである他のすべてのプロセスからも見えるが、 違う IPC
名前空間のプロセスからは見えない。

IPC 名前空間が破棄される時 (すなわち、その名前空間のメンバーの最後のプロセスが終了する時)、 その名前空間の全ての IPC
オブジェクトは自動的に破棄される。

特権プロセス (\fBCAP_SYS_ADMIN\fP) だけが \fBCLONE_NEWIPC\fP を使用できる。 このフラグは
\fBCLONE_SYSVSEM\fP と組み合わせて指定することはできない。

IPC 名前空間の詳細は \fBnamespaces\fP(7) を参照。
.TP 
\fBCLONE_NEWNET\fP (Linux 2.6.24 以降)
(このフラグの実装は、Linux 2.6.29 あたりまでには完成した。)

\fBCLONE_NEWNET\fP が設定された場合、新しいネットワーク名前空間 (network namaspace)  でプロセスを作成する。
このフラグが設定されていない場合、 (\fBfork\fP(2)  の場合と同様) 呼び出し元のプロセスと同じネットワーク名前空間でプロセスが 作成される。
このフラグは、コンテナの実装での使用を意図して用意されたものである。

.\" FIXME . Add pointer to veth(4) page when it is eventually completed
ネットワーク名前空間は、分離されたネットワークスタックを提供するものである (ネットワークスタックとは、 ネットワークデバイスインターフェース、IPv4
や IPv6 プロトコルスタック、 \fI/proc/net\fP、 \fI/sys/class/net\fP ディレクトリツリー、ソケットなどである)。
物理ネットワークデバイスが所属できるネットワーク名前空間は一つだけである。 仮想ネットワークデバイス ("veth") のペアにより パイプ風の抽象化
(abstraction) が実現されており、 これを使うことで、ネットワーク名前空間間のトンネルを作成したり、
別の名前空間の物理ネットワークデバイスへのブリッジを作成したり することができる。

ネットワーク名前空間が解放される時 (すなわち、その名前空間の最後のプロセスが終了する時)、 物理ネットワークデバイスは初期ネットワーク名前空間
(initial network namespace) に戻される (親プロセスのネットワーク名前空間に戻される訳ではない)。
ネットワーク名前空間のさらなる情報は \fBnamespaces\fP(7) を参照。

特権プロセス (\fBCAP_SYS_ADMIN\fP) だけが \fBCLONE_NEWNET\fP を使用できる。
.TP 
\fBCLONE_NEWNS\fP (Linux 2.4.19 以降)
\fBCLONE_NEWNS\fP がセットされている場合、 clone で作成された子プロセスは新しいマウント名前空間で開始され、
新しい名前空間は親プロセスの名前空間のコピーで初期化される。 \fBCLONE_NEWNS\fP がセットされていない場合、
子プロセスは親プロセスと同じマウント名前空間となる。

マウント名前空間の詳細は \fBnamespaces\fP(7) を参照。

.\" See https://lwn.net/Articles/543273/
特権プロセス (\fBCAP_SYS_ADMIN\fP) のみが \fBCLONE_NEWNS\fP を指定することができる。 一つの \fBclone\fP()
呼び出しで、 \fBCLONE_NEWNS\fP と \fBCLONE_FS\fP の両方を指定することはできない。
.TP 
\fBCLONE_NEWPID\fP (Linux 2.6.24 以降)
.\" This explanation draws a lot of details from
.\" http://lwn.net/Articles/259217/
.\" Authors: Pavel Emelyanov <xemul@openvz.org>
.\" and Kir Kolyshkin <kir@openvz.org>
.\"
.\" The primary kernel commit is 30e49c263e36341b60b735cbef5ca37912549264
.\" Author: Pavel Emelyanov <xemul@openvz.org>
\fBCLONE_NEWPID\fP が設定された場合、新しい PID 名前空間でプロセスを作成する。 このフラグが設定されていない場合、
(\fBfork\fP(2)  の場合と同様) 呼び出し元のプロセスと同じ PID 名前空間で プロセスが作成される。
このフラグは、コンテナの実装での使用を意図して用意されたものである。

PID 名前空間の詳細は \fBnamespaces\fP(7) と \fBpid_namespaces\fP(7) を参照。

特権プロセス (\fBCAP_SYS_ADMIN\fP) だけが \fBCLONE_NEWPID\fP を使用できる。 このフラグは \fBCLONE_THREAD\fP
や \fBCLONE_PARENT\fP と組み合わせて指定することはできない。
.TP 
\fBCLONE_NEWUSER\fP
(このフラグが \fBclone\fP() で意味を持つようになったのは Linux 2.6.23 である。 現在の \fBclone\fP()
の動作が取り込まれたのは Linux 3.5 であり、 ユーザー名前空間が完全に機能するようにする最後の機能が取り込まれたのは Linux 3.8
である。)

\fBCLONE_NEWUSER\fP がセットされている場合、新しいユーザー名前空間でプロセスを作成する。 このフラグがセットされていない場合、
(\fBfork\fP(2)  の場合と同様に) 呼び出し元のプロセスと同じユーザー名前空間でプロセスが作成される。

ユーザー名前空間の詳細は \fBnamespaces\fP(7) と \fBuser_namespaces\fP(7) を参照。

.\" Before Linux 2.6.29, it appears that only CAP_SYS_ADMIN was needed
Linux 3.8 より前では、 \fBCLONE_NEWUSER\fP を使用するには、 呼び出し元は \fBCAP_SYS_ADMIN\fP,
\fBCAP_SETUID\fP, \fBCAP_SETGID\fP の 3 つのケーパリビティを持っている必要があった。 Linux 3.8 以降では、
ユーザー名前空間を作成するのに特権は必要なくなった。

.\" commit e66eded8309ebf679d3d3c1f5820d1f2ca332c71
.\" https://lwn.net/Articles/543273/
.\" The fix actually went into 3.9 and into 3.8.3. However, user namespaces
.\" were, for practical purposes, unusable in earlier 3.8.x because of the
.\" various filesystems that didn't support userns.
このフラグは \fBCLONE_THREAD\fP や \fBCLONE_PARENT\fP と組み合わせて指定することはできない。 セキュリティ上の理由から、
\fBCLONE_NEWUSER\fP は \fBCLONE_FS\fP と組み合わせて指定することはできない。

ユーザー名前空間の詳細は \fBuser_namespaces\fP(7) を参照。
.TP 
\fBCLONE_NEWUTS\fP (Linux 2.6.19 以降)
\fBCLONE_NEWUTS\fP が設定された場合、新しい UTS 名前空間でプロセスを作成する。 新しい UTS
名前空間の識別子の初期値は、呼び出し元のプロセスの UTS 名前空間の識別子を複製したものとなる。 このフラグが設定されていない場合、
(\fBfork\fP(2)  の場合と同様) 呼び出し元のプロセスと同じ UTS 名前空間で プロセスが作成される。
このフラグは、コンテナの実装での使用を意図して用意されたものである。

UTS 名前空間は、 \fBuname\fP(2)  が返す識別子の集合である。 識別子としてはドメイン名とホスト名があり、 それぞれ
\fBsetdomainname\fP(2), \fBsethostname\fP(2)  で修正することができる。 ある UTS
名前空間における識別子の変更は同じ名前空間の他のすべての プロセスに見えるが、別の UTS 名前空間のプロセスには見えない。

特権プロセス (\fBCAP_SYS_ADMIN\fP) だけが \fBCLONE_NEWUTS\fP を使用できる。

UTS 名前空間の詳細は \fBnamespaces\fP(7) を参照。
.TP 
\fBCLONE_PARENT\fP (Linux 2.3.12 以降)
\fBCLONE_PARENT\fP が設定された場合、新しい子供の (\fBgetppid\fP(2)  で返される)
親プロセスは呼び出し元のプロセスの親プロセスと同じになる。

\fBCLONE_PARENT\fP が設定されていない場合、 (\fBfork\fP(2)  と同様に) 呼び出し元のプロセスがその子供の親になる。

子供が終了した時にシグナルが送られるのは \fBgetppid\fP(2)  が返す親プロセスである点に注意すること。このため \fBCLONE_PARENT\fP
が設定された場合、呼び出し元のプロセスではなく呼び出し元のプロセスの 親プロセスにシグナルが送られる。
.TP 
\fBCLONE_PARENT_SETTID\fP (Linux 2.5.49 以降)
親プロセスと子プロセスのメモリー内の \fIptid\fP が指す領域に子プロセスのスレッド ID を格納する。 (Linux 2.5.32\-2.5.48
では、 同じことをする \fBCLONE_SETTID\fP というフラグが存在した。)
.TP 
\fBCLONE_PID\fP (廃止予定)
\fBCLONE_PID\fP が設定された場合、子プロセスは呼び出し元のプロセスと同じプロセス ID
で作成される。これはシステムをハッキングするのには便利だが、 それ以外にはあまり使われない。 Linux 2.3.21 以降では、
システムのブートプロセス (PID 0) だけがこのフラグを指定できる。 Linux 2.5.16 で削除された。
.TP 
\fBCLONE_PTRACE\fP (Linux 2.2 以降)
\fBCLONE_PTRACE\fP が指定され、かつ呼び出し元のプロセスが追跡 (trace) されていた場合、子プロセスも 同様に追跡される。
(\fBptrace\fP(2)  を参照のこと)
.TP 
\fBCLONE_SETTLS\fP (Linux 2.5.32 以降)
\fInewtls\fP 引き数は、新しい TLS (Thread Local Storage) ディスクリプターである。
(\fBset_thread_area\fP(2)  を参照のこと)
.TP 
\fBCLONE_SIGHAND\fP (Linux 2.0 以降)
\fBCLONE_SIGHAND\fP が設定された場合、呼び出し元のプロセスと子プロセスは同じシグナルハン
ドラのテーブルを共有する。呼び出し元のプロセスまたは子プロセスのどちらかが \fBsigaction\fP(2)
を呼び出してシグナルに対応する動作を変更した場合、 もう一方のプロセスのシグナル動作も変更される。 但し、呼び出し元のプロセスと子プロセスは、
プロセス毎に、シグナルマスク (signal mask) と処理待ちシグナルの集合 を持っている。このため、あるプロセスは、
\fBsigprocmask\fP(2)  を使用して、もう一方のプロセスに影響を与えずに シグナルを禁止 (block) したり許可 (unblock)
したりできる。

\fBCLONE_SIGHAND\fP が設定されていない場合、子プロセスは \fBclone\fP()
が実行された時点での、呼び出し元のプロセスのシグナルハンドラーの コピーを継承する。これ以降は、一方のプロセスが \fBsigaction\fP(2)
を呼び出しても、もう一方のプロセスには影響を与えない。

Linux 2.6.0\-test6 以降では、 \fBCLONE_SIGHAND\fP を指定する場合、 \fBCLONE_VM\fP も \fIflags\fP
に含めなければならない。
.TP 
\fBCLONE_STOPPED\fP (Linux 2.6.0\-test2 以降)
\fBCLONE_STOPPED\fP が設定されると、子プロセスは最初 (\fBSIGSTOP\fP シグナルを送られたかのように) 停止した状態となる。
子プロセスを再開させるには \fBSIGCONT\fP シグナルを送信しなければならない。

.\" glibc 2.8 removed this defn from bits/sched.h
このフラグは Linux 2.6.25 以降では\fI非推奨\fPであり、
Linux 2.6.38 で完全に\fI削除\fPされた。
.TP 
\fBCLONE_SYSVSEM\fP (Linux 2.5.10 以降)
\fBCLONE_SYSVSEM\fP がセットされると、子プロセスと呼び出し元プロセスは一つの System\ V セマフォの調整値 (\fIsemadj\fP)
(\fBsemop\fP(2)  参照) を共有する。 この場合、共有されたリストはこのリストを共有する全プロセスの \fIsemadj\fP 値を積算し、
セマフォ調整はこのリストを共有している最後のプロセスが終了した際 (または \fBunshare\fP(2) を使ってリストの共有が中止された際)
に実行される。 このフラグがセットされていなければ、 子プロセスは独自のセマフォ \fIsemadj\fP リストを持つ (リストの初期値は空である)。
.TP 
\fBCLONE_THREAD\fP (Linux 2.4.0\-test8以降)
\fBCLONE_THREAD\fP が設定された場合、子プロセスは呼び出し元のプロセスと同じスレッドグループに 置かれる。 \fBCLONE_THREAD\fP
についての以降の議論を読みやすくするため、 「スレッド」という用語はスレッドグループの中のプロセスを 参照するのに使うこととする。

スレッドグループは、 スレッド集合で一つの PID を共有するという POSIX スレッドの概念をサポートするために Linux 2.4
に加えられた機能であった。 内部的には、この共有 PID はいわゆるそのスレッドグループの スレッドグループ識別子 (TGID) である。 Linux
2.4 以降では、 \fBgetpid\fP(2)  の呼び出しではそのプロセスのスレッドグループ ID を返す。

あるグループに属するスレッドは (システム全体で) 一意なスレッド ID (TID)  で区別できる。新しいスレッドの TID は \fBclone\fP()
の呼び出し元へ関数の結果として返され、 スレッドは自分自身の TID を \fBgettid\fP(2)  で取得できる。

\fBCLONE_THREAD\fP を指定せずに \fBclone\fP()  の呼び出しが行われると、 生成されたスレッドはそのスレッドの TID と同じ値の
TGID を持つ 新しいスレッドグループに置かれる。このスレッドは 新しいスレッドグループの「リーダー」である。

\fBCLONE_THREAD\fP を指定して作成された新しいスレッドは、 (\fBCLONE_PARENT\fP の場合と同様に)  \fBclone\fP()
を呼び出し元と同じ親プロセスを持つ。 そのため、 \fBgetppid\fP(2)  を呼ぶと、一つのスレッドグループに属すスレッドは全て同じ値を返す。
\fBCLONE_THREAD\fP で作られたスレッドが終了した際に、 そのスレッドを \fBclone\fP()  を使って生成したスレッドには
\fBSIGCHLD\fP (もしくは他の終了シグナル) は送信されない。 また、 \fBwait\fP(2)
を使って終了したスレッドの状態を取得することもできない (そのようなスレッドは \fIdetached\fP (分離された) といわれる)。

スレッドグループに属す全てのスレッドが終了した後、 そのスレッドグループの親プロセスに \fBSIGCHLD\fP (もしくは他の終了シグナル) が送られる。

スレッドグループに属すいずれかのスレッドが \fBexecve\fP(2)  を実行すると、スレッドグループリーダー以外の全てのスレッドは
終了され、新しいプロセスがそのスレッドグループリーダーの下で 実行される。

スレッドグループに属すスレッドの一つが \fBfork\fP(2)  を使って子プロセスを作成した場合、 スレッドグループのどのスレッドであっても その子供を
\fBwait\fP(2)  できる。

Linux 2.5.35 以降では、 \fBCLONE_THREAD\fP を指定する場合、 \fIflags\fP に \fBCLONE_SIGHAND\fP
も含まれていなければならない (Linux 2.6.0\-test6 以降では、 \fBCLONE_SIGHAND\fP を指定する場合 \fBCLONE_VM\fP
も指定する必要がある点に注意すること)。

\fBkill\fP(2)  を使ってスレッドグループ全体 (つまり TGID) にシグナルを送ることもできれば、 \fBtgkill\fP(2)
を使って特定のスレッド (つまり TID) にシグナルを送ることもできる。

シグナルの配送と処理はプロセス全体に影響する: ハンドラーを設定していないシグナルがあるスレッドに配送されると、
そのシグナルはスレッドグループの全メンバーに影響を及ぼす (終了したり、停止したり、動作を継続したり、無視されたりする)。

各々のスレッドは独自のシグナルマスクを持っており、 \fBsigprocmask\fP(2)  で設定できる。 だが、処理待ちのシグナルには、
\fBkill\fP(2)  で送信されるプロセス全体に対するもの (つまり、スレッドグループの どのメンバーにも配送できるもの) と、
\fBtgkill\fP(2)  で送信される個々のスレッドに対するものがありえる。 \fBsigpending\fP(2)
を呼び出すと、プロセス全体に対する処理待ちシグナルと呼び出し元の スレッドに対する処理待ちシグナルを結合したシグナル集合が返される。

\fBkill\fP(2)  を使ってスレッドグループにシグナルが送られた場合で、 そのスレッドグループがそのシグナルに対するシグナルハンドラーが
登録されていたときには、シグナルハンドラーはスレッドグループの メンバーのうち、ただ一つのスレッドでだけ起動される。ハンドラーが
起動されるスレッドは、そのシグナルを禁止 (block) していない メンバーの中から一つだけが勝手に (arbitrarily) 選ばれる。
スレッドグループに属す複数のスレッドが \fBsigwaitinfo\fP(2)  を使って同じシグナルを待っている場合、
これらのスレッドの中から一つをカーネルが勝手に選択し、 そのスレッドが \fBkill (2)\fP を使って送信されたシグナルを受信する。
.TP 
\fBCLONE_UNTRACED\fP (Linux 2.5.46 以降)
\fBCLONE_UNTRACED\fP が指定されると、 trace を行っているプロセスは この子プロセスに \fBCLONE_PTRACE\fP
を適用することができない。
.TP 
\fBCLONE_VFORK\fP (Linux 2.2 以降)
\fBCLONE_VFORK\fP が設定された場合、 (\fBvfork\fP(2)  と同様に) 子プロセスが \fBexecve\fP(2)  または
\fB_exit\fP(2)  によって仮想メモリーを解放するまで、呼び出し元のプロセスの実行は停止される。

\fBCLONE_VFORK\fP が設定されていない場合、 \fBclone\fP()  呼び出し後は、呼び出し元のプロセスと子プロセスの
両方がスケジュール対象となり、アプリケーションはこれらのプロセスの 実行順序に依存しないようにすべきである。
.TP 
\fBCLONE_VM\fP (Linux 2.0 以降)
\fBCLONE_VM\fP が設定された場合、呼び出し元のプロセスと子プロセスは同じメモリー空間で
実行される。特に、呼び出し元のプロセスや子プロセスの一方がメモリーに 書き込んだ内容はもう一方のプロセスからも見ることができる。さらに、
子プロセスや呼び出し元のプロセスの一方が \fBmmap\fP(2)  や \fBmunmap\fP(2)  を使ってメモリーをマップしたりアンマップした場合、
もう一方のプロセスにも影響が及ぶ。

\fBCLONE_VM\fP が設定されていない場合、子プロセスは \fBclone\fP()  が実行された時点での、親プロセスのメモリー空間をコピーした
別のメモリー空間で実行される。 一方のプロセスが行ったメモリーへの書き込みや ファイルのマップ/アンマップは、 \fBfork\fP(2)
の場合と同様、もう一方のプロセスには影響しない。
.SS "C ライブラリとカーネル ABI の違い"
素の \fBclone\fP システムコールは、より \fBfork\fP(2) に近いかたちになっており、
子プロセスの実行が呼び出しが行われた場所から続けられる。 そのため、 \fBclone\fP() ラッパー関数の引き数 \fIfn\fP と \fIarg\fP
は省略される。 また、 引き数の順序も違っている。 x86 と他の多くのアーキテクチャーにおける、 素のシステムコールのインターフェースは、
おおまかには次のようになっている。
.in +4
.nf

\fBlong clone(unsigned long \fP\fIflags\fP\fB, void *\fP\fIchild_stack\fP\fB,\fP
\fB           void *\fP\fIptid\fP\fB, void *\fP\fIctid\fP\fB,\fP
\fB           struct pt_regs *\fP\fIregs\fP\fB);\fP

.fi
.in
生のシステムコールのもう一つの違いは、 \fIchild_stack\fP 引き数がゼロでも良いことである。この場合には、どちらかのプロセスが
スタックを変更した時に、書き込み時コピー (copy\-on\-write) 方式により
子プロセスがスタックページの独立したコピーを得られることが保証される。 この場合、正常に動作させるためには、 \fBCLONE_VM\fP
オプションを指定してはならない。

いくつかのアーキテクチャーでは、システムコールの引き数の順序は上記とは異なっている。 microblaze, ARM, ARM 64, PA\-RISC,
arc, Power PC, xtensa, MIPS アーキテクチャーでは、 4 番目と 5 番目の引き数の順番が逆である。 cris と s390
アーキテクチャーでは、最初と 2 番目の引き数の順番が逆である。
.SS "blackfin, m68k, sparc"
blackfin, m68k, sparc では引き数渡しの規約が上記の説明とは異なる。 詳細は、カーネル (と glibc) のソースを参照のこと。
.SS ia64
ia64 では、別のインターフェースが使用される:
.nf

\fBint __clone2(int (*\fP\fIfn\fP\fB)(void *), \fP
\fB             void *\fP\fIchild_stack_base\fP\fB, size_t \fP\fIstack_size\fP\fB,\fP
\fB             int \fP\fIflags\fP\fB, void *\fP\fIarg\fP\fB, ... \fP
\fB          /* pid_t *\fP\fIptid\fP\fB, struct user_desc *\fP\fItls\fP\fB, pid_t *\fP\fIctid\fP\fB */ );\fP
.fi
.PP
上記のプロトタイプは glibc ラッパー関数用のものである。 素のシステムコールのインターフェースには引き数 \fIfn\fP と \fIarg\fP がない。
また、引き数の順序が変わり、 \fIflags\fP が最初の引き数で、 \fItls\fP が最後の引き数である。
.PP
\fB__clone2\fP() は \fBclone\fP() と同じように動作するが、以下の点が異なる: \fIchild_stack_base\fP
は子プロセスのスタックエリアの最小のアドレスを指し、 \fIstack_size\fP は \fIchild_stack_base\fP
が指し示すスタックエリアの大きさを示す。
.SS "Linux 2.4 以前"
Linux 2.4 以前では、 \fBclone\fP()  は引き数 \fIptid\fP, \fItls\fP, \fIctid\fP を取らない。
.SH 返り値
.\" gettid(2) returns current->pid;
.\" getpid(2) returns current->tgid;
成功した場合、呼び出し元の実行スレッドには子プロセスのスレッドID が返される。 失敗した場合、 呼び出し元のコンテキストには \-1
が返され、子プロセスは 作成されず、 \fIerrno\fP が適切に設定される。
.SH エラー
.TP 
\fBEAGAIN\fP
すでに実行中のプロセスが多すぎる。 \fBfork\fP(2) 参照。
.TP 
\fBEINVAL\fP
\fBCLONE_SIGHAND\fP が指定されていたが、 \fBCLONE_VM\fP が指定されていなかった。 (Linux 2.6.0\-test6 以降)
.TP 
\fBEINVAL\fP
.\" .TP
.\" .B EINVAL
.\" Precisely one of
.\" .B CLONE_DETACHED
.\" and
.\" .B CLONE_THREAD
.\" was specified.
.\" (Since Linux 2.6.0-test6.)
\fBCLONE_THREAD\fP が指定されていたが、 \fBCLONE_SIGHAND\fP が指定されていなかった。 (Linux 2.5.35 以降)
.TP 
\fBEINVAL\fP
.\" commit e66eded8309ebf679d3d3c1f5820d1f2ca332c71
\fBCLONE_FS\fP と \fBCLONE_NEWNS\fP の両方が \fIflags\fP に指定された。
.TP 
\fBEINVAL\fP (Linux 3.9 以降)
\fBCLONE_NEWUSER\fP と \fBCLONE_FS\fP の両方が \fIflags\fP に指定された。
.TP 
\fBEINVAL\fP
\fBCLONE_NEWIPC\fP と \fBCLONE_SYSVSEM\fP の両方が \fIflags\fP に指定された。
.TP 
\fBEINVAL\fP
\fBCLONE_NEWPID\fP と \fBCLONE_NEWUSER\fP の一方 (もしくは両方) と、 \fBCLONE_THREAD\fP と
\fBCLONE_PARENT\fP  の一方 (もしくは両方) が、 \fIflags\fP に指定された。
.TP 
\fBEINVAL\fP
\fIchild_stack\fP にゼロを指定した場合に \fBclone\fP()  が返す。
.TP 
\fBEINVAL\fP
\fIflags\fP に \fBCLONE_NEWIPC\fP が指定されたが、カーネルでオプション \fBCONFIG_SYSVIPC\fP と
\fBCONFIG_IPC_NS\fP が有効になっていなかった。
.TP 
\fBEINVAL\fP
\fIflags\fP に \fBCLONE_NEWNET\fP が指定されたが、カーネルでオプション \fBCONFIG_NET_NS\fP が有効になっていなかった。
.TP 
\fBEINVAL\fP
\fIflags\fP に \fBCLONE_NEWPID\fP が指定されたが、カーネルでオプション \fBCONFIG_PID_NS\fP が有効になっていなかった。
.TP 
\fBEINVAL\fP
\fIflags\fP に \fBCLONE_NEWUTS\fP が指定されたが、カーネルでオプション \fBCONFIG_UTS\fP が有効になっていなかった。
.TP 
\fBENOMEM\fP
子プロセスのために確保すべきタスク構造体や、呼び出し元のコンテキストの 一部をコピーするのに必要なメモリーを十分に割り当てることができない。
.TP 
\fBEPERM\fP
非特権プロセス (\fBCAP_SYS_ADMIN\fP を持たないプロセス) が \fBCLONE_NEWIPC\fP, \fBCLONE_NEWNET\fP,
\fBCLONE_NEWNS\fP, \fBCLONE_NEWPID\fP, \fBCLONE_NEWUTS\fP を指定した。
.TP 
\fBEPERM\fP
PID が 0 以外のプロセスによって \fBCLONE_PID\fP が指定された。
.TP 
\fBEPERM\fP
\fBCLONE_NEWUSER\fP が \fIflags\fP に指定されたが、 呼び出し元の実効ユーザー ID もしくは実効グループ ID
が親名前空間にマッピングがない (\fBuser_namespaces\fP(7) 参照)。
.TP 
\fBEPERM\fP (Linux 3.9 以降)
.\" commit 3151527ee007b73a0ebd296010f1c0454a919c7d
.\" FIXME What is the rationale for this restriction?
\fBCLONE_NEWUSER\fP が \fIflags\fP に指定され、 呼び出し元が chroot された環境にいる (すなわち、呼び出し元の root
ディレクトリが呼び出し元が属するマウント名前空間の root ディレクトリに一致しない)。
.TP 
\fBEUSERS\fP (Linux 3.11 以降)
\fBCLONE_NEWUSER\fP が \fIflags\fP に指定されており、 この呼び出しによりネストされたユーザー名前空間数の上限を超えてしまう。
\fBuser_namespaces\fP(7) を参照。
.SH バージョン
libc5 には \fBclone\fP()  はない。glibc2 では \fBclone\fP()  が提供されており、このマニュアルページに記載の通りである。
.SH 準拠
\fBclone\fP() は Linux 特有であり、移植を考慮したプログラムでは使用すべき ではない。
.SH 注意
カーネル 2.4.x 系列では、一般的には \fBCLONE_THREAD\fP フラグを指定しても新しいスレッドの親を
呼び出し元プロセスの親と同じにはしない。 しかし、バージョン 2.4.7〜2.4.18 のカーネルでは、 (カーネル 2.6 と同じように)
CLONE_THREAD フラグを指定すると、 暗黙のうちに CLONE_PARENT フラグを指定したことになる。

\fBCLONE_DETACHED\fP というフラグが、2.5.32 で導入されて以来しばらくの間存在した。
このフラグは親プロセスが子プロセス終了のシグナルを必要としないことを 表すものである。 2.6.2 で、 CLONE_DETATCHED を
CLONE_THREAD と一緒に指定する必要はなくなった。 このフラグはまだ定義されているが、何の効果もない。

i386 上では、 \fBclone\fP()  は vsyscall 経由ではなく、直接 \fIint $0x80\fP 経由で呼び出すべきである。
.SH バグ
NPTL スレッドライブラリを含んでいる GNU C ライブラリのいくつかのバージョン には、 \fBgetpid\fP(2)
のラッパー関数が含まれており、このラッパー関数は PID をキャッシュする。 このキャッシュ処理が正しく動作するためには glibc の
\fBclone\fP()  のラッパー関数での助けが必要だが、現状の実装では、 ある状況下においてキャッシュが最新とならない可能性がある。 特に、
\fBclone\fP()  の呼び出し直後にシグナルが子プロセスに配送された場合に、 そのシグナルに対するハンドラー内で \fBgetpid\fP(2)
を呼び出すと、それまでに clone のラッパー関数が子プロセスの PID キャッシュを 更新する機会が得られていなければ、呼び出し元プロセス
("親プロセス") の PID が 返される可能性がある。 (この議論では、子プロセスが \fBCLONE_THREAD\fP
を使って作成された場合のことは無視している。 子プロセスが \fBCLONE_THREAD\fP を作って作成された場合には、
呼び出し元と子プロセスは同じスレッドグループに属すので、 \fBgetpid\fP(2)  は子プロセスと \fBclone\fP()
を呼び出したプロセスで同じ値を返すのが「正しい」。 キャッシュが最新とならない問題 (stale\-cache problem) は、 \fIflags\fP
に \fBCLONE_VM\fP が含まれている場合にも発生しない。)  本当の値を得るためには、次のようなコードを使う必要があるかもしれない。
.nf

    #include <syscall.h>

    pid_t mypid;

    mypid = syscall(SYS_getpid);
.fi
.\" See also the following bug reports
.\" https://bugzilla.redhat.com/show_bug.cgi?id=417521
.\" http://sourceware.org/bugzilla/show_bug.cgi?id=6910
.SH 例
以下のプログラムは、 別の UTS 名前空間で動作する子プロセスを \fBclone\fP() を使って作成する例である。 子プロセスは、自分の UTS
名前空間においてホスト名を変更する。 それから、親プロセスと子プロセスの両方でシステムのホスト名を表示し、 親プロセスと子プロセスの UTS
名前空間でホスト名が異なることを確認する。 このプログラムの使用方法については \fBsetns\fP(2) を参照。
.SS プログラムのソース
.nf
#define _GNU_SOURCE
#include <sys/wait.h>
#include <sys/utsname.h>
#include <sched.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define errExit(msg)    do { perror(msg); exit(EXIT_FAILURE); \e
                        } while (0)

static int              /* clone された子プロセスの開始関数 */
childFunc(void *arg)
{
    struct utsname uts;

    /* 子プロセスの UTS 名前空間でホスト名を変更する */

    if (sethostname(arg, strlen(arg)) == \-1)
        errExit("sethostname");

    /* ホスト名を取得し表示する */

    if (uname(&uts) == \-1)
        errExit("uname");
    printf("uts.nodename in child:  %s\en", uts.nodename);

    /* sleep を使ってしばらく名前空間をオープンされたままにする。
       これにより実験を行うことができる \-\- 例えば、
       別のプロセスがこの名前空間に参加するなど。 */

    sleep(200);

    return 0;           /* 子プロセスを終了する */
}

#define STACK_SIZE (1024 * 1024)    /* clone される子プロセスのスタックサイズ */

int
main(int argc, char *argv[])
{
    char *stack;                    /* スタックバッファーの先頭 */
    char *stackTop;                 /* スタックバッファーの末尾 */
    pid_t pid;
    struct utsname uts;

    if (argc < 2) {
        fprintf(stderr, "Usage: %s <child\-hostname>\en", argv[0]);
        exit(EXIT_SUCCESS);
    }

    /* 子プロセス用のスタックを割り当てる */

    stack = malloc(STACK_SIZE);
    if (stack == NULL)
        errExit("malloc");
    stackTop = stack + STACK_SIZE;  /* スタックは下方向に伸びるものとする */

    /* 自分専用の UTS 名前空間を持つ子プロセスを作成する;
       子プロセスは childFunc() の実行を開始する */

    pid = clone(childFunc, stackTop, CLONE_NEWUTS | SIGCHLD, argv[1]);
    if (pid == \-1)
        errExit("clone");
    printf("clone() returned %ld\en", (long) pid);

    /* 親プロセスの実行はここに来る */

    sleep(1);           /* 子プロセスがホスト名を変更する時間を与える */

    /* 親プロセスの UTS 名前空間でのホスト名を表示する;
       これは子プロセスの UTS 名前空間でのホスト名とは異なる */

    if (uname(&uts) == \-1)
        errExit("uname");
    printf("uts.nodename in parent: %s\en", uts.nodename);

    if (waitpid(pid, NULL, 0) == \-1)    /* 子プロセスを待つ */
        errExit("waitpid");
    printf("child has terminated\en");

    exit(EXIT_SUCCESS);
}
.fi
.SH 関連項目
\fBfork\fP(2), \fBfutex\fP(2), \fBgetpid\fP(2), \fBgettid\fP(2), \fBkcmp\fP(2),
\fBset_thread_area\fP(2), \fBset_tid_address\fP(2), \fBsetns\fP(2), \fBtkill\fP(2),
\fBunshare\fP(2), \fBwait\fP(2), \fBcapabilities\fP(7), \fBnamespaces\fP(7),
\fBpthreads\fP(7)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.79 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
