.\" Copyright (c) 1990, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"	@(#)mpool.3	8.1 (Berkeley) 6/4/93
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 1999 Shouichi Saito
.\"	all rights reserved.
.\" Translated Mon Jul 26 21:51:36 JST 1999
.\"	by Shouichi Saito <ss236rx@ymg.urban.ne.jp>
.\" Proofed Tue Aug 19 1999 by NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\" Updated 2012-05-01, Akihiro MOTOKI <amotoki@gmail.com>
.\"
.TH MPOOL 3 2017\-09\-15 "" "Linux Programmer's Manual"
.UC 7
.SH 名前
mpool \- 共有メモリーバッファープール
.SH 書式
.nf
\fB#include <db.h>\fP
\fB#include <mpool.h>\fP
.PP
\fBMPOOL *mpool_open(DBT *\fP\fIkey\fP\fB, int \fP\fIfd\fP\fB, pgno_t \fP\fIpagesize\fP\fB, pgno_t \fP\fImaxcache\fP\fB);\fP
.PP
\fBvoid mpool_filter(MPOOL *\fP\fImp\fP\fB, void (*pgin)(void *, pgno_t, void *),\fP
\fB                  void (*\fP\fIpgout\fP\fB)(void *, pgno_t, void *),\fP
\fB                  void *\fP\fIpgcookie\fP\fB);\fP
.PP
\fBvoid *mpool_new(MPOOL *\fP\fImp\fP\fB, pgno_t *\fP\fIpgnoaddr\fP\fB);\fP
.PP
\fBvoid *mpool_get(MPOOL *\fP\fImp\fP\fB, pgno_t \fP\fIpgno\fP\fB, unsigned int \fP\fIflags\fP\fB);\fP
.PP
\fBint mpool_put(MPOOL *\fP\fImp\fP\fB, void *\fP\fIpgaddr\fP\fB, unsigned int \fP\fIflags\fP\fB);\fP
.PP
\fBint mpool_sync(MPOOL *\fP\fImp\fP\fB);\fP
.PP
\fBint mpool_close(MPOOL *\fP\fImp\fP\fB);\fP
.fi
.SH 説明
\fI大事な注意\fP:
このページは、バージョン 2.1 までの glibc が提供するインターフェースに
ついて説明している。バージョン 2.2 以降の glibc では、もはやこれらの
インターフェースは提供されていない。おそらく、このページではなく、
\fIlibdb\fP ライブラリが提供する API をお探しなのだろう。
.PP
\fImpool\fP は、ファイルに対するページ指向のバッファー管理を実装した ライブラリインターフェイスである。
.PP
関数 \fBmpool_open\fP()  はメモリープールを初期化する。 \fIkey\fP 引数はバイト文字列であり、バッファーを共有したい複数プロセス間
でのネゴシエーションに使われる。 ファイルバッファーが共有メモリーにマップされると、 同じキーを使うプロセスは全てバッファーを共有する。 \fIkey\fP
が NULL だと、バッファーはプライベートなメモリーに割り付けられる。 \fIfd\fP 引数はもとになるファイルのファイルディスクリプターである。
このファイルディスクリプターはシーク可能でなくてはならない。 \fIkey\fP が NULL でなく、かつ既にマップされているファイルにマッチした場合、
\fIfd\fP 引数は無視される。
.PP
\fIpagesize\fP 引数はバイト単位でのページサイズであり、ファイルはこのサイズに分割される。 \fImaxcache\fP
引数は基ファイルをキャッシュするときに用いる最大ページ数である。 この値はファイルバッファーを共有しているプロセスの数には関係ないが、
ファイルを共有するプロセスが指定したうちの最大値が実際に用いられる。
.PP
関数 \fBmpool_filter\fP()  は透過的なページ入出力処理を可能にする。 関数 \fIpgin\fP が指定されていると、
ファイルからメモリープールに読み込まれる度にこの関数が呼び出される。 関数 \fIpgout\fP が指定されていと、
バッファーからファイルに書き出される度にこの関数が呼び出される。 どちらの関数も、 \fIpgcookie\fP
ポインター、ページ数、読み書きされるページへのポインターを引数にとる。
.PP
関数 \fBmpool_new\fP()  は \fIMPOOL\fP ポインターとアドレスを引数にとる。
新しいページが割り当て可能な場合、ページへのポインターが返され、 ページ数が \fIpgnoaddr\fP アドレスに納められる。 割り当てが不可能な場合は
NULL が返され、 \fIerrno\fP がセットされる。
.PP
関数 \fBmpool_get\fP()  は \fIMPOOL\fP ポインターとページ数を引数にとる。ページが存在していると、 ページへのポインターが返される。
存在していないと NULL が返され、 \fIerrno\fP がセットされる。 \fIflags\fP 引数は現在使用されていない。
.PP
関数 \fBmpool_put\fP()  は \fIpgaddr\fP が参照するページを解放する。 \fIpgaddr\fP は以前に \fBmpool_get\fP()
か \fBmpool_new\fP()  が返したアドレスでなければならない。 flag の値は以下の値の論理和で指定する。
.TP 
\fBMPOOL_DIRTY\fP
ページは変更されており、ファイルに書き出す必要がある。
.PP
\fBmpool_put\fP()  は成功すると 0 を、エラーがあると \-1 を返す。
.PP
関数 \fBmpool_sync\fP()  は \fIMPOOL\fP ポインターの示すページのうち、 変更されたものを全てファイルに書き出す。
\fBmpool_sync\fP()  は成功すると 0 を、エラーがあると \-1 を返す。
.PP
関数 \fBmpool_close\fP()  はメモリープールクッキーの示す割り当て済みのメモリーを解放する。
変更されたページはファイルに\fB書き出されない\fP。 \fImpool_close ()\fP は成功すると 0 を、エラーがあると \-1 を返す。
.SH エラー
関数 \fBmpool_open\fP()  は失敗するとライブラリルーチン \fBmalloc\fP(3)  で指定されているエラーに応じた \fIerrno\fP
をセットする。
.PP
関数 \fBmpool_get\fP()  は失敗すると次のような \fIerrno\fP をセットする。
.TP  15
\fBEINVAL\fP
要求のあったレコードは存在しない。
.PP
関数 \fBmpool_new\fP()  と \fBmpool_get\fP()  は失敗するとライブラリルーチン \fBread\fP(2),
\fBwrite\fP(2), \fBmalloc\fP(3)  で指定されているエラーに応じた \fIerrno\fP をセットする。
.PP
関数 \fBmpool_sync\fP()  は失敗するとライブラリルーチン \fBwrite\fP(2)  で指定されているエラーに応じた \fIerrno\fP
をセットする。
.PP
関数 \fBmpool_close\fP()  は失敗するとライブラリルーチン \fBfree\fP(3)  で指定されているエラーに応じた \fIerrno\fP
をセットする。
.SH 準拠
POSIX.1 にはない。 BSD 系に存在する。
.SH 関連項目
\fBbtree\fP(3), \fBdbopen\fP(3), \fBhash\fP(3), \fBrecno\fP(3)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
