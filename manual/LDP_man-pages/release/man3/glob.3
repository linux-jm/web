.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Wed Jul 28 11:12:17 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Mon May 13 23:08:50 1996 by Martin Schulze (joey@linux.de)
.\" Modified 11 May 1998 by Joseph S. Myers (jsm28@cam.ac.uk)
.\" Modified 990912 by aeb
.\" 2007-10-10 mtk
.\"     Added description of GLOB_TILDE_NOMATCH
.\"     Expanded the description of various flags
.\"     Various wording fixes.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 1998 Ken Wakasa all rights reserved.
.\" Translated 1998-06-24, Ken Wakasa <wakasa@iname.com>
.\" Updated 1999-01-04, Kentaro Shirakata <argrath@yo.rim.or.jp>
.\" Updated 2008-02-12, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v2.77
.\"
.TH GLOB 3 2020\-06\-09 GNU "Linux Programmer's Manual"
.SH 名前
glob, globfree \- パターンにマッチするパス名を見付ける。glob() によっ て確保されたメモリー領域を解放する。
.SH 書式
.nf
\fB#include <glob.h>\fP
.PP
\fBint glob(const char *\fP\fIpattern\fP\fB, int \fP\fIflags\fP\fB,\fP
\fB         int (*\fP\fIerrfunc\fP\fB) (const char *\fP\fIepath\fP\fB, int \fP\fIeerrno\fP\fB),\fP
\fB         glob_t *\fP\fIpglob\fP\fB);\fP
\fBvoid globfree(glob_t *\fP\fIpglob\fP\fB);\fP
.fi
.SH 説明
\fBglob\fP()  関数はシェルが用いているルール (\fBglob\fP(7)  参照) に基づいてパターン \fIpattern\fP
にマッチするすべてのパス名を検索する。 チルダ (~) の展開やパラメーター置換は行われない。それらを行いたい場合は \fBwordexp\fP(3)
を使うとよい。
.PP
\fBglobfree\fP()  関数は前に呼ばれた \fBglob\fP()  により動的に確保された記憶領域を解放する。
.PP
\fBglob\fP()  の結果は \fIpglob\fP がポイントする構造体に返される。 \fIpglob\fP は \fIglob_t\fP 型の構造体である。
\fIglob_t\fP 型は \fI<glob.h>\fP 内で宣言されており、以下の要素を含んでいる。これらの要素は POSIX.2 で定義
されている (さらに多くの要素が拡張として入っているかもしれない)。
.PP
.in +4n
.EX
typedef struct {
    size_t   gl_pathc;    /* 今までにマッチしたパスの数 */
    char   **gl_pathv;    /* マッチしたパス名のリスト */
    size_t   gl_offs;     /* \fIgl_pathv\fP 内に確保するスロット数 */
} glob_t;
.EE
.in
.PP
結果は動的に確保された記憶領域に入れられる。
.PP
パラメーター \fIflags\fP には以下の示す定数のうち、指定したいものをビットごとの OR で与える (一つも 指定しなくてもよい)。これによって
\fBglob\fP()  の動作を変更できる。
.TP 
\fBGLOB_ERR\fP
(例えば、ディレクトリに読み取り許可属性が無い場合などで)  読み取りエラーが発生した際に関数から戻る。 デフォルトでは、エラーに関わらず
読み取り可能なディレクトリを全てについて読み取りを実行しようとする。
.TP 
\fBGLOB_MARK\fP
ディレクトリに対応する各々のパスにスラッシュを付加する。
.TP 
\fBGLOB_NOSORT\fP
返されるパス名のソートを行わない。 ソートを行わない理由は、処理時間を節約するためだけである。 デフォルトでは、返されるパス名はソートされる。
.TP 
\fBGLOB_DOOFFS\fP
\fIpglob\->pathv\fP の文字列リストの先頭に \fIpglob\->gl_offs\fP スロット分の領域を予約する。
予約されたスロットにはヌルポインターが入る。
.TP 
\fBGLOB_NOCHECK\fP
マッチするパターンがなければ、元のパターンを返す。 デフォルトでは、 \fBglob\fP()  はマッチするパターンがなければ
\fBGLOB_NOMATCH\fP を返す。
.TP 
\fBGLOB_APPEND\fP
この呼び出しでの結果を直前の \fBglob\fP()  の呼び出しで返された結果のベクトルに追加する。最初の \fBglob\fP()
の呼び出しの際にはこのフラグを設定してはいけない。
.TP 
\fBGLOB_NOESCAPE\fP
バックスラッシュ (\(aq\e\(aq) をエスケープ用文字として使用できない。 通常は、バックスラッシュを使って、次に続く文字をクォートすることで、
特別な意味を持つメタキャラクターを無効することができる。
.PP
\fIflags\fP には以下に示すものも指定できる。 これらは GNU で拡張されたもので、POSIX.2 では定義されていない。
.TP 
\fBGLOB_PERIOD\fP
先頭のピリオドがメタキャラクターにマッチできるようにする。 デフォルトでは、メタキャラクターは先頭のピリオドにはマッチできない。
.TP 
\fBGLOB_ALTDIRFUNC\fP
ファイルシステムにアクセスする際に、通常のライブラリ関数の代わりに 代替関数 \fIpglob\->gl_closedir\fP,
\fIpglob\->gl_readdir\fP, \fIpglob\->gl_opendir\fP, \fIpglob\->gl_lstat\fP,
\fIpglob\->gl_stat\fP が用いられる。
.TP 
\fBGLOB_BRACE\fP
\fB{a,b}\fP という形式の \fBcsh\fP(1)  スタイルの括弧表現を展開する。 括弧表現は入れ子にすることができる。
したがって、例えば、"{foo/{,cat,dog},bar}" というパターンを 指定した場合に得られる結果は、 4つの文字列 "foo/",
"foo/cat", "foo/dog", "bar" のそれぞれについて \fBglob\fP()  を呼び出した場合と同じになる。
.TP 
\fBGLOB_NOMAGIC\fP
パターンにメタキャラクターが含まれていない場合、 マッチ結果として指定されたパターンだけを返す。
パターンで指定された名前のファイルが存在しない場合であっても、 そのパターンが返される。
.TP 
\fBGLOB_TILDE\fP
チルダの展開を行う。 チルダ (\(aq\(ti\(aq) がパターン内の唯一の文字の場合か、先頭のチルダの直後の文字が スラッシュ
(\(aq/\(aq) の場合、チルダを呼び出し者のホームディレクトリで置換する。 先頭のチルダにユーザー名が続く場合 (例えば
"\(tiandrea/bin")、 チルダとユーザー名をそのユーザーのホームディレクトリで置換する。
ユーザー名が無効な場合やホームディレクトリが決定できない場合は、 置換は実行されない。
.TP 
\fBGLOB_TILDE_CHECK\fP
このフラグを指定すると \fBGLOB_TILDE\fP と同様の振舞いをする。 \fBGLOB_TILDE\fP との違いは、ユーザー名が無効だった場合や
ホームディレクトリが決定できなかった場合に、 パターン自身を使用するのではなく、 \fBglob\fP()  がエラーを示す \fBGLOB_NOMATCH\fP
を返すことである。
.TP 
\fBGLOB_ONLYDIR\fP
このフラグは、 \fBglob\fP()  に対する「ヒント」であり、 呼び出し側がパターンにマッチするディレクトリにしか興味がないことを知らせる。
実装においてファイルの種別情報を簡単に決定できる場合は、ディレクトリでない ファイルは呼び出し側に返されない。しかしながら、呼び出し側では、返された
ファイルリストがディレクトリかどうかを確認しなければならない。 (このフラグが存在するのは、呼び出し側がディレクトリにしか興味がない際に
性能を最適化する目的のためだけである。)
.PP
\fIerrfunc\fP が NULL でなければ、 エラーが起こった場合には関数 \fIerrfunc\fP が呼び出される。関数の引数には、失敗したパス名
\fIepath\fP と \fIerrno\fP (\fBopendir\fP(3), \fBreaddir\fP(3), \fBstat\fP(2).
のいずれかによってセットされた値) が与えられる。 \fIerrfunc\fP が 0 以外の値を返すかもしくは \fBGLOB_ERR\fP がセットされた場合
\fBglob\fP()  は \fIerrfunc\fP の呼び出し後に終了する。
.PP
呼び出しが成功して戻った場合 \fIpglob\->gl_pathc\fP にはマッチしたパス名が含まれ、 \fIpglob\->gl_pathv\fP
はマッチしたパス名へのポインターのリストへのポインターとなる。 ポインターのリストはヌルポインターで終端される。
.PP
\fBglob\fP()  を何度か続けて呼び出すことができる。その際2回目以降の呼び出しでは \fBGLOB_APPEND\fP フラグが \fIflags\fP
に設定されていなければならない。
.PP
GNU の拡張として、 \fIpglob\->gl_flags\fP には指定したフラグがセットされる。もし一つでもメタキャラクターが見付かれば
このフラグと \fBGLOB_MAGCHAR\fP との \fBOR\fP を取った結果がセットされる。
.SH 返り値
呼び出しが成功して完了すると \fBglob\fP()  は 0 を返す。 それ以外の返り値は以下の通り:
.TP 
\fBGLOB_NOSPACE\fP
メモリーを使い果たした
.TP 
\fBGLOB_ABORTED\fP
読み取りエラー
.TP 
\fBGLOB_NOMATCH\fP
一つもマッチしなかった
.SH 属性
この節で使用されている用語の説明については、 \fBattributes\fP(7) を参照。
.TS
allbox;
lb lb lbw24
l l l.
インターフェース	属性	値
T{
\fBglob\fP()
T}	Thread safety	T{
MT\-Unsafe race:utent env
.br
sig:ALRM timer locale
T}
T{
\fBglobfree\fP()
T}	Thread safety	MT\-Safe
.TE
.sp 1
In the above table, \fIutent\fP in \fIrace:utent\fP signifies that if any of the
functions \fBsetutent\fP(3), \fBgetutent\fP(3), or \fBendutent\fP(3)  are used in
parallel in different threads of a program, then data races could occur.
\fBglob\fP()  calls those functions, so we use race:utent to remind users.
.SH 準拠
POSIX.1\-2001, POSIX.1\-2008, POSIX.2.
.SH 注意
glibc 2.1 では、 \fIgl_pathc\fP と \fIgl_offs\fP は POSIX.2 で指定されているように \fIsize_t\fP
として宣言されている。 glibc 2.0 では、 \fIint\fP として宣言されている。
.SH バグ
\fBglob\fP()  関数はその中で呼び出している \fBmalloc\fP(3)  や \fBopendir\fP(3)
などの関数の呼び出しで失敗が起こると失敗する。 これにより \fIerrno\fP にそのエラーコードが入る。
.SH 例
使用法の一例を以下に示す。以下はシェルで
.PP
.in +4n
.EX
ls \-l *.c ../*.c
.EE
.in
.PP
をタイプした場合をシミュレートしている。
.PP
.in +4n
.EX
glob_t globbuf;

globbuf.gl_offs = 2;
glob("*.c", GLOB_DOOFFS, NULL, &globbuf);
glob("../*.c", GLOB_DOOFFS | GLOB_APPEND, NULL, &globbuf);
globbuf.gl_pathv[0] = "ls";
globbuf.gl_pathv[1] = "\-l";
execvp("ls", &globbuf.gl_pathv[0]);
.EE
.in
.SH 関連項目
\fBls\fP(1), \fBsh\fP(1), \fBstat\fP(2), \fBexec\fP(3), \fBfnmatch\fP(3), \fBmalloc\fP(3),
\fBopendir\fP(3), \fBreaddir\fP(3), \fBwordexp\fP(3), \fBglob\fP(7)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
