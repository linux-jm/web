.\"	$NetBSD: fts.3,v 1.13.2.1 1997/11/14 02:09:32 mrg Exp $
.\"
.\" Copyright (c) 1989, 1991, 1993, 1994
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)fts.3	8.5 (Berkeley) 4/16/94
.\"
.\" 2007-12-08, mtk, Converted from mdoc to man macros
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 2000 Yuichi SATO
.\"         all rights reserved.
.\" Translated Tue Jul 11 19:02:58 JST 2000
.\"         by Yuichi SATO <sato@complex.eng.hokudai.ac.jp>
.\"
.TH FTS 3 2020\-04\-11 Linux "Linux Programmer's Manual"
.SH 名前
fts, fts_open, fts_read, fts_children, fts_set, fts_close \- ファイル階層をたどる
.SH 書式
.nf
\fB#include <sys/types.h>\fP
\fB#include <sys/stat.h>\fP
\fB#include <fts.h>\fP
.PP
\fBFTS *fts_open(char * const *\fP\fIpath_argv\fP\fB, int \fP\fIoptions\fP\fB,\fP
\fB              int (*\fP\fIcompar\fP\fB)(const FTSENT **, const FTSENT **));\fP
.PP
\fBFTSENT *fts_read(FTS *\fP\fIftsp\fP\fB);\fP
.PP
\fBFTSENT *fts_children(FTS *\fP\fIftsp\fP\fB, int \fP\fIinstr\fP\fB);\fP
.PP
\fBint fts_set(FTS *\fP\fIftsp\fP\fB, FTSENT *\fP\fIf\fP\fB, int \fP\fIinstr\fP\fB);\fP
.PP
\fBint fts_close(FTS *\fP\fIftsp\fP\fB);\fP
.fi
.SH 説明
The fts functions are provided for traversing file hierarchies.  A simple
overview is that the \fBfts_open\fP()  function returns a "handle" (of type
\fIFTS\ *\fP)  that refers to a file hierarchy "stream".  This handle is then
supplied to the other fts functions.  The function \fBfts_read\fP()  returns a
pointer to a structure describing one of the files in the file hierarchy.
The function \fBfts_children\fP()  returns a pointer to a linked list of
structures, each of which describes one of the files contained in a
directory in the hierarchy.
.PP
In general, directories are visited two distinguishable times; in preorder
(before any of their descendants are visited) and in postorder (after all of
their descendants have been visited).  Files are visited once.  It is
possible to walk the hierarchy "logically" (visiting the files that symbolic
links point to)  or physically (visiting the symbolic links themselves),
order the walk of the hierarchy or prune and/or revisit portions of the
hierarchy.
.PP
Two structures (and associated types) are defined in the include file
\fI<fts.h>\fP.  The first type is \fIFTS\fP, the structure that represents
the file hierarchy itself.  The second type is \fIFTSENT\fP, the structure that
represents a file in the file hierarchy.  Normally, an \fIFTSENT\fP structure
is returned for every file in the file hierarchy.  In this manual page,
"file" and "FTSENT structure" are generally interchangeable.
.PP
The \fIFTSENT\fP structure contains fields describing a file.  The structure
contains at least the following fields (there are additional fields that
should be considered private to the implementation):
.PP
.in +4n
.EX
.\" Also:
.\"     ino_t fts_ino;                  /* inode (only for directories)*/
.\"     dev_t fts_dev;                  /* device (only for directories)*/
.\"     nlink_t fts_nlink;              /* link count (only for directories)*/
.\"     u_short fts_flags;              /* private flags for FTSENT structure */
.\"     u_short fts_instr;              /* fts_set() instructions */
typedef struct _ftsent {
    unsigned short  fts_info;     /* FTSENT 構造体のためのフラグ */
    char           *fts_accpath;  /* アクセスパス */
    char           *fts_path;     /* ルートパス */
    short           fts_pathlen;  /* strlen(fts_path) +
                                     strlen(fts_name) */
    char           *fts_name;     /* ファイル名 */
    short           fts_namelen;  /* strlen(fts_name) */
    short           fts_level;    /* 深さ (\-1 〜 N) */
    int             fts_errno;    /* ファイルのエラー番号 */
    long            fts_number;   /* ローカルな番号 */
    void            *fts_pointer;  /* ローカルなアドレス番号 */
    struct _ftsent *fts_parent;   /* 親ディレクトリ */
    struct _ftsent *fts_link;     /* 次のファイル構造体 */
    struct _ftsent *fts_cycle;    /* 循環している構造体 */
    struct stat    *fts_statp;    /* stat(2) の情報 */
} FTSENT;
.EE
.in
.PP
.\" .Bl -tag -width "fts_namelen"
これらのフィールドは、次のように定義されている。
.TP 
\fIfts_info\fP
.\" .Bl  -tag -width FTS_DEFAULT
One of the following values describing the returned \fIFTSENT\fP structure and
the file it represents.  With the exception of directories without errors
(\fBFTS_D\fP), all of these entries are terminal, that is, they will not be
revisited, nor will any of their descendants be visited.
.RS
.TP 
\fBFTS_D\fP
preorder でたどられるディレクトリ。
.TP 
\fBFTS_DC\fP
ツリーの中で循環しているディレクトリ。 (\fIFTSENT\fP 構造体の \fIfts_cycle\fP フィールドも同様に埋められる。)
.TP 
\fBFTS_DEFAULT\fP
ファイルタイプを表現する \fIFTSENT\fP 構造体が、 \fIfts_info\fP の他のいずれかの値で明示的に説明されていない。
.TP 
\fBFTS_DNR\fP
読み込みができないディレクトリ。 これはエラーの場合の返り値であり、 何がエラーを起こしたかを示すために \fIfts_errno\fP
フィールドが設定される。
.TP 
\fBFTS_DOT\fP
\fBfts_open\fP()  へのファイル名として指定されなかった "." または ".." という名前のファイル (\fBFTS_SEEDOT\fP
を参照すること)。
.TP 
\fBFTS_DP\fP
postorder でたどられるディレクトリ。 \fIFTSENT\fP 構造体の内容は、preorder のときに返された状態 (つまり、
\fIfts_info\fP フィールドが \fBFTS_D\fP に設定されている状態) から変更されない。
.TP 
\fBFTS_ERR\fP
これはエラーの場合の返り値であり、 \fIfts_errno\fP フィールドは、何がエラーを起こしたかを示す値に設定される。
.TP 
\fBFTS_F\fP
通常のファイル。
.TP 
\fBFTS_NS\fP
\fBstat\fP(2)  情報が得られなかったファイル。 \fIfts_statp\fP フィールドの内容は定義されない。 これはエラーの場合の返り値であり、
\fIfts_errno\fP フィールドは、何がエラーを起こしたかを示す値に設定される。
.TP 
\fBFTS_NSOK\fP
\fBstat\fP(2)  情報が要求されなかったファイル。 \fIfts_statp\fP フィールドの内容は定義されない。
.TP 
\fBFTS_SL\fP
シンボリックリンク。
.TP 
\fBFTS_SLNONE\fP
.\" .El
リンク先の存在しないシンボリックリンク。 \fIfts_statp\fP フィールドの内容は、シンボリックリンクそのもののファイル特性情報を参照する。
.RE
.TP 
\fIfts_accpath\fP
現在のディレクトリからファイルにアクセスするためのパス。
.TP 
\fIfts_path\fP
階層をたどるときのルートからみたファイルの相対的なパス。 このパスには、 \fBfts_open\fP()  に指定したパスがプレフィックスとして含まれる。
.TP 
\fIfts_pathlen\fP
The sum of the lengths of the strings referenced by \fIfts_path\fP and
\fIfts_name\fP.
.TP 
\fIfts_name\fP
ファイルの名前。
.TP 
\fIfts_namelen\fP
\fIfts_name\fP で参照される文字列の長さ。
.TP 
\fIfts_level\fP
階層をたどって、このファイルがみつかった深さ。 \-1 〜 N の数値で表される。 階層をたどるときの出発点 (ルート) の親ディレクトリを表す
\fIFTSENT\fP 構造体では \-1 となる。 また、ルート自身の \fIFTSENT\fP 構造体では 0 になる。
.TP 
\fIfts_errno\fP
If \fBfts_children\fP()  or \fBfts_read\fP()  returns an \fIFTSENT\fP structure whose
\fIfts_info\fP field is set to \fBFTS_DNR\fP, \fBFTS_ERR\fP, or \fBFTS_NS\fP, the
\fIfts_errno\fP field contains the error number (i.e., the \fIerrno\fP value)
specifying the cause of the error.  Otherwise, the contents of the
\fIfts_errno\fP field are undefined.
.TP 
\fIfts_number\fP
このフィールドは、アプリケーションプログラムから使用するために提供され、 fts 関数群では変更されない。 このフィールドは 0 で初期化される。
.TP 
\fIfts_pointer\fP
このフィールドは、アプリケーションプログラムから使用するために提供され、 fts 関数群では変更されない。 このフィールドは \fBNULL\fP
で初期化される。
.TP 
\fIfts_parent\fP
A pointer to the \fIFTSENT\fP structure referencing the file in the hierarchy
immediately above the current file, that is, the directory of which this
file is a member.  A parent structure for the initial entry point is
provided as well, however, only the \fIfts_level\fP, \fIfts_number\fP, and
\fIfts_pointer\fP fields are guaranteed to be initialized.
.TP 
\fIfts_link\fP
\fBfts_children\fP()  から返される場合、 \fIfts_link\fP フィールドはディレクトリメンバーのヌル終端されたリンクリストの形式で、
次の構造体を指し示す。 それ以外の場合、 \fIfts_link\fP フィールドは定義されない。
.TP 
\fIfts_cycle\fP
2 つのディレクトリにハードリンクが張られているため、 または、シンボリックリンクがあるディレクトリを指しているために、
ディレクトリが循環する階層構造を作っている場合 (\fBFTS_DC\fP を参照)、 構造体の \fIfts_cycle\fP フィールドは、階層中で現在の
\fIFTSENT\fP 構造体と同じファイルを参照している \fIFTSENT\fP 構造体を指し示す。 それ以外の場合、 \fIfts_cycle\fP
フィールドは定義されない。
.TP 
\fIfts_statp\fP
.\" .El
このファイルの \fBstat\fP(2)  情報へのポインター。
.PP
ファイル階層中のすべてのファイルのパスに対して、 ただ 1 つのバッファーが使われる。 したがって、 \fIfts_path\fP と
\fIfts_accpath\fP フィールドは、 \fBfts_read\fP()
によって返された最も新しいファイルに対して「のみ」ヌル終端されることが保証される。 これらのフィールドを、他の \fIFTSENT\fP
構造体で表現されるファイルを参照するために使うには、 \fIFTSENT\fP 構造体の \fIfts_pathlen\fP
フィールドにある情報を使ってパスのバッファーを修正する必要がある。 これらの修正は、さらに \fBfts_read\fP()
を呼び出そうとする場合には、元に戻しておかなければならない。 \fIfts_name\fP フィールドは、常に \fBNUL\fP 終端される。
.SS fts_open()
\fBfts_open\fP()  関数は、文字列ポインターの配列へのポインターを引数に取る。 この文字列ポインターは、論理ファイル階層をつくる 1
つ以上のパスの名前になる。 配列は、 null ポインターで終端されなければならない。
.PP
.\" .Bl -tag -width "FTS_PHYSICAL"
多くのオプションがあり、少なくとも 1 つ (\fBFTS_LOGICAL\fP または \fBFTS_PHYSICAL\fP)  が指定されなければならない。
オプションは以下の値の論理和をとって選択する。
.TP 
\fBFTS_COMFOLLOW\fP
このオプションは、 \fBFTS_LOGICAL\fP の指定にかかわらず、 ルートパスに指定されたシンボリックリンクをすぐにたどらせる。
.TP 
\fBFTS_LOGICAL\fP
このオプションは、 fts ルーチンにシンボリックリンクそのものではなく、 シンボリックリンクが指しているファイルの \fIFTSENT\fP
構造体を返させる。 このオプションが設定された場合、 \fIFTSENT\fP 構造体がアプリケーションに返されるような
シンボリックリンクのみが、存在しないファイルを参照している。 \fBFTS_LOGICAL\fP または \fBFTS_PHYSICAL\fP のどちらかを、
\fBfts_open\fP()  関数に与えなければ「ならない」。
.TP 
\fBFTS_NOCHDIR\fP
パフォーマンスの最適化のため、 fts 関数群はファイル階層をたどるときディレクトリを変える。 これには、階層をたどっている間は
アプリケーションがある特定のディレクトリにいるということに 依存できない、という副作用がある。 \fBFTS_NOCHDIR\fP
オプションで最適化を無効にすると、 fts 関数群は現在のディレクトリを変更しない。 \fBFTS_NOCHDIR\fP が指定され、かつ
\fBfts_open\fP()  の引数として絶対パス名が与えられたとき以外、アプリケーションは、 自らカレントディレクトリを変更したり、
ファイルにアクセスしたりすべきではない、という点に注意すること。
.TP 
\fBFTS_NOSTAT\fP
デフォルトでは、返された \fIFTSENT\fP 構造体は、たどられた各ファイルについてのファイル特徴情報 \fI( statp\fP フィールド) を参照する。
このオプションは、 fts 関数群が \fIfts_info\fP フィールドを \fBFTS_NSOK\fP に設定し \fIstatp\fP
の内容を定義されないままにすることを許すことにより、 パフォーマンスの最適化に必要なものを緩和する。
.TP 
\fBFTS_PHYSICAL\fP
このオプションは、 fts ルーチンにシンボリックリンクが指しているファイルではなく、 シンボリックリンク自身の \fIFTSENT\fP 構造体を返させる。
このオプションが設定されると、階層中のすべてのシンボリックリンクの \fIFTSENT\fP 構造体がアプリケーションに返される。
\fBFTS_LOGICAL\fP または \fBFTS_PHYSICAL\fP のどちらかを \fBfts_open\fP()  関数に与えなければ「ならない」。
.TP 
\fBFTS_SEEDOT\fP
デフォルトでは、 \fBfts_open\fP()  のパス引数として指定されない限り、ファイル階層中にある "." または ".."
という名前のファイルは無視される。 このオプションは、 fts ルーチンにこれらのファイルの \fIFTSENT\fP 構造体を返させる。
.TP 
\fBFTS_XDEV\fP
.\" .El
このオプションは、 fts が下り始めのファイルとは異なるデバイス番号を持っている ディレクトリに下りるのを阻止する。
.PP
The argument \fBcompar\fP()  specifies a user\-defined function which may be
used to order the traversal of the hierarchy.  It takes two pointers to
pointers to \fIFTSENT\fP structures as arguments and should return a negative
value, zero, or a positive value to indicate if the file referenced by its
first argument comes before, in any order with respect to, or after, the
file referenced by its second argument.  The \fIfts_accpath\fP, \fIfts_path\fP,
and \fIfts_pathlen\fP fields of the \fIFTSENT\fP structures may \fInever\fP be used
in this comparison.  If the \fIfts_info\fP field is set to \fBFTS_NS\fP or
\fBFTS_NSOK\fP, the \fIfts_statp\fP field may not either.  If the \fBcompar\fP()
argument is NULL, the directory traversal order is in the order listed in
\fIpath_argv\fP for the root paths, and in the order listed in the directory
for everything else.
.SS fts_read()
\fBfts_read\fP()  関数は、階層中のファイルを記述する \fIFTSENT\fP 構造体へのポインターを返す。 (読み込み可能で、循環していない)
ディレクトリは、 1 回は preorder で、もう 1 回は postorder で、少なくとも 2 回たどられる。 他のファイルは、少なくとも 1
回たどられる。 (ディレクトリ間のハードリンクによって 循環やシンボリックリンクへのシンボリックリンクが起こらない場合、 ファイルは 2
回以上、ディレクトリは 3 回以上たどられる。)
.PP
階層中のすべてのメンバーが返された場合、 \fBfts_read\fP()  は \fBNULL\fP を返し、外部変数 \fIerrno\fP を 0 にする。
階層中のファイルに関係しないエラーが起こった場合、 \fBfts_read\fP()  は \fBNULL\fP を返し、 \fIerrno\fP
をエラーに対応した値にする。 階層中のファイルに関係したエラーが起こった場合、 \fIFTSENT\fP 構造体へのポインターが返され、 \fIerrno\fP
は設定される場合と設定されない場合がある (\fIfts_info\fP を参照すること)。
.PP
\fBfts_read\fP()  によって返される \fIFTSENT\fP 構造体は、同じファイル階層ストリームへの \fBfts_close\fP()
の呼出しの後に上書きされる。 また、同じファイル階層ストリームへの \fBfts_read\fP()
の呼出しの後でも、構造体がディレクトリを表現していない限り上書きされる。 この場合、 \fBfts_read\fP()  関数によって postorder で
\fIFTSENT\fP 構造体が返された後、 \fBfts_read\fP()  の呼出しがあるまで、 これらの構造体は上書きされない。
.SS fts_children()
\fBfts_children\fP()  関数は、 \fIFTSENT\fP 構造体へのポインターを返す。 この構造体は、( \fBfts_read\fP()
で最も新しく返された \fIFTSENT\fP 構造体で表現されるディレクトリにあるファイルの) ヌル終端されたリンクリストの最初のエントリーを記述する。
このリストは、 \fIFTSENT\fP 構造体の \fIfts_link\fP フィールドを使ってリンクされ、
ユーザー指定の比較関数がある場合は、それで順序づけられる。 \fBfts_children\fP()  の呼出しを繰り返すことで、
このリンクリストは再生成される。
.PP
特別な場合として、 \fBfts_read\fP()  がファイル階層について呼ばれていない場合、 \fBfts_children\fP()  は
\fBfts_open\fP()  に指定された論理ディレクトリ (つまり、 \fBfts_open\fP()  に指定された引数)
の中にあるファイルへのポインターを返す。 それ以外の場合で、 \fBfts_read\fP()  によって最も新しく返された \fIFTSENT\fP 構造体が
preorder でたどられたディレクトリでない場合や 何も含んでいないディレクトリの場合は、 \fBfts_children\fP()  は \fBNULL\fP
を返し、 \fIerrno\fP を 0 にする。 エラーが起こった場合、 \fBfts_children\fP()  は \fBNULL\fP を返し、
\fIerrno\fP をエラーに対応した値にする。
.PP
The \fIFTSENT\fP structures returned by \fBfts_children\fP()  may be overwritten
after a call to \fBfts_children\fP(), \fBfts_close\fP(), or \fBfts_read\fP()  on the
same file hierarchy stream.
.PP
.\" .Bl -tag -width FTS_NAMEONLY
The \fIinstr\fP argument is either zero or the following value:
.TP 
\fBFTS_NAMEONLY\fP
.\" .El
ファイル名のみが必要とされている。 返された構造体のリンクリストの \fIfts_name\fP, \fIfts_namelen\fP フィールド以外の
すべてのフィールドの内容は定義されない。
.SS fts_set()
The function \fBfts_set\fP()  allows the user application to determine further
processing for the file \fIf\fP of the stream \fIftsp\fP.  The \fBfts_set\fP()
function returns 0 on success, and \-1 if an error occurs.
.PP
.\" .Bl -tag -width FTS_PHYSICAL
The \fIinstr\fP argument is either 0 (meaning "do nothing") or one of the
following values:
.TP 
\fBFTS_AGAIN\fP
ファイルを再びたどる。すべてのファイルタイプが再びたどられる。 次の \fBfts_read\fP()  の呼出しにより、参照されているファイルが返される。
構造体の \fIfts_stat\fP, \fIfts_info\fP フィールドはこの時に初期化されるが、他のフィールドは変更されない。 このオプションは、
\fBfts_read\fP()  によって最も新しく返されたファイルについてのみ意味を持つ。 通常は、postorder
でディレクトリをたどる場合に使用し、 その下の階層と同様に、 ディレクトリを (preorder と postorder の両方で) 再びたどらせる。
.TP 
\fBFTS_FOLLOW\fP
参照されてるファイルは、シンボリックリンクでなければならない。 参照されているファイルが \fBfts_read\fP()
によって最も新しく返されたものである場合、次の \fBfts_read\fP()  の呼出しでは、シンボリックリンクそのものではなく、
シンボリックリンクが指している先を反映するように \fIfts_info\fP, \fIfts_statp\fP を再び初期化したファイルが返される。 ファイルが
\fBfts_children\fP()  によって最も新しく返されたものの 1 つである場合、 \fBfts_read\fP()  によって返されたとき、構造体の
\fIfts_info\fP, \fIfts_statp\fP フィールドは、シンボリックリンクそのものではなく、 シンボリックリンクが指している先を反映する。
どちらの場合でも、シンボリックリンクが指している先がないときは、 返された構造体のフィールドは変更されず、 \fIfts_info\fP フィールドが
\fBFTS_SLNONE\fP に設定される。
.IP
リンク先がディレクトリの場合、 ファイルが preorder で返された後、下の階層のすべてファイルが返され、 その後で postorder
で返される。
.TP 
\fBFTS_SKIP\fP
.\" .El
このファイルの下の階層はたどられない。 このファイルは、 \fBfts_children\fP()  または \fBfts_read\fP()
のどちらかによって最も新しく返されたものの 1 つである。
.SS fts_close()
The \fBfts_close\fP()  function closes the file hierarchy stream referred to by
\fIftsp\fP and restores the current directory to the directory from which
\fBfts_open\fP()  was called to open \fIftsp\fP.  The \fBfts_close\fP()  function
returns 0 on success, and \-1 if an error occurs.
.SH エラー
関数 \fBfts_open\fP()  が失敗した場合、 \fIerrno\fP は、ライブラリ関数 \fBopen\fP(2)  と \fBmalloc\fP(3)
に対して指定されるエラーに設定される。
.PP
関数 \fBfts_close\fP()  が失敗した場合、 \fIerrno\fP は、ライブラリ関数 \fBchdir\fP(2)  と \fBclose\fP(2)
に対して指定されるエラーに設定される。
.PP
関数 \fBfts_read\fP()  と \fBfts_children\fP()  が失敗した場合、 \fIerrno\fP は、ライブラリ関数
\fBchdir\fP(2), \fBmalloc\fP(3), \fBopendir\fP(3), \fBreaddir\fP(3), \fBstat\fP(2)
に対して指定されるエラーに設定される。
.PP
更に、 \fBfts_children\fP(), \fBfts_open\fP(), \fBfts_set\fP()  が失敗した場合、 \fIerrno\fP
が次の値にされる。
.TP 
\fBEINVAL\fP
\fIoptions\fP or \fIinstr\fP was invalid.
.SH バージョン
これらの関数は、Linux では glibc2 から使用可能である。
.SH 属性
この節で使用されている用語の説明については、 \fBattributes\fP(7) を参照。
.TS
allbox;
lbw34 lb lb
l l l.
インターフェース	属性	値
T{
\fBfts_open\fP(),
\fBfts_set\fP(),
\fBfts_close\fP()
T}	Thread safety	MT\-Safe
T{
\fBfts_read\fP(),
\fBfts_children\fP()
T}	Thread safety	MT\-Unsafe
.TE
.sp 1
.SH 準拠
4.4BSD.
.SH バグ
.\" Fixed by commit 8b7b7f75d91f7bac323dd6a370aeb3e9c5c4a7d5
.\" https://sourceware.org/bugzilla/show_bug.cgi?id=15838
.\" https://sourceware.org/bugzilla/show_bug.cgi?id=11460
.\"
.\" The following statement is years old, and seems no closer to
.\" being true -- mtk
.\" The
.\" .I fts
.\" utility is expected to be included in a future
.\" POSIX.1
.\" revision.
In versions of glibc before 2.23, all of the APIs described in this man page
are not safe when compiling a program using the LFS APIs (e.g., when
compiling with \fI\-D_FILE_OFFSET_BITS=64\fP).
.SH 関連項目
\fBfind\fP(1), \fBchdir\fP(2), \fBstat\fP(2), \fBftw\fP(3), \fBqsort\fP(3)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
