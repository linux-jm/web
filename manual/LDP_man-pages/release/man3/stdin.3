.\" From dholland@burgundy.eecs.harvard.edu Tue Mar 24 18:08:15 1998
.\"
.\" This man page was written in 1998 by David A. Holland
.\" Polished a bit by aeb.
.\"
.\" %%%LICENSE_START(PUBLIC_DOMAIN)
.\" Placed in the Public Domain.
.\" %%%LICENSE_END
.\"
.\" 2005-06-16 mtk, mentioned freopen()
.\" 2007-12-08, mtk, Converted from mdoc to man macros
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 1998 NAKANO Takeo all rights reserved.
.\" Translated 1998-03-22, NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\" Updated 2005-09-04, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\"
.TH STDIN 3 2017\-09\-15 Linux "Linux Programmer's Manual"
.SH 名前
stdin, stdout, stderr \- 標準入出力ストリーム
.SH 書式
.nf
\fB#include <stdio.h>\fP
.PP
\fBextern FILE *\fP\fIstdin\fP\fB;\fP
\fBextern FILE *\fP\fIstdout\fP\fB;\fP
\fBextern FILE *\fP\fIstderr\fP\fB;\fP
.fi
.SH 説明
標準の環境では、 UNIX プログラムは起動時に、オープンされているストリー ムを 3 つ与えられる。それぞれ入力用、出力用、診断メッセージやエラーメッ
セージの表示用のものである。これらは通常ユーザーの端末 (\fBtty\fP(4) を参照) に接続されているが、親プロセスでの選択・設定によってファイル
や他のデバイスに関連づけられていることもある (\fBsh\fP(1)  の「リダイレクション」セクションも参照のこと)。
.PP
入力ストリームは "standard input" と呼ばれる。出力ストリームは "standard output"、エラーストリームは
"standard error" と呼ばれる。 これらの用語を短縮したものがそれぞれのファイルを示すシンボルとなる。つ まり \fIstdin\fP,
\fIstdout\fP, \fIstderr\fP である。
.PP
これらのシンボルは \fBstdio\fP(3)  のマクロで、 FILE へのポインター型である。したがって \fBfprintf\fP(3)  や
\fBfread\fP(3)  などの関数とともに用いることができる。
.PP
\fIFILE\fP は UNIX のファイルディスクリプターにバッファー機能を追加したラッパー であるから、これらのマクロにも対応するファイルがあり、
UNIX の raw ファ イルインターフェース (\fBread\fP(2)  や \fBlseek\fP(2)  など) によってアクセスすることもできる。
.PP
プログラムの起動時には、 ストリーム \fIstdin\fP, \fIstdout\fP, \fIstderr\fP
に結びつけられているファイルディスクリプターの番号は、 それぞれ 0, 1, 2 である。 プリプロセッサシンボル \fBSTDIN_FILENO\fP,
\fBSTDOUT_FILENO\fP, \fBSTDERR_FILENO\fP は \fI<unistd.h>\fP
中でそれぞれこれらの値に定義されている。 (これらのストリームに対して \fBfreopen\fP(3)
を適用することで、そのストリームに関連付けられたファイルディスクリプター の番号を変更することができる。)
.PP
\fIFILE\fP と raw なファイルディスクリプターの併用は、予期できない結果を生じ ることがあるので、通常は避けるべきである。
(マゾヒスティックな人に: POSIX.1 のセクション 8.2.3 には、この混用で動作がどのようになりそう かが詳しく記述されている。)
一般的なルールは以下の通り: ファイルディスクリプターはカーネルによって 扱われ、 stdio は単にライブラリによって扱われるのである。すなわち例えば
\fBexec\fP(3)  の後には、子プロセスはオープンされているファイルディスクリプター
をすべて継承するが、親からのストリームはすべてアクセス不可となる。
.PP
シンボル \fIstdin\fP, \fIstdout\fP, \fIstderr\fP はすべてマクロとして定義されているので、これらへの代入
は移植性を保証されない。標準ストリームはライブラリ関数 \fBfreopen\fP(3)  を用いれば、別のファイルを示すように変更することもできる。
このライブラリ関数は \fIstdin\fP, \fIstdout\fP, \fIstderr\fP の再割り当てが可能なように特別に導入されたものである。
標準ストリームは \fBexit\fP(3)  の呼び出しと、プログラムの正常終了によってクローズされる。
.SH 準拠
\fIstdin\fP, \fIstdout\fP, \fIstderr\fP マクロは C89 に準拠している。 また C89 では、これら 3
つのストリームがプログラム の起動時にオープンされているべきであることが規定されている。
.SH 注意
\fIstderr\fP ストリームはバッファーリングされていない。 \fIstdout\fP ストリームは、端末に接続されているときには行単位でバッファーリング
されている。一行に満たない内容は、 \fBfflush\fP(3)  か \fBexit\fP(3)
が呼び出されるか、改行文字が印字されるまで表示されない。これは、 特にデバッグ時において、予期しない結果を生じる原因となるかもしれない。
標準ストリームの (あるいは他のすべてのストリームの)  バッファーリングモードは、 \fBsetbuf\fP(3)  または \fBsetvbuf\fP(3)
を呼び出すことによって変更できる。 ただし、 \fIstdin\fP が端末に接続されているときは、端末のドライバでバッファーリングされている
可能性がある点にも注意すること。これは stdio のバッファーリングとは全く 関係なく存在しうる。 (実際、通常だと端末入力はカーネルによって行単位
でバッファーリングされている。) このカーネルによる入力の扱いは \fBtcsetattr\fP(3)  などの呼び出しによって変更することができる。
\fBstty\fP(1)  と \fBtermios\fP(3)  も参照すること。
.SH 関連項目
\fBcsh\fP(1), \fBsh\fP(1), \fBopen\fP(2), \fBfopen\fP(3), \fBstdio\fP(3)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
