.\" Copyright (c) 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"	@(#)daemon.3	8.1 (Berkeley) 6/9/93
.\" Added mentioning of glibc weirdness wrt unistd.h. 5/11/98, Al Viro
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 2000-2001 Yuichi SATO
.\"         all rights reserved.
.\" Translated Tue Jun 27 10:54:22 JST 2000
.\"         by Yuichi SATO <sato@complex.eng.hokudai.ac.jp>
.\" Updated & Modified Mon Jan 14 06:50:04 JST 2002
.\"         by Yuichi SATO <ysato@h4.dion.ne.jp>
.\"
.TH DAEMON 3 2017\-11\-26 GNU "Linux Programmer's Manual"
.SH 名前
daemon \- バックグラウンドで動作させる
.SH 書式
\fB#include <unistd.h>\fP
.PP
\fBint daemon(int \fP\fInochdir\fP\fB, int \fP\fInoclose\fP\fB);\fP
.PP
.RS -4
glibc 向けの機能検査マクロの要件 (\fBfeature_test_macros\fP(7)  参照):
.RE
.PP
\fBdaemon\fP():
.nf
.\"             commit 266865c0e7b79d4196e2cc393693463f03c90bd8
    glibc 2.21 以降:
        _DEFAULT_SOURCE
    glibc 2.19 と 2.20:
        _DEFAULT_SOURCE || (_XOPEN_SOURCE && _XOPEN_SOURCE\ <\ 500)
    glibc 2.19 以前:
        _BSD_SOURCE || (_XOPEN_SOURCE && _XOPEN_SOURCE\ <\ 500)
.fi
.SH 説明
\fBdaemon\fP()  は、制御端末から分離させてシステムデーモンとして動作させたい プログラムのための関数である。
.PP
\fInochdir\fP が 0 の場合、 \fBdaemon\fP()  はプロセスの現在の作業ディレクトリ (current working
directory)  をルートディレクトリ ("/") に変更する。 それ以外の場合、現在の作業ディレクトリは変更されない。
.PP
\fInoclose\fP が 0 の場合、 \fBdaemon\fP()  は標準入力・標準出力・標準エラーを \fI/dev/null\fP にリダイレクトする。
それ以外の場合、これらのファイルディスクリプターは変更されない。
.SH 返り値
.\" not .IR in order not to underline _
(この関数が fork して \fBfork\fP(2)  が成功すると、親プロセスでは \fB_exit\fP(2)
を呼び出すので、これ以降のエラーは子プロセスからしか見れない)。 成功した場合、 \fBdaemon\fP()  は 0 を返す。 エラーが起こった場合、
\fBdaemon\fP()  は \-1 を返す。 さらに、 \fIerrno\fP に \fBfork\fP(2)  と \fBsetsid\fP(2)
に関して規定されたエラーを設定する。
.SH 属性
この節で使用されている用語の説明については、 \fBattributes\fP(7) を参照。
.TS
allbox;
lb lb lb
l l l.
インターフェース	属性	値
T{
\fBdaemon\fP()
T}	Thread safety	MT\-Safe
.TE
.SH 準拠
POSIX.1 にはない。 同様の関数が BSD には見られる。 \fBdaemon\fP()  関数は 4.4BSD で始めて登場した。
.SH 注意
The glibc implementation can also return \-1 when \fI/dev/null\fP exists but is
not a character device with the expected major and minor numbers.  In this
case, \fIerrno\fP need not be set.
.SH バグ
.\" FIXME . https://sourceware.org/bugzilla/show_bug.cgi?id=19144
.\" Tested using a program that uses daemon() and then opens an
.\" otherwise unused console device (/dev/ttyN) that does not
.\" have an associated getty process.
The GNU C library implementation of this function was taken from BSD, and
does not employ the double\-fork technique (i.e., \fBfork\fP(2), \fBsetsid\fP(2),
\fBfork\fP(2))  that is necessary to ensure that the resulting daemon process
is not a session leader.  Instead, the resulting daemon \fIis\fP a session
leader.  On systems that follow System V semantics (e.g., Linux), this means
that if the daemon opens a terminal that is not already a controlling
terminal for another session, then that terminal will inadvertently become
the controlling terminal for the daemon.
.SH 関連項目
\fBfork\fP(2), \fBsetsid\fP(2), \fBdaemon\fP(7), \fBlogrotate\fP(8)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
