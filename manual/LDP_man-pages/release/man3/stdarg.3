.\" Copyright (c) 1990, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" the American National Standards Committee X3, on Information
.\" Processing Systems.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"	@(#)stdarg.3	6.8 (Berkeley) 6/29/91
.\"
.\" Converted for Linux, Mon Nov 29 15:11:11 1993, faith@cs.unc.edu
.\" Additions, 2001-10-14, aeb
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 1998 NAKANO Takeo all rights reserved.
.\" Translated Fri Mar 22 1998 by NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\" Updated Tue Oct 16 2001 by Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2013-05-06, Akihiro MOTOKI <amotoki@gmail.com>
.\"
.TH STDARG 3 " 2020\-11\-01" "" "Linux Programmer's Manual"
.SH 名前
stdarg, va_start, va_arg, va_end, va_copy \- 個数、型が可変な引数リスト
.SH 書式
\fB#include <stdarg.h>\fP
.PP
\fBvoid va_start(va_list \fP\fIap\fP\fB, \fP\fIlast\fP\fB);\fP
.br
\fItype\fP\fB va_arg(va_list \fP\fIap\fP\fB, \fP\fItype\fP\fB);\fP
.br
\fBvoid va_end(va_list \fP\fIap\fP\fB);\fP
.br
\fBvoid va_copy(va_list \fP\fIdest\fP\fB, va_list \fP\fIsrc\fP\fB);\fP
.SH 説明
関数は呼び出しに際して、個数や型が可変な引数をとることができる。 インクルードファイル \fI<stdarg.h>\fP では
\fIva_list\fP 型が宣言されており、3 つのマクロが定義されている。これらを用いると、
呼び出された関数側では個数や型を知らない引数のリストを、順に一 つづつ読み込むことができる。
.PP
呼び出される関数では、 \fIva_list\fP 型のオブジェクトが宣言されていなければならない。このオブジェクトが \fBva_start\fP(),
\fBva_arg\fP(), \fBva_end\fP()  の各マクロによって扱われる。
.SS va_start()
\fBva_start\fP()  マクロは最初に呼び出さなければならない。これは \fIap\fP を初期化し、 \fBva_arg\fP()  と
\fBva_end\fP()  で用いることができるようにする。
.PP
引数 \fIlast\fP は引数リストのうち、可変な部分の直前に置かれる引数の名前であ る。つまり呼び出された関数が型を知っている最後の引数である。
.PP
この引数はレジスター変数や関数、配列として 宣言してはならない。この引数のアドレスが \fBva_start\fP()
マクロで用いられるかもしれないからである。
.SS va_arg()
\fBva_arg\fP()  マクロは、呼び出し時に指定された引数のうち、 次の位置にあるものを指定した型 \fItype\fP の値として取得する。 引数
\fIap\fP は \fIva_list\fP \fIap\fP で、 \fBva_start\fP()  によって初期化されている必要がある。 \fBva_arg\fP()
を呼び出すごとに \fIap\fP は変更され、次回の呼び出しの際に、さらに次の引数を返すようになる。 引数 \fItype\fP は型の名前で、 \fItype\fP
の後ろに * を付けるだけで、指定した型を持つオブジェクトへのポインターの型を取得できる必要がある。
.PP
\fBva_start\fP()  マクロの直後に \fBva_arg\fP()  を最初に実行すると、 \fIlast\fP
の次の引数が返る。続けて実行すると、残りの引数がそれぞれ返る。
.PP
次の引数がなかったり、 \fItype\fP が次の引数の実際の型と互換でない場合 (デフォルトの引数変換で扱 えなかった場合)
には、予測できないエラーが起こる。
.PP
\fIap\fP が \fBva_arg(\fP\fIap\fP\fB,\fP\fItype\fP\fB)\fP の形で関数に渡されると、 \fIap\fP
の値は関数から返って来た後は不定となる。
.SS va_end()
\fBva_start\fP()  が実行される毎に、同じ関数内で対応する \fBva_end\fP()  が実行されなければならない。
\fBva_end(\fP\fIap\fP\fB)\fP が呼び出された後、変数 \fIap\fP の値は不定となる。 \fBva_start\fP()  と \fBva_end\fP()
の組を何回も並べて使うことも可能である。 \fBva_end\fP()  はマクロかもしれないし関数かもしれない。
.SS va_copy()
\fBva_copy\fP() マクロは (初期化済みの) 可変長引数リスト \fIsrc\fP を \fIdest\fP にコピーする。動作は、 \fIlast\fP 引数に
\fIdest\fP を渡して \fBva_start\fP() を \fIdest\fP に適用し、それから \fIsrc\fP
が現在の状態に達するまでに呼び出したのと同じ回数だけ \fBva_arg\fP() を呼び出す、のと同じことを行う。
.PP
.\" Proposal from clive@demon.net, 1997-02-28
すぐ分かる \fIva_list\fP の実装は、variadic な関数のスタックフレームのポインターである。 このような場合(ほとんどはそうである)、
単に以下のようにすればいいように思える。
.PP
.in +4n
.EX
va_list aq = ap;
.EE
.in
.PP
残念ながら、(長さ 1の)ポインターの配列として扱うシステムもある。 そのような場合、以下のようにする必要がある。
.PP
.in +4n
.EX
va_list aq;
*aq = *ap;
.EE
.in
.PP
最後に、引数をレジスターで渡すシステムの場合、 \fBva_start\fP()  でメモリーを割り当て、引数を格納し、
次の引数がどれかを指し示すようにする必要がある。 そして \fBva_arg\fP()  でリストを順番にたどり、 \fBva_end\fP()
で割り当てたメモリーを開放する。 このような状況に対応するため、C99 では \fBva_copy\fP()  マクロを追加し、
前述のような割り当ては以下のように置き換えられるようにした。
.PP
.in +4n
.EX
va_list aq;
va_copy(aq, ap);
\&...
va_end(aq);
.EE
.in
.PP
\fBva_copy\fP()  が実行されるごとに、 対応する \fBva_end\fP()  を同じ関数内で実行しなければならない。 この名前はまだ draft
proposal なので、 \fBva_copy\fP()  の代わりに \fB__va_copy\fP を用いるシステムもある。
.SH 属性
この節で使用されている用語の説明については、 \fBattributes\fP(7) を参照。
.TS
allbox;
lbw21 lb lb
l l l.
インターフェース	属性	値
T{
\fBva_start\fP(),
\fBva_end\fP(),
\fBva_copy\fP()
T}	Thread safety	MT\-Safe
T{
\fBva_arg\fP()
T}	Thread safety	MT\-Safe race:ap
.TE
.SH 準拠
\fBva_start\fP(), \fBva_arg\fP(), \fBva_end\fP()  マクロは C89 準拠である。 \fBva_copy\fP()  は C99
で定義されている。
.SH バグ
Unlike the historical \fBvarargs\fP macros, the \fBstdarg\fP macros do not permit
programmers to code a function with no fixed arguments.  This problem
generates work mainly when converting \fBvarargs\fP code to \fBstdarg\fP code, but
it also creates difficulties for variadic functions that wish to pass all of
their arguments on to a function that takes a \fIva_list\fP argument, such as
\fBvfprintf\fP(3).
.SH 例
関数 \fIfoo\fP は書式文字からなる文字列を受け入れ、その書式文字に対応する型で可変個の 引数を読み込み、印字する。
.PP
.EX
#include <stdio.h>
#include <stdarg.h>

void
foo(char *fmt, ...)   /* \(aq...\(aq is C syntax for a variadic function */

 {
    va_list ap;
    int d;
    char c;
    char *s;

    va_start(ap, fmt);
    while (*fmt)
        switch (*fmt++) {
        case \(aqs\(aq:              /* string */
            s = va_arg(ap, char *);
            printf("string %s\en", s);
            break;
        case \(aqd\(aq:              /* int */
            d = va_arg(ap, int);
            printf("int %d\en", d);
            break;
        case \(aqc\(aq:              /* char */
            /* need a cast here since va_arg only
               takes fully promoted types */
            c = (char) va_arg(ap, int);
            printf("char %c\en", c);
            break;
        }
    va_end(ap);
}
.EE
.SH 関連項目
 \fBvprintf\fP(3), \fBvscanf\fP(3), \fBvsyslog\fP(3)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
