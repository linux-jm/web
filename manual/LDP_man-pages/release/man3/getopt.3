.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\" and Copyright 2006-2008, Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 19:27:50 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Mon Aug 30 22:02:34 1995 by Jim Van Zandt <jrv@vanzandt.mv.com>
.\"  longindex is a pointer, has_arg can take 3 values, using consistent
.\"  names for optstring and longindex, "\n" in formats fixed.  Documenting
.\"  opterr and getopt_long_only.  Clarified explanations (borrowing heavily
.\"  from the source code).
.\" Modified 8 May 1998 by Joseph S. Myers (jsm28@cam.ac.uk)
.\" Modified 990715, aeb: changed `EOF' into `-1' since that is what POSIX
.\"  says; moreover, EOF is not defined in <unistd.h>.
.\" Modified 2002-02-16, joey: added information about nonexistent
.\"  option character and colon as first option character
.\" Modified 2004-07-28, Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Added text to explain how to order both '[-+]' and ':' at
.\"		the start of optstring
.\" Modified 2006-12-15, mtk, Added getopt() example program.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 1998 NAKANO Takeo all rights reserved.
.\" Translated 1998-08-12, NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\" Updated & Modified 1999-08-21, NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\" Updated & Modified 2001-07-01, Yuichi SATO <ysato@h4.dion.ne.jp>
.\" Updated & Modified 2002-03-23, Yuichi SATO
.\" Updated & Modified 2003-09-07, Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated & Modified 2005-01-10, Yuichi SATO
.\" Updated & Modified 2005-10-28, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated & Modified 2006-01-18, Akihiro MOTOKI
.\" Updated & Modified 2007-05-01, Akihiro MOTOKI, LDP v2.46
.\" Updated 2008-08-11, Akihiro MOTOKI, LDP v3.05
.\"
.TH GETOPT 3 2020\-06\-09 GNU "Linux Programmer's Manual"
.SH 名前
getopt, getopt_long, getopt_long_only, optarg, optind, opterr, optopt \-
コマンドラインオプションを解釈する
.SH 書式
.nf
\fB#include <unistd.h>\fP
.PP
\fBint getopt(int \fP\fIargc\fP\fB, char * const \fP\fIargv[]\fP\fB,\fP
\fB           const char *\fP\fIoptstring\fP\fB);\fP
.PP
\fBextern char *\fP\fIoptarg\fP\fB;\fP
\fBextern int \fP\fIoptind\fP\fB, \fP\fIopterr\fP\fB, \fP\fIoptopt\fP\fB;\fP
.PP
\fB#include <getopt.h>\fP
.PP
\fBint getopt_long(int \fP\fIargc\fP\fB, char * const \fP\fIargv[]\fP\fB,\fP
\fB           const char *\fP\fIoptstring\fP\fB,\fP
\fB           const struct option *\fP\fIlongopts\fP\fB, int *\fP\fIlongindex\fP\fB);\fP
.PP
\fBint getopt_long_only(int \fP\fIargc\fP\fB, char * const \fP\fIargv[]\fP\fB,\fP
\fB           const char *\fP\fIoptstring\fP\fB,\fP
\fB           const struct option *\fP\fIlongopts\fP\fB, int *\fP\fIlongindex\fP\fB);\fP
.fi
.PP
.RS -4
glibc 向けの機能検査マクロの要件 (\fBfeature_test_macros\fP(7)  参照):
.ad l
.RE
.PP
\fBgetopt\fP(): _POSIX_C_SOURCE\ >=\ 2 || _XOPEN_SOURCE
.br
\fBgetopt_long\fP(), \fBgetopt_long_only\fP(): _GNU_SOURCE
.ad b
.SH 説明
\fBgetopt\fP()  関数はコマンドライン引数を解釈する。 \fBgetopt\fP()  がとる引数 \fIargc\fP と \fIargv\fP
は、それぞれプログラムの起動時に \fImain\fP()  関数に渡された引数の個数と配列である。 \fIargv\fP の要素のうち \(aq\-\(aq
で始まるもの (かつ "\-" 単独や "\-\-" 単独ではないもの) は オプション要素 (option element) とみなされる。
この要素から先頭の \(aq\-\(aq を除いた文字は オプション文字 (option character) とされる。 \fBgetopt\fP()
は、繰り返し呼び出されるごとに、次のオプション文字を返す。
.PP
変数 \fIoptind\fP は、 \fIargv\fP の次に処理される要素のインデックスである。 システムによりこの変数の値は 1 に初期化される。
呼び出し側でこの値を 1 にリセットすることで、同じ \fIargv\fP のスキャンをやり直したり、新しい引数ベクトルをスキャンすることができる。
.PP
新たなオプション文字を見つけると、 \fBgetopt\fP()  はその文字を返し、 外部変数 \fIoptind\fP とスタティックな変数
\fInextchar\fP を更新する。 これらによって、 \fBgetopt\fP()  は次回の呼び出しの際に、 以降のオプション文字や \fIargv\fP
要素のスキャンを継続できる。
.PP
オプション文字がそれ以上見つからなくなると、 \fBgetopt\fP()  は \-1 を返す。そして \fIoptind\fP は、\fIargv\fP の要素のうち、
オプションでない最初の要素を示すようになる。
.PP
\fIoptstring\fP は受け付けるオプション文字からなる文字列である。 文字のあとにコロン (:) が置かれている場合は、
オプションには引数が必要であることを示す。 このとき \fBgetopt\fP()  は、現在注目している \fIargv\fP
要素で、オプション文字に引き続くテキストへのポインターか、 あるいは次の \fIargv\fP 要素のテキストへのポインターを \fIoptarg\fP
に代入する。 2 個連続してコロンが置かれている場合は、 そのオプションは引数をとってもとらなくてもよい。 現在の \fIargv\fP
要素にテキストがあれば (つまり、"\-oarg" のように、オプション名自身と同じワード内に テキストがある場合)、それが \fIoptarg\fP
に返される。 なければ \fIoptarg\fP は 0 に設定される。 これは GNU による拡張である。 \fIoptstring\fP に \fBW\fP
とそれに続くセミコロンが入っていると、 \fB\-W foo\fP は長いオプション \fB\-\-foo\fP と同じように扱われる (POSIX.2 は \fB\-W\fP
オプションを実装依存の拡張として予約している)。 この動作は GNU による拡張であり、glibc 2 以前のライブラリでは 利用できない。
.PP
デフォルトでは \fBgetopt\fP()  は \fIargv\fP をスキャンする際に順序を変更し、 オプション以外の要素を最後に移動する。 他にも 2
つのスキャンモードが実装されている。 \fIoptstring\fP の先頭文字が \(aq+\(aq であるか、環境変数
\fBPOSIXLY_CORRECT\fP が設定されている場合には、オプションを対象とする動作は、 非オプションの引数が現れた段階で終了する。
\fIoptstring\fP の先頭文字が \(aq\-\(aq である場合には、 オプションでない \fIargv\fP 要素は、 文字コード 1
のオプションであるかのように扱われる (これを用いるプログラムは、 オプションや \fIargv\fP 要素を任意の順序で受け入れ、かつそれらの順序が
意味を持つように書かれている必要がある)。 "\-\-" は特殊な引数で、スキャンのモードによらず、 オプションのスキャンを強制的に終了させる。
.PP
While processing the option list, \fBgetopt\fP()  can detect two kinds of
errors: (1) an option character that was not specified in \fIoptstring\fP and
(2) a missing option argument (i.e., an option at the end of the command
line without an expected argument).  Such errors are handled and reported as
follows:
.IP * 3
By default, \fBgetopt\fP()  prints an error message on standard error, places
the erroneous option character in \fIoptopt\fP, and returns \(aq?\(aq as the
function result.
.IP *
If the caller has set the global variable \fIopterr\fP to zero, then
\fBgetopt\fP()  does not print an error message.  The caller can determine that
there was an error by testing whether the function return value is
\(aq?\(aq.  (By default, \fIopterr\fP has a nonzero value.)
.IP *
.\"
If the first character (following any optional \(aq+\(aq or \(aq\-\(aq
described above)  of \fIoptstring\fP is a colon (\(aq:\(aq), then \fBgetopt\fP()
likewise does not print an error message.  In addition, it returns \(aq:\(aq
instead of \(aq?\(aq to indicate a missing option argument.  This allows the
caller to distinguish the two different types of errors.
.SS "getopt_long() と getopt_long_only()"
\fBgetopt_long\fP()  関数は、長いオプション (2 つのダッシュ "\-\-" で始まるオプション) を 受け入れることを除いて
\fBgetopt\fP()  と同じように動作する (プログラムに長いオプションだけが渡された場合、 \fIoptstring\fP は NULL
ではなく空文字列 ("") となる)。 長いオプションの名前は、他と重ならない範囲において短縮できる。
あるいは定義されたオプションに正確にマッチするものでも (当然) かまわない。 長いオプションは引数を取ることができ、 \fB\-\-arg=param\fP
または \fB\-\-arg param\fP と言う形式で指定する。
.PP
\fIlongopts\fP は \fIstruct option\fP の要素からなる配列の、先頭要素へのポインターである。 \fIstruct option\fP は
\fI<getopt.h>\fP で以下のように定義されている。
.PP
.in +4n
.EX
struct option {
    const char *name;
    int         has_arg;
    int        *flag;
    int         val;
};
.EE
.in
.PP
それぞれのフィールドの意味は以下の通り。
.TP 
\fIname\fP
長いオプションの名前。
.TP 
\fIhas_arg\fP
\fBno_argument\fP (または 0) なら、オプションは引数をとらない。 \fBrequired_argument\fP (または 1)
なら、オプションは引数を必要とする。 \fBoptional_argument\fP (または 2) なら、オプションは引数をとっても とらなくても良い。
.TP 
\fIflag\fP
長いオプションに対する結果の返し方を指定する。\fIflag\fP が NULL なら \fBgetopt_long\fP()  は \fIval\fP を返す
(例えば呼び出し元のプログラムは、 \fIval\fP に等価なオプション文字を代入することができる)。 NULL 以外の場合には、
\fBgetopt_long\fP()  は 0 を返す。 このときオプションが見つかると \fIflag\fP がポイントする変数に \fIval\fP
が代入される。見つからないとこの変数は変更されない。
.TP 
\fIval\fP
返り値、または \fIflag\fP がポイントする変数へロードされる値。
.PP
配列の最後の要素は、全て 0 で埋められていなければならない。
.PP
\fIlongindex\fP は、NULL でなければ、 長いオプションのインデックスを \fIlongopts\fP
からの相対位置として保持している変数へのポインターとなる。
.PP
\fBgetopt_long_only\fP()  は \fBgetopt_long\fP()  と同様の動作をするが、 \(aq\-\(aq も "\-\-"
と同様に、 長いオプションとして扱われる。\(aq\-\(aq で始まる ("\-\-" 以外の) オプションが、長いものにはマッチしないが短いものに
マッチする場合においては、それは短いオプションとして解釈される。
.SH 返り値
オプションが正常に見つかれば \fBgetopt\fP()  はそのオプション文字を返す。 すべてのコマンドラインオプションの解析が終わったら、
\fBgetopt\fP()  は \-1 を返す。 \fIoptstring\fP に含まれないオプション文字が見つかると、\(aq?\(aq を返す。
引数が足りないオプションが見つかった場合、 返り値は \fIoptstring\fP の最初の文字による異なる: 最初の文字が \(aq:\(aq であれば
\(aq:\(aq を返し、 それ以外の場合は \(aq?\(aq を返す。
.PP
\fBgetopt_long\fP()  と \fBgetopt_long_only\fP()  も、 短いオプション文字を認識した場合にはその文字を返す。
長いオプションに対しては、 \fIflag\fP が NULL なら \fIval\fP を返し、 \fIflag\fP が NULL 以外なら 0 を返す。 エラーと
\-1 の返り値は \fBgetopt\fP()  と同じである。 さらに \(aq?\(aq
は、マッチが確定できない場合や余分なパラメーターがある場合にも返る。
.SH 環境
.TP 
\fBPOSIXLY_CORRECT\fP
これが設定されていると、非オプションの引数に到達した時点でオプション に対する操作が停止される。
.TP 
\fB_<PID>_GNU_nonoption_argv_flags_\fP
この変数は \fBbash\fP(1)  2.0 が glibc と通信するために用いられた。 どの引数がワイルドカードを展開した結果で、
したがってオプションとみなすべきでないかを知らせるものである。 この機能は \fBbash\fP(1)  のバージョン 2.01 で削除されたが、glibc
にはまだ残っている。
.SH 属性
この節で使用されている用語の説明については、 \fBattributes\fP(7) を参照。
.TS
allbox;
lbw24 lb lb
l l l.
インターフェース	属性	値
T{
\fBgetopt\fP(),
\fBgetopt_long\fP(),
\fBgetopt_long_only\fP()
T}	Thread safety	MT\-Unsafe race:getopt env
.TE
.SH 準拠
.TP 
\fBgetopt\fP():
POSIX.1\-2001, POSIX.1\-2008, and POSIX.2, provided the environment variable
\fBPOSIXLY_CORRECT\fP is set.  Otherwise, the elements of \fIargv\fP aren't really
\fIconst\fP, because these functions permute them.  Nevertheless, \fIconst\fP is
used in the prototype to be compatible with other systems.
.IP
\fIoptstring\fP で \(aq+\(aq や \(aq\-\(aq を使うのは GNU による拡張である.
.IP
古い実装のいくつかでは、 \fBgetopt\fP()  は \fI<stdio.h>\fP で宣言されていた。 SUSv1 では、
\fI<unistd.h>\fP か \fI<stdio.h>\fP のどちらかで 宣言してもよかった。 POSIX.1\-1996
では、 \fBgetopt\fP の宣言を \fI<stdio.h>\fP で行うのは「過去の名残」であるとされた。 POSIX.1\-2001 では
\fI<stdio.h>\fP で宣言を行うことを要求していない。
.TP 
\fBgetopt_long\fP(), \fBgetopt_long_only\fP():
これらの関数は GNU による拡張である。
.SH 注意
複数の引数ベクトルをスキャンしたり、同じ引数ベクトルを二回以上 スキャンするようなプログラムで、 \fIoptstring\fP の先頭で \(aq+\(aq
や \(aq\-\(aq といった GNU による拡張機能を使用したり、 引数ベクトルの切り替え時に \fBPOSIXLY_CORRECT\fP
の値を変更したりする場合には、 \fIoptind\fP を伝統的な 1 ではなく 0 にリセットすることで \fBgetopt\fP()
を再初期化しなければならない (0 にリセットすることで、 \fBPOSIXLY_CORRECT\fP や \fIoptstring\fP の GNU
拡張機能のチェックを行う内部初期化ルーチンが起動される)。
.SH 例
.SS getopt()
以下に示す簡単なサンプルプログラムでは、 二種類のプログラムオプションを扱うのに \fBgetopt\fP()  を使用している。一つは値を伴わない
\fI\-n\fP で、もう一つは対応する値が必要な \fI\-t val\fP である。
.PP
.EX
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>

int
main(int argc, char *argv[])
{
    int flags, opt;
    int nsecs, tfnd;

    nsecs = 0;
    tfnd = 0;
    flags = 0;
    while ((opt = getopt(argc, argv, "nt:")) != \-1) {
        switch (opt) {
        case \(aqn\(aq:
            flags = 1;
            break;
        case \(aqt\(aq:
            nsecs = atoi(optarg);
            tfnd = 1;
            break;
        default: /* \(aq?\(aq */
            fprintf(stderr, "Usage: %s [\-t nsecs] [\-n] name\en",
                    argv[0]);
            exit(EXIT_FAILURE);
        }
    }

    printf("flags=%d; tfnd=%d; nsecs=%d; optind=%d\en",
            flags, tfnd, nsecs, optind);

    if (optind >= argc) {
        fprintf(stderr, "Expected argument after options\en");
        exit(EXIT_FAILURE);
    }

    printf("name argument = %s\en", argv[optind]);

    /* Other code omitted */

    exit(EXIT_SUCCESS);
}
.EE
.SS getopt_long()
以下は、 \fBgetopt_long\fP()  の使用法を、ほぼすべての機能について示したプログラムの例である。
.PP
.EX
#include <stdio.h>     /* for printf */
#include <stdlib.h>    /* for exit */
#include <getopt.h>

int
main(int argc, char **argv) {
    int c;
    int digit_optind = 0;

    while (1) {
        int this_option_optind = optind ? optind : 1;
        int option_index = 0;
        static struct option long_options[] = {
            {"add",     required_argument, 0,  0 },
            {"append",  no_argument,       0,  0 },
            {"delete",  required_argument, 0,  0 },
            {"verbose", no_argument,       0,  0 },
            {"create",  required_argument, 0, \(aqc\(aq},
            {"file",    required_argument, 0,  0 },
            {0,         0,                 0,  0 }
        };

        c = getopt_long(argc, argv, "abc:d:012",
                 long_options, &option_index);
        if (c == \-1)
            break;

        switch (c) {
        case 0:
            printf("option %s", long_options[option_index].name);
            if (optarg)
                printf(" with arg %s", optarg);
            printf("\en");
            break;

        case \(aq0\(aq:
        case \(aq1\(aq:
        case \(aq2\(aq:
            if (digit_optind != 0 && digit_optind != this_option_optind)
              printf("digits occur in two different argv\-elements.\en");
            digit_optind = this_option_optind;
            printf("option %c\en", c);
            break;

        case \(aqa\(aq:
            printf("option a\en");
            break;

        case \(aqb\(aq:
            printf("option b\en");
            break;

        case \(aqc\(aq:
            printf("option c with value \(aq%s\(aq\en", optarg);
            break;

        case \(aqd\(aq:
            printf("option d with value \(aq%s\(aq\en", optarg);
            break;

        case \(aq?\(aq:
            break;

        default:
            printf("?? getopt returned character code 0%o ??\en", c);
        }
    }

    if (optind < argc) {
        printf("non\-option ARGV\-elements: ");
        while (optind < argc)
            printf("%s ", argv[optind++]);
        printf("\en");
    }

    exit(EXIT_SUCCESS);
}
.EE
.SH 関連項目
\fBgetopt\fP(1), \fBgetsubopt\fP(3)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
