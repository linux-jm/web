.\" Copyright (c) 2016 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH PTHREAD_GETATTR_DEFAULT_NP 3 2020\-06\-09 Linux "Linux Programmer's Manual"
.SH 名前
pthread_getattr_default_np, pthread_setattr_default_np, \- get or set default
thread\-creation attributes
.SH 書式
.nf
\fB#define _GNU_SOURCE\fP             /* See feature_test_macros(7) */
\fB#include <pthread.h>\fP
.PP
\fBint pthread_getattr_default_np(pthread_attr_t *\fP\fIattr\fP\fB);\fP
\fBint pthread_setattr_default_np(pthread_attr_t *\fP\fIattr\fP\fB);\fP
.PP
\fI\-pthread\fP でコンパイルしてリンクする。
.fi
.SH 説明
The \fBpthread_setattr_default_np\fP()  function sets the default attributes
used for creation of a new thread\(emthat is, the attributes that are used
when \fBpthread_create\fP(3)  is called with a second argument that is NULL.
The default attributes are set using the attributes supplied in \fI*attr\fP, a
previously initialized thread attributes object.  Note the following details
about the supplied attributes object:
.IP * 3
The attribute settings in the object must be valid.
.IP *
The \fIstack address\fP attribute must not be set in the object.
.IP *
Setting the \fIstack size\fP attribute to zero means leave the default stack
size unchanged.
.PP
The \fBpthread_getattr_default_np\fP()  function initializes the thread
attributes object referred to by \fIattr\fP so that it contains the default
attributes used for thread creation.
.SH エラー
.TP 
\fBEINVAL\fP
(\fBpthread_setattr_default_np\fP())  One of the attribute settings in \fIattr\fP
is invalid, or the stack address attribute is set in \fIattr\fP.
.TP 
\fBENOMEM\fP
.\" Can happen (but unlikely) while trying to allocate memory for cpuset
(\fBpthread_setattr_default_np\fP())  Insufficient memory.
.SH バージョン
これらの関数は glibc バージョン 2.18 以降で利用できる。
.SH 属性
この節で使用されている用語の説明については、 \fBattributes\fP(7) を参照。
.ad l
.TS
allbox;
lbw30 lb lb
l l l.
インターフェース	属性	値
T{
\fBpthread_getattr_default_np\fP(),
\fBpthread_setattr_default_np\fP()
T}	Thread safety	MT\-Safe
.TE
.ad
.SH 準拠
これらの関数は非標準の GNU による拡張である。そのため、名前に "_np" (nonportable; 移植性がない) という接尾辞が付いている。
.SH 例
The program below uses \fBpthread_getattr_default_np\fP()  to fetch the default
thread\-creation attributes and then displays various settings from the
returned thread attributes object.  When running the program, we see the
following output:
.PP
.in +4n
.EX
$ \fB./a.out\fP
Stack size:          8388608
Guard size:          4096
Scheduling policy:   SCHED_OTHER
Scheduling priority: 0
Detach state:        JOINABLE
Inherit scheduler:   INHERIT
.EE
.in
.SS プログラムのソース
\&
.EX
#define _GNU_SOURCE
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>

#define errExitEN(en, msg) \e
                        do { errno = en; perror(msg); \e
                             exit(EXIT_FAILURE); } while (0)

static void
display_pthread_attr(pthread_attr_t *attr)
{
    int s;
    size_t stacksize;
    size_t guardsize;
    int policy;
    struct sched_param schedparam;
    int detachstate;
    int inheritsched;

    s = pthread_attr_getstacksize(attr, &stacksize);
    if (s != 0)
        errExitEN(s, "pthread_attr_getstacksize");
    printf("Stack size:          %zd\en", stacksize);

    s = pthread_attr_getguardsize(attr, &guardsize);
    if (s != 0)
        errExitEN(s, "pthread_attr_getguardsize");
    printf("Guard size:          %zd\en", guardsize);

    s = pthread_attr_getschedpolicy(attr, &policy);
    if (s != 0)
        errExitEN(s, "pthread_attr_getschedpolicy");
    printf("Scheduling policy:   %s\en",
            (policy == SCHED_FIFO) ? "SCHED_FIFO" :
            (policy == SCHED_RR) ? "SCHED_RR" :
            (policy == SCHED_OTHER) ? "SCHED_OTHER" : "[unknown]");

    s = pthread_attr_getschedparam(attr, &schedparam);
    if (s != 0)
        errExitEN(s, "pthread_attr_getschedparam");
    printf("Scheduling priority: %d\en", schedparam.sched_priority);

    s = pthread_attr_getdetachstate(attr, &detachstate);
    if (s != 0)
        errExitEN(s, "pthread_attr_getdetachstate");
    printf("Detach state:        %s\en",
            (detachstate == PTHREAD_CREATE_DETACHED) ? "DETACHED" :
            (detachstate == PTHREAD_CREATE_JOINABLE) ? "JOINABLE" :
            "???");

    s = pthread_attr_getinheritsched(attr, &inheritsched);
    if (s != 0)
        errExitEN(s, "pthread_attr_getinheritsched");
    printf("Inherit scheduler:   %s\en",
            (inheritsched == PTHREAD_INHERIT_SCHED) ? "INHERIT" :
            (inheritsched == PTHREAD_EXPLICIT_SCHED) ? "EXPLICIT" :
            "???");
}

int
main(int argc, char *argv[])
{
    int s;
    pthread_attr_t attr;

    s = pthread_getattr_default_np(&attr);
    if (s != 0)
        errExitEN(s, "pthread_getattr_default_np");

    display_pthread_attr(&attr);

    exit(EXIT_SUCCESS);
}
.EE
.SH 関連項目
.ad l
.nh
\fBpthread_attr_getaffinity_np\fP(3), \fBpthread_attr_getdetachstate\fP(3),
\fBpthread_attr_getguardsize\fP(3), \fBpthread_attr_getinheritsched\fP(3),
\fBpthread_attr_getschedparam\fP(3), \fBpthread_attr_getschedpolicy\fP(3),
\fBpthread_attr_getscope\fP(3), \fBpthread_attr_getstack\fP(3),
\fBpthread_attr_getstackaddr\fP(3), \fBpthread_attr_getstacksize\fP(3),
\fBpthread_attr_init\fP(3), \fBpthread_create\fP(3), \fBpthreads\fP(7)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
