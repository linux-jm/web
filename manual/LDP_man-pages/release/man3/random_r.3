.\" Copyright 2008 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 2008  Akihiro MOTOKI
.\"         all rights reserved.
.\" Translated 2008-08-21, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v3.04
.\"
.TH RANDOM_R 3 2017\-09\-15 GNU "Linux Programmer's Manual"
.SH 名前
random_r, srandom_r, initstate_r, setstate_r \- リエントラントな 乱数生成器
.SH 書式
.nf
\fB#include <stdlib.h>\fP
.PP
\fBint random_r(struct random_data *\fP\fIbuf\fP\fB, int32_t *\fP\fIresult\fP\fB);\fP
.PP
\fBint srandom_r(unsigned int \fP\fIseed\fP\fB, struct random_data *\fP\fIbuf\fP\fB);\fP
.PP
\fBint initstate_r(unsigned int \fP\fIseed\fP\fB, char *\fP\fIstatebuf\fP\fB,\fP
\fB                size_t \fP\fIstatelen\fP\fB, struct random_data *\fP\fIbuf\fP\fB);\fP
.PP
\fBint setstate_r(char *\fP\fIstatebuf\fP\fB, struct random_data *\fP\fIbuf\fP\fB);\fP
.fi
.PP
.RS -4
glibc 向けの機能検査マクロの要件 (\fBfeature_test_macros\fP(7)  参照):
.RE
.PP
.ad l
\fBrandom_r\fP(), \fBsrandom_r\fP(), \fBinitstate_r\fP(), \fBsetstate_r\fP():
.RS 4
/* glibc 2.19 以降: */ _DEFAULT_SOURCE
    || /* glibc 2.19 以前: */ _SVID_SOURCE || _BSD_SOURCE
.RE
.ad b
.SH 説明
これらの関数は、 \fBrandom\fP(3)  で説明されている関数のリエントラント版で、等価な機能を持つ。
これらは、独立した再現可能な乱数列を各スレッドが得る必要があるような マルチスレッドプログラムでの使用に適している。
.PP
The \fBrandom_r\fP()  function is like \fBrandom\fP(3), except that instead of
using state information maintained in a global variable, it uses the state
information in the argument pointed to by \fIbuf\fP, which must have been
previously initialized by \fBinitstate_r\fP().  The generated random number is
returned in the argument \fIresult\fP.
.PP
The \fBsrandom_r\fP()  function is like \fBsrandom\fP(3), except that it
initializes the seed for the random number generator whose state is
maintained in the object pointed to by \fIbuf\fP, which must have been
previously initialized by \fBinitstate_r\fP(), instead of the seed associated
with the global state variable.
.PP
The \fBinitstate_r\fP()  function is like \fBinitstate\fP(3)  except that it
initializes the state in the object pointed to by \fIbuf\fP, rather than
initializing the global state variable.  Before calling this function, the
\fIbuf.state\fP field must be initialized to NULL.  The \fBinitstate_r\fP()
function records a pointer to the \fIstatebuf\fP argument inside the structure
pointed to by \fIbuf\fP.  Thus, \fIstatebuf\fP should not be deallocated so long
as \fIbuf\fP is still in use.  (So, \fIstatebuf\fP should typically be allocated
as a static variable, or allocated on the heap using \fBmalloc\fP(3)  or
similar.)
.PP
The \fBsetstate_r\fP()  function is like \fBsetstate\fP(3)  except that it
modifies the state in the object pointed to by \fIbuf\fP, rather than modifying
the global state variable.  \fIstate\fP must first have been initialized using
\fBinitstate_r\fP()  or be the result of a previous call of \fBsetstate_r\fP().
.SH 返り値
これらの関数はすべて、成功すると 0 を返す。 エラーの場合、\-1 を返し、 \fIerrno\fP にエラーの原因を示す値がセットされる。
.SH エラー
.TP 
\fBEINVAL\fP
8 バイトより小さい状態配列が \fBinitstate_r\fP()  に指定された。
.TP 
\fBEINVAL\fP
\fBsetstate_r\fP()  の引数 \fIstatebuf\fP か \fIbuf\fP が NULL であった。
.TP 
\fBEINVAL\fP
\fBrandom_r\fP()  の引数 \fIbuf\fP か \fIresult\fP が NULL であった。
.SH 属性
この節で使用されている用語の説明については、 \fBattributes\fP(7) を参照。
.TS
allbox;
lbw27 lb lb
l l l.
インターフェース	属性	値
T{
\fBrandom_r\fP(),
\fBsrandom_r\fP(),
.br
\fBinitstate_r\fP(),
\fBsetstate_r\fP()
T}	Thread safety	MT\-Safe race:buf
.TE
.SH 準拠
.\" These functions appear to be on Tru64, but don't seem to be on
.\" Solaris, HP-UX, or FreeBSD.
これらの関数は非標準で glibc による拡張である。
.SH バグ
.\" FIXME . https://sourceware.org/bugzilla/show_bug.cgi?id=3662
The \fBinitstate_r\fP()  interface is confusing.  It appears that the
\fIrandom_data\fP type is intended to be opaque, but the implementation
requires the user to either initialize the \fIbuf.state\fP field to NULL or
zero out the entire structure before the call.
.SH 関連項目
\fBdrand48\fP(3), \fBrand\fP(3), \fBrandom\fP(3)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
