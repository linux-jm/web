.\" Copyright (C) 2001 Andries Brouwer <aeb@cwi.nl>.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" FIXME . There are a lot of other process termination actions that
.\" could be listed on this page. See, for example, the list in the
.\" POSIX exit(3p) page.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 1997 HORIMOTO Masafumi
.\"         all rights reserved.
.\" Translated 1997-09-10, HORIMOTO Masafumi
.\" Updated & Modified 2001-10-27, Yuichi SATO <ysato@h4.dion.ne.jp>
.\" Updated & Modified 2001-12-09, Yuichi SATO
.\" Updated & Modified 2005-09-06, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2007-06-18, Akihiro MOTOKI, LDP v2.57
.\" Updated 2013-05-01, Akihiro MOTOKI <amotoki@gmail.com>
.\"
.TH EXIT 3 2020\-02\-09 Linux "Linux Programmer's Manual"
.SH 名前
exit \- プロセスの正常終了
.SH 書式
.nf
\fB#include <stdlib.h>\fP
.PP
\fBvoid exit(int \fP\fIstatus\fP\fB);\fP
.fi
.SH 説明
\fBexit\fP() 関数は、プロセスを正常に終了させ、 \fIstatus\fP の最下位バイト (つまり \fIstatus & 0xFF\fP)
を親プロセスへ返す (\fBwait\fP(2) を参照)。
.PP
\fBatexit\fP(3)  や \fBon_exit\fP(3)  によって 登録された全ての関数は、それらが登録された順番と逆順にコールされる。
(登録された関数の中で \fBatexit\fP(3)  or \fBon_exit\fP(3)  を使って exit
処理中に実行される追加の関数を登録することができる; 新規に登録された関数は、この後で実行される関数リストの先頭に 追加される。)
これらの関数の一つが返らなかった場合 (例えば、その関数が \fB_exit\fP(2)  を呼び出したり、シグナルで自分自身を kill した場合)、
残りの関数はどれも呼び出されず、それ以降の exit 処理 (特に \fBstdio\fP(3)  ストリームのフラッシュなど) は中止される。 ある関数が
\fBatexit\fP(3)  や \fBon_exit\fP(3)  を使って複数回登録されていた場合、 その関数は登録されたのと同じ回数だけ呼び出される。
.PP
オープン中の \fBstdio\fP(3)  ストリームは全てフラッシュされて、クローズされる。 \fBtmpfile\fP(3)
によって作成されたファイルは削除される。
.PP
C 標準では \fBEXIT_SUCCESS\fP と \fBEXIT_FAILURE\fP という 2つの定数が
定義されている。それぞれ正常終了と異常終了を示すもので、 \fBexit\fP()  として渡すことができる。
.SH 返り値
\fBexit\fP()  関数は返らない。
.SH 属性
この節で使用されている用語の説明については、 \fBattributes\fP(7) を参照。
.TS
allbox;
lb lb lb
l l l.
インターフェース	属性	値
T{
\fBexit\fP()
T}	Thread safety	MT\-Unsafe race:exit
.TE
.PP
\fBexit\fP() 関数は保護されていないグローバル変数を使用しているため、スレッドセーフではない。
.SH 準拠
POSIX.1\-2001, POSIX.1\-2008, C89, C99, SVr4, 4.3BSD.
.SH 注意
\fBatexit\fP(3)  や \fBon_exit\fP(3)  を使って登録された関数の中で \fBexit\fP() か \fBlongjmp\fP(3)
が呼び出された場合、 動作は未定義である。 \fBexecve\fP(2) を呼び出すと、 \fBatexit\fP(3) や \fBon_exit\fP(3)
を使って登録された関数が削除される点に注意すること。
.PP
\fBEXIT_SUCCESS\fP と \fBEXIT_FAILURE\fP を使うと、0 や (1 や \-1 といった) 0 以外の値を使うのに比べて
(UNIX 以外の環境に) 移植するのがいくらか簡単になる。 特に VMS は別の方式を用いている。
.PP
BSD は終了コードを標準化しようとしている (GNU C ライブラリなどのいくつかの C ライブラリもこれを採用している);
\fI<sysexits.h>\fP を参照すること。
.PP
After \fBexit\fP(), the exit status must be transmitted to the parent process.
There are three cases:
.IP \(bu 3
If the parent has set \fBSA_NOCLDWAIT\fP, or has set the \fBSIGCHLD\fP handler to
\fBSIG_IGN\fP, the status is discarded and the child dies immediately.
.IP \(bu
If the parent was waiting on the child, it is notified of the exit status
and the child dies immediately.
.IP \(bu
Otherwise, the child becomes a "zombie" process: most of the process
resources are recycled, but a slot containing minimal information about the
child process (termination status, resource usage statistics) is retained in
process table.  This allows the parent to subsequently use \fBwaitpid\fP(2)
(or similar) to learn the termination status of the child; at that point the
zombie process slot is released.
.PP
.\"
\fBSIGCHLD\fP シグナルのサポートが実装されている場合、 このシグナルは親プロセスに送られる。 親プロセスが \fBSA_NOCLDWAIT\fP
を設定した場合、 \fBSIGCHLD\fP シグナルが送られるかどうかは定義されていない。
.SS "Signals sent to other processes"
終了するプロセスがセッションのリーダーで、 そのプロセスの制御端末がそのセッションの制御端末である場合、
この制御端末のフォアグラウンドプロセスグループにある 各プロセスに \fBSIGHUP\fP シグナルが送られ、端末がセッションから切り離される。
これにより新しい制御プロセスを取得することができる。
.PP
プロセスが終了することにより、プロセスグループが孤立して、 そのグループのメンバーのうちのどれかが停止した場合、 プロセスグループの各プロセスに対して
\fBSIGHUP\fP シグナルが送られ、続いて \fBSIGCONT\fP シグナルが送られる。 孤立した (orphaned) プロセスグループの説明は
\fBsetpgid\fP(2)  を参照。
.PP
Except in the above cases, where the signalled processes may be children of
the terminating process, termination of a process does \fInot\fP in general
cause a signal to be sent to children of that process.  However, a process
can use the \fBprctl\fP(2)  \fBPR_SET_PDEATHSIG\fP operation to arrange that it
receives a signal if its parent terminates.
.SH 関連項目
\fB_exit\fP(2), \fBget_robust_list\fP(2), \fBsetpgid\fP(2), \fBwait\fP(2), \fBatexit\fP(3),
\fBon_exit\fP(3), \fBtmpfile\fP(3)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
