.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sun Mar 28 00:25:51 1993, David Metcalfe
.\" Modified Sat Jul 24 18:13:39 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Sun Aug 20 21:47:07 2000, aeb
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 1997 YOSHINO Takashi
.\"       all rights reserved.
.\" Translated 1997-01-21, YOSHINO Takashi <yoshino@civil.jcn.nihon-u.ac.jp>
.\" Updated 2008-08-08, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2013-07-24, Akihiro MOTOKI <amotoki@gmail.com>
.\"
.TH RANDOM 3 2020\-11\-01 GNU "Linux Programmer's Manual"
.SH 名前
random, srandom, initstate, setstate \- 乱数を生成する関数
.SH 書式
.nf
\fB#include <stdlib.h>\fP
.PP
\fBlong random(void);\fP
.PP
\fBvoid srandom(unsigned \fP\fIseed\fP\fB);\fP
.PP
\fBchar *initstate(unsigned \fP\fIseed\fP\fB, char *\fP\fIstate\fP\fB, size_t \fP\fIn\fP\fB);\fP
.PP
\fBchar *setstate(char *\fP\fIstate\fP\fB);\fP
.fi
.PP
.RS -4
glibc 向けの機能検査マクロの要件 (\fBfeature_test_macros\fP(7)  参照):
.RE
.PP
.ad l
\fBrandom\fP(), \fBsrandom\fP(), \fBinitstate\fP(), \fBsetstate\fP():
.RS 4
.\"    || _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
_XOPEN_SOURCE\ >=\ 500
    || /* Glibc since 2.19: */ _DEFAULT_SOURCE
    || /* Glibc versions <= 2.19: */ _SVID_SOURCE || _BSD_SOURCE
.RE
.ad
.SH 説明
\fBrandom\fP()  関数は、非線形加法フィードバックを用いた乱数生成関数である。 この関数は、0 から 2^31\ \-\ 1
までの疑似乱数を返す。 そのために 31 個のロング整数からなるデフォルトの表を使用する。 この乱数を生成する関数の周期はとても長く、およそ \fI16\ *\ ((2^31)\ \-\ 1)\fP である。
.PP
\fBsrandom\fP()  関数は、 \fBrandom\fP()  で返される疑似乱数整数系列の種を設定する。 そのためには新しい種を引数にして
\fBsrandom\fP()  を呼べばよい。 \fBrandom\fP()  で生成される系列は、 引数に同じ種の値を用いて \fBsrandom\fP()
を呼ぶことで再現可能である。 種の値が与えられない場合には \fBrandom\fP()  関数は、自動的に 1 を種に設定する。
.PP
The \fBinitstate\fP()  function allows a state array \fIstate\fP to be initialized
for use by \fBrandom\fP().  The size of the state array \fIn\fP is used by
\fBinitstate\fP()  to decide how sophisticated a random number generator it
should use\(emthe larger the state array, the better the random numbers will
be.  Current "optimal" values for the size of the state array \fIn\fP are 8,
32, 64, 128, and 256 bytes; other amounts will be rounded down to the
nearest known amount.  Using less than 8 bytes results in an error.  \fIseed\fP
is the seed for the initialization, which specifies a starting point for the
random number sequence, and provides for restarting at the same point.
.PP
\fBsetstate\fP()  関数は、 \fBrandom\fP()  で使用される状態配列を変更する。 状態配列 \fIstate\fP は、
\fBinitstate\fP()  または \fBsetstate\fP()  が 次に呼び出されるまで、乱数の生成に使用される。 \fIstate\fP は
\fBinitstate\fP()  を用いて最初に初期化されているか、 以前に呼び出した \fBsetstate\fP()  の結果でなければならない。
.SH 返り値
関数 \fBrandom\fP() と \fBrand_r\fP() は 0 以上 \fI(2^31)\ \-\ 1\fP 以下の数を返す。関数 \fBsrandom\fP()
は値を返さない。
.PP
関数 \fBinitstate\fP() は、変更前の状態配列へのポインターを返す。エラーの場合、 \fIerrno\fP に原因を示す値が設定される。
.PP
関数 \fBsetstate\fP() は、成功すると 0 を返す。 エラーの場合、\-1 を返し、 \fIerrno\fP にエラーの原因を示す値が設定される。
.SH エラー
.TP 
\fBEINVAL\fP
\fBsetstate\fP() の引数 \fIstate\fP が NULL であった。
.TP 
\fBEINVAL\fP
\fBinitstate\fP()  で8バイトよりも小さい状態配列を指定した。
.SH 属性
この節で使用されている用語の説明については、 \fBattributes\fP(7) を参照。
.TS
allbox;
lbw23 lb lb
l l l.
インターフェース	属性	値
T{
\fBrandom\fP(),
\fBsrandom\fP(),
.br
\fBinitstate\fP(),
\fBsetstate\fP()
T}	Thread safety	MT\-Safe
.TE
.SH 準拠
POSIX.1\-2001, POSIX.1\-2008, 4.3BSD.
.SH 注意
The \fBrandom\fP()  function should not be used in multithreaded programs where
reproducible behavior is required.  Use \fBrandom_r\fP(3)  for that purpose.
.PP
乱数の生成は複雑な話題である。 \fINumerical Recipes in C: The Art of Scientific Computing\fP
(William H.\& Press, Brian P.\& Flannery, Saul A.\& Teukolsky, William T.\&
Vetterling; New York: Cambridge University Press, 2007, 3rd ed.)
では実用的な乱数生成を論点とした優れた議論が第 7 章 (乱数) で展開されている。
.PP
より理論的な議論については Donald E.\& Knuth の \fIThe Art of Computer Programming\fP, volume
2 (Seminumerical Algorithms), 2nd ed.; Reading, Massachusetts:
Addison\-Wesley Publishing Company, 1981 の第 3 章 (乱数) を見よ。ここでは、
たくさんの実用的な話題についても深く網羅されている。
.SH バグ
.\" http://sourceware.org/bugzilla/show_bug.cgi?id=15380
POSIX では、エラー時に \fBinitstate\fP() は NULL を返すべきとされている。 glibc の実装では、エラー時に \fIerrno\fP
は仕様通りに設定されるが、関数の返り値は NULL ではない。
.SH 関連項目
\fBgetrandom\fP(2), \fBdrand48\fP(3), \fBrand\fP(3), \fBrandom_r\fP(3), \fBsrand\fP(3)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
