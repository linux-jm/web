.\" Copyright (c) 1990, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)fopen.3	6.8 (Berkeley) 6/29/91
.\"
.\" Converted for Linux, Mon Nov 29 15:22:01 1993, faith@cs.unc.edu
.\" Modified, aeb, 960421, 970806
.\" Modified, joey, aeb, 2002-01-03
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 1997 YOSHINO Takashi
.\"       all rights reserved.
.\" Translated Thu Feb 13 12:10:38 JST 1997
.\"       by YOSHINO Takashi <yoshino@civil.jcn.nihon-u.ac.jp>
.\" Updated & Modified Mon Mar 1 1999
.\"       by NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\" Updated 1999-12-08, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2001-12-13, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2002-03-23, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2005-10-15, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2006-07-20, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2012-05-08, Akihiro MOTOKI <amotoki@gmail.com>
.\" Updated 2013-03-26, Akihiro MOTOKI <amotoki@gmail.com>
.\"
.TH FOPEN 3 2020\-12\-21 GNU "Linux Programmer's Manual"
.SH 名前
fopen, fdopen, freopen \- ストリームを開く関数
.SH 書式
.nf
\fB#include <stdio.h>\fP
.PP
\fBFILE *fopen(const char *\fP\fIpathname\fP\fB, const char *\fP\fImode\fP\fB);\fP
.PP
\fBFILE *fdopen(int \fP\fIfd\fP\fB, const char *\fP\fImode\fP\fB);\fP
.PP
\fBFILE *freopen(const char *\fP\fIpathname\fP\fB, const char *\fP\fImode\fP\fB, FILE *\fP\fIstream\fP\fB);\fP
.fi
.PP
.RS -4
glibc 向けの機能検査マクロの要件 (\fBfeature_test_macros\fP(7)  参照):
.RE
.PP
\fBfdopen\fP(): _POSIX_C_SOURCE
.SH 説明
\fBfopen\fP()  関数は、 \fIpathname\fP で指定された名前のファイルを開き、ストリームと結びつける。
.PP
引数 \fImode\fP は、以下に続く文字のひとつから始まる文字列へのポインターであ
る (以下の述べる、追加の文字が後に続くこともある):
.TP 
\fBr\fP
テキストファイルを読み出すために開く。 ストリームはファイルの先頭に位置される。
.TP 
\fBr+\fP
読み出しおよび書き込みするために開く。 ストリームはファイルの先頭に位置される。
.TP 
\fBw\fP
ファイルを書き込みのために開く。 ファイルが既に存在する場合には長さゼロに切り詰める。 ファイルがなかった場合には新たに作成する。
ストリームはファイルの先頭に位置される。
.TP 
\fBw+\fP
読み出しおよび書き込みのために開く。 ファイルが存在していない場合には新たに作成する。 存在している場合には長さゼロに切り詰められる。
ストリームはファイルの先頭に位置される。
.TP 
\fBa\fP
追加 (ファイルの最後に書き込む) のために開く。 ファイルが存在していない場合には新たに作成する。 ストリームはファイルの最後に位置される。
.TP 
\fBa+\fP
Open for reading and appending (writing at end of file).  The file is
created if it does not exist.  Output is always appended to the end of the
file.  POSIX is silent on what the initial read position is when using this
mode.  For glibc, the initial file position for reading is at the beginning
of the file, but for Android/BSD/MacOS, the initial file position for
reading is at the end of the file.
.PP
\fImode\fP 文字列には文字 \(aqb\(aq を追加指定することができ、 \fImode\fP 文字列の最後の文字として指定する。 上記のうち 2
文字のモードの場合には 2 つの文字の間に指定することもできる。 これは C89 との互換性のためだけに用意された
ものであり、関数の実行に対してはいかなる影響も持たない。 すなわち、Linux を含む全ての POSIX 準拠システムでは、 この \(aqb\(aq
は無視される。 (その他のシステムではテキストファイルとバイナリファイルを別々に扱うものもあるので、 もしバイナリファイルの入出力を行い、
そのプログラムが非 UNIX 環境へ移植されると予測するなら、 \(aqb\(aqを付けておくのは良い考えである)
.PP
\fImode\fP の glibc による拡張の詳細については下記の「注意」を参照。
.PP
すべての生成されたファイルは、 \fBS_IRUSR\fP | \fBS_IWUSR\fP | \fBS_IRGRP\fP | \fBS_IWGRP\fP |
\fBS_IROTH\fP | \fBS_IWOTH\fP (0666) のモードを そのプロセスの umask 値によって修正したモードを持つ
(\fBumask\fP(2)  を見よ)。
.PP
読み出し/書き込みストリームに対しては任意の順序で読み書きを行うことができる。 ただし ANSI C では、
(入力操作がファイルの末尾に到達した場合を除いて)  出力と入力の間にはファイルの位置決め関数を 挟まなければならないことになっていることに注意されたい
(この条件を満足しない場合には、読み込み操作は、 最後に書き込まれたものでなく、以前に書き込まれた 値を返すことを許されている)。
したがって、このようなストリームでの読み書き操作の間には \fBfseek\fP(3)  または \fBfgetpos\fP(3)  操作を挟んでおくと良いだろう
(Linux では本当に必要となることもときどきある)。 この操作は見かけ上何もしない操作 (no\-op) でも良い (例えば \fIfseek(...,
0L, SEEK_CUR)\fP を その副次的効果である同期のためだけに呼べば良い)。
.PP
ファイルを追加モード (\fImode\fP の最初の文字を \fBa\fP にする) で開くと、
このストリームに対する書き込み操作は全て (先に以下の呼び出しを行った
かのように) ファイルの末尾で行われる。
.PP
.in +4n
.EX
fseek(stream, 0, SEEK_END);
.EE
.in
.PP
The file descriptor associated with the stream is opened as if by a call to
\fBopen\fP(2)  with the following flags:
.RS
.TS
allbox;
lb lb
c l.
fopen() モード	open() フラグ
\fIr\fP	O_RDONLY
\fIw\fP	O_WRONLY | O_CREAT | O_TRUNC
\fIa\fP	O_WRONLY | O_CREAT | O_APPEND
\fIr+\fP	O_RDWR
\fIw+\fP	O_RDWR | O_CREAT | O_TRUNC
\fIa+\fP	O_RDWR | O_CREAT | O_APPEND
.TE
.RE
.\"
.SS fdopen()
.\"
\fBfdopen\fP()  関数は、既存のファイルディスクリプター \fIfd\fP にストリームを結びつける。 ストリームの \fImode\fP ("r",
"r+", "w", "w+", "a", "a+" のいずれか) は ファイルディスクリプターのモードと互換のものでなければならない。
新しいストリームのファイル位置指示子は \fIfd\fP に属している値に設定される。 error と end\-of\-file の各指示子はクリアされる。
"w" および "w+" モードでのファイルの切り詰めは行われない。 ファイルディスクリプターの複製は行なわれない。 \fBfdopen\fP()
で作成されたストリームが閉じられたときにファイルディスクリプターも 閉じられる。 共有メモリーのオブジェクトへ \fBfdopen\fP()
を行ったときの結果は定義されていない。
.SS freopen()
\fBfreopen\fP()  関数は \fIpath\fP で名前が指定されたファイルを開き、 \fIstream\fP
で指定されたストリームに、そのファイルを結びつける。 もとのストリームは (もし存在する場合には) 閉じられる。 \fImode\fP 引数は
\fBfopen\fP()  関数と同じ形で使われる。
.PP
If the \fIpathname\fP argument is a null pointer, \fBfreopen\fP()  changes the
mode of the stream to that specified in \fImode\fP; that is, \fBfreopen\fP()
reopens the pathname that is associated with the stream.  The specification
for this behavior was added in the C99 standard, which says:
.PP
.RS
In this case, the file descriptor associated with the stream need not be
closed if the call to \fBfreopen\fP()  succeeds.  It is implementation\-defined
which changes of mode are permitted (if any), and under what circumstances.
.RE
.PP
\fBfreopen\fP() 関数の主な用途は、標準テキストストリーム (\fIstderr\fP, \fIstdin\fP, \fIstdout\fP)
と対応付けられているファイルを変更することである。
.SH 返り値
\fBfopen\fP(), \fBfdopen\fP(), \fBfreopen\fP()  は成功すると \fIFILE\fP 型のポインターを返す。 失敗すると NULL
が返され、 \fIerrno\fP がエラーを示す値にセットされる。
.SH エラー
.TP 
\fBEINVAL\fP
\fBfopen\fP(), \fBfdopen\fP(), \fBfreopen\fP()  で与えられた \fImode\fP が不適切である。
.PP
\fBfopen\fP(), \fBfdopen\fP(), \fBfreopen\fP()  関数は \fBmalloc\fP(3)
ルーチンで規定されているエラーでも失敗することがあり、 その時は対応する値に \fIerrno\fP をセットする。
.PP
\fBfopen\fP()  関数は \fBopen\fP(2)  ルーチンで規定されているエラーでも失敗することがあり、 その時は対応する値に \fIerrno\fP
をセットする。
.PP
\fBfdopen\fP()  関数は \fBfcntl\fP(2)  ルーチンで規定されているエラーでも失敗することがあり、 その時は対応する値に
\fIerrno\fP をセットする。
.PP
\fBfreopen\fP()  関数は \fBopen\fP(2), \fBfclose\fP(3), \fBfflush\fP(3)
各ルーチンで規定されているエラーでも失敗することがあり、 その時は対応する値に \fIerrno\fP をセットする。
.SH 属性
この節で使用されている用語の説明については、 \fBattributes\fP(7) を参照。
.TS
allbox;
lbw28 lb lb
l l l.
インターフェース	属性	値
T{
\fBfopen\fP(),
\fBfdopen\fP(),
\fBfreopen\fP()
T}	Thread safety	MT\-Safe
.TE
.SH 準拠
\fBfopen\fP(), \fBfreopen\fP(): POSIX.1\-2001, POSIX.1\-2008, C89, C99.
.PP
\fBfdopen\fP(): POSIX.1\-2001, POSIX.1\-2008.
.SH 注意
.SS "glibc での注意"
GNU C ライブラリでは、 \fImode\fP に指定できる文字列として、以下の拡張が行われている:
.TP 
\fBc\fP (glibc 2.3.3 以降)
open 操作、それに続く read/write 操作の、 スレッドの取り消しポイント
(cancellation points) を作成しない。
このフラグは \fBfdopen\fP() では無視される。
.TP 
\fBe\fP (glibc 2.7 以降)
\fBO_CLOEXEC\fP フラグを有効にしてファイルをオープンする。詳細は
\fBopen\fP(2) を参照。このフラグは \fBfdopen\fP() では無視される。
.TP 
\fBm\fP (glibc 2.3 以降)
.\" As at glibc 2.4:
I/O システムコール (\fBread\fP(2), \fBwrite\fP(2))  ではなく、 \fBmmap\fP(2)
を使ってファイルにアクセスしようとする。 \fBmmap\fP(2)  を使おうとするのは、読み出し用にオープンするファイルについてだけである。
.TP 
\fBx\fP
.\" Since glibc 2.0?
.\" FIXME . C11 specifies this flag
ファイルを排他的にオープンする (\fBopen\fP(2)  の \fBO_EXCL\fP フラグと同様)。 ファイルがすでに存在する場合、 \fBfopen\fP()
は失敗し、 \fIerrno\fP に \fBEEXIST\fP がセットされる。 このフラグは \fBfdopen\fP()  では無視される。
.PP
上記の文字に加えて、
\fBfopen\fP() と \fBfreopen\fP() では \fImode\fP に
以下の書式を 指定することができる。
.PP
\fB ,ccs=\fP\fIstring\fP
.PP
指定された \fIstring\fP は、符号化文字集合の名前と解釈され、
ストリームではワイド文字のストリームとして扱われる。
内部変換関数で入出力時に文字集合 \fIstring\fP との変換が行われる。
書式 \fB,ccs=\fP\fIstring\fP が指定されない場合は、
ストリームをワイド文字のストリームとして扱うかは
最初のファイル操作時に決定される。
最初のファイル操作がワイド文字操作であった場合は、
そのストリームはワイド文字のストリームとして扱われ、
符号化文字集合との変換を行う関数が読み込まれる。
.SH バグ
.\" FIXME . http://sourceware.org/bugzilla/show_bug.cgi?id=12685
\fImode\fP の個々のフラグ文字 ("ccs" 指定の前の文字) を解釈する際に、
glibc の \fBfopen\fP() と \fBfreopen\fP() の実装では、
\fImode\fP の確認を最大 7 文字しか行わないという制限がある
(バージョン 2.14 より前の glibc では最大 6 文字だが、
6 文字では "rb+cmxe" などの指定を行うには不十分であった)。
\fBfdopen\fP() の現在の実装では最大 5 文字の \fImode\fP しか解釈されない。
.SH 関連項目
\fBopen\fP(2), \fBfclose\fP(3), \fBfileno\fP(3), \fBfmemopen\fP(3), \fBfopencookie\fP(3),
\fBopen_memstream\fP(3)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
