.\" Copyright (c) 2003 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 2004 Yuichi SATO
.\"         all rights reserved.
.\" Translated Sun Sep 12 05:05:19 JST 2004
.\"         by Yuichi SATO <ysato444@yahoo.co.jp>
.\"
.TH WORDEXP 3 2020\-11\-01 "" "Linux Programmer's Manual"
.SH 名前
wordexp, wordfree \- posix シェルのように単語の展開を行う
.SH 書式
\fB#include <wordexp.h>\fP
.PP
\fBint wordexp(const char *\fP\fIs\fP\fB, wordexp_t *\fP\fIp\fP\fB, int \fP\fIflags\fP\fB);\fP
.PP
\fBvoid wordfree(wordexp_t *\fP\fIp\fP\fB);\fP
.PP
.RS -4
glibc 向けの機能検査マクロの要件 (\fBfeature_test_macros\fP(7)  参照):
.RE
.PP
\fBwordexp\fP(), \fBwordfree\fP(): _XOPEN_SOURCE
.SH 説明
関数 \fBwordexp\fP()  はシェルのように文字列 \fIs\fP を展開し、 \fIp\fP で指し示す構造体に結果を返す。 データ型
\fIwordexp_t\fP は少なくともフィールド \fIwe_wordc\fP, \fIwe_wordv\fP, \fIwe_offs\fP を持つ構造体である。
フィールド \fIwe_wordc\fP は \fIsize_t\fP であり、 \fIs\fP を展開した結果に単語がいくつあるかを表す。 フィールド
\fIwe_wordv\fP は \fIchar\ **\fP であり、見つかった単語の配列を指し示す。 \fIsize_t\fP 型のフィールド \fIwe_offs\fP
は、 \fIwe_wordv\fP 配列にある初期要素のうちいくつが NULL で埋められるべきかを表すのに使われたりする (\fIflags\fP
により決定される。下記を参照。)。
.PP
関数 \fBwordfree\fP()  は割り当てたメモリーを再度解放する。 より正確にいうと、この関数はその引数を解放するのではなく、 配列
\fIwe_wordv\fP とそれが指し示す文字列を解放する。
.SS 文字列引数
この展開はシェルによるコマンドのパラメーターの展開 (\fBsh\fP(1)  を参照) と同じであるので、文字列 \fIs\fP
はシェルコマンドパラメーターで不正とされる文字を含んではならない。 特にエスケープされていない改行、|, &, ;, <, >, (,
), {, } 文字を コマンド置換やパラメーター置換の場面以外に含めてはならない。
.PP
引数 \fIs\fP にクォートしていないコメント文字 # で始まる単語が含まれている場合には、 その単語とそれ以降の単語が無視されるか、 それとも #
がコメント文字として扱わないかは、規定されていない。
.SS 展開
実行される展開は、以下の段階で構成される: チルダ展開 (\(tiuser を user のホームディレクトリに置き換える)、 変数展開 ($FOO
を環境変数 FOO の値に置き換える)、 コマンド展開 ($(command) または \`command\` を command
の出力で置き換える)、 算術展開、フィールド分割、ワイルドカード展開、クォートの除去。
.PP
特殊なパラメーター ($@, $*, $#, $?, $\-, $$, $!, $0) の 展開結果は規定されていない。
.PP
フィールド分割は環境変数 $IFS を用いて行われる。 この環境変数が設定されていない場合、 フィールド区切り文字はスペース・タブ・改行である。
.SS 出力される配列
配列 \fIwe_wordv\fP は見つかった単語をを含み、最後に NULL が続く。
.SS "flags 引数"
\fIflags\fP 引数は以下の値のビット包含的 OR である:
.TP 
\fBWRDE_APPEND\fP
見つかった単語を前回の呼び出し結果の配列に追加する。
.TP 
\fBWRDE_DOOFFS\fP
初期状態である \fIwe_offs\fP 個の NULL を配列 \fIwe_wordv\fP に挿入する (これらは返される \fIwe_wordc\fP
にはカウントされない)。
.TP 
\fBWRDE_NOCMD\fP
コマンド置換を行わない。
.TP 
\fBWRDE_REUSE\fP
引数 \fIp\fP は前回の \fBwordexp\fP()  の呼び出し結果であり、 \fBwordfree\fP()  が (まだ) 呼び出されない。
割り当てられた領域を再利用する。
.TP 
\fBWRDE_SHOWERR\fP
通常はコマンド置換のときに \fIstderr\fP が \fI/dev/null\fP にリダイレクトされる。 このフラグは \fIstderr\fP
をリダイレクトしないように指定する。
.TP 
\fBWRDE_UNDEF\fP
未定義のシェル変数を展開しようとした場合に、エラーとして扱う。
.SH 返り値
成功した場合は 0 が返される。 エラーの場合は以下の 5 つの値のうちの 1 つが返される。
.TP 
\fBWRDE_BADCHAR\fP
改行または |, &, ;, <, >, (, ), {, } のうちの 1 つが不正に出現した。
.TP 
\fBWRDE_BADVAL\fP
未定義のシェル変数が参照され、かつ \fBWRDE_UNDEF\fP フラグでこれをエラーとして扱うように指示されている。
.TP 
\fBWRDE_CMDSUB\fP
コマンド置換が要求されたが、 \fBWRDE_NOCMD\fP フラグでこれをエラーとして扱うように指示されていた。
.TP 
\fBWRDE_NOSPACE\fP
メモリーが足りない。
.TP 
\fBWRDE_SYNTAX\fP
対応する括弧がない、クォートが合致しないといった、 シェルの書式エラー。
.SH バージョン
\fBwordexp\fP()  と \fBwordfree\fP()  は、バージョン 2.1 以降の glibc で提供されている。
.SH 属性
この節で使用されている用語の説明については、 \fBattributes\fP(7) を参照。
.TS
allbox;
lb lb lbw30
l l l.
インターフェース	属性	値
T{
\fBwordexp\fP()
T}	Thread safety	T{
MT\-Unsafe race:utent const:env
.br
env sig:ALRM timer locale
T}
T{
\fBwordfree\fP()
T}	Thread safety	MT\-Safe
.TE
.sp 1
In the above table, \fIutent\fP in \fIrace:utent\fP signifies that if any of the
functions \fBsetutent\fP(3), \fBgetutent\fP(3), or \fBendutent\fP(3)  are used in
parallel in different threads of a program, then data races could occur.
\fBwordexp\fP()  calls those functions, so we use race:utent to remind users.
.SH 準拠
POSIX.1\-2001, POSIX.1\-2008.
.SH 例
以下のサンプルプログラムの出力はだいたい "ls [a\-c]*.c" と同じになる。
.PP
.EX
#include <stdio.h>
#include <stdlib.h>
#include <wordexp.h>

int
main(int argc, char **argv)
{
    wordexp_t p;
    char **w;

    wordexp("[a\-c]*.c", &p, 0);
    w = p.we_wordv;
    for (int i = 0; i < p.we_wordc; i++)
        printf("%s\en", w[i]);
    wordfree(&p);
    exit(EXIT_SUCCESS);
}
.EE
.SH 関連項目
\fBfnmatch\fP(3), \fBglob\fP(3)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
