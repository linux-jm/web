.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright 2006 Michael Kerrisk <mtk.manpages@ganil.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sun Jul 25 10:53:39 1993 by Rik Faith (faith@cs.unc.edu)
.\" Added correction due to nsd@bbc.com (Nick Duffek) - aeb, 950610
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 1999 AKAMATSU, Kazuo
.\"         all rights reserved.
.\" Translated Thu Jan 9 21:00:00 JST 1999
.\"         by AKAMATSU, Kazuo
.\" Updated Sun Apr  8 JST 2001 by Kentaro Shirakata <argrath@ub32.org>
.\" Updated Sat Mar 23 JST 2002 by Kentaro Shirakata <argrath@ub32.org>
.\" Updated & Modified 2006-07-20,
.\"         Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v2.36
.\" Updated 2012-05-04, Akihiro MOTOKI <amotoki@gmail.com>
.\"
.TH STRTOL 3 2020\-11\-01 GNU "Linux Programmer's Manual"
.SH 名前
strtol, strtoll, strtoq \- 文字列を long int に変換する
.SH 書式
.nf
\fB#include <stdlib.h>\fP
.PP
\fBlong strtol(const char *\fP\fInptr\fP\fB, char **\fP\fIendptr\fP\fB, int \fP\fIbase\fP\fB);\fP
.PP
\fBlong long strtoll(const char *\fP\fInptr\fP\fB, char **\fP\fIendptr\fP\fB, int \fP\fIbase\fP\fB);\fP
.fi
.PP
.RS -4
glibc 向けの機能検査マクロの要件 (\fBfeature_test_macros\fP(7)  参照):
.RE
.PP
.ad l
\fBstrtoll\fP():
.RS 4
_ISOC99_SOURCE
    || /* Glibc versions <= 2.19: */ _SVID_SOURCE || _BSD_SOURCE
.RE
.ad
.SH 説明
\fBstrtol\fP()  関数は、 \fInptr\fP の文字列の最初の部分を、 \fIbase\fP を基数として long int に変換する。 この
\fIbase\fP は 2 から 36 までの値 あるいは特別な意味を持つ値 0 でなければならない。
.PP
文字列の先頭には、任意の数の空白があってもよく (空白は \fBisspace\fP(3) で判定される)、また数字の直前には \(aq+\(aq か
\(aq\-\(aq の 符号があってもよい。 \fIbase\fP が 0 または 16 の場合には、文字列の先頭に "0x" か "0X" を置くことが
でき、その場合には文字列は 16進数として扱われる。 これ以外の文字列で \fIbase\fP が 0 の場合は、 文字列が \(aq0\(aq
で始まるときは 8進数として、 それ以外のときは 10進数として扱われる。
.PP
数字を表す文字列は \fIlong\fP に変換されるが、基数に対して 有効でない数字が現れた時点で変換は終了する。(11進数以上では \(aqA\(aq は
大文字・小文字に関わらず 10 を表し、 \(aqB\(aq は 11 を表現し、 以下同様に、 \(aqZ\(aq は 35 を表す。)
.PP
\fIendptr\fP がヌル値 (NULL) でない場合は、最初に現れた不正な文字が \fBstrtol\fP()  によって \fI*endptr\fP
に保存されている。 文字列に有効な数字がひとつもなければ、 \fBstrtol\fP()  は \fInptr\fP の元の値を \fI*endptr\fP に代入する
(そして 0 を返す)。 特に、\fI*nptr\fP が \(aq\e0\(aq 以外で、返された \fI**endptr\fP が \(aq\e0\(aq
ならば、文字列全体が有効だったことになる。
.PP
\fBstrtoll\fP()  関数は \fBstrtol\fP()  と同様だが、 \fIlong long\fP 型の値を返す。
.SH 返り値
アンダーフローもオーバーフローも起きなかった場合、 \fBstrtol\fP()  関数は 変換された値を返す。オーバーフローした場合には
\fBLONG_MAX\fP が返り、 アンダーフローした場合には \fBLONG_MIN\fP が返る。オーバーフロー、 アンダーフローのいずれの場合にも
大域変数 \fIerrno\fP には \fBERANGE\fP が設定される。 \fBstrtoll\fP()  も同様であるが、 \fBLONG_MIN\fP と
\fBLONG_MAX\fP の代わりに \fBLLONG_MIN\fP と \fBLLONG_MAX\fP が返される。
.SH エラー
.TP 
\fBEINVAL\fP
(C99 にはない) 指定された \fIbase\fP がサポートされていない値である。
.TP 
\fBERANGE\fP
結果の値が範囲外である。
.PP
実装によっては、変換が行われなかった場合 (数字がなく、0 を返した場合)、 \fIerrno\fP に \fBEINVAL\fP が設定される場合がある。
.SH 属性
この節で使用されている用語の説明については、 \fBattributes\fP(7) を参照。
.TS
allbox;
lbw29 lb lb
l l l.
インターフェース	属性	値
T{
\fBstrtol\fP(),
\fBstrtoll\fP(),
\fBstrtoq\fP()
T}	Thread safety	MT\-Safe locale
.TE
.SH 準拠
\fBstrtol\fP(): POSIX.1\-2001, POSIX.1\-2008, C89, C99 SVr4, 4.3BSD.
.PP
\fBstrtoll\fP(): POSIX.1\-2001, POSIX.1\-2008, C99.
.SH 注意
\fBstrtol ()\fP からは成功、失敗どちらの場合でも 0, \fBLONG_MAX\fP, \fBLONG_MIN\fP (\fBstrtoll\fP()  では
\fBLLONG_MAX\fP, \fBLLONG_MIN\fP)  が返る可能性があるので、 プログラムは関数を呼び出す前に \fIerrno\fP を 0
に設定し、呼び出し後に \fIerrno\fP が 0 以外の値かどうかを確認しエラーが発生したかどうかを判断する 必要がある。
.PP
POSIX.1 では、 "C" と "POSIX" 以外のロケールでは、これらの関数は、他の実装時に定義される数字を示す文字列を受け付けるとされている。
.PP
BSD には、
.PP
.in +4n
.EX
\fBquad_t strtoq(const char *\fP\fInptr\fP\fB, char **\fP\fIendptr\fP\fB, int \fP\fIbase\fP\fB);\fP
.EE
.in
.PP
という完全に同様の定義を持つ関数がある。 使用中のアーキテクチャーのワード長次第であるが、この関数は \fBstrtoll\fP()  か
\fBstrtol\fP()  と等価となることもある。
.SH 例
以下のプログラムは \fBstrtol\fP()  の使用例である。 最初のコマンドライン引数には \fBstrtol\fP()
が数字として解釈する文字列を指定する。 (省略可能な) 二番目の引数には 変換に使用される基数を指定する (この引数は \fBatoi\fP(3)
を使って数値に変換される。 \fBatoi\fP(3)  は \fBstrtol\fP()  よりも簡単なインターフェースを持つ関数で、
その中ではエラーチェックは行われない)。 このプログラムの実行例をいくつか以下に示す:
.PP
.in +4n
.EX
$\fB ./a.out 123\fP
strtol() returned 123
$\fB ./a.out \(aq    123\(aq\fP
strtol() returned 123
$\fB ./a.out 123abc\fP
strtol() returned 123
Further characters after number: "abc"
$\fB ./a.out 123abc 55\fP
strtol: Invalid argument
$\fB ./a.out \(aq\(aq\fP
No digits were found
$\fB ./a.out 4000000000\fP
strtol: Numerical result out of range
.EE
.in
.SS プログラムのソース
\&
.EX
#include <stdlib.h>
#include <limits.h>
#include <stdio.h>
#include <errno.h>

int
main(int argc, char *argv[])
{
    int base;
    char *endptr, *str;
    long val;

    if (argc < 2) {
        fprintf(stderr, "Usage: %s str [base]\en", argv[0]);
        exit(EXIT_FAILURE);
    }

    str = argv[1];
    base = (argc > 2) ? atoi(argv[2]) : 0;

    errno = 0;    /* To distinguish success/failure after call */
    val = strtol(str, &endptr, base);

    /* Check for various possible errors */

    if (errno != 0) {
        perror("strtol");
        exit(EXIT_FAILURE);
    }

    if (endptr == str) {
        fprintf(stderr, "No digits were found\en");
        exit(EXIT_FAILURE);
    }

    /* If we got here, strtol() successfully parsed a number */

    printf("strtol() returned %ld\en", val);

    if (*endptr != \(aq\e0\(aq)        /* Not necessarily an error... */
        printf("Further characters after number: \e"%s\e"\en", endptr);

    exit(EXIT_SUCCESS);
}
.EE
.SH 関連項目
\fBatof\fP(3), \fBatoi\fP(3), \fBatol\fP(3), \fBstrtod\fP(3), \fBstrtoimax\fP(3),
\fBstrtoul\fP(3),
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
