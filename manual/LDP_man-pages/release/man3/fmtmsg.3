.\"  Copyright 2002 walter harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.\"  adapted glibc info page
.\"
.\"  This should run as 'Guru Meditation' (amiga joke :)
.\"  The function is quite complex and deserves an example
.\"
.\"  Polished, aeb, 2003-11-01
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 2004 Yuichi SATO
.\"         all rights reserved.
.\" Translated Sat Jul 24 20:19:54 JST 2004
.\"         by Yuichi SATO <ysato444@yahoo.co.jp>
.\"
.TH FMTMSG 3 2020\-06\-09 "" "Linux Programmer's Manual"
.SH 名前
fmtmsg \- 整形されたエラーメッセージを表示する
.SH 書式
.nf
\fB#include <fmtmsg.h>\fP
.PP
\fBint fmtmsg(long \fP\fIclassification\fP\fB, const char *\fP\fIlabel\fP\fB,\fP
\fB           int \fP\fIseverity\fP\fB, const char *\fP\fItext\fP\fB,\fP
\fB           const char *\fP\fIaction\fP\fB, const char *\fP\fItag\fP\fB);\fP
.fi
.SH 説明
この関数は、引数で記述されたメッセージを、 \fIclassification\fP 引数で指定されたデバイス上に表示する。 \fIstderr\fP
に書き出されるメッセージのフォーマットは、 \fBMSGVERB\fP 環境変数に依存する。
.PP
\fIlabel\fP 引数はメッセージの発生源を識別する。 この文字列はコロンで区切られた 2 つの部分から構成されていなければならない。 1 つ目の部分は
10 文字以内でなければならず、 2 つ目の部分は 14 文字以内でなければならない。
.PP
\fItext\fP 引数にはエラー条件を記述する。
.PP
\fIaction\fP 引数にはエラーから回復するために利用可能なステップを記述する。 これが表示される場合、"TO FIX: " が前に付く。
.PP
\fItag\fP 引数はより多くの情報を見つけるためのオンラインドキュメントへの参照である。 これは \fIlabel\fP
値とユニークな識別番号を含んでいるべきである。
.SS ダミー引数
各引数にはダミーの値を入れることができる。 ダミーの \fIclassification\fP 値 \fBMM_NULLMC\fP (0L)
は出力を何も指定しない。そのため何も表示されない。 ダミーの \fIseverity\fP 値 \fBNO_SEV\fP (0) は重大度 (severity)
が与えられていないことを表す。 値 \fBMM_NULLLBL\fP, \fBMM_NULLTXT\fP, \fBMM_NULLACT\fP, \fBMM_NULLTAG\fP
は \fI((char\ *)\ 0)\fP と空文字列の別名であり、 \fBMM_NULLSEV\fP は \fBNO_SEV\fP の別名である。
.SS "classification 引数"
\fIclassification\fP 引数は 4 種類の情報を記述する値の和である。
.PP
最初の値は出力チャンネルを定義する。
.TP  12n
\fBMM_PRINT\fP
\fIstderr\fP に出力する。
.TP 
\fBMM_CONSOLE\fP
システムコンソールに出力する。
.TP 
\fBMM_PRINT | MM_CONSOLE\fP
両方に出力する。
.PP
2 番目の値はエラーの発生源である:
.TP  12n
\fBMM_HARD\fP
ハードウェアエラーが起こった。
.TP 
\fBMM_FIRM\fP
ファームウェアエラーが起こった。
.TP 
\fBMM_SOFT\fP
ソフトウェアエラーが起こった。
.PP
3 番目の値は問題の検知を行ったものをエンコードする:
.TP  12n
\fBMM_APPL\fP
アプリケーションによって検知された。
.TP 
\fBMM_UTIL\fP
ユーティリティによって検知された。
.TP 
\fBMM_OPSYS\fP
オペレーティングシステムによって検知された。
.PP
4 番目の値は問題の重大度を表す:
.TP  12n
\fBMM_RECOVER\fP
回復可能なエラーである。
.TP 
\fBMM_NRECOV\fP
回復不可能なエラーである。
.SS "severity 引数"
\fIseverity\fP 引数は以下の 1 つの値をとることができる。
.TP  12n
\fBMM_NOSEV\fP
重大度は表示されない。
.TP 
\fBMM_HALT\fP
この値は HALT として表示される。
.TP 
\fBMM_ERROR\fP
この値は ERROR として表示される。
.TP 
\fBMM_WARNING\fP
この値は WARNING として表示される。
.TP 
\fBMM_INFO\fP
この値は INFO として表示される。
.PP
数値の場合は 0 から 4 である。 \fBaddseverity\fP(3)  または環境変数 \fBSEV_LEVEL\fP
を使うことにより、表示するレベルと文字列を更に追加できる。
.SH 返り値
関数は 4 つの値を返す:
.TP  12n
\fBMM_OK\fP
全てがうまくいった。
.TP 
\fBMM_NOTOK\fP
完全に失敗した。
.TP 
\fBMM_NOMSG\fP
\fIstderr\fP に書き込むときにエラーが起こった。
.TP 
\fBMM_NOCON\fP
コンソールに書き込むときにエラーが起こった。
.SH 環境変数
環境変数 \fBMSGVERB\fP ("message verbosity") は \fIstderr\fP への出力の一部を抑制するのに使うことができる。
(コンソールへの出力には影響しない。)  この変数が定義されて、NULL でなく、 コロンで区切られた有効なキーワードのリストである場合、
キーワードに対応するメッセージの一部のみが表示される。 有効なキーワードは "label", "severity", "text", "action",
"tag" である。
.PP
環境変数 \fBSEV_LEVEL\fP は新しい重大度レベルを導入するのに使用できる。 デフォルトでは、上記の 5 つの重大度レベルのみが利用可能である。
他の数値の場合、 \fBfmtmsg\fP()  は何も表示しない。 \fBfmtmsg\fP()  を初めて呼び出す前に、ユーザーが \fBSEV_LEVEL\fP を
.PP
.RS
SEV_LEVEL=[description[:description[:...]]]
.RE
.PP
のような形式でプロセスの環境に設定すると、 \fBfmtmsg\fP()  は (標準のレベル 0\(en4 に加えて) level
に指定された値も受け付け、 そのようなレベルの問題が発生すると指定された printstring を表示する。 各 description は
.PP
.RS
severity\-keyword,level,printstring
.RE
.PP
という形式である。
.PP
severity\-keyword 部は \fBfmtmsg\fP()  に使用されないが、存在しなければならない。 level
部は数値を文字列で表したものである。 数値は 4 より大きい値でなければならない。 この値は \fBfmtmsg\fP()  の severity
引数で使用されなければならず、この重大度を選択する。 前もって宣言された重大度を上書きすることはできない。 printstring は、
この重大度のメッセージが \fBfmtmsg\fP()  によって生成された場合に表示される文字列である。
.SH バージョン
\fBfmtmsg\fP()  は、バージョン 2.1 以降の glibc で提供されている。
.SH 属性
この節で使用されている用語の説明については、 \fBattributes\fP(7) を参照。
.TS
allbox;
lb lb lbw23
l l l.
インターフェース	属性	値
T{
\fBfmtmsg\fP()
T}	Thread safety	T{
glibc >= 2.16: MT\-Safe
.br
glibc < 2.16: MT\-Unsafe
T}
.TE
.PP
glibc 2.16 より前のバージョンでは、 \fBfmtmsg\fP() 関数は、 保護されていない静的な変数を使うため、 スレッドセーフではない。
.PP
.\" Modified in commit 7724defcf8873116fe4efab256596861eef21a94
glibc 2.16 以降では、 \fBfmtmsg\fP() 関数はロックを使って静的な変数を保護しており、 スレッドセーフである。
.SH 準拠
関数 \fBfmtmsg\fP()  と \fBaddseverity\fP(3)  と環境変数 \fBMSGVERB\fP と \fBSEV_LEVEL\fP は
System V に由来している。
.PP
関数 \fBfmtmsg\fP() と環境変数 \fBMSGVERB\fP は POSIX.1\-2001 と POSIX.1\-2008 に規定されている。
.SH 注意
System V と UnixWare の man ページには、 「これらの関数は "pfmt() と addsev()" または "pfmt(),
vpfmt(), lfmt(), vlfmt()" で置き換えられており、 将来は削除される予定である」と書かれている。
.SH 例
.EX
#include <stdio.h>
#include <stdlib.h>
#include <fmtmsg.h>

int
main(void)
{
    long class = MM_PRINT | MM_SOFT | MM_OPSYS | MM_RECOVER;
    int err;

    err = fmtmsg(class, "util\-linux:mount", MM_ERROR,
                "unknown mount option", "See mount(8).",
                "util\-linux:mount:017");
    switch (err) {
    case MM_OK:
      break;
    case MM_NOTOK:
        printf("Nothing printed\en");
        break;
    case MM_NOMSG:
        printf("Nothing printed to stderr\en");
        break;
    case MM_NOCON:
        printf("No console output\en");
        break;
    default:
        printf("Unknown error from fmtmsg()\en");
    }
    exit(EXIT_SUCCESS);
}
.EE
.PP
出力は
.PP
.in +4n
.EX
util\-linux:mount: ERROR: unknown mount option
TO FIX: See mount(8).  util\-linux:mount:017
.EE
.in
.PP
のようになり、
.PP
.in +4n
.EX
MSGVERB=text:action; export MSGVERB
.EE
.in
.PP
を実行すると、次のようになる。
.PP
.in +4n
.EX
unknown mount option
TO FIX: See mount(8).
.EE
.in
.SH 関連項目
\fBaddseverity\fP(3), \fBperror\fP(3)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
