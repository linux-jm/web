# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-12 14:00+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: TH
#: build/C/man3/MB_CUR_MAX.3:17
#, no-wrap
msgid "MB_CUR_MAX"
msgstr ""

#. type: TH
#: build/C/man3/MB_CUR_MAX.3:17 build/C/man3/mblen.3:16 build/C/man3/strtoimax.3:24 build/C/man3/wctomb.3:16
#, no-wrap
msgid "2015-08-08"
msgstr ""

#. type: TH
#: build/C/man3/MB_CUR_MAX.3:17 build/C/man3/MB_LEN_MAX.3:17 build/C/man2/_exit.2:29 build/C/man3/atexit.3:33 build/C/man3/clearenv.3:26 build/C/man3/exit.3:29 build/C/man3/getloadavg.3:34 build/C/man3/strtod.3:45 build/C/man7/vdso.7:13 build/C/man2/getrandom.2:27 build/C/man3/getentropy.3:25 build/C/man7/random.7:31
#, no-wrap
msgid "Linux"
msgstr ""

#. type: TH
#: build/C/man3/MB_CUR_MAX.3:17 build/C/man3/MB_LEN_MAX.3:17 build/C/man2/_exit.2:29 build/C/man3/a64l.3:10 build/C/man3/atexit.3:33 build/C/man3/atof.3:31 build/C/man3/atoi.3:33 build/C/man3/canonicalize_file_name.3:26 build/C/man3/cfree.3:24 build/C/man3/clearenv.3:26 build/C/man3/drand48.3:30 build/C/man3/drand48_r.3:27 build/C/man3/ecvt.3:32 build/C/man3/ecvt_r.3:30 build/C/man3/exit.3:29 build/C/man3/gcvt.3:30 build/C/man3/getauxval.3:27 build/C/man3/getenv.3:33 build/C/man3/getloadavg.3:34 build/C/man3/getsubopt.3:25 build/C/man3/malloc.3:34 build/C/man3/mblen.3:16 build/C/man3/mbstowcs.3:17 build/C/man3/mbtowc.3:16 build/C/man3/mkdtemp.3:26 build/C/man3/mkstemp.3:35 build/C/man3/mktemp.3:34 build/C/man3/on_exit.3:31 build/C/man3/putenv.3:36 build/C/man3/qecvt.3:28 build/C/man3/rand.3:41 build/C/man3/random.3:33 build/C/man3/random_r.3:26 build/C/man3/rpmatch.3:29 build/C/man3/setenv.3:37 build/C/man3/strfromd.3:32 build/C/man3/strtod.3:45 build/C/man3/strtoimax.3:24 build/C/man3/strtol.3:32 build/C/man3/strtoul.3:33 build/C/man3/system.3:31 build/C/man7/vdso.7:13 build/C/man3/wcstombs.3:16 build/C/man3/wctomb.3:16 build/C/man2/getrandom.2:27 build/C/man3/getentropy.3:25 build/C/man7/random.7:31
#, no-wrap
msgid "Linux Programmer's Manual"
msgstr ""

#. type: SH
#: build/C/man3/MB_CUR_MAX.3:18 build/C/man3/MB_LEN_MAX.3:18 build/C/man2/_exit.2:30 build/C/man3/a64l.3:11 build/C/man3/atexit.3:34 build/C/man3/atof.3:32 build/C/man3/atoi.3:34 build/C/man3/canonicalize_file_name.3:27 build/C/man3/cfree.3:25 build/C/man3/clearenv.3:27 build/C/man3/drand48.3:31 build/C/man3/drand48_r.3:28 build/C/man3/ecvt.3:33 build/C/man3/ecvt_r.3:31 build/C/man3/exit.3:30 build/C/man3/gcvt.3:31 build/C/man3/getauxval.3:28 build/C/man3/getenv.3:34 build/C/man3/getloadavg.3:35 build/C/man3/getsubopt.3:26 build/C/man3/malloc.3:35 build/C/man3/mblen.3:17 build/C/man3/mbstowcs.3:18 build/C/man3/mbtowc.3:17 build/C/man3/mkdtemp.3:27 build/C/man3/mkstemp.3:36 build/C/man3/mktemp.3:35 build/C/man3/on_exit.3:32 build/C/man3/putenv.3:37 build/C/man3/qecvt.3:29 build/C/man3/rand.3:42 build/C/man3/random.3:34 build/C/man3/random_r.3:27 build/C/man3/rpmatch.3:30 build/C/man3/setenv.3:38 build/C/man3/strfromd.3:33 build/C/man3/strtod.3:46 build/C/man3/strtoimax.3:25 build/C/man3/strtol.3:33 build/C/man3/strtoul.3:34 build/C/man3/system.3:32 build/C/man7/vdso.7:14 build/C/man3/wcstombs.3:17 build/C/man3/wctomb.3:17 build/C/man2/getrandom.2:28 build/C/man3/getentropy.3:26 build/C/man7/random.7:32
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: build/C/man3/MB_CUR_MAX.3:20
msgid "MB_CUR_MAX - maximum length of a multibyte character in the current locale"
msgstr ""

#. type: SH
#: build/C/man3/MB_CUR_MAX.3:20 build/C/man3/MB_LEN_MAX.3:20 build/C/man2/_exit.2:32 build/C/man3/a64l.3:13 build/C/man3/atexit.3:36 build/C/man3/atof.3:34 build/C/man3/atoi.3:36 build/C/man3/canonicalize_file_name.3:29 build/C/man3/cfree.3:27 build/C/man3/clearenv.3:29 build/C/man3/drand48.3:34 build/C/man3/drand48_r.3:32 build/C/man3/ecvt.3:35 build/C/man3/ecvt_r.3:33 build/C/man3/exit.3:32 build/C/man3/gcvt.3:33 build/C/man3/getauxval.3:30 build/C/man3/getenv.3:36 build/C/man3/getloadavg.3:37 build/C/man3/getsubopt.3:28 build/C/man3/malloc.3:37 build/C/man3/mblen.3:19 build/C/man3/mbstowcs.3:20 build/C/man3/mbtowc.3:19 build/C/man3/mkdtemp.3:29 build/C/man3/mkstemp.3:38 build/C/man3/mktemp.3:37 build/C/man3/on_exit.3:34 build/C/man3/putenv.3:39 build/C/man3/qecvt.3:31 build/C/man3/rand.3:44 build/C/man3/random.3:36 build/C/man3/random_r.3:30 build/C/man3/rpmatch.3:32 build/C/man3/setenv.3:40 build/C/man3/strfromd.3:36 build/C/man3/strtod.3:48 build/C/man3/strtoimax.3:27 build/C/man3/strtol.3:35 build/C/man3/strtoul.3:36 build/C/man3/system.3:34 build/C/man7/vdso.7:16 build/C/man3/wcstombs.3:19 build/C/man3/wctomb.3:19 build/C/man2/getrandom.2:30 build/C/man3/getentropy.3:28
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: build/C/man3/MB_CUR_MAX.3:23 build/C/man3/atexit.3:39 build/C/man3/atof.3:37 build/C/man3/atoi.3:39 build/C/man3/cfree.3:31 build/C/man3/clearenv.3:32 build/C/man3/drand48.3:37 build/C/man3/drand48_r.3:35 build/C/man3/ecvt_r.3:36 build/C/man3/exit.3:35 build/C/man3/gcvt.3:36 build/C/man3/getenv.3:39 build/C/man3/getloadavg.3:40 build/C/man3/malloc.3:40 build/C/man3/mblen.3:22 build/C/man3/mbstowcs.3:23 build/C/man3/mbtowc.3:22 build/C/man3/mkdtemp.3:32 build/C/man3/mkstemp.3:41 build/C/man3/mktemp.3:40 build/C/man3/on_exit.3:37 build/C/man3/putenv.3:42 build/C/man3/rand.3:47 build/C/man3/random.3:39 build/C/man3/random_r.3:33 build/C/man3/rpmatch.3:35 build/C/man3/setenv.3:43 build/C/man3/strfromd.3:39 build/C/man3/strtol.3:38 build/C/man3/strtoul.3:39 build/C/man3/system.3:37 build/C/man3/wcstombs.3:22 build/C/man3/wctomb.3:22
#, no-wrap
msgid "B<#include E<lt>stdlib.hE<gt>>\n"
msgstr ""

#. type: SH
#: build/C/man3/MB_CUR_MAX.3:24 build/C/man3/MB_LEN_MAX.3:24 build/C/man2/_exit.2:52 build/C/man3/a64l.3:36 build/C/man3/atexit.3:42 build/C/man3/atof.3:40 build/C/man3/atoi.3:57 build/C/man3/canonicalize_file_name.3:35 build/C/man3/cfree.3:55 build/C/man3/clearenv.3:44 build/C/man3/drand48.3:77 build/C/man3/drand48_r.3:79 build/C/man3/ecvt.3:68 build/C/man3/ecvt_r.3:65 build/C/man3/exit.3:38 build/C/man3/gcvt.3:63 build/C/man3/getauxval.3:36 build/C/man3/getenv.3:52 build/C/man3/getloadavg.3:56 build/C/man3/getsubopt.3:49 build/C/man3/malloc.3:60 build/C/man3/mblen.3:25 build/C/man3/mbstowcs.3:26 build/C/man3/mbtowc.3:25 build/C/man3/mkdtemp.3:55 build/C/man3/mkstemp.3:77 build/C/man3/mktemp.3:65 build/C/man3/on_exit.3:51 build/C/man3/putenv.3:56 build/C/man3/qecvt.3:66 build/C/man3/rand.3:68 build/C/man3/random.3:66 build/C/man3/random_r.3:59 build/C/man3/rpmatch.3:49 build/C/man3/setenv.3:62 build/C/man3/strfromd.3:61 build/C/man3/strtod.3:69 build/C/man3/strtoimax.3:34 build/C/man3/strtol.3:57 build/C/man3/strtoul.3:59 build/C/man3/system.3:40 build/C/man7/vdso.7:20 build/C/man3/wcstombs.3:25 build/C/man3/wctomb.3:25 build/C/man2/getrandom.2:34 build/C/man3/getentropy.3:45 build/C/man7/random.7:34
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: build/C/man3/MB_CUR_MAX.3:31
msgid ""
"The B<MB_CUR_MAX> macro defines an integer expression giving the maximum "
"number of bytes needed to represent a single wide character in the current "
"locale.  This value is locale dependent and therefore not a compile-time "
"constant."
msgstr ""

#. type: SH
#: build/C/man3/MB_CUR_MAX.3:31 build/C/man3/MB_LEN_MAX.3:29 build/C/man2/_exit.2:77 build/C/man3/atexit.3:72 build/C/man3/atof.3:57 build/C/man3/atoi.3:83 build/C/man3/canonicalize_file_name.3:61 build/C/man3/cfree.3:102 build/C/man3/clearenv.3:55 build/C/man3/drand48_r.3:92 build/C/man3/ecvt.3:98 build/C/man3/ecvt_r.3:87 build/C/man3/exit.3:86 build/C/man3/gcvt.3:71 build/C/man3/getauxval.3:214 build/C/man3/getenv.3:88 build/C/man3/getloadavg.3:67 build/C/man3/getsubopt.3:111 build/C/man3/malloc.3:191 build/C/man3/mblen.3:75 build/C/man3/mbstowcs.3:84 build/C/man3/mbtowc.3:93 build/C/man3/mkdtemp.3:68 build/C/man3/mkstemp.3:156 build/C/man3/mktemp.3:79 build/C/man3/on_exit.3:79 build/C/man3/putenv.3:69 build/C/man3/rand.3:124 build/C/man3/random.3:124 build/C/man3/random_r.3:130 build/C/man3/rpmatch.3:76 build/C/man3/setenv.3:106 build/C/man3/strfromd.3:154 build/C/man3/strtod.3:123 build/C/man3/strtoimax.3:44 build/C/man3/strtol.3:117 build/C/man3/strtoul.3:124 build/C/man3/system.3:77 build/C/man3/wcstombs.3:80 build/C/man3/wctomb.3:63 build/C/man2/getrandom.2:122 build/C/man3/getentropy.3:60
#, no-wrap
msgid "RETURN VALUE"
msgstr ""

#. type: Plain text
#: build/C/man3/MB_CUR_MAX.3:35
msgid ""
"An integer in the range [1, B<MB_LEN_MAX>].  The value 1 denotes traditional "
"8-bit encoded characters."
msgstr ""

#. type: SH
#: build/C/man3/MB_CUR_MAX.3:35 build/C/man3/MB_LEN_MAX.3:31 build/C/man2/_exit.2:79 build/C/man3/a64l.3:80 build/C/man3/atexit.3:90 build/C/man3/atof.3:71 build/C/man3/atoi.3:99 build/C/man3/canonicalize_file_name.3:85 build/C/man3/cfree.3:136 build/C/man3/clearenv.3:77 build/C/man3/drand48.3:275 build/C/man3/drand48_r.3:116 build/C/man3/ecvt.3:124 build/C/man3/ecvt_r.3:105 build/C/man3/exit.3:107 build/C/man3/gcvt.3:89 build/C/man3/getauxval.3:245 build/C/man3/getenv.3:109 build/C/man3/getloadavg.3:89 build/C/man3/getsubopt.3:142 build/C/man3/malloc.3:275 build/C/man3/mblen.3:99 build/C/man3/mbstowcs.3:106 build/C/man3/mbtowc.3:125 build/C/man3/mkdtemp.3:98 build/C/man3/mkstemp.3:212 build/C/man3/mktemp.3:106 build/C/man3/on_exit.3:97 build/C/man3/putenv.3:93 build/C/man3/qecvt.3:103 build/C/man3/rand.3:149 build/C/man3/random.3:174 build/C/man3/random_r.3:174 build/C/man3/rpmatch.3:115 build/C/man3/setenv.3:138 build/C/man3/strfromd.3:198 build/C/man3/strtod.3:179 build/C/man3/strtoimax.3:70 build/C/man3/strtol.3:175 build/C/man3/strtoul.3:176 build/C/man3/system.3:132 build/C/man3/wcstombs.3:103 build/C/man3/wctomb.3:96 build/C/man2/getrandom.2:176 build/C/man3/getentropy.3:91
#, no-wrap
msgid "CONFORMING TO"
msgstr ""

#. type: Plain text
#: build/C/man3/MB_CUR_MAX.3:37 build/C/man3/MB_LEN_MAX.3:33 build/C/man3/mblen.3:101 build/C/man3/mbstowcs.3:108 build/C/man3/mbtowc.3:127 build/C/man3/strtod.3:181 build/C/man3/strtoimax.3:72 build/C/man3/wcstombs.3:105 build/C/man3/wctomb.3:98
msgid "POSIX.1-2001, POSIX.1-2008, C99."
msgstr ""

#. type: SH
#: build/C/man3/MB_CUR_MAX.3:37 build/C/man3/MB_LEN_MAX.3:50 build/C/man2/_exit.2:124 build/C/man3/a64l.3:102 build/C/man3/atexit.3:176 build/C/man3/atof.3:73 build/C/man3/atoi.3:134 build/C/man3/canonicalize_file_name.3:87 build/C/man3/cfree.3:141 build/C/man3/clearenv.3:132 build/C/man3/drand48.3:277 build/C/man3/drand48_r.3:118 build/C/man3/ecvt.3:142 build/C/man3/ecvt_r.3:112 build/C/man3/exit.3:207 build/C/man3/gcvt.3:98 build/C/man3/getauxval.3:284 build/C/man3/getenv.3:142 build/C/man3/getloadavg.3:93 build/C/man3/getsubopt.3:239 build/C/man3/malloc.3:374 build/C/man3/mblen.3:113 build/C/man3/mbstowcs.3:229 build/C/man3/mbtowc.3:140 build/C/man3/mkdtemp.3:103 build/C/man3/mkstemp.3:250 build/C/man3/mktemp.3:131 build/C/man3/on_exit.3:113 build/C/man3/putenv.3:145 build/C/man3/qecvt.3:114 build/C/man3/rand.3:237 build/C/man3/random.3:205 build/C/man3/random_r.3:189 build/C/man3/rpmatch.3:160 build/C/man3/setenv.3:163 build/C/man3/strfromd.3:248 build/C/man3/strtod.3:213 build/C/man3/strtoimax.3:72 build/C/man3/strtol.3:299 build/C/man3/strtoul.3:225 build/C/man3/system.3:253 build/C/man7/vdso.7:582 build/C/man3/wcstombs.3:116 build/C/man3/wctomb.3:110 build/C/man2/getrandom.2:305 build/C/man3/getentropy.3:120 build/C/man7/random.7:226
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: build/C/man3/MB_CUR_MAX.3:44
msgid ""
"B<MB_LEN_MAX>(3), B<mblen>(3), B<mbstowcs>(3), B<mbtowc>(3), B<wcstombs>(3), "
"B<wctomb>(3)"
msgstr ""

#. type: SH
#: build/C/man3/MB_CUR_MAX.3:44 build/C/man3/MB_LEN_MAX.3:52 build/C/man2/_exit.2:136 build/C/man3/a64l.3:106 build/C/man3/atexit.3:181 build/C/man3/atof.3:80 build/C/man3/atoi.3:139 build/C/man3/canonicalize_file_name.3:90 build/C/man3/cfree.3:143 build/C/man3/clearenv.3:138 build/C/man3/drand48.3:280 build/C/man3/drand48_r.3:122 build/C/man3/ecvt.3:148 build/C/man3/ecvt_r.3:116 build/C/man3/exit.3:215 build/C/man3/gcvt.3:102 build/C/man3/getauxval.3:288 build/C/man3/getenv.3:150 build/C/man3/getloadavg.3:96 build/C/man3/getsubopt.3:241 build/C/man3/malloc.3:403 build/C/man3/mblen.3:115 build/C/man3/mbstowcs.3:235 build/C/man3/mbtowc.3:147 build/C/man3/mkdtemp.3:111 build/C/man3/mkstemp.3:256 build/C/man3/mktemp.3:138 build/C/man3/on_exit.3:117 build/C/man3/putenv.3:151 build/C/man3/qecvt.3:119 build/C/man3/rand.3:240 build/C/man3/random.3:211 build/C/man3/random_r.3:193 build/C/man3/rpmatch.3:166 build/C/man3/setenv.3:168 build/C/man3/strfromd.3:252 build/C/man3/strtod.3:223 build/C/man3/strtoimax.3:78 build/C/man3/strtol.3:306 build/C/man3/strtoul.3:233 build/C/man3/system.3:262 build/C/man7/vdso.7:598 build/C/man3/wcstombs.3:122 build/C/man3/wctomb.3:117 build/C/man2/getrandom.2:311 build/C/man3/getentropy.3:124 build/C/man7/random.7:233
#, no-wrap
msgid "COLOPHON"
msgstr ""

#. type: Plain text
#: build/C/man3/MB_CUR_MAX.3:52 build/C/man3/MB_LEN_MAX.3:60 build/C/man2/_exit.2:144 build/C/man3/a64l.3:114 build/C/man3/atexit.3:189 build/C/man3/atof.3:88 build/C/man3/atoi.3:147 build/C/man3/canonicalize_file_name.3:98 build/C/man3/cfree.3:151 build/C/man3/clearenv.3:146 build/C/man3/drand48.3:288 build/C/man3/drand48_r.3:130 build/C/man3/ecvt.3:156 build/C/man3/ecvt_r.3:124 build/C/man3/exit.3:223 build/C/man3/gcvt.3:110 build/C/man3/getauxval.3:296 build/C/man3/getenv.3:158 build/C/man3/getloadavg.3:104 build/C/man3/getsubopt.3:249 build/C/man3/malloc.3:411 build/C/man3/mblen.3:123 build/C/man3/mbstowcs.3:243 build/C/man3/mbtowc.3:155 build/C/man3/mkdtemp.3:119 build/C/man3/mkstemp.3:264 build/C/man3/mktemp.3:146 build/C/man3/on_exit.3:125 build/C/man3/putenv.3:159 build/C/man3/qecvt.3:127 build/C/man3/rand.3:248 build/C/man3/random.3:219 build/C/man3/random_r.3:201 build/C/man3/rpmatch.3:174 build/C/man3/setenv.3:176 build/C/man3/strfromd.3:260 build/C/man3/strtod.3:231 build/C/man3/strtoimax.3:86 build/C/man3/strtol.3:314 build/C/man3/strtoul.3:241 build/C/man3/system.3:270 build/C/man7/vdso.7:606 build/C/man3/wcstombs.3:130 build/C/man3/wctomb.3:125 build/C/man2/getrandom.2:319 build/C/man3/getentropy.3:132 build/C/man7/random.7:241
msgid ""
"This page is part of release 5.10 of the Linux I<man-pages> project.  A "
"description of the project, information about reporting bugs, and the latest "
"version of this page, can be found at "
"\\%https://www.kernel.org/doc/man-pages/."
msgstr ""

#. type: TH
#: build/C/man3/MB_LEN_MAX.3:17
#, no-wrap
msgid "MB_LEN_MAX"
msgstr ""

#. type: TH
#: build/C/man3/MB_LEN_MAX.3:17
#, no-wrap
msgid "2015-07-23"
msgstr ""

#. type: Plain text
#: build/C/man3/MB_LEN_MAX.3:20
msgid "MB_LEN_MAX - maximum multibyte length of a character across all locales"
msgstr ""

#. type: Plain text
#: build/C/man3/MB_LEN_MAX.3:23
#, no-wrap
msgid "B<#include E<lt>limits.hE<gt>>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/MB_LEN_MAX.3:29
msgid ""
"The B<MB_LEN_MAX> macro is the maximum number of bytes needed to represent a "
"single wide character, in any of the supported locales."
msgstr ""

#. type: Plain text
#: build/C/man3/MB_LEN_MAX.3:31
msgid "A constant integer greater than zero."
msgstr ""

#. type: SH
#: build/C/man3/MB_LEN_MAX.3:33 build/C/man2/_exit.2:84 build/C/man3/a64l.3:82 build/C/man3/atexit.3:92 build/C/man3/atoi.3:118 build/C/man3/clearenv.3:91 build/C/man3/ecvt.3:136 build/C/man3/ecvt_r.3:107 build/C/man3/exit.3:109 build/C/man3/getauxval.3:247 build/C/man3/getenv.3:115 build/C/man3/getsubopt.3:144 build/C/man3/malloc.3:284 build/C/man3/mblen.3:101 build/C/man3/mbstowcs.3:108 build/C/man3/mbtowc.3:127 build/C/man3/mkstemp.3:225 build/C/man3/on_exit.3:103 build/C/man3/putenv.3:95 build/C/man3/qecvt.3:109 build/C/man3/rand.3:161 build/C/man3/random.3:176 build/C/man3/setenv.3:140 build/C/man3/strfromd.3:200 build/C/man3/strtod.3:184 build/C/man3/strtol.3:181 build/C/man3/strtoul.3:182 build/C/man3/system.3:134 build/C/man7/vdso.7:129 build/C/man3/wcstombs.3:105 build/C/man3/wctomb.3:98 build/C/man2/getrandom.2:178 build/C/man3/getentropy.3:94
#, no-wrap
msgid "NOTES"
msgstr ""

#.  For an explanation of why the limit was raised to 16, see
#.  http://lists.gnu.org/archive/html/bug-gnulib/2015-05/msg00001.html
#.      From:    Bruno Haible
#.      Subject: Re: why is MB_LEN_MAX so large (16) on glibc
#.      Date:    Thu, 14 May 2015 02:30:14 +0200
#. type: Plain text
#: build/C/man3/MB_LEN_MAX.3:50
msgid ""
"The entities B<MB_LEN_MAX> and I<sizeof(wchar_t)> are totally unrelated.  In "
"glibc, B<MB_LEN_MAX> is typically 16 (6 in glibc versions earlier than 2.2), "
"while I<sizeof(wchar_t)> is 4."
msgstr ""

#. type: Plain text
#: build/C/man3/MB_LEN_MAX.3:52
msgid "B<MB_CUR_MAX>(3)"
msgstr ""

#. type: TH
#: build/C/man2/_exit.2:29
#, no-wrap
msgid "_EXIT"
msgstr ""

#. type: TH
#: build/C/man2/_exit.2:29 build/C/man3/exit.3:29
#, no-wrap
msgid "2020-02-09"
msgstr ""

#. type: Plain text
#: build/C/man2/_exit.2:32
msgid "_exit, _Exit - terminate the calling process"
msgstr ""

#. type: Plain text
#: build/C/man2/_exit.2:34 build/C/man3/getentropy.3:30
msgid "B<#include E<lt>unistd.hE<gt>>"
msgstr ""

#. type: Plain text
#: build/C/man2/_exit.2:36
msgid "B<void _exit(int >I<status>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man2/_exit.2:38 build/C/man3/a64l.3:15 build/C/man3/canonicalize_file_name.3:33 build/C/man3/ecvt.3:37 build/C/man3/getsubopt.3:30 build/C/man3/qecvt.3:33 build/C/man3/strtod.3:50
msgid "B<#include E<lt>stdlib.hE<gt>>"
msgstr ""

#. type: Plain text
#: build/C/man2/_exit.2:40
msgid "B<void _Exit(int >I<status>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man2/_exit.2:44 build/C/man3/a64l.3:23 build/C/man3/atoi.3:48 build/C/man3/cfree.3:48 build/C/man3/clearenv.3:39 build/C/man3/drand48.3:60 build/C/man3/drand48_r.3:63 build/C/man3/ecvt.3:47 build/C/man3/ecvt_r.3:53 build/C/man3/gcvt.3:43 build/C/man3/getenv.3:48 build/C/man3/getloadavg.3:47 build/C/man3/getsubopt.3:37 build/C/man3/malloc.3:51 build/C/man3/mkdtemp.3:39 build/C/man3/mkstemp.3:54 build/C/man3/mktemp.3:47 build/C/man3/on_exit.3:44 build/C/man3/putenv.3:50 build/C/man3/qecvt.3:45 build/C/man3/rand.3:58 build/C/man3/random.3:52 build/C/man3/random_r.3:47 build/C/man3/rpmatch.3:42 build/C/man3/setenv.3:52 build/C/man3/strfromd.3:51 build/C/man3/strtod.3:60 build/C/man3/strtol.3:48 build/C/man3/strtoul.3:50 build/C/man3/getentropy.3:36
msgid "Feature Test Macro Requirements for glibc (see B<feature_test_macros>(7)):"
msgstr ""

#. type: Plain text
#: build/C/man2/_exit.2:48
msgid "B<_Exit>():"
msgstr ""

#. type: Plain text
#: build/C/man2/_exit.2:50 build/C/man3/strtod.3:67
msgid "_ISOC99_SOURCE || _POSIX_C_SOURCE\\ E<gt>=\\ 200112L"
msgstr ""

#. type: Plain text
#: build/C/man2/_exit.2:65
msgid ""
"B<_exit>()  terminates the calling process \"immediately\".  Any open file "
"descriptors belonging to the process are closed.  Any children of the "
"process are inherited by B<init>(1)  (or by the nearest \"subreaper\" "
"process as defined through the use of the B<prctl>(2)  "
"B<PR_SET_CHILD_SUBREAPER> operation).  The process's parent is sent a "
"B<SIGCHLD> signal."
msgstr ""

#. type: Plain text
#: build/C/man2/_exit.2:72
msgid ""
"The value I<status & 0xFF> is returned to the parent process as the "
"process's exit status, and can be collected by the parent using one of the "
"B<wait>(2)  family of calls."
msgstr ""

#. type: Plain text
#: build/C/man2/_exit.2:77
msgid "The function B<_Exit>()  is equivalent to B<_exit>()."
msgstr ""

#. type: Plain text
#: build/C/man2/_exit.2:79
msgid "These functions do not return."
msgstr ""

#. type: Plain text
#: build/C/man2/_exit.2:84
msgid ""
"POSIX.1-2001, POSIX.1-2008, SVr4, 4.3BSD.  The function B<_Exit>()  was "
"introduced by C99."
msgstr ""

#. type: Plain text
#: build/C/man2/_exit.2:88
msgid ""
"For a discussion on the effects of an exit, the transmission of exit status, "
"zombie processes, signals sent, and so on, see B<exit>(3)."
msgstr ""

#. type: Plain text
#: build/C/man2/_exit.2:114
msgid ""
"The function B<_exit>()  is like B<exit>(3), but does not call any functions "
"registered with B<atexit>(3)  or B<on_exit>(3).  Open B<stdio>(3)  streams "
"are not flushed.  On the other hand, B<_exit>()  does close open file "
"descriptors, and this may cause an unknown delay, waiting for pending output "
"to finish.  If the delay is undesired, it may be useful to call functions "
"like B<tcflush>(3)  before calling B<_exit>().  Whether any pending I/O is "
"canceled, and which pending I/O may be canceled upon B<_exit>(), is "
"implementation-dependent."
msgstr ""

#. type: SS
#: build/C/man2/_exit.2:114
#, no-wrap
msgid "C library/kernel differences"
msgstr ""

#. type: Plain text
#: build/C/man2/_exit.2:124
msgid ""
"In glibc up to version 2.3, the B<_exit>()  wrapper function invoked the "
"kernel system call of the same name.  Since glibc 2.3, the wrapper function "
"invokes B<exit_group>(2), in order to terminate all of the threads in a "
"process.  (The raw B<_exit>()  system call terminates only the calling "
"thread.)"
msgstr ""

#. type: Plain text
#: build/C/man2/_exit.2:136
msgid ""
"B<execve>(2), B<exit_group>(2), B<fork>(2), B<kill>(2), B<wait>(2), "
"B<wait4>(2), B<waitpid>(2), B<atexit>(3), B<exit>(3), B<on_exit>(3), "
"B<termios>(3)"
msgstr ""

#.  Copyright 2002 walter harms (walter.harms@informatik.uni-oldenburg.de)
#
#.  %%%LICENSE_START(GPL_NOVERSION_ONELINE)
#.  Distributed under GPL
#.  %%%LICENSE_END
#
#.  Corrected, aeb, 2002-05-30
#. type: Plain text
#: build/C/man3/a64l.3:10
msgid "\\t"
msgstr ""

#. type: TH
#: build/C/man3/a64l.3:10
#, no-wrap
msgid "A64L"
msgstr ""

#. type: TH
#: build/C/man3/a64l.3:10 build/C/man3/atoi.3:33
#, no-wrap
msgid "2020-08-13"
msgstr ""

#. type: Plain text
#: build/C/man3/a64l.3:13
msgid "a64l, l64a - convert between long and base-64"
msgstr ""

#. type: Plain text
#: build/C/man3/a64l.3:17
msgid "B<long a64l(const char *>I<str64>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/a64l.3:19
msgid "B<char *l64a(long >I<value>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/a64l.3:27
msgid "B<a64l>(), B<l64a>():"
msgstr ""

#.     || _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
#. type: Plain text
#: build/C/man3/a64l.3:34
#, no-wrap
msgid ""
"_XOPEN_SOURCE\\ E<gt>=\\ 500\n"
"    || /* Glibc since 2.19: */ _DEFAULT_SOURCE\n"
"    || /* Glibc versions E<lt>= 2.19: */ _SVID_SOURCE\n"
msgstr ""

#. type: Plain text
#: build/C/man3/a64l.3:51
msgid ""
"These functions provide a conversion between 32-bit long integers and "
"little-endian base-64 ASCII strings (of length zero to six).  If the string "
"used as argument for B<a64l>()  has length greater than six, only the first "
"six bytes are used.  If the type I<long> has more than 32 bits, then "
"B<l64a>()  uses only the low order 32 bits of I<value>, and B<a64l>()  "
"sign-extends its 32-bit result."
msgstr ""

#. type: Plain text
#: build/C/man3/a64l.3:53
msgid "The 64 digits in the base-64 system are:"
msgstr ""

#. type: Plain text
#: build/C/man3/a64l.3:61
#, no-wrap
msgid ""
"\\&\\(aq.\\(aq\trepresents a 0\n"
"\\&\\(aq/\\(aq\trepresents a 1\n"
"0-9\trepresent  2-11\n"
"A-Z\trepresent 12-37\n"
"a-z\trepresent 38-63\n"
msgstr ""

#. type: Plain text
#: build/C/man3/a64l.3:65
msgid "So 123 = 59*64\\(ha0 + 1*64\\(ha1 = \"v/\"."
msgstr ""

#. type: SH
#: build/C/man3/a64l.3:65 build/C/man3/atexit.3:77 build/C/man3/atof.3:59 build/C/man3/atoi.3:85 build/C/man3/canonicalize_file_name.3:73 build/C/man3/cfree.3:124 build/C/man3/clearenv.3:64 build/C/man3/drand48.3:247 build/C/man3/drand48_r.3:94 build/C/man3/ecvt.3:109 build/C/man3/ecvt_r.3:89 build/C/man3/exit.3:90 build/C/man3/gcvt.3:76 build/C/man3/getauxval.3:233 build/C/man3/getenv.3:96 build/C/man3/getloadavg.3:77 build/C/man3/getsubopt.3:130 build/C/man3/malloc.3:259 build/C/man3/mblen.3:87 build/C/man3/mbstowcs.3:94 build/C/man3/mbtowc.3:113 build/C/man3/mkdtemp.3:86 build/C/man3/mkstemp.3:196 build/C/man3/mktemp.3:94 build/C/man3/on_exit.3:84 build/C/man3/putenv.3:81 build/C/man3/qecvt.3:85 build/C/man3/rand.3:135 build/C/man3/random.3:158 build/C/man3/random_r.3:158 build/C/man3/rpmatch.3:102 build/C/man3/setenv.3:123 build/C/man3/strfromd.3:176 build/C/man3/strtod.3:165 build/C/man3/strtoimax.3:57 build/C/man3/strtol.3:161 build/C/man3/strtoul.3:162 build/C/man3/system.3:120 build/C/man3/wcstombs.3:90 build/C/man3/wctomb.3:84
#, no-wrap
msgid "ATTRIBUTES"
msgstr ""

#. type: Plain text
#: build/C/man3/a64l.3:68 build/C/man3/atexit.3:80 build/C/man3/atof.3:62 build/C/man3/atoi.3:88 build/C/man3/canonicalize_file_name.3:76 build/C/man3/cfree.3:127 build/C/man3/clearenv.3:67 build/C/man3/drand48.3:250 build/C/man3/drand48_r.3:97 build/C/man3/ecvt.3:112 build/C/man3/ecvt_r.3:92 build/C/man3/exit.3:93 build/C/man3/gcvt.3:79 build/C/man3/getauxval.3:236 build/C/man3/getenv.3:99 build/C/man3/getloadavg.3:80 build/C/man3/getsubopt.3:133 build/C/man3/malloc.3:262 build/C/man3/mblen.3:90 build/C/man3/mbstowcs.3:97 build/C/man3/mbtowc.3:116 build/C/man3/mkdtemp.3:89 build/C/man3/mkstemp.3:199 build/C/man3/mktemp.3:97 build/C/man3/on_exit.3:87 build/C/man3/putenv.3:84 build/C/man3/qecvt.3:88 build/C/man3/rand.3:138 build/C/man3/random.3:161 build/C/man3/random_r.3:161 build/C/man3/rpmatch.3:105 build/C/man3/setenv.3:126 build/C/man3/strtod.3:168 build/C/man3/strtoimax.3:60 build/C/man3/strtol.3:164 build/C/man3/strtoul.3:165 build/C/man3/system.3:123 build/C/man3/wcstombs.3:93 build/C/man3/wctomb.3:87
msgid "For an explanation of the terms used in this section, see B<attributes>(7)."
msgstr ""

#. type: tbl table
#: build/C/man3/a64l.3:72 build/C/man3/atexit.3:84 build/C/man3/atof.3:66 build/C/man3/atoi.3:92 build/C/man3/canonicalize_file_name.3:80 build/C/man3/cfree.3:131 build/C/man3/clearenv.3:71 build/C/man3/drand48.3:255 build/C/man3/drand48_r.3:102 build/C/man3/ecvt.3:116 build/C/man3/ecvt_r.3:96 build/C/man3/exit.3:97 build/C/man3/gcvt.3:83 build/C/man3/getauxval.3:240 build/C/man3/getenv.3:103 build/C/man3/getloadavg.3:84 build/C/man3/getsubopt.3:137 build/C/man3/malloc.3:266 build/C/man3/mblen.3:94 build/C/man3/mbstowcs.3:101 build/C/man3/mbtowc.3:120 build/C/man3/mkdtemp.3:93 build/C/man3/mkstemp.3:203 build/C/man3/mktemp.3:101 build/C/man3/on_exit.3:91 build/C/man3/putenv.3:88 build/C/man3/qecvt.3:92 build/C/man3/rand.3:142 build/C/man3/random.3:165 build/C/man3/random_r.3:165 build/C/man3/rpmatch.3:109 build/C/man3/setenv.3:131 build/C/man3/strfromd.3:187 build/C/man3/strtod.3:172 build/C/man3/strtoimax.3:64 build/C/man3/strtol.3:168 build/C/man3/strtoul.3:169 build/C/man3/system.3:127 build/C/man3/wcstombs.3:97 build/C/man3/wctomb.3:91 build/C/man7/random.7:135
#, no-wrap
msgid "Interface"
msgstr ""

#. type: tbl table
#: build/C/man3/a64l.3:72 build/C/man3/atexit.3:84 build/C/man3/atof.3:66 build/C/man3/atoi.3:92 build/C/man3/canonicalize_file_name.3:80 build/C/man3/cfree.3:131 build/C/man3/clearenv.3:71 build/C/man3/drand48.3:255 build/C/man3/drand48_r.3:102 build/C/man3/ecvt.3:116 build/C/man3/ecvt_r.3:96 build/C/man3/exit.3:97 build/C/man3/gcvt.3:83 build/C/man3/getauxval.3:240 build/C/man3/getenv.3:103 build/C/man3/getloadavg.3:84 build/C/man3/getsubopt.3:137 build/C/man3/malloc.3:266 build/C/man3/mblen.3:94 build/C/man3/mbstowcs.3:101 build/C/man3/mbtowc.3:120 build/C/man3/mkdtemp.3:93 build/C/man3/mkstemp.3:203 build/C/man3/mktemp.3:101 build/C/man3/on_exit.3:91 build/C/man3/putenv.3:88 build/C/man3/qecvt.3:92 build/C/man3/rand.3:142 build/C/man3/random.3:165 build/C/man3/random_r.3:165 build/C/man3/rpmatch.3:109 build/C/man3/setenv.3:131 build/C/man3/strfromd.3:187 build/C/man3/strtod.3:172 build/C/man3/strtoimax.3:64 build/C/man3/strtol.3:168 build/C/man3/strtoul.3:169 build/C/man3/system.3:127 build/C/man3/wcstombs.3:97 build/C/man3/wctomb.3:91
#, no-wrap
msgid "Attribute"
msgstr ""

#. type: tbl table
#: build/C/man3/a64l.3:72 build/C/man3/atexit.3:84 build/C/man3/atof.3:66 build/C/man3/atoi.3:92 build/C/man3/canonicalize_file_name.3:80 build/C/man3/cfree.3:131 build/C/man3/clearenv.3:71 build/C/man3/drand48.3:255 build/C/man3/drand48_r.3:102 build/C/man3/ecvt.3:116 build/C/man3/ecvt_r.3:96 build/C/man3/exit.3:97 build/C/man3/gcvt.3:83 build/C/man3/getauxval.3:240 build/C/man3/getenv.3:103 build/C/man3/getloadavg.3:84 build/C/man3/getsubopt.3:137 build/C/man3/malloc.3:266 build/C/man3/mblen.3:94 build/C/man3/mbstowcs.3:101 build/C/man3/mbtowc.3:120 build/C/man3/mkdtemp.3:93 build/C/man3/mkstemp.3:203 build/C/man3/mktemp.3:101 build/C/man3/on_exit.3:91 build/C/man3/putenv.3:88 build/C/man3/qecvt.3:92 build/C/man3/rand.3:142 build/C/man3/random.3:165 build/C/man3/random_r.3:165 build/C/man3/rpmatch.3:109 build/C/man3/setenv.3:131 build/C/man3/strfromd.3:187 build/C/man3/strtod.3:172 build/C/man3/strtoimax.3:64 build/C/man3/strtol.3:168 build/C/man3/strtoul.3:169 build/C/man3/system.3:127 build/C/man3/wcstombs.3:97 build/C/man3/wctomb.3:91
#, no-wrap
msgid "Value"
msgstr ""

#. type: tbl table
#: build/C/man3/a64l.3:75
#, no-wrap
msgid "B<l64a>()"
msgstr ""

#. type: tbl table
#: build/C/man3/a64l.3:75 build/C/man3/a64l.3:78 build/C/man3/atexit.3:87 build/C/man3/atof.3:69 build/C/man3/atoi.3:97 build/C/man3/canonicalize_file_name.3:83 build/C/man3/cfree.3:134 build/C/man3/clearenv.3:74 build/C/man3/drand48.3:266 build/C/man3/drand48_r.3:113 build/C/man3/ecvt.3:119 build/C/man3/ecvt.3:122 build/C/man3/ecvt_r.3:103 build/C/man3/exit.3:100 build/C/man3/gcvt.3:86 build/C/man3/getauxval.3:243 build/C/man3/getenv.3:107 build/C/man3/getloadavg.3:87 build/C/man3/getsubopt.3:140 build/C/man3/malloc.3:273 build/C/man3/mblen.3:97 build/C/man3/mbstowcs.3:104 build/C/man3/mbtowc.3:123 build/C/man3/mkdtemp.3:96 build/C/man3/mkstemp.3:210 build/C/man3/mktemp.3:104 build/C/man3/on_exit.3:94 build/C/man3/putenv.3:91 build/C/man3/qecvt.3:95 build/C/man3/qecvt.3:98 build/C/man3/qecvt.3:101 build/C/man3/rand.3:147 build/C/man3/random.3:172 build/C/man3/random_r.3:172 build/C/man3/rpmatch.3:112 build/C/man3/setenv.3:135 build/C/man3/strfromd.3:192 build/C/man3/strtod.3:177 build/C/man3/strtoimax.3:68 build/C/man3/strtol.3:173 build/C/man3/strtoul.3:174 build/C/man3/system.3:130 build/C/man3/wcstombs.3:100 build/C/man3/wctomb.3:94
#, no-wrap
msgid "Thread safety"
msgstr ""

#. type: tbl table
#: build/C/man3/a64l.3:75
#, no-wrap
msgid "MT-Unsafe race:l64a"
msgstr ""

#. type: tbl table
#: build/C/man3/a64l.3:78
#, no-wrap
msgid "B<a64l>()"
msgstr ""

#. type: tbl table
#: build/C/man3/a64l.3:78 build/C/man3/atexit.3:87 build/C/man3/canonicalize_file_name.3:83 build/C/man3/ecvt_r.3:103 build/C/man3/gcvt.3:86 build/C/man3/getauxval.3:243 build/C/man3/getloadavg.3:87 build/C/man3/getsubopt.3:140 build/C/man3/malloc.3:273 build/C/man3/mbstowcs.3:104 build/C/man3/mkdtemp.3:96 build/C/man3/mkstemp.3:210 build/C/man3/mktemp.3:104 build/C/man3/on_exit.3:94 build/C/man3/qecvt.3:101 build/C/man3/rand.3:147 build/C/man3/random.3:172 build/C/man3/system.3:130 build/C/man3/wcstombs.3:100
#, no-wrap
msgid "MT-Safe"
msgstr ""

#. type: Plain text
#: build/C/man3/a64l.3:82 build/C/man3/getsubopt.3:144
msgid "POSIX.1-2001, POSIX.1-2008."
msgstr ""

#. type: Plain text
#: build/C/man3/a64l.3:87
msgid ""
"The value returned by B<l64a>()  may be a pointer to a static buffer, "
"possibly overwritten by later calls."
msgstr ""

#. type: Plain text
#: build/C/man3/a64l.3:96
msgid ""
"The behavior of B<l64a>()  is undefined when I<value> is negative.  If "
"I<value> is zero, it returns an empty string."
msgstr ""

#. type: Plain text
#: build/C/man3/a64l.3:99
msgid ""
"These functions are broken in glibc before 2.2.5 (puts most significant "
"digit first)."
msgstr ""

#. type: Plain text
#: build/C/man3/a64l.3:102
msgid "This is not the encoding used by B<uuencode>(1)."
msgstr ""

#.  .BR itoa (3),
#. type: Plain text
#: build/C/man3/a64l.3:106
msgid "B<uuencode>(1), B<strtoul>(3)"
msgstr ""

#. type: TH
#: build/C/man3/atexit.3:33
#, no-wrap
msgid "ATEXIT"
msgstr ""

#. type: TH
#: build/C/man3/atexit.3:33 build/C/man3/getauxval.3:27 build/C/man3/getsubopt.3:25 build/C/man3/malloc.3:34 build/C/man3/rpmatch.3:29 build/C/man3/wcstombs.3:16
#, no-wrap
msgid "2020-06-09"
msgstr ""

#. type: Plain text
#: build/C/man3/atexit.3:36
msgid "atexit - register a function to be called at normal process termination"
msgstr ""

#. type: Plain text
#: build/C/man3/atexit.3:41
#, no-wrap
msgid "B<int atexit(void (*>I<function>B<)(void));>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/atexit.3:54
msgid ""
"The B<atexit>()  function registers the given I<function> to be called at "
"normal process termination, either via B<exit>(3)  or via return from the "
"program's I<main>().  Functions so registered are called in the reverse "
"order of their registration; no arguments are passed."
msgstr ""

#. type: Plain text
#: build/C/man3/atexit.3:57 build/C/man3/on_exit.3:72
msgid ""
"The same function may be registered multiple times: it is called once for "
"each registration."
msgstr ""

#.  POSIX.1-2001, POSIX.1-2008
#. type: Plain text
#: build/C/man3/atexit.3:64
msgid ""
"POSIX.1 requires that an implementation allow at least B<ATEXIT_MAX> (32) "
"such functions to be registered.  The actual limit supported by an "
"implementation can be obtained using B<sysconf>(3)."
msgstr ""

#. type: Plain text
#: build/C/man3/atexit.3:72 build/C/man3/on_exit.3:79
msgid ""
"When a child process is created via B<fork>(2), it inherits copies of its "
"parent's registrations.  Upon a successful call to one of the B<exec>(3)  "
"functions, all registrations are removed."
msgstr ""

#. type: Plain text
#: build/C/man3/atexit.3:77
msgid ""
"The B<atexit>()  function returns the value 0 if successful; otherwise it "
"returns a nonzero value."
msgstr ""

#. type: tbl table
#: build/C/man3/atexit.3:87
#, no-wrap
msgid "B<atexit>()"
msgstr ""

#. type: Plain text
#: build/C/man3/atexit.3:92 build/C/man3/atof.3:73 build/C/man3/exit.3:109
msgid "POSIX.1-2001, POSIX.1-2008, C89, C99, SVr4, 4.3BSD."
msgstr ""

#. type: Plain text
#: build/C/man3/atexit.3:99
msgid ""
"Functions registered using B<atexit>()  (and B<on_exit>(3))  are not called "
"if a process terminates abnormally because of the delivery of a signal."
msgstr ""

#. type: Plain text
#: build/C/man3/atexit.3:106
msgid ""
"If one of the registered functions calls B<_exit>(2), then any remaining "
"functions are not invoked, and the other process termination steps performed "
"by B<exit>(3)  are not performed."
msgstr ""

#.  POSIX.1-2001, POSIX.1-2008
#.  This can happen on OpenBSD 4.2 for example, and is documented
#.  as occurring on FreeBSD as well.
#.  Glibc does "the Right Thing" -- invocation of the remaining
#.  exit handlers carries on as normal.
#. type: Plain text
#: build/C/man3/atexit.3:124
msgid ""
"POSIX.1 says that the result of calling B<exit>(3)  more than once (i.e., "
"calling B<exit>(3)  within a function registered using B<atexit>())  is "
"undefined.  On some systems (but not Linux), this can result in an infinite "
"recursion; portable programs should not invoke B<exit>(3)  inside a function "
"registered using B<atexit>()."
msgstr ""

#. type: Plain text
#: build/C/man3/atexit.3:133
msgid ""
"The B<atexit>()  and B<on_exit>(3)  functions register functions on the same "
"list: at normal process termination, the registered functions are invoked in "
"reverse order of their registration by these two functions."
msgstr ""

#.  In glibc, things seem to be handled okay
#. type: Plain text
#: build/C/man3/atexit.3:139
msgid ""
"According to POSIX.1, the result is undefined if B<longjmp>(3)  is used to "
"terminate execution of one of the functions registered using B<atexit>()."
msgstr ""

#. type: SS
#: build/C/man3/atexit.3:139
#, no-wrap
msgid "Linux notes"
msgstr ""

#. type: Plain text
#: build/C/man3/atexit.3:146
msgid ""
"Since glibc 2.2.3, B<atexit>()  (and B<on_exit>(3))  can be used within a "
"shared library to establish functions that are called when the shared "
"library is unloaded."
msgstr ""

#. type: SH
#: build/C/man3/atexit.3:146 build/C/man3/getsubopt.3:150 build/C/man3/mbstowcs.3:120 build/C/man3/rand.3:180 build/C/man3/rpmatch.3:135 build/C/man3/strfromd.3:209 build/C/man3/strtod.3:208 build/C/man3/strtol.3:219 build/C/man3/strtoul.3:220
#, no-wrap
msgid "EXAMPLES"
msgstr ""

#. type: Plain text
#: build/C/man3/atexit.3:151
#, no-wrap
msgid ""
"#include E<lt>stdio.hE<gt>\n"
"#include E<lt>stdlib.hE<gt>\n"
"#include E<lt>unistd.hE<gt>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/atexit.3:157
#, no-wrap
msgid ""
"void\n"
"bye(void)\n"
"{\n"
"    printf(\"That was all, folks\\en\");\n"
"}\n"
msgstr ""

#. type: Plain text
#: build/C/man3/atexit.3:163
#, no-wrap
msgid ""
"int\n"
"main(void)\n"
"{\n"
"    long a;\n"
"    int i;\n"
msgstr ""

#. type: Plain text
#: build/C/man3/atexit.3:166
#, no-wrap
msgid ""
"    a = sysconf(_SC_ATEXIT_MAX);\n"
"    printf(\"ATEXIT_MAX = %ld\\en\", a);\n"
msgstr ""

#. type: Plain text
#: build/C/man3/atexit.3:172
#, no-wrap
msgid ""
"    i = atexit(bye);\n"
"    if (i != 0) {\n"
"        fprintf(stderr, \"cannot set exit function\\en\");\n"
"        exit(EXIT_FAILURE);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: build/C/man3/atexit.3:175 build/C/man3/getsubopt.3:238 build/C/man3/mbstowcs.3:228 build/C/man3/rand.3:235 build/C/man3/strtol.3:298
#, no-wrap
msgid ""
"    exit(EXIT_SUCCESS);\n"
"}\n"
msgstr ""

#. type: Plain text
#: build/C/man3/atexit.3:181
msgid "B<_exit>(2), B<dlopen>(3), B<exit>(3), B<on_exit>(3)"
msgstr ""

#. type: TH
#: build/C/man3/atof.3:31
#, no-wrap
msgid "ATOF"
msgstr ""

#. type: TH
#: build/C/man3/atof.3:31
#, no-wrap
msgid "2016-12-12"
msgstr ""

#. type: TH
#: build/C/man3/atof.3:31 build/C/man3/atoi.3:33 build/C/man3/canonicalize_file_name.3:26 build/C/man3/drand48_r.3:27 build/C/man3/ecvt_r.3:30 build/C/man3/getauxval.3:27 build/C/man3/getenv.3:33 build/C/man3/getsubopt.3:25 build/C/man3/malloc.3:34 build/C/man3/mblen.3:16 build/C/man3/mbstowcs.3:17 build/C/man3/mbtowc.3:16 build/C/man3/mkdtemp.3:26 build/C/man3/mkstemp.3:35 build/C/man3/mktemp.3:34 build/C/man3/on_exit.3:31 build/C/man3/putenv.3:36 build/C/man3/qecvt.3:28 build/C/man3/random.3:33 build/C/man3/random_r.3:26 build/C/man3/rpmatch.3:29 build/C/man3/setenv.3:37 build/C/man3/strfromd.3:32 build/C/man3/strtol.3:32 build/C/man3/strtoul.3:33 build/C/man3/wcstombs.3:16 build/C/man3/wctomb.3:16
#, no-wrap
msgid "GNU"
msgstr ""

#. type: Plain text
#: build/C/man3/atof.3:34
msgid "atof - convert a string to a double"
msgstr ""

#. type: Plain text
#: build/C/man3/atof.3:39
#, no-wrap
msgid "B<double atof(const char *>I<nptr>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/atof.3:47
msgid ""
"The B<atof>()  function converts the initial portion of the string pointed "
"to by I<nptr> to I<double>.  The behavior is the same as"
msgstr ""

#. type: Plain text
#: build/C/man3/atof.3:51
#, no-wrap
msgid "strtod(nptr, NULL);\n"
msgstr ""

#. type: Plain text
#: build/C/man3/atof.3:57
msgid "except that B<atof>()  does not detect errors."
msgstr ""

#. type: Plain text
#: build/C/man3/atof.3:59
msgid "The converted value."
msgstr ""

#. type: tbl table
#: build/C/man3/atof.3:69
#, no-wrap
msgid "B<atof>()"
msgstr ""

#. type: tbl table
#: build/C/man3/atof.3:69 build/C/man3/atoi.3:97 build/C/man3/rpmatch.3:112 build/C/man3/strfromd.3:192 build/C/man3/strtod.3:177 build/C/man3/strtoimax.3:68 build/C/man3/strtol.3:173 build/C/man3/strtoul.3:174
#, no-wrap
msgid "MT-Safe locale"
msgstr ""

#. type: Plain text
#: build/C/man3/atof.3:80
msgid ""
"B<atoi>(3), B<atol>(3), B<strfromd>(3), B<strtod>(3), B<strtol>(3), "
"B<strtoul>(3)"
msgstr ""

#. type: TH
#: build/C/man3/atoi.3:33
#, no-wrap
msgid "ATOI"
msgstr ""

#. type: Plain text
#: build/C/man3/atoi.3:36
msgid "atoi, atol, atoll - convert a string to an integer"
msgstr ""

#. type: Plain text
#: build/C/man3/atoi.3:43
#, no-wrap
msgid ""
"B<int atoi(const char *>I<nptr>B<);>\n"
"B<long atol(const char *>I<nptr>B<);>\n"
"B<long long atoll(const char *>I<nptr>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/atoi.3:52
msgid "B<atoll>():"
msgstr ""

#. type: Plain text
#: build/C/man3/atoi.3:55
#, no-wrap
msgid ""
"_ISOC99_SOURCE ||\n"
"    || /* Glibc versions E<lt>= 2.19: */ _BSD_SOURCE || _SVID_SOURCE\n"
msgstr ""

#. type: Plain text
#: build/C/man3/atoi.3:64
msgid ""
"The B<atoi>()  function converts the initial portion of the string pointed "
"to by I<nptr> to I<int>.  The behavior is the same as"
msgstr ""

#. type: Plain text
#: build/C/man3/atoi.3:68
#, no-wrap
msgid "strtol(nptr, NULL, 10);\n"
msgstr ""

#. type: Plain text
#: build/C/man3/atoi.3:74
msgid "except that B<atoi>()  does not detect errors."
msgstr ""

#. type: Plain text
#: build/C/man3/atoi.3:83
msgid ""
"The B<atol>()  and B<atoll>()  functions behave the same as B<atoi>(), "
"except that they convert the initial portion of the string to their return "
"type of I<long> or I<long long>."
msgstr ""

#. type: Plain text
#: build/C/man3/atoi.3:85
msgid "The converted value or 0 on error."
msgstr ""

#. type: tbl table
#: build/C/man3/atoi.3:97
#, no-wrap
msgid ""
"B<atoi>(),\n"
"B<atol>(),\n"
"B<atoll>()"
msgstr ""

#.  .SH NOTES
#.  Linux libc provided
#.  .BR atoq ()
#.  as an obsolete name for
#.  .BR atoll ();
#.  .BR atoq ()
#.  is not provided by glibc.
#.  The
#.  .BR atoll ()
#.  function is present in glibc 2 since version 2.0.2, but
#.  not in libc4 or libc5.
#. type: Plain text
#: build/C/man3/atoi.3:118
msgid ""
"POSIX.1-2001, POSIX.1-2008, C99, SVr4, 4.3BSD.  C89 and POSIX.1-1996 include "
"the functions B<atoi>()  and B<atol>()  only."
msgstr ""

#. type: Plain text
#: build/C/man3/atoi.3:123
msgid ""
"POSIX.1 leaves the return value of B<atoi>()  on error unspecified.  On "
"glibc, musl libc, and uClibc, 0 is returned on error."
msgstr ""

#. type: SH
#: build/C/man3/atoi.3:123 build/C/man3/getauxval.3:275 build/C/man3/mktemp.3:116 build/C/man3/random.3:197 build/C/man3/random_r.3:178 build/C/man3/rpmatch.3:120 build/C/man3/setenv.3:154 build/C/man2/getrandom.2:298
#, no-wrap
msgid "BUGS"
msgstr ""

#. type: Plain text
#: build/C/man3/atoi.3:134
msgid ""
"I<errno> is not set on error so there is no way to distinguish between 0 as "
"an error and as the converted value.  No checks for overflow or underflow "
"are done.  Only base-10 input can be converted.  It is recommended to "
"instead use the B<strtol>()  and B<strtoul>()  family of functions in new "
"programs."
msgstr ""

#. type: Plain text
#: build/C/man3/atoi.3:139
msgid "B<atof>(3), B<strtod>(3), B<strtol>(3), B<strtoul>(3)"
msgstr ""

#. type: TH
#: build/C/man3/canonicalize_file_name.3:26
#, no-wrap
msgid "CANONICALIZE_FILE_NAME"
msgstr ""

#. type: TH
#: build/C/man3/canonicalize_file_name.3:26 build/C/man3/cfree.3:24 build/C/man3/clearenv.3:26 build/C/man3/gcvt.3:30 build/C/man3/getenv.3:33 build/C/man3/mkstemp.3:35 build/C/man3/mktemp.3:34 build/C/man3/random_r.3:26 build/C/man3/setenv.3:37 build/C/man2/getrandom.2:27 build/C/man3/getentropy.3:25
#, no-wrap
msgid "2017-09-15"
msgstr ""

#. type: Plain text
#: build/C/man3/canonicalize_file_name.3:29
msgid "canonicalize_file_name - return the canonicalized absolute pathname"
msgstr ""

#. type: Plain text
#: build/C/man3/canonicalize_file_name.3:31
msgid "B<#define _GNU_SOURCE> /* See feature_test_macros(7) */"
msgstr ""

#. type: Plain text
#: build/C/man3/canonicalize_file_name.3:35
msgid "B<char *canonicalize_file_name(const char *>I<path>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/canonicalize_file_name.3:49
msgid ""
"The B<canonicalize_file_name>()  function returns a null-terminated string "
"containing the canonicalized absolute pathname corresponding to I<path>.  In "
"the returned string, symbolic links are resolved, as are I<.> and I<..> "
"pathname components.  Consecutive slash (I</>)  characters are replaced by a "
"single slash."
msgstr ""

#. type: Plain text
#: build/C/man3/canonicalize_file_name.3:55
msgid ""
"The returned string is dynamically allocated by B<canonicalize_file_name>()  "
"and the caller should deallocate it with B<free>(3)  when it is no longer "
"required."
msgstr ""

#. type: Plain text
#: build/C/man3/canonicalize_file_name.3:59
msgid "The call I<canonicalize_file_name(path)> is equivalent to the call:"
msgstr ""

#. type: Plain text
#: build/C/man3/canonicalize_file_name.3:61
#, no-wrap
msgid "    realpath(path, NULL);\n"
msgstr ""

#. type: Plain text
#: build/C/man3/canonicalize_file_name.3:70
msgid ""
"On success, B<canonicalize_file_name>()  returns a null-terminated string.  "
"On error (e.g., a pathname component is unreadable or does not exist), "
"B<canonicalize_file_name>()  returns NULL and sets I<errno> to indicate the "
"error."
msgstr ""

#. type: SH
#: build/C/man3/canonicalize_file_name.3:70 build/C/man3/getauxval.3:222 build/C/man3/malloc.3:240 build/C/man3/mkdtemp.3:75 build/C/man3/mkstemp.3:162 build/C/man3/mktemp.3:90 build/C/man3/putenv.3:77 build/C/man3/random.3:146 build/C/man3/random_r.3:135 build/C/man3/rpmatch.3:85 build/C/man3/setenv.3:114 build/C/man3/strtod.3:161 build/C/man3/strtol.3:144 build/C/man3/strtoul.3:145 build/C/man3/system.3:116 build/C/man2/getrandom.2:140 build/C/man3/getentropy.3:65
#, no-wrap
msgid "ERRORS"
msgstr ""

#. type: Plain text
#: build/C/man3/canonicalize_file_name.3:73
msgid "See B<realpath>(3)."
msgstr ""

#. type: tbl table
#: build/C/man3/canonicalize_file_name.3:83
#, no-wrap
msgid "B<canonicalize_file_name>()"
msgstr ""

#. type: Plain text
#: build/C/man3/canonicalize_file_name.3:87
msgid "This function is a GNU extension."
msgstr ""

#. type: Plain text
#: build/C/man3/canonicalize_file_name.3:90
msgid "B<readlink>(2), B<realpath>(3)"
msgstr ""

#. type: TH
#: build/C/man3/cfree.3:24
#, no-wrap
msgid "CFREE"
msgstr ""

#. type: Plain text
#: build/C/man3/cfree.3:27
msgid "cfree - free allocated memory"
msgstr ""

#. type: Plain text
#: build/C/man3/cfree.3:34
#, no-wrap
msgid ""
"/* In SunOS 4 */\n"
"B<int cfree(void *>I<ptr>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/cfree.3:37
#, no-wrap
msgid ""
"/* In glibc or FreeBSD libcompat */\n"
"B<void cfree(void *>I<ptr>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/cfree.3:40
#, no-wrap
msgid ""
"/* In SCO OpenServer */\n"
"B<void cfree(char *>I<ptr>B<, unsigned >I<num>B<, unsigned >I<size>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/cfree.3:43
#, no-wrap
msgid ""
"/* In Solaris watchmalloc.so.1 */\n"
"B<void cfree(void *>I<ptr>B<, size_t >I<nelem>B<, size_t >I<elsize>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/cfree.3:55
#, no-wrap
msgid ""
"B<cfree>():\n"
"    Since glibc 2.19:\n"
"        _DEFAULT_SOURCE\n"
"    Glibc 2.19 and earlier:\n"
"        _BSD_SOURCE || _SVID_SOURCE\n"
msgstr ""

#. type: Plain text
#: build/C/man3/cfree.3:61
msgid ""
"This function should never be used.  Use B<free>(3)  instead.  Starting with "
"version 2.26, it has been removed from glibc."
msgstr ""

#. type: SS
#: build/C/man3/cfree.3:61
#, no-wrap
msgid "1-arg cfree"
msgstr ""

#. type: Plain text
#: build/C/man3/cfree.3:67
msgid ""
"In glibc, the function B<cfree>()  is a synonym for B<free>(3), \"added for "
"compatibility with SunOS\"."
msgstr ""

#. type: Plain text
#: build/C/man3/cfree.3:73
msgid ""
"Other systems have other functions with this name.  The declaration is "
"sometimes in I<E<lt>stdlib.hE<gt>> and sometimes in I<E<lt>malloc.hE<gt>>."
msgstr ""

#. type: SS
#: build/C/man3/cfree.3:73
#, no-wrap
msgid "3-arg cfree"
msgstr ""

#. type: Plain text
#: build/C/man3/cfree.3:78
msgid ""
"Some SCO and Solaris versions have malloc libraries with a 3-argument "
"B<cfree>(), apparently as an analog to B<calloc>(3)."
msgstr ""

#. type: Plain text
#: build/C/man3/cfree.3:80
msgid "If you need it while porting something, add"
msgstr ""

#. type: Plain text
#: build/C/man3/cfree.3:84
#, no-wrap
msgid "#define cfree(p, n, s) free((p))\n"
msgstr ""

#. type: Plain text
#: build/C/man3/cfree.3:88
msgid "to your file."
msgstr ""

#. type: Plain text
#: build/C/man3/cfree.3:97
msgid ""
"A frequently asked question is \"Can I use B<free>(3)  to free memory "
"allocated with B<calloc>(3), or do I need B<cfree>()?\" Answer: use "
"B<free>(3)."
msgstr ""

#. type: Plain text
#: build/C/man3/cfree.3:102
msgid ""
"An SCO manual writes: \"The cfree routine is provided for compliance to the "
"iBCSe2 standard and simply calls free.  The num and size arguments to cfree "
"are not used.\""
msgstr ""

#. type: Plain text
#: build/C/man3/cfree.3:118
msgid ""
"The SunOS version of B<cfree>()  (which is a synonym for B<free>(3))  "
"returns 1 on success and 0 on failure.  In case of error, I<errno> is set to "
"B<EINVAL>: the value of I<ptr> was not a pointer to a block previously "
"allocated by one of the routines in the B<malloc>(3)  family."
msgstr ""

#. type: SH
#: build/C/man3/cfree.3:118 build/C/man3/clearenv.3:62 build/C/man3/getauxval.3:229 build/C/man3/getenv.3:93 build/C/man3/getloadavg.3:75 build/C/man3/malloc.3:256 build/C/man3/mkdtemp.3:84 build/C/man3/mkstemp.3:189 build/C/man3/strfromd.3:169 build/C/man2/getrandom.2:172 build/C/man3/getentropy.3:87
#, no-wrap
msgid "VERSIONS"
msgstr ""

#.  commit 025b33ae84bb8f15b2748a1d8605dca453fce112
#. type: Plain text
#: build/C/man3/cfree.3:124
msgid "The B<cfree>()  function was removed from glibc in version 2.26."
msgstr ""

#. type: tbl table
#: build/C/man3/cfree.3:134
#, no-wrap
msgid "B<cfree>()"
msgstr ""

#. type: tbl table
#: build/C/man3/cfree.3:134
#, no-wrap
msgid "MT-Safe /* In glibc */"
msgstr ""

#. type: Plain text
#: build/C/man3/cfree.3:141
msgid ""
"The 3-argument version of B<cfree>()  as used by SCO conforms to the iBCSe2 "
"standard: Intel386 Binary Compatibility Specification, Edition 2."
msgstr ""

#. type: Plain text
#: build/C/man3/cfree.3:143
msgid "B<malloc>(3)"
msgstr ""

#. type: TH
#: build/C/man3/clearenv.3:26
#, no-wrap
msgid "CLEARENV"
msgstr ""

#. type: Plain text
#: build/C/man3/clearenv.3:29
msgid "clearenv - clear the environment"
msgstr ""

#. type: Plain text
#: build/C/man3/clearenv.3:34
#, no-wrap
msgid "B<int clearenv(void);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/clearenv.3:44
#, no-wrap
msgid ""
"B<clearenv>():\n"
"    /* Glibc since 2.19: */ _DEFAULT_SOURCE\n"
"        || /* Glibc versions E<lt>= 2.19: */ _SVID_SOURCE || _BSD_SOURCE\n"
msgstr ""

#. type: Plain text
#: build/C/man3/clearenv.3:55
msgid ""
"The B<clearenv>()  function clears the environment of all name-value pairs "
"and sets the value of the external variable I<environ> to NULL.  After this "
"call, new variables can be added to the environment using B<putenv>(3)  and "
"B<setenv>(3)."
msgstr ""

#.  Most versions of UNIX return -1 on error, or do not even have errors.
#.  Glibc info and the Watcom C library document "a nonzero value".
#. type: Plain text
#: build/C/man3/clearenv.3:62
msgid ""
"The B<clearenv>()  function returns zero on success, and a nonzero value on "
"failure."
msgstr ""

#. type: Plain text
#: build/C/man3/clearenv.3:64
msgid "Available since glibc 2.0."
msgstr ""

#. type: tbl table
#: build/C/man3/clearenv.3:74
#, no-wrap
msgid "B<clearenv>()"
msgstr ""

#. type: tbl table
#: build/C/man3/clearenv.3:74 build/C/man3/putenv.3:91 build/C/man3/setenv.3:135
#, no-wrap
msgid "MT-Unsafe const:env"
msgstr ""

#. type: Plain text
#: build/C/man3/clearenv.3:91
msgid ""
"Various UNIX variants (DG/UX, HP-UX, QNX, ...).  POSIX.9 (bindings for "
"FORTRAN77).  POSIX.1-1996 did not accept B<clearenv>()  and B<putenv>(3), "
"but changed its mind and scheduled these functions for some later issue of "
"this standard (see \\[sc]B.4.6.1).  However, POSIX.1-2001 adds only "
"B<putenv>(3), and rejected B<clearenv>()."
msgstr ""

#. type: Plain text
#: build/C/man3/clearenv.3:95
msgid "On systems where B<clearenv>()  is unavailable, the assignment"
msgstr ""

#. type: Plain text
#: build/C/man3/clearenv.3:99
#, no-wrap
msgid "environ = NULL;\n"
msgstr ""

#. type: Plain text
#: build/C/man3/clearenv.3:103
msgid "will probably do."
msgstr ""

#. type: Plain text
#: build/C/man3/clearenv.3:112
msgid ""
"The B<clearenv>()  function may be useful in security-conscious applications "
"that want to precisely control the environment that is passed to programs "
"executed using B<exec>(3).  The application would do this by first clearing "
"the environment and then adding select environment variables."
msgstr ""

#. type: Plain text
#: build/C/man3/clearenv.3:119
msgid ""
"Note that the main effect of B<clearenv>()  is to adjust the value of the "
"pointer B<environ>(7); this function does not erase the contents of the "
"buffers containing the environment definitions."
msgstr ""

#.  .LP
#.  HP-UX has a ENOMEM error return.
#. type: Plain text
#: build/C/man3/clearenv.3:132
msgid ""
"The DG/UX and Tru64 man pages write: If I<environ> has been modified by "
"anything other than the B<putenv>(3), B<getenv>(3), or B<clearenv>()  "
"functions, then B<clearenv>()  will return an error and the process "
"environment will remain unchanged."
msgstr ""

#. type: Plain text
#: build/C/man3/clearenv.3:138
msgid "B<getenv>(3), B<putenv>(3), B<setenv>(3), B<unsetenv>(3), B<environ>(7)"
msgstr ""

#. type: TH
#: build/C/man3/drand48.3:30
#, no-wrap
msgid "DRAND48"
msgstr ""

#. type: TH
#: build/C/man3/drand48.3:30 build/C/man3/drand48_r.3:27 build/C/man3/mbstowcs.3:17 build/C/man3/rand.3:41 build/C/man3/random.3:33 build/C/man3/strtod.3:45 build/C/man3/strtol.3:32 build/C/man3/strtoul.3:33
#, no-wrap
msgid "2020-11-01"
msgstr ""

#. type: Plain text
#: build/C/man3/drand48.3:34
msgid ""
"drand48, erand48, lrand48, nrand48, mrand48, jrand48, srand48, seed48, "
"lcong48 - generate uniformly distributed pseudo-random numbers"
msgstr ""

#. type: Plain text
#: build/C/man3/drand48.3:39
#, no-wrap
msgid "B<double drand48(void);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/drand48.3:41
#, no-wrap
msgid "B<double erand48(unsigned short >I<xsubi>B<[3]);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/drand48.3:43
#, no-wrap
msgid "B<long lrand48(void);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/drand48.3:45
#, no-wrap
msgid "B<long nrand48(unsigned short >I<xsubi>B<[3]);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/drand48.3:47
#, no-wrap
msgid "B<long mrand48(void);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/drand48.3:49
#, no-wrap
msgid "B<long jrand48(unsigned short >I<xsubi>B<[3]);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/drand48.3:51
#, no-wrap
msgid "B<void srand48(long >I<seedval>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/drand48.3:53
#, no-wrap
msgid "B<unsigned short *seed48(unsigned short >I<seed16v>B<[3]);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/drand48.3:55
#, no-wrap
msgid "B<void lcong48(unsigned short >I<param>B<[7]);>\n"
msgstr ""

#.  .BR drand48 (),
#.  .BR erand48 (),
#.  .BR lrand48 (),
#.  .BR nrand48 (),
#.  .BR mrand48 (),
#.  .BR jrand48 (),
#.  .BR srand48 (),
#.  .BR seed48 (),
#.  .BR lcong48 ():
#. type: Plain text
#: build/C/man3/drand48.3:76
#, no-wrap
msgid ""
"All functions shown above:\n"
"_XOPEN_SOURCE\n"
"    || /* Glibc since 2.19: */ _DEFAULT_SOURCE\n"
"    || /* Glibc versions E<lt>= 2.19: */ _SVID_SOURCE\n"
msgstr ""

#. type: Plain text
#: build/C/man3/drand48.3:80
msgid ""
"These functions generate pseudo-random numbers using the linear congruential "
"algorithm and 48-bit integer arithmetic."
msgstr ""

#. type: Plain text
#: build/C/man3/drand48.3:88
msgid ""
"The B<drand48>()  and B<erand48>()  functions return nonnegative "
"double-precision floating-point values uniformly distributed over the "
"interval [0.0,\\ 1.0)."
msgstr ""

#. type: Plain text
#: build/C/man3/drand48.3:95
msgid ""
"The B<lrand48>()  and B<nrand48>()  functions return nonnegative long "
"integers uniformly distributed over the interval [0,\\ 2^31)."
msgstr ""

#. type: Plain text
#: build/C/man3/drand48.3:102
msgid ""
"The B<mrand48>()  and B<jrand48>()  functions return signed long integers "
"uniformly distributed over the interval [-2^31,\\ 2^31)."
msgstr ""

#. type: Plain text
#: build/C/man3/drand48.3:121
msgid ""
"The B<srand48>(), B<seed48>(), and B<lcong48>()  functions are "
"initialization functions, one of which should be called before using "
"B<drand48>(), B<lrand48>()  or B<mrand48>().  The functions B<erand48>(), "
"B<nrand48>(), and B<jrand48>()  do not require an initialization function to "
"be called first."
msgstr ""

#. type: Plain text
#: build/C/man3/drand48.3:125
msgid ""
"All the functions work by generating a sequence of 48-bit integers, I<Xi>, "
"according to the linear congruential formula:"
msgstr ""

#. type: Plain text
#: build/C/man3/drand48.3:129
#, no-wrap
msgid "B<Xn+1 = (aXn + c) mod m, where n E<gt>= 0>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/drand48.3:142
msgid ""
"The parameter I<m> = 2^48, hence 48-bit integer arithmetic is performed.  "
"Unless B<lcong48>()  is called, I<a> and I<c> are given by:"
msgstr ""

#. type: Plain text
#: build/C/man3/drand48.3:147
#, no-wrap
msgid ""
"B<a = 0x5DEECE66D>\n"
"B<c = 0xB>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/drand48.3:167
msgid ""
"The value returned by any of the functions B<drand48>(), B<erand48>(), "
"B<lrand48>(), B<nrand48>(), B<mrand48>()  or B<jrand48>()  is computed by "
"first generating the next 48-bit I<Xi> in the sequence.  Then the "
"appropriate number of bits, according to the type of data item to be "
"returned, is copied from the high-order bits of I<Xi> and transformed into "
"the returned value."
msgstr ""

#. type: Plain text
#: build/C/man3/drand48.3:193
msgid ""
"The functions B<drand48>(), B<lrand48>(), and B<mrand48>()  store the last "
"48-bit I<Xi> generated in an internal buffer.  The functions B<erand48>(), "
"B<nrand48>(), and B<jrand48>()  require the calling program to provide "
"storage for the successive I<Xi> values in the array argument I<xsubi>.  The "
"functions are initialized by placing the initial value of I<Xi> into the "
"array before calling the function for the first time."
msgstr ""

#. type: Plain text
#: build/C/man3/drand48.3:202
msgid ""
"The initializer function B<srand48>()  sets the high order 32-bits of I<Xi> "
"to the argument I<seedval>.  The low order 16-bits are set to the arbitrary "
"value 0x330E."
msgstr ""

#. type: Plain text
#: build/C/man3/drand48.3:216
msgid ""
"The initializer function B<seed48>()  sets the value of I<Xi> to the 48-bit "
"value specified in the array argument I<seed16v>.  The previous value of "
"I<Xi> is copied into an internal buffer and a pointer to this buffer is "
"returned by B<seed48>()."
msgstr ""

#. type: Plain text
#: build/C/man3/drand48.3:247
msgid ""
"The initialization function B<lcong48>()  allows the user to specify initial "
"values for I<Xi>, I<a>, and I<c>.  Array argument elements I<param[0-2]> "
"specify I<Xi>, I<param[3-5]> specify I<a>, and I<param[6]> specifies I<c>.  "
"After B<lcong48>()  has been called, a subsequent call to either "
"B<srand48>()  or B<seed48>()  will restore the standard values of I<a> and "
"I<c>."
msgstr ""

#. type: tbl table
#: build/C/man3/drand48.3:266
#, no-wrap
msgid ""
"B<drand48>(),\n"
"B<erand48>(),\n"
"B<lrand48>(),\n"
"B<nrand48>(),\n"
"B<mrand48>(),\n"
"B<jrand48>(),\n"
"B<srand48>(),\n"
"B<seed48>(),\n"
"B<lcong48>()"
msgstr ""

#. type: tbl table
#: build/C/man3/drand48.3:268
#, no-wrap
msgid "MT-Unsafe race:drand48"
msgstr ""

#. type: Plain text
#: build/C/man3/drand48.3:275
msgid ""
"The above functions record global state information for the random number "
"generator, so they are not thread-safe."
msgstr ""

#. type: Plain text
#: build/C/man3/drand48.3:277
msgid "POSIX.1-2001, POSIX.1-2008, SVr4."
msgstr ""

#. type: Plain text
#: build/C/man3/drand48.3:280
msgid "B<rand>(3), B<random>(3)"
msgstr ""

#. type: TH
#: build/C/man3/drand48_r.3:27
#, no-wrap
msgid "DRAND48_R"
msgstr ""

#. type: Plain text
#: build/C/man3/drand48_r.3:32
msgid ""
"drand48_r, erand48_r, lrand48_r, nrand48_r, mrand48_r, jrand48_r, srand48_r, "
"seed48_r, lcong48_r - generate uniformly distributed pseudo-random numbers "
"reentrantly"
msgstr ""

#. type: Plain text
#: build/C/man3/drand48_r.3:37
#, no-wrap
msgid "B<int drand48_r(struct drand48_data *>I<buffer>B<, double *>I<result>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/drand48_r.3:40
#, no-wrap
msgid ""
"B<int erand48_r(unsigned short >I<xsubi>B<[3]>I<,>\n"
"B<              struct drand48_data *>I<buffer>B<, double *>I<result>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/drand48_r.3:42
#, no-wrap
msgid "B<int lrand48_r(struct drand48_data *>I<buffer>B<, long *>I<result>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/drand48_r.3:45
#, no-wrap
msgid ""
"B<int nrand48_r(unsigned short >I<xsubi[3]>B<,>\n"
"B<              struct drand48_data *>I<buffer>B<, long *>I<result>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/drand48_r.3:47
#, no-wrap
msgid "B<int mrand48_r(struct drand48_data *>I<buffer>B<,long *>I<result>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/drand48_r.3:50
#, no-wrap
msgid ""
"B<int jrand48_r(unsigned short >I<xsubi[3]>B<,>\n"
"B<              struct drand48_data *>I<buffer>B<, long *>I<result>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/drand48_r.3:52
#, no-wrap
msgid ""
"B<int srand48_r(long int >I<seedval>B<, struct drand48_data "
"*>I<buffer>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/drand48_r.3:55
#, no-wrap
msgid ""
"B<int seed48_r(unsigned short >I<seed16v[3]>B<,>\n"
"B<             struct drand48_data *>I<buffer>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/drand48_r.3:58
#, no-wrap
msgid ""
"B<int lcong48_r(unsigned short >I<param[7]>B<,>\n"
"B<              struct drand48_data *>I<buffer>B<);>\n"
msgstr ""

#.  .BR drand48_r (),
#.  .BR erand48_r (),
#.  .BR lrand48_r (),
#.  .BR nrand48_r (),
#.  .BR mrand48_r (),
#.  .BR jrand48_r (),
#.  .BR srand48_r (),
#.  .BR seed48_r (),
#.  .BR lcong48_r ():
#. type: Plain text
#: build/C/man3/drand48_r.3:78
#, no-wrap
msgid ""
"All functions shown above:\n"
"    /* Glibc since 2.19: */ _DEFAULT_SOURCE\n"
"        || /* Glibc versions E<lt>= 2.19: */ _SVID_SOURCE || _BSD_SOURCE\n"
msgstr ""

#. type: Plain text
#: build/C/man3/drand48_r.3:85
msgid ""
"These functions are the reentrant analogs of the functions described in "
"B<drand48>(3).  Instead of modifying the global random generator state, they "
"use the supplied data I<buffer>."
msgstr ""

#. type: Plain text
#: build/C/man3/drand48_r.3:92
msgid ""
"Before the first use, this struct must be initialized, for example, by "
"filling it with zeros, or by calling one of the functions B<srand48_r>(), "
"B<seed48_r>(), or B<lcong48_r>()."
msgstr ""

#. type: Plain text
#: build/C/man3/drand48_r.3:94
msgid "The return value is 0."
msgstr ""

#. type: tbl table
#: build/C/man3/drand48_r.3:113
#, no-wrap
msgid ""
"B<drand48_r>(),\n"
"B<erand48_r>(),\n"
"B<lrand48_r>(),\n"
"B<nrand48_r>(),\n"
"B<mrand48_r>(),\n"
"B<jrand48_r>(),\n"
"B<srand48_r>(),\n"
"B<seed48_r>(),\n"
"B<lcong48_r>()"
msgstr ""

#. type: tbl table
#: build/C/man3/drand48_r.3:113
#, no-wrap
msgid "MT-Safe race:buffer"
msgstr ""

#. type: Plain text
#: build/C/man3/drand48_r.3:118
msgid "These functions are GNU extensions and are not portable."
msgstr ""

#. type: Plain text
#: build/C/man3/drand48_r.3:122 build/C/man3/random_r.3:193
msgid "B<drand48>(3), B<rand>(3), B<random>(3)"
msgstr ""

#. type: TH
#: build/C/man3/ecvt.3:32
#, no-wrap
msgid "ECVT"
msgstr ""

#. type: TH
#: build/C/man3/ecvt.3:32 build/C/man3/ecvt_r.3:30 build/C/man3/getloadavg.3:34 build/C/man3/qecvt.3:28
#, no-wrap
msgid "2016-03-15"
msgstr ""

#. type: Plain text
#: build/C/man3/ecvt.3:35
msgid "ecvt, fcvt - convert a floating-point number to a string"
msgstr ""

#. type: Plain text
#: build/C/man3/ecvt.3:40
msgid ""
"B<char *ecvt(double >I<number>B<, int >I<ndigits>B<, int *>I<decpt>B<,> "
"B<int *>I<sign>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/ecvt.3:43
msgid ""
"B<char *fcvt(double >I<number>B<, int >I<ndigits>B<, int *>I<decpt>B<,> "
"B<int *>I<sign>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/ecvt.3:51
msgid "B<ecvt>(), B<fcvt>():"
msgstr ""

#. type: TP
#: build/C/man3/ecvt.3:54 build/C/man3/gcvt.3:49 build/C/man3/mktemp.3:53
#, no-wrap
msgid "Since glibc 2.12:"
msgstr ""

#. type: Plain text
#: build/C/man3/ecvt.3:60 build/C/man3/gcvt.3:55
#, no-wrap
msgid ""
"(_XOPEN_SOURCE\\ E<gt>=\\ 500) ! (_POSIX_C_SOURCE\\ E<gt>=\\ 200112L)\n"
"    || /* Glibc since 2.19: */ _DEFAULT_SOURCE\n"
"    || /* Glibc versions E<lt>= 2.19: */ _SVID_SOURCE\n"
msgstr ""

#. type: TP
#: build/C/man3/ecvt.3:61 build/C/man3/gcvt.3:56 build/C/man3/mktemp.3:58
#, no-wrap
msgid "Before glibc 2.12:"
msgstr ""

#.     || _XOPEN_SOURCE && _XOPEN_SOURCE_EXTENDED
#. type: Plain text
#: build/C/man3/ecvt.3:65 build/C/man3/gcvt.3:60
msgid "_SVID_SOURCE || _XOPEN_SOURCE\\ E<gt>=\\ 500"
msgstr ""

#. type: Plain text
#: build/C/man3/ecvt.3:91
msgid ""
"The B<ecvt>()  function converts I<number> to a null-terminated string of "
"I<ndigits> digits (where I<ndigits> is reduced to a system-specific limit "
"determined by the precision of a I<double>), and returns a pointer to the "
"string.  The high-order digit is nonzero, unless I<number> is zero.  The low "
"order digit is rounded.  The string itself does not contain a decimal point; "
"however, the position of the decimal point relative to the start of the "
"string is stored in I<*decpt>.  A negative value for I<*decpt> means that "
"the decimal point is to the left of the start of the string.  If the sign of "
"I<number> is negative, I<*sign> is set to a nonzero value, otherwise it is "
"set to 0.  If I<number> is zero, it is unspecified whether I<*decpt> is 0 or "
"1."
msgstr ""

#. type: Plain text
#: build/C/man3/ecvt.3:98
msgid ""
"The B<fcvt>()  function is identical to B<ecvt>(), except that I<ndigits> "
"specifies the number of digits after the decimal point."
msgstr ""

#. type: Plain text
#: build/C/man3/ecvt.3:109
msgid ""
"Both the B<ecvt>()  and B<fcvt>()  functions return a pointer to a static "
"string containing the ASCII representation of I<number>.  The static string "
"is overwritten by each call to B<ecvt>()  or B<fcvt>()."
msgstr ""

#. type: tbl table
#: build/C/man3/ecvt.3:119
#, no-wrap
msgid "B<ecvt>()"
msgstr ""

#. type: tbl table
#: build/C/man3/ecvt.3:119
#, no-wrap
msgid "MT-Unsafe race:ecvt"
msgstr ""

#. type: tbl table
#: build/C/man3/ecvt.3:122
#, no-wrap
msgid "B<fcvt>()"
msgstr ""

#. type: tbl table
#: build/C/man3/ecvt.3:122
#, no-wrap
msgid "MT-Unsafe race:fcvt"
msgstr ""

#. type: Plain text
#: build/C/man3/ecvt.3:136
msgid ""
"SVr2; marked as LEGACY in POSIX.1-2001.  POSIX.1-2008 removes the "
"specifications of B<ecvt>()  and B<fcvt>(), recommending the use of "
"B<sprintf>(3)  instead (though B<snprintf>(3)  may be preferable)."
msgstr ""

#.  Linux libc4 and libc5 specified the type of
#.  .I ndigits
#.  as
#.  .IR size_t .
#. type: Plain text
#: build/C/man3/ecvt.3:142
msgid "Not all locales use a point as the radix character (\"decimal point\")."
msgstr ""

#. type: Plain text
#: build/C/man3/ecvt.3:148
msgid "B<ecvt_r>(3), B<gcvt>(3), B<qecvt>(3), B<setlocale>(3), B<sprintf>(3)"
msgstr ""

#. type: TH
#: build/C/man3/ecvt_r.3:30
#, no-wrap
msgid "ECVT_R"
msgstr ""

#. type: Plain text
#: build/C/man3/ecvt_r.3:33
msgid ""
"ecvt_r, fcvt_r, qecvt_r, qfcvt_r - convert a floating-point number to a "
"string"
msgstr ""

#. type: Plain text
#: build/C/man3/ecvt_r.3:39
#, no-wrap
msgid ""
"B<int ecvt_r(double >I<number>B<, int >I<ndigits>B<, int *>I<decpt>B<,>\n"
"B<           int *>I<sign>B<, char *>I<buf>B<, size_t >I<len>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/ecvt_r.3:42
#, no-wrap
msgid ""
"B<int fcvt_r(double >I<number>B<, int >I<ndigits>B<, int *>I<decpt>B<,>\n"
"B<           int *>I<sign>B<, char *>I<buf>B<, size_t >I<len>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/ecvt_r.3:45
#, no-wrap
msgid ""
"B<int qecvt_r(long double >I<number>B<, int >I<ndigits>B<, int "
"*>I<decpt>B<,>\n"
"B<           int *>I<sign>B<, char *>I<buf>B<, size_t >I<len>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/ecvt_r.3:48
#, no-wrap
msgid ""
"B<int qfcvt_r(long double >I<number>B<, int >I<ndigits>B<, int "
"*>I<decpt>B<,>\n"
"B<           int *>I<sign>B<, char *>I<buf>B<, size_t >I<len>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/ecvt_r.3:60
msgid "B<ecvt_r>(), B<fcvt_r>(), B<qecvt_r>(), B<qfcvt_r>():"
msgstr ""

#. type: Plain text
#: build/C/man3/ecvt_r.3:63 build/C/man3/random_r.3:57
#, no-wrap
msgid ""
"/* Glibc since 2.19: */ _DEFAULT_SOURCE\n"
"    || /* Glibc versions E<lt>= 2.19: */ _SVID_SOURCE || _BSD_SOURCE\n"
msgstr ""

#. type: Plain text
#: build/C/man3/ecvt_r.3:87
msgid ""
"The functions B<ecvt_r>(), B<fcvt_r>(), B<qecvt_r>(), and B<qfcvt_r>()  are "
"identical to B<ecvt>(3), B<fcvt>(3), B<qecvt>(3), and B<qfcvt>(3), "
"respectively, except that they do not return their result in a static "
"buffer, but instead use the supplied I<buf> of size I<len>.  See B<ecvt>(3)  "
"and B<qecvt>(3)."
msgstr ""

#. type: Plain text
#: build/C/man3/ecvt_r.3:89
msgid "These functions return 0 on success, and -1 otherwise."
msgstr ""

#. type: tbl table
#: build/C/man3/ecvt_r.3:100
#, no-wrap
msgid ""
"B<ecvt_r>(),\n"
"B<fcvt_r>(),\n"
msgstr ""

#. type: tbl table
#: build/C/man3/ecvt_r.3:100 build/C/man3/malloc.3:270 build/C/man3/mkstemp.3:207 build/C/man3/random.3:169 build/C/man3/random_r.3:169
#, no-wrap
msgid ".br\n"
msgstr ""

#. type: tbl table
#: build/C/man3/ecvt_r.3:103
#, no-wrap
msgid ""
"B<qecvt_r>(),\n"
"B<qfcvt_r>()"
msgstr ""

#. type: Plain text
#: build/C/man3/ecvt_r.3:107
msgid "These functions are GNU extensions."
msgstr ""

#. type: Plain text
#: build/C/man3/ecvt_r.3:112
msgid "These functions are obsolete.  Instead, B<sprintf>(3)  is recommended."
msgstr ""

#. type: Plain text
#: build/C/man3/ecvt_r.3:116
msgid "B<ecvt>(3), B<qecvt>(3), B<sprintf>(3)"
msgstr ""

#. type: TH
#: build/C/man3/exit.3:29
#, no-wrap
msgid "EXIT"
msgstr ""

#. type: Plain text
#: build/C/man3/exit.3:32
msgid "exit - cause normal process termination"
msgstr ""

#. type: Plain text
#: build/C/man3/exit.3:37
#, no-wrap
msgid "B<void exit(int >I<status>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/exit.3:45
msgid ""
"The B<exit>()  function causes normal process termination and the least "
"significant byte of I<status> (i.e., I<status & 0xFF>) is returned to the "
"parent (see B<wait>(2))."
msgstr ""

#. type: Plain text
#: build/C/man3/exit.3:72
msgid ""
"All functions registered with B<atexit>(3)  and B<on_exit>(3)  are called, "
"in the reverse order of their registration.  (It is possible for one of "
"these functions to use B<atexit>(3)  or B<on_exit>(3)  to register an "
"additional function to be executed during exit processing; the new "
"registration is added to the front of the list of functions that remain to "
"be called.)  If one of these functions does not return (e.g., it calls "
"B<_exit>(2), or kills itself with a signal), then none of the remaining "
"functions is called, and further exit processing (in particular, flushing of "
"B<stdio>(3)  streams) is abandoned.  If a function has been registered "
"multiple times using B<atexit>(3)  or B<on_exit>(3), then it is called as "
"many times as it was registered."
msgstr ""

#. type: Plain text
#: build/C/man3/exit.3:79
msgid ""
"All open B<stdio>(3)  streams are flushed and closed.  Files created by "
"B<tmpfile>(3)  are removed."
msgstr ""

#. type: Plain text
#: build/C/man3/exit.3:86
msgid ""
"The C standard specifies two constants, B<EXIT_SUCCESS> and B<EXIT_FAILURE>, "
"that may be passed to B<exit>()  to indicate successful or unsuccessful "
"termination, respectively."
msgstr ""

#. type: Plain text
#: build/C/man3/exit.3:90
msgid "The B<exit>()  function does not return."
msgstr ""

#. type: tbl table
#: build/C/man3/exit.3:100
#, no-wrap
msgid "B<exit>()"
msgstr ""

#. type: tbl table
#: build/C/man3/exit.3:100
#, no-wrap
msgid "MT-Unsafe race:exit"
msgstr ""

#. type: Plain text
#: build/C/man3/exit.3:107
msgid ""
"The B<exit>()  function uses a global variable that is not protected, so it "
"is not thread-safe."
msgstr ""

#. type: Plain text
#: build/C/man3/exit.3:124
msgid ""
"The behavior is undefined if one of the functions registered using "
"B<atexit>(3)  and B<on_exit>(3)  calls either B<exit>()  or B<longjmp>(3).  "
"Note that a call to B<execve>(2)  removes registrations created using "
"B<atexit>(3)  and B<on_exit>(3)."
msgstr ""

#. type: Plain text
#: build/C/man3/exit.3:133
msgid ""
"The use of B<EXIT_SUCCESS> and B<EXIT_FAILURE> is slightly more portable (to "
"non-UNIX environments) than the use of 0 and some nonzero value like 1 or "
"-1.  In particular, VMS uses a different convention."
msgstr ""

#. type: Plain text
#: build/C/man3/exit.3:138
msgid ""
"BSD has attempted to standardize exit codes (which some C libraries such as "
"the GNU C library have also adopted); see the file I<E<lt>sysexits.hE<gt>>."
msgstr ""

#. type: Plain text
#: build/C/man3/exit.3:144
msgid ""
"After B<exit>(), the exit status must be transmitted to the parent process.  "
"There are three cases:"
msgstr ""

#. type: IP
#: build/C/man3/exit.3:144 build/C/man3/exit.3:152 build/C/man3/exit.3:155
#, no-wrap
msgid "\\(bu"
msgstr ""

#. type: Plain text
#: build/C/man3/exit.3:152
msgid ""
"If the parent has set B<SA_NOCLDWAIT>, or has set the B<SIGCHLD> handler to "
"B<SIG_IGN>, the status is discarded and the child dies immediately."
msgstr ""

#. type: Plain text
#: build/C/man3/exit.3:155
msgid ""
"If the parent was waiting on the child, it is notified of the exit status "
"and the child dies immediately."
msgstr ""

#. type: Plain text
#: build/C/man3/exit.3:165
msgid ""
"Otherwise, the child becomes a \"zombie\" process: most of the process "
"resources are recycled, but a slot containing minimal information about the "
"child process (termination status, resource usage statistics) is retained in "
"process table.  This allows the parent to subsequently use B<waitpid>(2)  "
"(or similar) to learn the termination status of the child; at that point the "
"zombie process slot is released."
msgstr ""

#. type: Plain text
#: build/C/man3/exit.3:176
msgid ""
"If the implementation supports the B<SIGCHLD> signal, this signal is sent to "
"the parent.  If the parent has set B<SA_NOCLDWAIT>, it is undefined whether "
"a B<SIGCHLD> signal is sent."
msgstr ""

#. type: SS
#: build/C/man3/exit.3:176
#, no-wrap
msgid "Signals sent to other processes"
msgstr ""

#. type: Plain text
#: build/C/man3/exit.3:185
msgid ""
"If the exiting process is a session leader and its controlling terminal is "
"the controlling terminal of the session, then each process in the foreground "
"process group of this controlling terminal is sent a B<SIGHUP> signal, and "
"the terminal is disassociated from this session, allowing it to be acquired "
"by a new controlling process."
msgstr ""

#. type: Plain text
#: build/C/man3/exit.3:197
msgid ""
"If the exit of the process causes a process group to become orphaned, and if "
"any member of the newly orphaned process group is stopped, then a B<SIGHUP> "
"signal followed by a B<SIGCONT> signal will be sent to each process in this "
"process group.  See B<setpgid>(2)  for an explanation of orphaned process "
"groups."
msgstr ""

#. type: Plain text
#: build/C/man3/exit.3:207
msgid ""
"Except in the above cases, where the signalled processes may be children of "
"the terminating process, termination of a process does I<not> in general "
"cause a signal to be sent to children of that process.  However, a process "
"can use the B<prctl>(2)  B<PR_SET_PDEATHSIG> operation to arrange that it "
"receives a signal if its parent terminates."
msgstr ""

#. type: Plain text
#: build/C/man3/exit.3:215
msgid ""
"B<_exit>(2), B<get_robust_list>(2), B<setpgid>(2), B<wait>(2), B<atexit>(3), "
"B<on_exit>(3), B<tmpfile>(3)"
msgstr ""

#. type: TH
#: build/C/man3/gcvt.3:30
#, no-wrap
msgid "GCVT"
msgstr ""

#. type: Plain text
#: build/C/man3/gcvt.3:33
msgid "gcvt - convert a floating-point number to a string"
msgstr ""

#. type: Plain text
#: build/C/man3/gcvt.3:38
#, no-wrap
msgid "B<char *gcvt(double >I<number>B<, int >I<ndigit>B<, char *>I<buf>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/gcvt.3:46
msgid "B<gcvt>():"
msgstr ""

#. type: Plain text
#: build/C/man3/gcvt.3:71
msgid ""
"The B<gcvt>()  function converts I<number> to a minimal length "
"null-terminated ASCII string and stores the result in I<buf>.  It produces "
"I<ndigit> significant digits in either B<printf>(3)  F format or E format."
msgstr ""

#. type: Plain text
#: build/C/man3/gcvt.3:76
msgid "The B<gcvt>()  function returns I<buf>."
msgstr ""

#. type: tbl table
#: build/C/man3/gcvt.3:86
#, no-wrap
msgid "B<gcvt>()"
msgstr ""

#. type: Plain text
#: build/C/man3/gcvt.3:98
msgid ""
"Marked as LEGACY in POSIX.1-2001.  POSIX.1-2008 removes the specification of "
"B<gcvt>(), recommending the use of B<sprintf>(3)  instead (though "
"B<snprintf>(3)  may be preferable)."
msgstr ""

#. type: Plain text
#: build/C/man3/gcvt.3:102
msgid "B<ecvt>(3), B<fcvt>(3), B<sprintf>(3)"
msgstr ""

#. type: TH
#: build/C/man3/getauxval.3:27
#, no-wrap
msgid "GETAUXVAL"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:30
msgid "getauxval - retrieve a value from the auxiliary vector"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:33
#, no-wrap
msgid "B<#include E<lt>sys/auxv.hE<gt>>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:35
#, no-wrap
msgid "B<unsigned long getauxval(unsigned long >I<type>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:43
msgid ""
"The B<getauxval>()  function retrieves values from the auxiliary vector, a "
"mechanism that the kernel's ELF binary loader uses to pass certain "
"information to user space when a program is executed."
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:51
msgid ""
"Each entry in the auxiliary vector consists of a pair of values: a type that "
"identifies what this entry represents, and a value for that type.  Given the "
"argument I<type>, B<getauxval>()  returns the corresponding value."
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:58
msgid ""
"The value returned for each I<type> is given in the following list.  Not all "
"I<type> values are present on all architectures."
msgstr ""

#. type: TP
#: build/C/man3/getauxval.3:58
#, no-wrap
msgid "B<AT_BASE>"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:61
msgid "The base address of the program interpreter (usually, the dynamic linker)."
msgstr ""

#. type: TP
#: build/C/man3/getauxval.3:61
#, no-wrap
msgid "B<AT_BASE_PLATFORM>"
msgstr ""

#.  commit e585b768da111f2c2d413de6214e83bbdfee8f22
#. type: Plain text
#: build/C/man3/getauxval.3:69
msgid ""
"A pointer to a string (PowerPC and MIPS only).  On PowerPC, this identifies "
"the real platform; may differ from B<AT_PLATFORM>.  On MIPS, this identifies "
"the ISA level (since Linux 5.7)."
msgstr ""

#. type: TP
#: build/C/man3/getauxval.3:69
#, no-wrap
msgid "B<AT_CLKTCK>"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:76
msgid ""
"The frequency with which B<times>(2)  counts.  This value can also be "
"obtained via I<sysconf(_SC_CLK_TCK)>."
msgstr ""

#. type: TP
#: build/C/man3/getauxval.3:76
#, no-wrap
msgid "B<AT_DCACHEBSIZE>"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:79
msgid "The data cache block size."
msgstr ""

#. type: TP
#: build/C/man3/getauxval.3:79
#, no-wrap
msgid "B<AT_EGID>"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:82
msgid "The effective group ID of the thread."
msgstr ""

#. type: TP
#: build/C/man3/getauxval.3:82
#, no-wrap
msgid "B<AT_ENTRY>"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:85
msgid "The entry address of the executable."
msgstr ""

#. type: TP
#: build/C/man3/getauxval.3:85
#, no-wrap
msgid "B<AT_EUID>"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:88
msgid "The effective user ID of the thread."
msgstr ""

#. type: TP
#: build/C/man3/getauxval.3:88
#, no-wrap
msgid "B<AT_EXECFD>"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:91
msgid "File descriptor of program."
msgstr ""

#. type: TP
#: build/C/man3/getauxval.3:91
#, no-wrap
msgid "B<AT_EXECFN>"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:94
msgid "A pointer to a string containing the pathname used to execute the program."
msgstr ""

#. type: TP
#: build/C/man3/getauxval.3:94
#, no-wrap
msgid "B<AT_FLAGS>"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:97
msgid "Flags (unused)."
msgstr ""

#. type: TP
#: build/C/man3/getauxval.3:97
#, no-wrap
msgid "B<AT_FPUCW>"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:102
msgid ""
"Used FPU control word (SuperH architecture only).  This gives some "
"information about the FPU initialization performed by the kernel."
msgstr ""

#. type: TP
#: build/C/man3/getauxval.3:102
#, no-wrap
msgid "B<AT_GID>"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:105
msgid "The real group ID of the thread."
msgstr ""

#. type: TP
#: build/C/man3/getauxval.3:105
#, no-wrap
msgid "B<AT_HWCAP>"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:116
msgid ""
"An architecture and ABI dependent bit-mask whose settings indicate detailed "
"processor capabilities.  The contents of the bit mask are hardware dependent "
"(for example, see the kernel source file "
"I<arch/x86/include/asm/cpufeature.h> for details relating to the Intel x86 "
"architecture; the value returned is the first 32-bit word of the array "
"described there).  A human-readable version of the same information is "
"available via I</proc/cpuinfo>."
msgstr ""

#. type: TP
#: build/C/man3/getauxval.3:116
#, no-wrap
msgid "B<AT_HWCAP2> (since glibc 2.18)"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:119
msgid "Further machine-dependent hints about processor capabilities."
msgstr ""

#. type: TP
#: build/C/man3/getauxval.3:119
#, no-wrap
msgid "B<AT_ICACHEBSIZE>"
msgstr ""

#.  .TP
#.  .BR AT_IGNORE
#.  .TP
#.  .BR AT_IGNOREPPC
#.  .TP
#.  .BR AT_NOTELF
#. type: Plain text
#: build/C/man3/getauxval.3:128
msgid "The instruction cache block size."
msgstr ""

#.  Kernel commit 98a5f361b8625c6f4841d6ba013bbf0e80d08147
#. type: TP
#: build/C/man3/getauxval.3:128
#, no-wrap
msgid "B<AT_L1D_CACHEGEOMETRY>"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:135
msgid ""
"Geometry of the L1 data cache, encoded with the cache line size in bytes in "
"the bottom 16 bits and the cache associativity in the next 16 bits.  The "
"associativity is such that if N is the 16-bit value, the cache is N-way set "
"associative."
msgstr ""

#. type: TP
#: build/C/man3/getauxval.3:135
#, no-wrap
msgid "B<AT_L1D_CACHESIZE>"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:138
msgid "The L1 data cache size."
msgstr ""

#. type: TP
#: build/C/man3/getauxval.3:138
#, no-wrap
msgid "B<AT_L1I_CACHEGEOMETRY>"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:142
msgid ""
"Geometry of the L1 instruction cache, encoded as for "
"B<AT_L1D_CACHEGEOMETRY>."
msgstr ""

#. type: TP
#: build/C/man3/getauxval.3:142
#, no-wrap
msgid "B<AT_L1I_CACHESIZE>"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:145
msgid "The L1 instruction cache size."
msgstr ""

#. type: TP
#: build/C/man3/getauxval.3:145
#, no-wrap
msgid "B<AT_L2_CACHEGEOMETRY>"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:149
msgid "Geometry of the L2 cache, encoded as for B<AT_L1D_CACHEGEOMETRY>."
msgstr ""

#. type: TP
#: build/C/man3/getauxval.3:149
#, no-wrap
msgid "B<AT_L2_CACHESIZE>"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:152
msgid "The L2 cache size."
msgstr ""

#. type: TP
#: build/C/man3/getauxval.3:152
#, no-wrap
msgid "B<AT_L3_CACHEGEOMETRY>"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:156
msgid "Geometry of the L3 cache, encoded as for B<AT_L1D_CACHEGEOMETRY>."
msgstr ""

#. type: TP
#: build/C/man3/getauxval.3:156
#, no-wrap
msgid "B<AT_L3_CACHESIZE>"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:159
msgid "The L3 cache size."
msgstr ""

#. type: TP
#: build/C/man3/getauxval.3:159
#, no-wrap
msgid "B<AT_PAGESZ>"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:163
msgid "The system page size (the same value returned by I<sysconf(_SC_PAGESIZE)>)."
msgstr ""

#. type: TP
#: build/C/man3/getauxval.3:163
#, no-wrap
msgid "B<AT_PHDR>"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:166
msgid "The address of the program headers of the executable."
msgstr ""

#. type: TP
#: build/C/man3/getauxval.3:166
#, no-wrap
msgid "B<AT_PHENT>"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:169
msgid "The size of program header entry."
msgstr ""

#. type: TP
#: build/C/man3/getauxval.3:169
#, no-wrap
msgid "B<AT_PHNUM>"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:172
msgid "The number of program headers."
msgstr ""

#. type: TP
#: build/C/man3/getauxval.3:172
#, no-wrap
msgid "B<AT_PLATFORM>"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:179
msgid ""
"A pointer to a string that identifies the hardware platform that the program "
"is running on.  The dynamic linker uses this in the interpretation of "
"I<rpath> values."
msgstr ""

#. type: TP
#: build/C/man3/getauxval.3:179
#, no-wrap
msgid "B<AT_RANDOM>"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:182
msgid "The address of sixteen bytes containing a random value."
msgstr ""

#. type: TP
#: build/C/man3/getauxval.3:182
#, no-wrap
msgid "B<AT_SECURE>"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:199
msgid ""
"Has a nonzero value if this executable should be treated securely.  Most "
"commonly, a nonzero value indicates that the process is executing a "
"set-user-ID or set-group-ID binary (so that its real and effective UIDs or "
"GIDs differ from one another), or that it gained capabilities by executing a "
"binary file that has capabilities (see B<capabilities>(7)).  Alternatively, "
"a nonzero value may be triggered by a Linux Security Module.  When this "
"value is nonzero, the dynamic linker disables the use of certain environment "
"variables (see B<ld-linux.so>(8))  and glibc changes other aspects of its "
"behavior.  (See also B<secure_getenv>(3).)"
msgstr ""

#. type: TP
#: build/C/man3/getauxval.3:199
#, no-wrap
msgid "B<AT_SYSINFO>"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:203
msgid ""
"The entry point to the system call function in the vDSO.  Not present/needed "
"on all architectures (e.g., absent on x86-64)."
msgstr ""

#. type: TP
#: build/C/man3/getauxval.3:203
#, no-wrap
msgid "B<AT_SYSINFO_EHDR>"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:208
msgid ""
"The address of a page containing the virtual Dynamic Shared Object (vDSO)  "
"that the kernel creates in order to provide fast implementations of certain "
"system calls."
msgstr ""

#. type: TP
#: build/C/man3/getauxval.3:208
#, no-wrap
msgid "B<AT_UCACHEBSIZE>"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:211
msgid "The unified cache block size."
msgstr ""

#. type: TP
#: build/C/man3/getauxval.3:211
#, no-wrap
msgid "B<AT_UID>"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:214
msgid "The real user ID of the thread."
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:222
msgid ""
"On success, B<getauxval>()  returns the value corresponding to I<type>.  If "
"I<type> is not found, 0 is returned."
msgstr ""

#. type: TP
#: build/C/man3/getauxval.3:223
#, no-wrap
msgid "B<ENOENT> (since glibc 2.19)"
msgstr ""

#.  commit b9ab448f980e296eac21ac65f53783967cc6037b
#. type: Plain text
#: build/C/man3/getauxval.3:229
msgid "No entry corresponding to I<type> could be found in the auxiliary vector."
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:233
msgid "The B<getauxval>()  function was added to glibc in version 2.16."
msgstr ""

#. type: tbl table
#: build/C/man3/getauxval.3:243
#, no-wrap
msgid "B<getauxval>()"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:247
msgid "This function is a nonstandard glibc extension."
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:256
msgid ""
"The primary consumer of the information in the auxiliary vector is the "
"dynamic linker, B<ld-linux.so>(8).  The auxiliary vector is a convenient and "
"efficient shortcut that allows the kernel to communicate a certain set of "
"standard information that the dynamic linker usually or always needs.  In "
"some cases, the same information could be obtained by system calls, but "
"using the auxiliary vector is cheaper."
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:262
msgid ""
"The auxiliary vector resides just above the argument list and environment in "
"the process address space.  The auxiliary vector supplied to a program can "
"be viewed by setting the B<LD_SHOW_AUXV> environment variable when running a "
"program:"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:266
#, no-wrap
msgid "$ LD_SHOW_AUXV=1 sleep 1\n"
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:275
msgid ""
"The auxiliary vector of any process can (subject to file permissions)  be "
"obtained via I</proc/[pid]/auxv>; see B<proc>(5)  for more information."
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:284
msgid ""
"Before the addition of the B<ENOENT> error in glibc 2.19, there was no way "
"to unambiguously distinguish the case where I<type> could not be found from "
"the case where the value corresponding to I<type> was zero."
msgstr ""

#. type: Plain text
#: build/C/man3/getauxval.3:288
msgid "B<secure_getenv>(3), B<vdso>(7), B<ld-linux.so>(8)"
msgstr ""

#. type: TH
#: build/C/man3/getenv.3:33
#, no-wrap
msgid "GETENV"
msgstr ""

#. type: Plain text
#: build/C/man3/getenv.3:36
msgid "getenv, secure_getenv - get an environment variable"
msgstr ""

#. type: Plain text
#: build/C/man3/getenv.3:41
#, no-wrap
msgid "B<char *getenv(const char *>I<name>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/getenv.3:43
#, no-wrap
msgid "B<char *secure_getenv(const char *>I<name>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/getenv.3:52
msgid "B<secure_getenv>(): _GNU_SOURCE"
msgstr ""

#. type: Plain text
#: build/C/man3/getenv.3:61
msgid ""
"The B<getenv>()  function searches the environment list to find the "
"environment variable I<name>, and returns a pointer to the corresponding "
"I<value> string."
msgstr ""

#. type: Plain text
#: build/C/man3/getenv.3:69
msgid ""
"The GNU-specific B<secure_getenv>()  function is just like B<getenv>()  "
"except that it returns NULL in cases where \"secure execution\" is "
"required.  Secure execution is required if one of the following conditions "
"was true when the program run by the calling process was loaded:"
msgstr ""

#. type: IP
#: build/C/man3/getenv.3:69 build/C/man3/getenv.3:74 build/C/man3/getenv.3:76 build/C/man3/system.3:81 build/C/man3/system.3:86 build/C/man3/system.3:92 build/C/man3/system.3:97 build/C/man2/getrandom.2:202 build/C/man2/getrandom.2:210 build/C/man2/getrandom.2:301 build/C/man7/random.7:41 build/C/man7/random.7:50
#, no-wrap
msgid "*"
msgstr ""

#. type: Plain text
#: build/C/man3/getenv.3:74
msgid ""
"the process's effective user ID did not match its real user ID or the "
"process's effective group ID did not match its real group ID (typically this "
"is the result of executing a set-user-ID or set-group-ID program);"
msgstr ""

#. type: Plain text
#: build/C/man3/getenv.3:76
msgid "the effective capability bit was set on the executable file; or"
msgstr ""

#. type: Plain text
#: build/C/man3/getenv.3:78
msgid "the process has a nonempty permitted capability set."
msgstr ""

#. type: Plain text
#: build/C/man3/getenv.3:81
msgid ""
"Secure execution may also be required if triggered by some Linux security "
"modules."
msgstr ""

#. type: Plain text
#: build/C/man3/getenv.3:88
msgid ""
"The B<secure_getenv>()  function is intended for use in general-purpose "
"libraries to avoid vulnerabilities that could occur if set-user-ID or "
"set-group-ID programs accidentally trusted the environment."
msgstr ""

#. type: Plain text
#: build/C/man3/getenv.3:93
msgid ""
"The B<getenv>()  function returns a pointer to the value in the environment, "
"or NULL if there is no match."
msgstr ""

#. type: Plain text
#: build/C/man3/getenv.3:96
msgid "B<secure_getenv>()  first appeared in glibc 2.17."
msgstr ""

#. type: tbl table
#: build/C/man3/getenv.3:107
#, no-wrap
msgid ""
"B<getenv>(),\n"
"B<secure_getenv>()"
msgstr ""

#. type: tbl table
#: build/C/man3/getenv.3:107
#, no-wrap
msgid "MT-Safe env"
msgstr ""

#. type: Plain text
#: build/C/man3/getenv.3:112
msgid "B<getenv>(): POSIX.1-2001, POSIX.1-2008, C89, C99, SVr4, 4.3BSD."
msgstr ""

#. type: Plain text
#: build/C/man3/getenv.3:115
msgid "B<secure_getenv>()  is a GNU extension."
msgstr ""

#. type: Plain text
#: build/C/man3/getenv.3:117
msgid "The strings in the environment list are of the form I<name=value>."
msgstr ""

#. type: Plain text
#: build/C/man3/getenv.3:123
msgid ""
"As typically implemented, B<getenv>()  returns a pointer to a string within "
"the environment list.  The caller must take care not to modify this string, "
"since that would change the environment of the process."
msgstr ""

#. type: Plain text
#: build/C/man3/getenv.3:136
msgid ""
"The implementation of B<getenv>()  is not required to be reentrant.  The "
"string pointed to by the return value of B<getenv>()  may be statically "
"allocated, and can be modified by a subsequent call to B<getenv>(), "
"B<putenv>(3), B<setenv>(3), or B<unsetenv>(3)."
msgstr ""

#. type: Plain text
#: build/C/man3/getenv.3:142
msgid ""
"The \"secure execution\" mode of B<secure_getenv>()  is controlled by the "
"B<AT_SECURE> flag contained in the auxiliary vector passed from the kernel "
"to user space."
msgstr ""

#. type: Plain text
#: build/C/man3/getenv.3:150
msgid ""
"B<clearenv>(3), B<getauxval>(3), B<putenv>(3), B<setenv>(3), B<unsetenv>(3), "
"B<capabilities>(7), B<environ>(7)"
msgstr ""

#. type: TH
#: build/C/man3/getloadavg.3:34
#, no-wrap
msgid "GETLOADAVG"
msgstr ""

#. type: Plain text
#: build/C/man3/getloadavg.3:37
msgid "getloadavg - get system load averages"
msgstr ""

#. type: Plain text
#: build/C/man3/getloadavg.3:42
#, no-wrap
msgid "B<int getloadavg(double >I<loadavg[]>B<, int >I<nelem>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/getloadavg.3:50
msgid "B<getloadavg>():"
msgstr ""

#. type: Plain text
#: build/C/man3/getloadavg.3:55
#, no-wrap
msgid ""
"    Since glibc 2.19:\n"
"        _DEFAULT_SOURCE\n"
"    In glibc up to and including 2.19:\n"
"        _BSD_SOURCE\n"
msgstr ""

#. type: Plain text
#: build/C/man3/getloadavg.3:67
msgid ""
"The B<getloadavg>()  function returns the number of processes in the system "
"run queue averaged over various periods of time.  Up to I<nelem> samples are "
"retrieved and assigned to successive elements of I<loadavg[]>.  The system "
"imposes a maximum of 3 samples, representing averages over the last 1, 5, "
"and 15 minutes, respectively."
msgstr ""

#.  .SH HISTORY
#.  The
#.  BR getloadavg ()
#.  function appeared in
#.  4.3BSD Reno .
#. type: Plain text
#: build/C/man3/getloadavg.3:75
msgid ""
"If the load average was unobtainable, -1 is returned; otherwise, the number "
"of samples actually retrieved is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/getloadavg.3:77
msgid "This function is available in glibc since version 2.2."
msgstr ""

#. type: tbl table
#: build/C/man3/getloadavg.3:87
#, no-wrap
msgid "B<getloadavg>()"
msgstr ""

#.  mdoc seems to have a bug - there must be no newline here
#. type: Plain text
#: build/C/man3/getloadavg.3:93
msgid "Not in POSIX.1.  Present on the BSDs and Solaris."
msgstr ""

#. type: Plain text
#: build/C/man3/getloadavg.3:96
msgid "B<uptime>(1), B<proc>(5)"
msgstr ""

#. type: TH
#: build/C/man3/getsubopt.3:25
#, no-wrap
msgid "GETSUBOPT"
msgstr ""

#. type: Plain text
#: build/C/man3/getsubopt.3:28
msgid "getsubopt - parse suboption arguments from a string"
msgstr ""

#. type: Plain text
#: build/C/man3/getsubopt.3:33
msgid ""
"B<int getsubopt(char **>I<optionp>B<, char * const *>I<tokens>B<, char "
"**>I<valuep>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/getsubopt.3:40
msgid "B<getsubopt>():"
msgstr ""

#.     || _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
#. type: Plain text
#: build/C/man3/getsubopt.3:46
#, no-wrap
msgid ""
"_XOPEN_SOURCE\\ E<gt>= 500\n"
"    || /* Since glibc 2.12: */ _POSIX_C_SOURCE\\ E<gt>=\\ 200809L\n"
msgstr ""

#. type: Plain text
#: build/C/man3/getsubopt.3:63
msgid ""
"B<getsubopt>()  parses the list of comma-separated suboptions provided in "
"I<optionp>.  (Such a suboption list is typically produced when B<getopt>(3)  "
"is used to parse a command line; see for example the I<-o> option of "
"B<mount>(8).)  Each suboption may include an associated value, which is "
"separated from the suboption name by an equal sign.  The following is an "
"example of the kind of string that might be passed in I<optionp>:"
msgstr ""

#. type: Plain text
#: build/C/man3/getsubopt.3:67
#, no-wrap
msgid "B<ro,name=xyz>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/getsubopt.3:78
msgid ""
"The I<tokens> argument is a pointer to a NULL-terminated array of pointers "
"to the tokens that B<getsubopt>()  will look for in I<optionp>.  The tokens "
"should be distinct, null-terminated strings containing at least one "
"character, with no embedded equal signs or commas."
msgstr ""

#. type: Plain text
#: build/C/man3/getsubopt.3:99
msgid ""
"Each call to B<getsubopt>()  returns information about the next unprocessed "
"suboption in I<optionp>.  The first equal sign in a suboption (if any) is "
"interpreted as a separator between the name and the value of that "
"suboption.  The value extends to the next comma, or (for the last suboption) "
"to the end of the string.  If the name of the suboption matches a known name "
"from I<tokens>, and a value string was found, B<getsubopt>()  sets "
"I<*valuep> to the address of that string.  The first comma in I<optionp> is "
"overwritten with a null byte, so I<*valuep> is precisely the \"value "
"string\" for that suboption."
msgstr ""

#. type: Plain text
#: build/C/man3/getsubopt.3:103
msgid ""
"If the suboption is recognized, but no value string was found, I<*valuep> is "
"set to NULL."
msgstr ""

#. type: Plain text
#: build/C/man3/getsubopt.3:111
msgid ""
"When B<getsubopt>()  returns, I<optionp> points to the next suboption, or to "
"the null byte (\\(aq\\e0\\(aq) at the end of the string if the last "
"suboption was just processed."
msgstr ""

#. type: Plain text
#: build/C/man3/getsubopt.3:123
msgid ""
"If the first suboption in I<optionp> is recognized, B<getsubopt>()  returns "
"the index of the matching suboption element in I<tokens>.  Otherwise, -1 is "
"returned and I<*valuep> is the entire I<name>B<[=>I<value>B<]> string."
msgstr ""

#. type: Plain text
#: build/C/man3/getsubopt.3:130
msgid ""
"Since I<*optionp> is changed, the first suboption before the call to "
"B<getsubopt>()  is not (necessarily) the same as the first suboption after "
"B<getsubopt>()."
msgstr ""

#. type: tbl table
#: build/C/man3/getsubopt.3:140
#, no-wrap
msgid "B<getsubopt>()"
msgstr ""

#. type: Plain text
#: build/C/man3/getsubopt.3:150
msgid ""
"Since B<getsubopt>()  overwrites any commas it finds in the string "
"I<*optionp>, that string must be writable; it cannot be a string constant."
msgstr ""

#. type: Plain text
#: build/C/man3/getsubopt.3:152
msgid "The following program expects suboptions following a \"-o\" option."
msgstr ""

#. type: Plain text
#: build/C/man3/getsubopt.3:158
#, no-wrap
msgid ""
"#define _XOPEN_SOURCE 500\n"
"#include E<lt>stdlib.hE<gt>\n"
"#include E<lt>assert.hE<gt>\n"
"#include E<lt>stdio.hE<gt>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/getsubopt.3:176
#, no-wrap
msgid ""
"int\n"
"main(int argc, char **argv)\n"
"{\n"
"    enum {\n"
"        RO_OPT = 0,\n"
"        RW_OPT,\n"
"        NAME_OPT\n"
"    };\n"
"    char *const token[] = {\n"
"        [RO_OPT]   = \"ro\",\n"
"        [RW_OPT]   = \"rw\",\n"
"        [NAME_OPT] = \"name\",\n"
"        NULL\n"
"    };\n"
"    char *subopts;\n"
"    char *value;\n"
"    int opt;\n"
msgstr ""

#. type: Plain text
#: build/C/man3/getsubopt.3:181
#, no-wrap
msgid ""
"    int readonly = 0;\n"
"    int readwrite = 0;\n"
"    char *name = NULL;\n"
"    int errfnd = 0;\n"
msgstr ""

#. type: Plain text
#: build/C/man3/getsubopt.3:187
#, no-wrap
msgid ""
"    while ((opt = getopt(argc, argv, \"o:\")) != -1) {\n"
"        switch (opt) {\n"
"        case \\(aqo\\(aq:\n"
"            subopts = optarg;\n"
"            while (*subopts != \\(aq\\e0\\(aq && !errfnd) {\n"
msgstr ""

#. type: Plain text
#: build/C/man3/getsubopt.3:192
#, no-wrap
msgid ""
"            switch (getsubopt(&subopts, token, &value)) {\n"
"            case RO_OPT:\n"
"                readonly = 1;\n"
"                break;\n"
msgstr ""

#. type: Plain text
#: build/C/man3/getsubopt.3:196
#, no-wrap
msgid ""
"            case RW_OPT:\n"
"                readwrite = 1;\n"
"                break;\n"
msgstr ""

#. type: Plain text
#: build/C/man3/getsubopt.3:204
#, no-wrap
msgid ""
"            case NAME_OPT:\n"
"                if (value == NULL) {\n"
"                    fprintf(stderr, \"Missing value for \"\n"
"                            \"suboption \\(aq%s\\(aq\\en\", "
"token[NAME_OPT]);\n"
"                    errfnd = 1;\n"
"                    continue;\n"
"                }\n"
msgstr ""

#. type: Plain text
#: build/C/man3/getsubopt.3:207
#, no-wrap
msgid ""
"                name = value;\n"
"                break;\n"
msgstr ""

#. type: Plain text
#: build/C/man3/getsubopt.3:221
#, no-wrap
msgid ""
"            default:\n"
"                fprintf(stderr, \"No match found \"\n"
"                        \"for token: /%s/\\en\", value);\n"
"                errfnd = 1;\n"
"                break;\n"
"            }\n"
"        }\n"
"        if (readwrite && readonly) {\n"
"            fprintf(stderr, \"Only one of \\(aq%s\\(aq and \\(aq%s\\(aq can "
"be \"\n"
"                    \"specified\\en\", token[RO_OPT], token[RW_OPT]);\n"
"            errfnd = 1;\n"
"        }\n"
"        break;\n"
msgstr ""

#. type: Plain text
#: build/C/man3/getsubopt.3:226
#, no-wrap
msgid ""
"        default:\n"
"            errfnd = 1;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: build/C/man3/getsubopt.3:233
#, no-wrap
msgid ""
"    if (errfnd || argc == 1) {\n"
"        fprintf(stderr, \"\\enUsage: %s -o E<lt>suboptstringE<gt>\\en\", "
"argv[0]);\n"
"        fprintf(stderr, \"suboptions are \\(aqro\\(aq, \\(aqrw\\(aq, \"\n"
"                \"and \\(aqname=E<lt>valueE<gt>\\(aq\\en\");\n"
"        exit(EXIT_FAILURE);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: build/C/man3/getsubopt.3:235
#, no-wrap
msgid "    /* Remainder of program... */\n"
msgstr ""

#. type: Plain text
#: build/C/man3/getsubopt.3:241
msgid "B<getopt>(3)"
msgstr ""

#. type: TH
#: build/C/man3/malloc.3:34
#, no-wrap
msgid "MALLOC"
msgstr ""

#. type: Plain text
#: build/C/man3/malloc.3:37
msgid ""
"malloc, free, calloc, realloc, reallocarray - allocate and free dynamic "
"memory"
msgstr ""

#. type: Plain text
#: build/C/man3/malloc.3:46
#, no-wrap
msgid ""
"B<void *malloc(size_t >I<size>B<);>\n"
"B<void free(void >I<*ptr>B<);>\n"
"B<void *calloc(size_t >I<nmemb>B<, size_t >I<size>B<);>\n"
"B<void *realloc(void >I<*ptr>B<, size_t >I<size>B<);>\n"
"B<void *reallocarray(void >I<*ptr>B<, size_t >I<nmemb>B<, size_t "
">I<size>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/malloc.3:54
msgid "B<reallocarray>():"
msgstr ""

#. type: Plain text
#: build/C/man3/malloc.3:59
#, no-wrap
msgid ""
"    Since glibc 2.29:\n"
"        _DEFAULT_SOURCE\n"
"    Glibc 2.28 and earlier:\n"
"        _GNU_SOURCE\n"
msgstr ""

#.  glibc does this:
#. type: Plain text
#: build/C/man3/malloc.3:75
msgid ""
"The B<malloc>()  function allocates I<size> bytes and returns a pointer to "
"the allocated memory.  I<The memory is not initialized>.  If I<size> is 0, "
"then B<malloc>()  returns either NULL, or a unique pointer value that can "
"later be successfully passed to B<free>()."
msgstr ""

#. type: Plain text
#: build/C/man3/malloc.3:91
msgid ""
"The B<free>()  function frees the memory space pointed to by I<ptr>, which "
"must have been returned by a previous call to B<malloc>(), B<calloc>(), or "
"B<realloc>().  Otherwise, or if I<free(ptr)> has already been called before, "
"undefined behavior occurs.  If I<ptr> is NULL, no operation is performed."
msgstr ""

#.  glibc does this:
#. type: Plain text
#: build/C/man3/malloc.3:121
msgid ""
"The B<calloc>()  function allocates memory for an array of I<nmemb> elements "
"of I<size> bytes each and returns a pointer to the allocated memory.  The "
"memory is set to zero.  If I<nmemb> or I<size> is 0, then B<calloc>()  "
"returns either NULL, or a unique pointer value that can later be "
"successfully passed to B<free>().  If the multiplication of I<nmemb> and "
"I<size> would result in integer overflow, then B<calloc>()  returns an "
"error.  By contrast, an integer overflow would not be detected in the "
"following call to B<malloc>(), with the result that an incorrectly sized "
"block of memory would be allocated:"
msgstr ""

#. type: Plain text
#: build/C/man3/malloc.3:125
#, no-wrap
msgid "malloc(nmemb * size);\n"
msgstr ""

#. type: Plain text
#: build/C/man3/malloc.3:163
msgid ""
"The B<realloc>()  function changes the size of the memory block pointed to "
"by I<ptr> to I<size> bytes.  The contents will be unchanged in the range "
"from the start of the region up to the minimum of the old and new sizes.  If "
"the new size is larger than the old size, the added memory will I<not> be "
"initialized.  If I<ptr> is NULL, then the call is equivalent to "
"I<malloc(size)>, for all values of I<size>; if I<size> is equal to zero, and "
"I<ptr> is not NULL, then the call is equivalent to I<free(ptr)>.  Unless "
"I<ptr> is NULL, it must have been returned by an earlier call to "
"B<malloc>(), B<calloc>(), or B<realloc>().  If the area pointed to was "
"moved, a I<free(ptr)> is done."
msgstr ""

#. type: Plain text
#: build/C/man3/malloc.3:174
msgid ""
"The B<reallocarray>()  function changes the size of the memory block pointed "
"to by I<ptr> to be large enough for an array of I<nmemb> elements, each of "
"which is I<size> bytes.  It is equivalent to the call"
msgstr ""

#. type: Plain text
#: build/C/man3/malloc.3:177
#, no-wrap
msgid "    realloc(ptr, nmemb * size);\n"
msgstr ""

#. type: Plain text
#: build/C/man3/malloc.3:191
msgid ""
"However, unlike that B<realloc>()  call, B<reallocarray>()  fails safely in "
"the case where the multiplication would overflow.  If such an overflow "
"occurs, B<reallocarray>()  returns NULL, sets I<errno> to B<ENOMEM>, and "
"leaves the original block of memory unchanged."
msgstr ""

#. type: Plain text
#: build/C/man3/malloc.3:211
msgid ""
"The B<malloc>()  and B<calloc>()  functions return a pointer to the "
"allocated memory, which is suitably aligned for any built-in type.  On "
"error, these functions return NULL.  NULL may also be returned by a "
"successful call to B<malloc>()  with a I<size> of zero, or by a successful "
"call to B<calloc>()  with I<nmemb> or I<size> equal to zero."
msgstr ""

#. type: Plain text
#: build/C/man3/malloc.3:215
msgid "The B<free>()  function returns no value."
msgstr ""

#. type: Plain text
#: build/C/man3/malloc.3:234
msgid ""
"The B<realloc>()  function returns a pointer to the newly allocated memory, "
"which is suitably aligned for any built-in type, or NULL if the request "
"failed.  The returned pointer may be the same as I<ptr> if the allocation "
"was not moved (e.g., there was room to expand the allocation in-place), or "
"different from I<ptr> if the allocation was moved to a new address.  If "
"I<size> was equal to 0, either NULL or a pointer suitable to be passed to "
"B<free>()  is returned.  If B<realloc>()  fails, the original block is left "
"untouched; it is not freed or moved."
msgstr ""

#. type: Plain text
#: build/C/man3/malloc.3:240
msgid ""
"On success, the B<reallocarray>()  function returns a pointer to the newly "
"allocated memory.  On failure, it returns NULL and the original block of "
"memory is left untouched."
msgstr ""

#. type: Plain text
#: build/C/man3/malloc.3:247
msgid ""
"B<calloc>(), B<malloc>(), B<realloc>(), and B<reallocarray>()  can fail with "
"the following error:"
msgstr ""

#. type: TP
#: build/C/man3/malloc.3:247 build/C/man3/putenv.3:78 build/C/man3/setenv.3:120
#, no-wrap
msgid "B<ENOMEM>"
msgstr ""

#. type: Plain text
#: build/C/man3/malloc.3:256
msgid ""
"Out of memory.  Possibly, the application hit the B<RLIMIT_AS> or "
"B<RLIMIT_DATA> limit described in B<getrlimit>(2)."
msgstr ""

#. type: Plain text
#: build/C/man3/malloc.3:259
msgid "B<reallocarray>()  first appeared in glibc in version 2.26."
msgstr ""

#. type: tbl table
#: build/C/man3/malloc.3:270
#, no-wrap
msgid ""
"B<malloc>(),\n"
"B<free>(),\n"
msgstr ""

#. type: tbl table
#: build/C/man3/malloc.3:273
#, no-wrap
msgid ""
"B<calloc>(),\n"
"B<realloc>()"
msgstr ""

#. type: Plain text
#: build/C/man3/malloc.3:281
msgid ""
"B<malloc>(), B<free>(), B<calloc>(), B<realloc>(): POSIX.1-2001, "
"POSIX.1-2008, C89, C99."
msgstr ""

#. type: Plain text
#: build/C/man3/malloc.3:284
msgid ""
"B<reallocarray>()  is a nonstandard extension that first appeared in OpenBSD "
"5.6 and FreeBSD 11.0."
msgstr ""

#. type: Plain text
#: build/C/man3/malloc.3:300
msgid ""
"By default, Linux follows an optimistic memory allocation strategy.  This "
"means that when B<malloc>()  returns non-NULL there is no guarantee that the "
"memory really is available.  In case it turns out that the system is out of "
"memory, one or more processes will be killed by the OOM killer.  For more "
"information, see the description of I</proc/sys/vm/overcommit_memory> and "
"I</proc/sys/vm/oom_adj> in B<proc>(5), and the Linux kernel source file "
"I<Documentation/vm/overcommit-accounting.rst>."
msgstr ""

#. type: Plain text
#: build/C/man3/malloc.3:323
msgid ""
"Normally, B<malloc>()  allocates memory from the heap, and adjusts the size "
"of the heap as required, using B<sbrk>(2).  When allocating blocks of memory "
"larger than B<MMAP_THRESHOLD> bytes, the glibc B<malloc>()  implementation "
"allocates the memory as a private anonymous mapping using B<mmap>(2).  "
"B<MMAP_THRESHOLD> is 128\\ kB by default, but is adjustable using "
"B<mallopt>(3).  Prior to Linux 4.7 allocations performed using B<mmap>(2)  "
"were unaffected by the B<RLIMIT_DATA> resource limit; since Linux 4.7, this "
"limit is also enforced for allocations performed using B<mmap>(2)."
msgstr ""

#. type: Plain text
#: build/C/man3/malloc.3:341
msgid ""
"To avoid corruption in multithreaded applications, mutexes are used "
"internally to protect the memory-management data structures employed by "
"these functions.  In a multithreaded application in which threads "
"simultaneously allocate and free memory, there could be contention for these "
"mutexes.  To scalably handle memory allocation in multithreaded "
"applications, glibc creates additional I<memory allocation arenas> if mutex "
"contention is detected.  Each arena is a large region of memory that is "
"internally allocated by the system (using B<brk>(2)  or B<mmap>(2)), and "
"managed with its own mutexes."
msgstr ""

#. type: Plain text
#: build/C/man3/malloc.3:359
msgid ""
"SUSv2 requires B<malloc>(), B<calloc>(), and B<realloc>()  to set I<errno> "
"to B<ENOMEM> upon failure.  Glibc assumes that this is done (and the glibc "
"versions of these routines do this); if you use a private malloc "
"implementation that does not set I<errno>, then certain library routines may "
"fail without having a reason in I<errno>."
msgstr ""

#. type: Plain text
#: build/C/man3/malloc.3:368
msgid ""
"Crashes in B<malloc>(), B<calloc>(), B<realloc>(), or B<free>()  are almost "
"always related to heap corruption, such as overflowing an allocated chunk or "
"freeing the same pointer twice."
msgstr ""

#. type: Plain text
#: build/C/man3/malloc.3:374
msgid ""
"The B<malloc>()  implementation is tunable via environment variables; see "
"B<mallopt>(3)  for details."
msgstr ""

#. type: Plain text
#: build/C/man3/malloc.3:399
msgid ""
"B<valgrind>(1), B<brk>(2), B<mmap>(2), B<alloca>(3), B<malloc_get_state>(3), "
"B<malloc_info>(3), B<malloc_trim>(3), B<malloc_usable_size>(3), "
"B<mallopt>(3), B<mcheck>(3), B<mtrace>(3), B<posix_memalign>(3)"
msgstr ""

#. type: Plain text
#: build/C/man3/malloc.3:403
msgid ""
"For details of the GNU C library implementation, see E<.UR "
"https://sourceware.org/glibc/wiki/MallocInternals> E<.UE .>"
msgstr ""

#. type: TH
#: build/C/man3/mblen.3:16
#, no-wrap
msgid "MBLEN"
msgstr ""

#. type: Plain text
#: build/C/man3/mblen.3:19
msgid "mblen - determine number of bytes in next multibyte character"
msgstr ""

#. type: Plain text
#: build/C/man3/mblen.3:24
#, no-wrap
msgid "B<int mblen(const char *>I<s>B<, size_t >I<n>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/mblen.3:43
msgid ""
"If I<s> is not NULL, the B<mblen>()  function inspects at most I<n> bytes of "
"the multibyte string starting at I<s> and extracts the next complete "
"multibyte character.  It uses a static anonymous shift state known only to "
"the B<mblen>()  function.  If the multibyte character is not the null wide "
"character, it returns the number of bytes that were consumed from I<s>.  If "
"the multibyte character is the null wide character, it returns 0."
msgstr ""

#. type: Plain text
#: build/C/man3/mblen.3:57
msgid ""
"If the I<n> bytes starting at I<s> do not contain a complete multibyte "
"character, B<mblen>()  returns -1.  This can happen even if I<n> is greater "
"than or equal to I<MB_CUR_MAX>, if the multibyte string contains redundant "
"shift sequences."
msgstr ""

#. type: Plain text
#: build/C/man3/mblen.3:64
msgid ""
"If the multibyte string starting at I<s> contains an invalid multibyte "
"sequence before the next complete character, B<mblen>()  also returns -1."
msgstr ""

#.  The Dinkumware doc and the Single UNIX specification say this, but
#.  glibc doesn't implement this.
#. type: Plain text
#: build/C/man3/mblen.3:75
msgid ""
"If I<s> is NULL, the B<mblen>()  function resets the shift state, known to "
"only this function, to the initial state, and returns nonzero if the "
"encoding has nontrivial shift state, or zero if the encoding is stateless."
msgstr ""

#. type: Plain text
#: build/C/man3/mblen.3:87
msgid ""
"The B<mblen>()  function returns the number of bytes parsed from the "
"multibyte sequence starting at I<s>, if a non-null wide character was "
"recognized.  It returns 0, if a null wide character was recognized.  It "
"returns -1, if an invalid multibyte sequence was encountered or if it "
"couldn't parse a complete multibyte character."
msgstr ""

#. type: tbl table
#: build/C/man3/mblen.3:97
#, no-wrap
msgid "B<mblen>()"
msgstr ""

#. type: tbl table
#: build/C/man3/mblen.3:97 build/C/man3/mbtowc.3:123 build/C/man3/wctomb.3:94
#, no-wrap
msgid "MT-Unsafe race"
msgstr ""

#. type: Plain text
#: build/C/man3/mblen.3:108
msgid ""
"The behavior of B<mblen>()  depends on the B<LC_CTYPE> category of the "
"current locale."
msgstr ""

#. type: Plain text
#: build/C/man3/mblen.3:113
msgid ""
"The function B<mbrlen>(3)  provides a better interface to the same "
"functionality."
msgstr ""

#. type: Plain text
#: build/C/man3/mblen.3:115
msgid "B<mbrlen>(3)"
msgstr ""

#. type: TH
#: build/C/man3/mbstowcs.3:17
#, no-wrap
msgid "MBSTOWCS"
msgstr ""

#. type: Plain text
#: build/C/man3/mbstowcs.3:20
msgid "mbstowcs - convert a multibyte string to a wide-character string"
msgstr ""

#. type: Plain text
#: build/C/man3/mbstowcs.3:25
#, no-wrap
msgid ""
"B<size_t mbstowcs(wchar_t *>I<dest>B<, const char *>I<src>B<, size_t "
">I<n>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/mbstowcs.3:45
msgid ""
"If I<dest> is not NULL, the B<mbstowcs>()  function converts the multibyte "
"string I<src> to a wide-character string starting at I<dest>.  At most I<n> "
"wide characters are written to I<dest>.  The sequence of characters in the "
"string I<src> shall begin in the initial shift state.  The conversion can "
"stop for three reasons:"
msgstr ""

#. type: IP
#: build/C/man3/mbstowcs.3:45 build/C/man3/wcstombs.3:43
#, no-wrap
msgid "1."
msgstr ""

#. type: Plain text
#: build/C/man3/mbstowcs.3:50
msgid ""
"An invalid multibyte sequence has been encountered.  In this case, "
"I<(size_t)\\ -1> is returned."
msgstr ""

#. type: IP
#: build/C/man3/mbstowcs.3:50 build/C/man3/wcstombs.3:49
#, no-wrap
msgid "2."
msgstr ""

#. type: Plain text
#: build/C/man3/mbstowcs.3:58
msgid ""
"I<n> non-L\\(aq\\e0\\(aq wide characters have been stored at I<dest>.  In "
"this case, the number of wide characters written to I<dest> is returned, but "
"the shift state at this point is lost."
msgstr ""

#. type: IP
#: build/C/man3/mbstowcs.3:58 build/C/man3/wcstombs.3:54
#, no-wrap
msgid "3."
msgstr ""

#. type: Plain text
#: build/C/man3/mbstowcs.3:64
msgid ""
"The multibyte string has been completely converted, including the "
"terminating null character (\\(aq\\e0\\(aq).  In this case, the number of "
"wide characters written to I<dest>, excluding the terminating null wide "
"character, is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/mbstowcs.3:70
msgid ""
"The programmer must ensure that there is room for at least I<n> wide "
"characters at I<dest>."
msgstr ""

#. type: Plain text
#: build/C/man3/mbstowcs.3:78
msgid ""
"If I<dest> is NULL, I<n> is ignored, and the conversion proceeds as above, "
"except that the converted wide characters are not written out to memory, and "
"that no length limit exists."
msgstr ""

#. type: Plain text
#: build/C/man3/mbstowcs.3:84
msgid ""
"In order to avoid the case 2 above, the programmer should make sure I<n> is "
"greater than or equal to I<mbstowcs(NULL,src,0)+1>."
msgstr ""

#. type: Plain text
#: build/C/man3/mbstowcs.3:94
msgid ""
"The B<mbstowcs>()  function returns the number of wide characters that make "
"up the converted part of the wide-character string, not including the "
"terminating null wide character.  If an invalid multibyte sequence was "
"encountered, I<(size_t)\\ -1> is returned."
msgstr ""

#. type: tbl table
#: build/C/man3/mbstowcs.3:104
#, no-wrap
msgid "B<mbstowcs>()"
msgstr ""

#. type: Plain text
#: build/C/man3/mbstowcs.3:115
msgid ""
"The behavior of B<mbstowcs>()  depends on the B<LC_CTYPE> category of the "
"current locale."
msgstr ""

#. type: Plain text
#: build/C/man3/mbstowcs.3:120
msgid ""
"The function B<mbsrtowcs>(3)  provides a better interface to the same "
"functionality."
msgstr ""

#. type: Plain text
#: build/C/man3/mbstowcs.3:125
msgid ""
"The program below illustrates the use of B<mbstowcs>(), as well as some of "
"the wide character classification functions.  An example run is the "
"following:"
msgstr ""

#. type: Plain text
#: build/C/man3/mbstowcs.3:132
#, no-wrap
msgid ""
"$ ./t_mbstowcs de_DE.UTF-8 Grüße!\n"
"Length of source string (excluding terminator):\n"
"    8 bytes\n"
"    6 multibyte characters\n"
msgstr ""

#. type: Plain text
#: build/C/man3/mbstowcs.3:140
#, no-wrap
msgid ""
"Wide character string is: Grüße! (6 characters)\n"
"    G alpha upper\n"
"    r alpha lower\n"
"    ü alpha lower\n"
"    ß alpha lower\n"
"    e alpha lower\n"
"    ! !alpha\n"
msgstr ""

#. type: SS
#: build/C/man3/mbstowcs.3:142 build/C/man3/strtol.3:251
#, no-wrap
msgid "Program source"
msgstr ""

#. type: Plain text
#: build/C/man3/mbstowcs.3:151
#, no-wrap
msgid ""
"#include E<lt>wctype.hE<gt>\n"
"#include E<lt>locale.hE<gt>\n"
"#include E<lt>wchar.hE<gt>\n"
"#include E<lt>stdio.hE<gt>\n"
"#include E<lt>string.hE<gt>\n"
"#include E<lt>stdlib.hE<gt>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/mbstowcs.3:157
#, no-wrap
msgid ""
"int\n"
"main(int argc, char *argv[])\n"
"{\n"
"    size_t mbslen;      /* Number of multibyte characters in source */\n"
"    wchar_t *wcs;       /* Pointer to converted wide character string */\n"
msgstr ""

#. type: Plain text
#: build/C/man3/mbstowcs.3:162
#, no-wrap
msgid ""
"    if (argc E<lt> 3) {\n"
"        fprintf(stderr, \"Usage: %s E<lt>localeE<gt> E<lt>stringE<gt>\\en\", "
"argv[0]);\n"
"        exit(EXIT_FAILURE);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: build/C/man3/mbstowcs.3:164
#, no-wrap
msgid "    /* Apply the specified locale */\n"
msgstr ""

#. type: Plain text
#: build/C/man3/mbstowcs.3:169
#, no-wrap
msgid ""
"    if (setlocale(LC_ALL, argv[1]) == NULL) {\n"
"        perror(\"setlocale\");\n"
"        exit(EXIT_FAILURE);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: build/C/man3/mbstowcs.3:172
#, no-wrap
msgid ""
"    /* Calculate the length required to hold argv[2] converted to\n"
"       a wide character string */\n"
msgstr ""

#. type: Plain text
#: build/C/man3/mbstowcs.3:178
#, no-wrap
msgid ""
"    mbslen = mbstowcs(NULL, argv[2], 0);\n"
"    if (mbslen == (size_t) -1) {\n"
"        perror(\"mbstowcs\");\n"
"        exit(EXIT_FAILURE);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: build/C/man3/mbstowcs.3:180
#, no-wrap
msgid "    /* Describe the source string to the user */\n"
msgstr ""

#. type: Plain text
#: build/C/man3/mbstowcs.3:184
#, no-wrap
msgid ""
"    printf(\"Length of source string (excluding terminator):\\en\");\n"
"    printf(\"    %zu bytes\\en\", strlen(argv[2]));\n"
"    printf(\"    %zu multibyte characters\\en\\en\", mbslen);\n"
msgstr ""

#. type: Plain text
#: build/C/man3/mbstowcs.3:187
#, no-wrap
msgid ""
"    /* Allocate wide character string of the desired size.  Add 1\n"
"       to allow for terminating null wide character (L\\(aq\\e0\\(aq). */\n"
msgstr ""

#. type: Plain text
#: build/C/man3/mbstowcs.3:193
#, no-wrap
msgid ""
"    wcs = calloc(mbslen + 1, sizeof(*wcs));\n"
"    if (wcs == NULL) {\n"
"        perror(\"calloc\");\n"
"        exit(EXIT_FAILURE);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: build/C/man3/mbstowcs.3:196
#, no-wrap
msgid ""
"    /* Convert the multibyte character string in argv[2] to a\n"
"       wide character string */\n"
msgstr ""

#. type: Plain text
#: build/C/man3/mbstowcs.3:201
#, no-wrap
msgid ""
"    if (mbstowcs(wcs, argv[2], mbslen + 1) == (size_t) -1) {\n"
"        perror(\"mbstowcs\");\n"
"        exit(EXIT_FAILURE);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: build/C/man3/mbstowcs.3:204
#, no-wrap
msgid ""
"    printf(\"Wide character string is: %ls (%zu characters)\\en\",\n"
"            wcs, mbslen);\n"
msgstr ""

#. type: Plain text
#: build/C/man3/mbstowcs.3:207
#, no-wrap
msgid ""
"    /* Now do some inspection of the classes of the characters in\n"
"       the wide character string */\n"
msgstr ""

#. type: Plain text
#: build/C/man3/mbstowcs.3:210
#, no-wrap
msgid ""
"    for (wchar_t *wp = wcs; *wp != 0; wp++) {\n"
"        printf(\"    %lc \", (wint_t) *wp);\n"
msgstr ""

#. type: Plain text
#: build/C/man3/mbstowcs.3:214
#, no-wrap
msgid ""
"        if (!iswalpha(*wp))\n"
"            printf(\"!\");\n"
"        printf(\"alpha \");\n"
msgstr ""

#. type: Plain text
#: build/C/man3/mbstowcs.3:218
#, no-wrap
msgid ""
"        if (iswalpha(*wp)) {\n"
"            if (iswupper(*wp))\n"
"                printf(\"upper \");\n"
msgstr ""

#. type: Plain text
#: build/C/man3/mbstowcs.3:222
#, no-wrap
msgid ""
"            if (iswlower(*wp))\n"
"                printf(\"lower \");\n"
"        }\n"
msgstr ""

#. type: Plain text
#: build/C/man3/mbstowcs.3:225
#, no-wrap
msgid ""
"        putchar(\\(aq\\en\\(aq);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: build/C/man3/mbstowcs.3:235
msgid "B<mblen>(3), B<mbsrtowcs>(3), B<mbtowc>(3), B<wcstombs>(3), B<wctomb>(3)"
msgstr ""

#. type: TH
#: build/C/man3/mbtowc.3:16
#, no-wrap
msgid "MBTOWC"
msgstr ""

#. type: TH
#: build/C/man3/mbtowc.3:16 build/C/man3/putenv.3:36 build/C/man3/strfromd.3:32 build/C/man3/system.3:31
#, no-wrap
msgid "2019-03-06"
msgstr ""

#. type: Plain text
#: build/C/man3/mbtowc.3:19
msgid "mbtowc - convert a multibyte sequence to a wide character"
msgstr ""

#. type: Plain text
#: build/C/man3/mbtowc.3:24
#, no-wrap
msgid "B<int mbtowc(wchar_t *>I<pwc>B<, const char *>I<s>B<, size_t >I<n>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/mbtowc.3:50
msgid ""
"The main case for this function is when I<s> is not NULL and I<pwc> is not "
"NULL.  In this case, the B<mbtowc>()  function inspects at most I<n> bytes "
"of the multibyte string starting at I<s>, extracts the next complete "
"multibyte character, converts it to a wide character and stores it at "
"I<*pwc>.  It updates an internal shift state known only to the B<mbtowc>()  "
"function.  If I<s> does not point to a null byte (\\(aq\\e0\\(aq), it "
"returns the number of bytes that were consumed from I<s>, otherwise it "
"returns 0."
msgstr ""

#. type: Plain text
#: build/C/man3/mbtowc.3:64
msgid ""
"If the I<n> bytes starting at I<s> do not contain a complete multibyte "
"character, or if they contain an invalid multibyte sequence, B<mbtowc>()  "
"returns -1.  This can happen even if I<n> E<gt>= I<MB_CUR_MAX>, if the "
"multibyte string contains redundant shift sequences."
msgstr ""

#. type: Plain text
#: build/C/man3/mbtowc.3:74
msgid ""
"A different case is when I<s> is not NULL but I<pwc> is NULL.  In this case, "
"the B<mbtowc>()  function behaves as above, except that it does not store "
"the converted wide character in memory."
msgstr ""

#.  The Dinkumware doc and the Single UNIX specification say this, but
#.  glibc doesn't implement this.
#. type: Plain text
#: build/C/man3/mbtowc.3:93
msgid ""
"A third case is when I<s> is NULL.  In this case, I<pwc> and I<n> are "
"ignored.  The B<mbtowc>()  function resets the shift state, only known to "
"this function, to the initial state, and returns nonzero if the encoding has "
"nontrivial shift state, or zero if the encoding is stateless."
msgstr ""

#. type: Plain text
#: build/C/man3/mbtowc.3:105
msgid ""
"If I<s> is not NULL, the B<mbtowc>()  function returns the number of "
"consumed bytes starting at I<s>, or 0 if I<s> points to a null byte, or -1 "
"upon failure."
msgstr ""

#. type: Plain text
#: build/C/man3/mbtowc.3:113
msgid ""
"If I<s> is NULL, the B<mbtowc>()  function returns nonzero if the encoding "
"has nontrivial shift state, or zero if the encoding is stateless."
msgstr ""

#. type: tbl table
#: build/C/man3/mbtowc.3:123
#, no-wrap
msgid "B<mbtowc>()"
msgstr ""

#. type: Plain text
#: build/C/man3/mbtowc.3:134
msgid ""
"The behavior of B<mbtowc>()  depends on the B<LC_CTYPE> category of the "
"current locale."
msgstr ""

#. type: Plain text
#: build/C/man3/mbtowc.3:140
msgid ""
"This function is not multithread safe.  The function B<mbrtowc>(3)  provides "
"a better interface to the same functionality."
msgstr ""

#. type: Plain text
#: build/C/man3/mbtowc.3:147
msgid ""
"B<MB_CUR_MAX>(3), B<mblen>(3), B<mbrtowc>(3), B<mbstowcs>(3), "
"B<wcstombs>(3), B<wctomb>(3)"
msgstr ""

#. type: TH
#: build/C/man3/mkdtemp.3:26
#, no-wrap
msgid "MKDTEMP"
msgstr ""

#. type: TH
#: build/C/man3/mkdtemp.3:26
#, no-wrap
msgid "2016-07-17"
msgstr ""

#. type: Plain text
#: build/C/man3/mkdtemp.3:29
msgid "mkdtemp - create a unique temporary directory"
msgstr ""

#. type: Plain text
#: build/C/man3/mkdtemp.3:34
#, no-wrap
msgid "B<char *mkdtemp(char *>I<template>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/mkdtemp.3:42
msgid "B<mkdtemp>():"
msgstr ""

#. type: Plain text
#: build/C/man3/mkdtemp.3:47
msgid "/* Since glibc 2.19: */ _DEFAULT_SOURCE"
msgstr ""

#. type: Plain text
#: build/C/man3/mkdtemp.3:49
msgid "|| /* Glibc 2.19 and earlier: */ _BSD_SOURCE"
msgstr ""

#. type: Plain text
#: build/C/man3/mkdtemp.3:52
msgid "|| /* Since glibc 2.10: */ _POSIX_C_SOURCE\\ E<gt>=\\ 200809L"
msgstr ""

#. type: Plain text
#: build/C/man3/mkdtemp.3:68
msgid ""
"The B<mkdtemp>()  function generates a uniquely named temporary directory "
"from I<template>.  The last six characters of I<template> must be XXXXXX and "
"these are replaced with a string that makes the directory name unique.  The "
"directory is then created with permissions 0700.  Since it will be modified, "
"I<template> must not be a string constant, but should be declared as a "
"character array."
msgstr ""

#. type: Plain text
#: build/C/man3/mkdtemp.3:75
msgid ""
"The B<mkdtemp>()  function returns a pointer to the modified template string "
"on success, and NULL on failure, in which case I<errno> is set "
"appropriately."
msgstr ""

#. type: TP
#: build/C/man3/mkdtemp.3:76 build/C/man3/mkstemp.3:167 build/C/man3/mktemp.3:91 build/C/man3/random.3:147 build/C/man3/random.3:154 build/C/man3/random_r.3:136 build/C/man3/random_r.3:140 build/C/man3/random_r.3:149 build/C/man3/setenv.3:115 build/C/man3/strtol.3:145 build/C/man3/strtoul.3:146 build/C/man2/getrandom.2:163
#, no-wrap
msgid "B<EINVAL>"
msgstr ""

#. type: Plain text
#: build/C/man3/mkdtemp.3:80
msgid ""
"The last six characters of I<template> were not XXXXXX.  Now I<template> is "
"unchanged."
msgstr ""

#. type: Plain text
#: build/C/man3/mkdtemp.3:84
msgid "Also see B<mkdir>(2)  for other possible values for I<errno>."
msgstr ""

#. type: Plain text
#: build/C/man3/mkdtemp.3:86
msgid "Available since glibc 2.1.91."
msgstr ""

#. type: tbl table
#: build/C/man3/mkdtemp.3:96
#, no-wrap
msgid "B<mkdtemp>()"
msgstr ""

#.  As at 2006, this function is being considered for a revision of POSIX.1
#.  Also in NetBSD 1.4.
#. type: Plain text
#: build/C/man3/mkdtemp.3:103
msgid "POSIX.1-2008.  This function is present on the BSDs."
msgstr ""

#. type: Plain text
#: build/C/man3/mkdtemp.3:111
msgid ""
"B<mktemp>(1), B<mkdir>(2), B<mkstemp>(3), B<mktemp>(3), B<tempnam>(3), "
"B<tmpfile>(3), B<tmpnam>(3)"
msgstr ""

#. type: TH
#: build/C/man3/mkstemp.3:35
#, no-wrap
msgid "MKSTEMP"
msgstr ""

#. type: Plain text
#: build/C/man3/mkstemp.3:38
msgid "mkstemp, mkostemp, mkstemps, mkostemps - create a unique temporary file"
msgstr ""

#. type: Plain text
#: build/C/man3/mkstemp.3:43
#, no-wrap
msgid "B<int mkstemp(char *>I<template>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/mkstemp.3:45
#, no-wrap
msgid "B<int mkostemp(char *>I<template>B<, int >I<flags>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/mkstemp.3:47
#, no-wrap
msgid "B<int mkstemps(char *>I<template>B<, int >I<suffixlen>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/mkstemp.3:49
#, no-wrap
msgid ""
"B<int mkostemps(char *>I<template>B<, int >I<suffixlen>B<, int "
">I<flags>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/mkstemp.3:57
msgid "B<mkstemp>():"
msgstr ""

#.     || _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
#. type: Plain text
#: build/C/man3/mkstemp.3:64
#, no-wrap
msgid ""
"_XOPEN_SOURCE\\ E<gt>=\\ 500\n"
"    || /* Since glibc 2.12: */ _POSIX_C_SOURCE\\ E<gt>=\\ 200809L\n"
"    || /* Glibc versions E<lt>= 2.19: */ _SVID_SOURCE || _BSD_SOURCE\n"
msgstr ""

#. type: Plain text
#: build/C/man3/mkstemp.3:70
msgid "B<mkostemp>(): _GNU_SOURCE"
msgstr ""

#. type: Plain text
#: build/C/man3/mkstemp.3:74
#, no-wrap
msgid ""
"B<mkstemps>():\n"
"    /* Glibc since 2.19: */ _DEFAULT_SOURCE\n"
"        || /* Glibc versions E<lt>= 2.19: */ _SVID_SOURCE || _BSD_SOURCE\n"
msgstr ""

#. type: Plain text
#: build/C/man3/mkstemp.3:77
msgid "B<mkostemps>(): _GNU_SOURCE"
msgstr ""

#. type: Plain text
#: build/C/man3/mkstemp.3:84
msgid ""
"The B<mkstemp>()  function generates a unique temporary filename from "
"I<template>, creates and opens the file, and returns an open file descriptor "
"for the file."
msgstr ""

#. type: Plain text
#: build/C/man3/mkstemp.3:92
msgid ""
"The last six characters of I<template> must be \"XXXXXX\" and these are "
"replaced with a string that makes the filename unique.  Since it will be "
"modified, I<template> must not be a string constant, but should be declared "
"as a character array."
msgstr ""

#. type: Plain text
#: build/C/man3/mkstemp.3:100
msgid ""
"The file is created with permissions 0600, that is, read plus write for "
"owner only.  The returned file descriptor provides both read and write "
"access to the file.  The file is opened with the B<open>(2)  B<O_EXCL> flag, "
"guaranteeing that the caller is the process that creates the file."
msgstr ""

#.  Reportedly, FreeBSD
#. type: Plain text
#: build/C/man3/mkstemp.3:131
msgid ""
"The B<mkostemp>()  function is like B<mkstemp>(), with the difference that "
"the following bits\\(emwith the same meaning as for B<open>(2)\\(emmay be "
"specified in I<flags>: B<O_APPEND>, B<O_CLOEXEC>, and B<O_SYNC>.  Note that "
"when creating the file, B<mkostemp>()  includes the values B<O_RDWR>, "
"B<O_CREAT>, and B<O_EXCL> in the I<flags> argument given to B<open>(2); "
"including these values in the I<flags> argument given to B<mkostemp>()  is "
"unnecessary, and produces errors on some systems."
msgstr ""

#. type: Plain text
#: build/C/man3/mkstemp.3:147
msgid ""
"The B<mkstemps>()  function is like B<mkstemp>(), except that the string in "
"I<template> contains a suffix of I<suffixlen> characters.  Thus, I<template> "
"is of the form I<prefixXXXXXXsuffix>, and the string XXXXXX is modified as "
"for B<mkstemp>()."
msgstr ""

#. type: Plain text
#: build/C/man3/mkstemp.3:156
msgid ""
"The B<mkostemps>()  function is to B<mkstemps>()  as B<mkostemp>()  is to "
"B<mkstemp>()."
msgstr ""

#. type: Plain text
#: build/C/man3/mkstemp.3:162
msgid ""
"On success, these functions return the file descriptor of the temporary "
"file.  On error, -1 is returned, and I<errno> is set appropriately."
msgstr ""

#. type: TP
#: build/C/man3/mkstemp.3:163
#, no-wrap
msgid "B<EEXIST>"
msgstr ""

#. type: Plain text
#: build/C/man3/mkstemp.3:167
msgid ""
"Could not create a unique temporary filename.  Now the contents of "
"I<template> are undefined."
msgstr ""

#. type: Plain text
#: build/C/man3/mkstemp.3:175
msgid ""
"For B<mkstemp>()  and B<mkostemp>(): The last six characters of I<template> "
"were not XXXXXX; now I<template> is unchanged."
msgstr ""

#. type: Plain text
#: build/C/man3/mkstemp.3:186
msgid ""
"For B<mkstemps>()  and B<mkostemps>(): I<template> is less than I<(6 + "
"suffixlen)> characters long, or the last 6 characters before the suffix in "
"I<template> were not XXXXXX."
msgstr ""

#. type: Plain text
#: build/C/man3/mkstemp.3:189
msgid ""
"These functions may also fail with any of the errors described for "
"B<open>(2)."
msgstr ""

#. type: Plain text
#: build/C/man3/mkstemp.3:196
msgid ""
"B<mkostemp>()  is available since glibc 2.7.  B<mkstemps>()  and "
"B<mkostemps>()  are available since glibc 2.11."
msgstr ""

#. type: tbl table
#: build/C/man3/mkstemp.3:207
#, no-wrap
msgid ""
"B<mkstemp>(),\n"
"B<mkostemp>(),\n"
msgstr ""

#. type: tbl table
#: build/C/man3/mkstemp.3:210
#, no-wrap
msgid ""
"B<mkstemps>(),\n"
"B<mkostemps>()"
msgstr ""

#. type: Plain text
#: build/C/man3/mkstemp.3:215
msgid "B<mkstemp>(): 4.3BSD, POSIX.1-2001."
msgstr ""

#.  mkstemps() appears to be at least on the BSDs, Mac OS X, Solaris,
#.  and Tru64.
#. type: Plain text
#: build/C/man3/mkstemp.3:220
msgid "B<mkstemps>(): unstandardized, but appears on several other systems."
msgstr ""

#. type: Plain text
#: build/C/man3/mkstemp.3:225
msgid "B<mkostemp>()  and B<mkostemps>(): are glibc extensions."
msgstr ""

#. type: Plain text
#: build/C/man3/mkstemp.3:232
msgid ""
"In glibc versions 2.06 and earlier, the file is created with permissions "
"0666, that is, read and write for all users.  This old behavior may be a "
"security risk, especially since other UNIX flavors use 0600, and somebody "
"might overlook this detail when porting programs.  POSIX.1-2008 adds a "
"requirement that the file be created with mode 0600."
msgstr ""

#
#.  The prototype for
#.  .BR mkstemp ()
#.  is in
#.  .I <unistd.h>
#.  for libc4, libc5, glibc1; glibc2 follows POSIX.1 and has the prototype in
#.  .IR <stdlib.h> .
#. type: Plain text
#: build/C/man3/mkstemp.3:250
msgid ""
"More generally, the POSIX specification of B<mkstemp>()  does not say "
"anything about file modes, so the application should make sure its file mode "
"creation mask (see B<umask>(2))  is set appropriately before calling "
"B<mkstemp>()  (and B<mkostemp>())."
msgstr ""

#. type: Plain text
#: build/C/man3/mkstemp.3:256
msgid "B<mkdtemp>(3), B<mktemp>(3), B<tempnam>(3), B<tmpfile>(3), B<tmpnam>(3)"
msgstr ""

#. type: TH
#: build/C/man3/mktemp.3:34
#, no-wrap
msgid "MKTEMP"
msgstr ""

#. type: Plain text
#: build/C/man3/mktemp.3:37
msgid "mktemp - make a unique temporary filename"
msgstr ""

#. type: Plain text
#: build/C/man3/mktemp.3:42
#, no-wrap
msgid "B<char *mktemp(char *>I<template>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/mktemp.3:50
msgid "B<mktemp>():"
msgstr ""

#. type: Plain text
#: build/C/man3/mktemp.3:58
#, no-wrap
msgid ""
"(_XOPEN_SOURCE\\ E<gt>=\\ 500) && ! (_POSIX_C_SOURCE\\ E<gt>=\\ 200112L)\n"
"    || /* Glibc since 2.19: */ _DEFAULT_SOURCE\n"
"    || /* Glibc E<lt>= 2.19: */ _SVID_SOURCE || _BSD_SOURCE\n"
msgstr ""

#.     || _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
#. type: Plain text
#: build/C/man3/mktemp.3:62
msgid "_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\\ E<gt>=\\ 500"
msgstr ""

#. type: Plain text
#: build/C/man3/mktemp.3:68
msgid "I<Never use this function>; see BUGS."
msgstr ""

#. type: Plain text
#: build/C/man3/mktemp.3:79
msgid ""
"The B<mktemp>()  function generates a unique temporary filename from "
"I<template>.  The last six characters of I<template> must be XXXXXX and "
"these are replaced with a string that makes the filename unique.  Since it "
"will be modified, I<template> must not be a string constant, but should be "
"declared as a character array."
msgstr ""

#. type: Plain text
#: build/C/man3/mktemp.3:90
msgid ""
"The B<mktemp>()  function always returns I<template>.  If a unique name was "
"created, the last six bytes of I<template> will have been modified in such a "
"way that the resulting name is unique (i.e., does not exist already)  If a "
"unique name could not be created, I<template> is made an empty string, and "
"I<errno> is set to indicate the error."
msgstr ""

#. type: Plain text
#: build/C/man3/mktemp.3:94
msgid "The last six characters of I<template> were not XXXXXX."
msgstr ""

#. type: tbl table
#: build/C/man3/mktemp.3:104
#, no-wrap
msgid "B<mktemp>()"
msgstr ""

#.  .SH NOTES
#.  The prototype is in
#.  .I <unistd.h>
#.  for libc4, libc5, glibc1; glibc2 follows the Single UNIX Specification
#.  and has the prototype in
#.  .IR <stdlib.h> .
#. type: Plain text
#: build/C/man3/mktemp.3:116
msgid ""
"4.3BSD, POSIX.1-2001.  POSIX.1-2008 removes the specification of "
"B<mktemp>()."
msgstr ""

#. type: Plain text
#: build/C/man3/mktemp.3:131
msgid ""
"Never use B<mktemp>().  Some implementations follow 4.3BSD and replace "
"XXXXXX by the current process ID and a single letter, so that at most 26 "
"different names can be returned.  Since on the one hand the names are easy "
"to guess, and on the other hand there is a race between testing whether the "
"name exists and opening the file, every use of B<mktemp>()  is a security "
"risk.  The race is avoided by B<mkstemp>(3)  and B<mkdtemp>(3)."
msgstr ""

#. type: Plain text
#: build/C/man3/mktemp.3:138
msgid ""
"B<mktemp>(1), B<mkdtemp>(3), B<mkstemp>(3), B<tempnam>(3), B<tmpfile>(3), "
"B<tmpnam>(3)"
msgstr ""

#. type: TH
#: build/C/man3/on_exit.3:31
#, no-wrap
msgid "ON_EXIT"
msgstr ""

#. type: TH
#: build/C/man3/on_exit.3:31 build/C/man7/vdso.7:13
#, no-wrap
msgid "2019-08-02"
msgstr ""

#. type: Plain text
#: build/C/man3/on_exit.3:34
msgid "on_exit - register a function to be called at normal process termination"
msgstr ""

#. type: Plain text
#: build/C/man3/on_exit.3:39
#, no-wrap
msgid "B<int on_exit(void (*>I<function>B<)(int , void *), void *>I<arg>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/on_exit.3:51
#, no-wrap
msgid ""
"B<on_exit>():\n"
"    Since glibc 2.19:\n"
"        _DEFAULT_SOURCE\n"
"    Glibc 2.19 and earlier:\n"
"        _BSD_SOURCE || _SVID_SOURCE\n"
msgstr ""

#. type: Plain text
#: build/C/man3/on_exit.3:69
msgid ""
"The B<on_exit>()  function registers the given I<function> to be called at "
"normal process termination, whether via B<exit>(3)  or via return from the "
"program's I<main>().  The I<function> is passed the status argument given to "
"the last call to B<exit>(3)  and the I<arg> argument from B<on_exit>()."
msgstr ""

#. type: Plain text
#: build/C/man3/on_exit.3:84
msgid ""
"The B<on_exit>()  function returns the value 0 if successful; otherwise it "
"returns a nonzero value."
msgstr ""

#. type: tbl table
#: build/C/man3/on_exit.3:94
#, no-wrap
msgid "B<on_exit>()"
msgstr ""

#. type: Plain text
#: build/C/man3/on_exit.3:103
msgid ""
"This function comes from SunOS 4, but is also present in glibc.  It no "
"longer occurs in Solaris (SunOS 5).  Portable application should avoid this "
"function, and use the standard B<atexit>(3)  instead."
msgstr ""

#. type: Plain text
#: build/C/man3/on_exit.3:113
msgid ""
"By the time I<function> is executed, stack (I<auto>)  variables may already "
"have gone out of scope.  Therefore, I<arg> should not be a pointer to a "
"stack variable; it may however be a pointer to a heap variable or a global "
"variable."
msgstr ""

#. type: Plain text
#: build/C/man3/on_exit.3:117
msgid "B<_exit>(2), B<atexit>(3), B<exit>(3)"
msgstr ""

#. type: TH
#: build/C/man3/putenv.3:36
#, no-wrap
msgid "PUTENV"
msgstr ""

#. type: Plain text
#: build/C/man3/putenv.3:39
msgid "putenv - change or add an environment variable"
msgstr ""

#.  Not: const char *
#. type: Plain text
#: build/C/man3/putenv.3:45
#, no-wrap
msgid "B<int putenv(char *>I<string>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/putenv.3:56
#, no-wrap
msgid ""
"B<putenv>():\n"
"_XOPEN_SOURCE\n"
"    || /* Glibc since 2.19: */ _DEFAULT_SOURCE\n"
"    || /* Glibc versions E<lt>= 2.19: */ _SVID_SOURCE\n"
msgstr ""

#. type: Plain text
#: build/C/man3/putenv.3:69
msgid ""
"The B<putenv>()  function adds or changes the value of environment "
"variables.  The argument I<string> is of the form I<name>=I<value>.  If "
"I<name> does not already exist in the environment, then I<string> is added "
"to the environment.  If I<name> does exist, then the value of I<name> in the "
"environment is changed to I<value>.  The string pointed to by I<string> "
"becomes part of the environment, so altering the string changes the "
"environment."
msgstr ""

#. type: Plain text
#: build/C/man3/putenv.3:77
msgid ""
"The B<putenv>()  function returns zero on success, or nonzero if an error "
"occurs.  In the event of an error, I<errno> is set to indicate the cause."
msgstr ""

#. type: Plain text
#: build/C/man3/putenv.3:81
msgid "Insufficient space to allocate new environment."
msgstr ""

#. type: tbl table
#: build/C/man3/putenv.3:91
#, no-wrap
msgid "B<putenv>()"
msgstr ""

#. type: Plain text
#: build/C/man3/putenv.3:95
msgid "POSIX.1-2001, POSIX.1-2008, SVr4, 4.3BSD."
msgstr ""

#.  .LP
#.  Description for libc4, libc5, glibc:
#.  If the argument \fIstring\fP is of the form \fIname\fP,
#.  and does not contain an \(aq=\(aq character, then the variable \fIname\fP
#.  is removed from the environment.
#.  If
#.  .BR putenv ()
#.  has to allocate a new array \fIenviron\fP,
#.  and the previous array was also allocated by
#.  .BR putenv (),
#.  then it will be freed.
#.  In no case will the old storage associated
#.  to the environment variable itself be freed.
#. type: Plain text
#: build/C/man3/putenv.3:113
msgid ""
"The B<putenv>()  function is not required to be reentrant, and the one in "
"glibc 2.0 is not, but the glibc 2.1 version is."
msgstr ""

#. type: Plain text
#: build/C/man3/putenv.3:128
msgid ""
"Since version 2.1.2, the glibc implementation conforms to SUSv2: the pointer "
"I<string> given to B<putenv>()  is used.  In particular, this string becomes "
"part of the environment; changing it later will change the environment.  "
"(Thus, it is an error to call B<putenv>()  with an automatic variable as the "
"argument, then return from the calling function while I<string> is still "
"part of the environment.)  However, glibc versions 2.0 to 2.1.1 differ: a "
"copy of the string is used.  On the one hand this causes a memory leak, and "
"on the other hand it violates SUSv2."
msgstr ""

#. type: Plain text
#: build/C/man3/putenv.3:130
msgid "The 4.4BSD version, like glibc 2.0, uses a copy."
msgstr ""

#. type: Plain text
#: build/C/man3/putenv.3:132
msgid "SUSv2 removes the I<const> from the prototype, and so does glibc 2.1.3."
msgstr ""

#. type: Plain text
#: build/C/man3/putenv.3:137
msgid ""
"The GNU C library implementation provides a nonstandard extension.  If "
"I<string> does not include an equal sign:"
msgstr ""

#. type: Plain text
#: build/C/man3/putenv.3:141
#, no-wrap
msgid "putenv(\"NAME\");\n"
msgstr ""

#. type: Plain text
#: build/C/man3/putenv.3:145
msgid "then the named variable is removed from the caller's environment."
msgstr ""

#. type: Plain text
#: build/C/man3/putenv.3:151
msgid "B<clearenv>(3), B<getenv>(3), B<setenv>(3), B<unsetenv>(3), B<environ>(7)"
msgstr ""

#. type: TH
#: build/C/man3/qecvt.3:28
#, no-wrap
msgid "QECVT"
msgstr ""

#. type: Plain text
#: build/C/man3/qecvt.3:31
msgid "qecvt, qfcvt, qgcvt - convert a floating-point number to a string"
msgstr ""

#. type: Plain text
#: build/C/man3/qecvt.3:36
msgid ""
"B<char *qecvt(long double >I<number>B<, int >I<ndigits>B<, int "
"*>I<decpt>B<,> B<int *>I<sign>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/qecvt.3:39
msgid ""
"B<char *qfcvt(long double >I<number>B<, int >I<ndigits>B<, int "
"*>I<decpt>B<,> B<int *>I<sign>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/qecvt.3:41
msgid "B<char *qgcvt(long double >I<number>B<, int >I<ndigit>B<, char *>I<buf>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/qecvt.3:52
msgid "B<qecvt>(), B<qfcvt>(), B<qgcvt>(): _SVID_SOURCE"
msgstr ""

#. type: Plain text
#: build/C/man3/qecvt.3:85
msgid ""
"The functions B<qecvt>(), B<qfcvt>(), and B<qgcvt>()  are identical to "
"B<ecvt>(3), B<fcvt>(3), and B<gcvt>(3)  respectively, except that they use a "
"I<long double> argument I<number>.  See B<ecvt>(3)  and B<gcvt>(3)."
msgstr ""

#. type: tbl table
#: build/C/man3/qecvt.3:95
#, no-wrap
msgid "B<qecvt>()"
msgstr ""

#. type: tbl table
#: build/C/man3/qecvt.3:95
#, no-wrap
msgid "MT-Unsafe race:qecvt"
msgstr ""

#. type: tbl table
#: build/C/man3/qecvt.3:98
#, no-wrap
msgid "B<qfcvt>()"
msgstr ""

#. type: tbl table
#: build/C/man3/qecvt.3:98
#, no-wrap
msgid "MT-Unsafe race:qfcvt"
msgstr ""

#. type: tbl table
#: build/C/man3/qecvt.3:101
#, no-wrap
msgid "B<qgcvt>()"
msgstr ""

#.  Not supported by libc4 and libc5.
#. type: Plain text
#: build/C/man3/qecvt.3:109
msgid ""
"SVr4.  Not seen in most common UNIX implementations, but occurs in SunOS.  "
"Supported by glibc."
msgstr ""

#. type: Plain text
#: build/C/man3/qecvt.3:114
msgid "These functions are obsolete.  Instead, B<snprintf>(3)  is recommended."
msgstr ""

#. type: Plain text
#: build/C/man3/qecvt.3:119
msgid "B<ecvt>(3), B<ecvt_r>(3), B<gcvt>(3), B<sprintf>(3)"
msgstr ""

#. type: TH
#: build/C/man3/rand.3:41
#, no-wrap
msgid "RAND"
msgstr ""

#. type: Plain text
#: build/C/man3/rand.3:44
msgid "rand, rand_r, srand - pseudo-random number generator"
msgstr ""

#. type: Plain text
#: build/C/man3/rand.3:49
#, no-wrap
msgid "B<int rand(void);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/rand.3:51
#, no-wrap
msgid "B<int rand_r(unsigned int *>I<seedp>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/rand.3:53
#, no-wrap
msgid "B<void srand(unsigned int >I<seed>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/rand.3:61
msgid "B<rand_r>():"
msgstr ""

#. type: Plain text
#: build/C/man3/rand.3:64
#, no-wrap
msgid ""
"Since glibc 2.24:\n"
"    _POSIX_C_SOURCE E<gt>= 199506L\n"
msgstr ""

#. type: Plain text
#: build/C/man3/rand.3:67
#, no-wrap
msgid ""
"Glibc 2.23 and earlier\n"
"    _POSIX_C_SOURCE\n"
msgstr ""

#. type: Plain text
#: build/C/man3/rand.3:74
msgid ""
"The B<rand>()  function returns a pseudo-random integer in the range 0 to "
"B<RAND_MAX> inclusive (i.e., the mathematical range [0,\\ B<RAND_MAX>])."
msgstr ""

#. type: Plain text
#: build/C/man3/rand.3:83
msgid ""
"The B<srand>()  function sets its argument as the seed for a new sequence of "
"pseudo-random integers to be returned by B<rand>().  These sequences are "
"repeatable by calling B<srand>()  with the same seed value."
msgstr ""

#. type: Plain text
#: build/C/man3/rand.3:87
msgid ""
"If no seed value is provided, the B<rand>()  function is automatically "
"seeded with a value of 1."
msgstr ""

#. type: Plain text
#: build/C/man3/rand.3:98
msgid ""
"The function B<rand>()  is not reentrant, since it uses hidden state that is "
"modified on each call.  This might just be the seed value to be used by the "
"next call, or it might be something more elaborate.  In order to get "
"reproducible behavior in a threaded application, this state must be made "
"explicit; this can be done using the reentrant function B<rand_r>()."
msgstr ""

#. type: Plain text
#: build/C/man3/rand.3:114
msgid ""
"Like B<rand>(), B<rand_r>()  returns a pseudo-random integer in the range "
"[0,\\ B<RAND_MAX>].  The I<seedp> argument is a pointer to an I<unsigned "
"int> that is used to store state between calls.  If B<rand_r>()  is called "
"with the same initial value for the integer pointed to by I<seedp>, and that "
"value is not modified between calls, then the same pseudo-random sequence "
"will result."
msgstr ""

#. type: Plain text
#: build/C/man3/rand.3:124
msgid ""
"The value pointed to by the I<seedp> argument of B<rand_r>()  provides only "
"a very small amount of state, so this function will be a weak pseudo-random "
"generator.  Try B<drand48_r>(3)  instead."
msgstr ""

#. type: Plain text
#: build/C/man3/rand.3:135
msgid ""
"The B<rand>()  and B<rand_r>()  functions return a value between 0 and "
"B<RAND_MAX> (inclusive).  The B<srand>()  function returns no value."
msgstr ""

#. type: tbl table
#: build/C/man3/rand.3:147
#, no-wrap
msgid ""
"B<rand>(),\n"
"B<rand_r>(),\n"
"B<srand>()"
msgstr ""

#. type: Plain text
#: build/C/man3/rand.3:161
msgid ""
"The functions B<rand>()  and B<srand>()  conform to SVr4, 4.3BSD, C89, C99, "
"POSIX.1-2001.  The function B<rand_r>()  is from POSIX.1-2001.  POSIX.1-2008 "
"marks B<rand_r>()  as obsolete."
msgstr ""

#. type: Plain text
#: build/C/man3/rand.3:180
msgid ""
"The versions of B<rand>()  and B<srand>()  in the Linux C Library use the "
"same random number generator as B<random>(3)  and B<srandom>(3), so the "
"lower-order bits should be as random as the higher-order bits.  However, on "
"older B<rand>()  implementations, and on current implementations on "
"different systems, the lower-order bits are much less random than the "
"higher-order bits.  Do not use this function in applications intended to be "
"portable when good randomness is needed.  (Use B<random>(3)  instead.)"
msgstr ""

#. type: Plain text
#: build/C/man3/rand.3:186
msgid ""
"POSIX.1-2001 gives the following example of an implementation of B<rand>()  "
"and B<srand>(), possibly useful when one needs the same sequence on two "
"different machines."
msgstr ""

#. type: Plain text
#: build/C/man3/rand.3:190
#, no-wrap
msgid "static unsigned long next = 1;\n"
msgstr ""

#. type: Plain text
#: build/C/man3/rand.3:196
#, no-wrap
msgid ""
"/* RAND_MAX assumed to be 32767 */\n"
"int myrand(void) {\n"
"    next = next * 1103515245 + 12345;\n"
"    return((unsigned)(next/65536) % 32768);\n"
"}\n"
msgstr ""

#. type: Plain text
#: build/C/man3/rand.3:200
#, no-wrap
msgid ""
"void mysrand(unsigned int seed) {\n"
"    next = seed;\n"
"}\n"
msgstr ""

#. type: Plain text
#: build/C/man3/rand.3:207
msgid ""
"The following program can be used to display the pseudo-random sequence "
"produced by B<rand>()  when given a particular seed."
msgstr ""

#. type: Plain text
#: build/C/man3/rand.3:212
#, no-wrap
msgid ""
"#include E<lt>stdlib.hE<gt>\n"
"#include E<lt>stdio.hE<gt>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/rand.3:218
#, no-wrap
msgid ""
"int\n"
"main(int argc, char *argv[])\n"
"{\n"
"    int r, nloops;\n"
"    unsigned int seed;\n"
msgstr ""

#. type: Plain text
#: build/C/man3/rand.3:223
#, no-wrap
msgid ""
"    if (argc != 3) {\n"
"        fprintf(stderr, \"Usage: %s E<lt>seedE<gt> E<lt>nloopsE<gt>\\en\", "
"argv[0]);\n"
"        exit(EXIT_FAILURE);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: build/C/man3/rand.3:226
#, no-wrap
msgid ""
"    seed = atoi(argv[1]);\n"
"    nloops = atoi(argv[2]);\n"
msgstr ""

#. type: Plain text
#: build/C/man3/rand.3:232
#, no-wrap
msgid ""
"    srand(seed);\n"
"    for (int j = 0; j E<lt> nloops; j++) {\n"
"        r =  rand();\n"
"        printf(\"%d\\en\", r);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: build/C/man3/rand.3:240
msgid "B<drand48>(3), B<random>(3)"
msgstr ""

#. type: TH
#: build/C/man3/random.3:33 build/C/man7/random.7:31
#, no-wrap
msgid "RANDOM"
msgstr ""

#. type: Plain text
#: build/C/man3/random.3:36
msgid "random, srandom, initstate, setstate - random number generator"
msgstr ""

#. type: Plain text
#: build/C/man3/random.3:41
#, no-wrap
msgid "B<long random(void);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/random.3:43
#, no-wrap
msgid "B<void srandom(unsigned >I<seed>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/random.3:45
#, no-wrap
msgid ""
"B<char *initstate(unsigned >I<seed>B<, char *>I<state>B<, size_t "
">I<n>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/random.3:47
#, no-wrap
msgid "B<char *setstate(char *>I<state>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/random.3:59
msgid "B<random>(), B<srandom>(), B<initstate>(), B<setstate>():"
msgstr ""

#.     || _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
#. type: Plain text
#: build/C/man3/random.3:64
#, no-wrap
msgid ""
"_XOPEN_SOURCE\\ E<gt>=\\ 500\n"
"    || /* Glibc since 2.19: */ _DEFAULT_SOURCE\n"
"    || /* Glibc versions E<lt>= 2.19: */ _SVID_SOURCE || _BSD_SOURCE\n"
msgstr ""

#. type: Plain text
#: build/C/man3/random.3:75
msgid ""
"The B<random>()  function uses a nonlinear additive feedback random number "
"generator employing a default table of size 31 long integers to return "
"successive pseudo-random numbers in the range from 0 to 2^31\\ -\\ 1.  The "
"period of this random number generator is very large, approximately I<16\\ "
"*\\ ((2^31)\\ -\\ 1)>."
msgstr ""

#. type: Plain text
#: build/C/man3/random.3:89
msgid ""
"The B<srandom>()  function sets its argument as the seed for a new sequence "
"of pseudo-random integers to be returned by B<random>().  These sequences "
"are repeatable by calling B<srandom>()  with the same seed value.  If no "
"seed value is provided, the B<random>()  function is automatically seeded "
"with a value of 1."
msgstr ""

#. type: Plain text
#: build/C/man3/random.3:108
msgid ""
"The B<initstate>()  function allows a state array I<state> to be initialized "
"for use by B<random>().  The size of the state array I<n> is used by "
"B<initstate>()  to decide how sophisticated a random number generator it "
"should use\\(emthe larger the state array, the better the random numbers "
"will be.  Current \"optimal\" values for the size of the state array I<n> "
"are 8, 32, 64, 128, and 256 bytes; other amounts will be rounded down to the "
"nearest known amount.  Using less than 8 bytes results in an error.  I<seed> "
"is the seed for the initialization, which specifies a starting point for the "
"random number sequence, and provides for restarting at the same point."
msgstr ""

#. type: Plain text
#: build/C/man3/random.3:124
msgid ""
"The B<setstate>()  function changes the state array used by the B<random>()  "
"function.  The state array I<state> is used for random number generation "
"until the next call to B<initstate>()  or B<setstate>().  I<state> must "
"first have been initialized using B<initstate>()  or be the result of a "
"previous call of B<setstate>()."
msgstr ""

#. type: Plain text
#: build/C/man3/random.3:132
msgid ""
"The B<random>()  function returns a value between 0 and I<(2^31)\\ -\\ 1>.  "
"The B<srandom>()  function returns no value."
msgstr ""

#. type: Plain text
#: build/C/man3/random.3:139
msgid ""
"The B<initstate>()  function returns a pointer to the previous state array.  "
"On error, I<errno> is set to indicate the cause."
msgstr ""

#. type: Plain text
#: build/C/man3/random.3:146
msgid ""
"On success, B<setstate>()  returns a pointer to the previous state array.  "
"On error, it returns NULL, with I<errno> set to indicate the cause of the "
"error."
msgstr ""

#. type: Plain text
#: build/C/man3/random.3:154
msgid "The I<state> argument given to B<setstate>()  was NULL."
msgstr ""

#. type: Plain text
#: build/C/man3/random.3:158
msgid "A state array of less than 8 bytes was specified to B<initstate>()."
msgstr ""

#. type: tbl table
#: build/C/man3/random.3:169
#, no-wrap
msgid ""
"B<random>(),\n"
"B<srandom>(),\n"
msgstr ""

#. type: tbl table
#: build/C/man3/random.3:172
#, no-wrap
msgid ""
"B<initstate>(),\n"
"B<setstate>()"
msgstr ""

#. type: Plain text
#: build/C/man3/random.3:176 build/C/man3/setenv.3:140
msgid "POSIX.1-2001, POSIX.1-2008, 4.3BSD."
msgstr ""

#. type: Plain text
#: build/C/man3/random.3:184
msgid ""
"The B<random>()  function should not be used in multithreaded programs where "
"reproducible behavior is required.  Use B<random_r>(3)  for that purpose."
msgstr ""

#. type: Plain text
#: build/C/man3/random.3:191
msgid ""
"Random-number generation is a complex topic.  I<Numerical Recipes in C: The "
"Art of Scientific Computing> (William H.\\& Press, Brian P.\\& Flannery, "
"Saul A.\\& Teukolsky, William T.\\& Vetterling; New York: Cambridge "
"University Press, 2007, 3rd ed.)  provides an excellent discussion of "
"practical random-number generation issues in Chapter 7 (Random Numbers)."
msgstr ""

#. type: Plain text
#: build/C/man3/random.3:197
msgid ""
"For a more theoretical discussion which also covers many practical issues in "
"depth, see Chapter 3 (Random Numbers) in Donald E.\\& Knuth's I<The Art of "
"Computer Programming>, volume 2 (Seminumerical Algorithms), 2nd ed.; "
"Reading, Massachusetts: Addison-Wesley Publishing Company, 1981."
msgstr ""

#.  http://sourceware.org/bugzilla/show_bug.cgi?id=15380
#. type: Plain text
#: build/C/man3/random.3:205
msgid ""
"According to POSIX, B<initstate>()  should return NULL on error.  In the "
"glibc implementation, I<errno> is (as specified) set on error, but the "
"function does not return NULL."
msgstr ""

#. type: Plain text
#: build/C/man3/random.3:211
msgid "B<getrandom>(2), B<drand48>(3), B<rand>(3), B<random_r>(3), B<srand>(3)"
msgstr ""

#. type: TH
#: build/C/man3/random_r.3:26
#, no-wrap
msgid "RANDOM_R"
msgstr ""

#. type: Plain text
#: build/C/man3/random_r.3:30
msgid ""
"random_r, srandom_r, initstate_r, setstate_r - reentrant random number "
"generator"
msgstr ""

#. type: Plain text
#: build/C/man3/random_r.3:35
#, no-wrap
msgid "B<int random_r(struct random_data *>I<buf>B<, int32_t *>I<result>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/random_r.3:37
#, no-wrap
msgid "B<int srandom_r(unsigned int >I<seed>B<, struct random_data *>I<buf>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/random_r.3:40
#, no-wrap
msgid ""
"B<int initstate_r(unsigned int >I<seed>B<, char *>I<statebuf>B<,>\n"
"B<                size_t >I<statelen>B<, struct random_data *>I<buf>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/random_r.3:42
#, no-wrap
msgid "B<int setstate_r(char *>I<statebuf>B<, struct random_data *>I<buf>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/random_r.3:54
msgid "B<random_r>(), B<srandom_r>(), B<initstate_r>(), B<setstate_r>():"
msgstr ""

#. type: Plain text
#: build/C/man3/random_r.3:65
msgid ""
"These functions are the reentrant equivalents of the functions described in "
"B<random>(3).  They are suitable for use in multithreaded programs where "
"each thread needs to obtain an independent, reproducible sequence of random "
"numbers."
msgstr ""

#. type: Plain text
#: build/C/man3/random_r.3:78
msgid ""
"The B<random_r>()  function is like B<random>(3), except that instead of "
"using state information maintained in a global variable, it uses the state "
"information in the argument pointed to by I<buf>, which must have been "
"previously initialized by B<initstate_r>().  The generated random number is "
"returned in the argument I<result>."
msgstr ""

#. type: Plain text
#: build/C/man3/random_r.3:89
msgid ""
"The B<srandom_r>()  function is like B<srandom>(3), except that it "
"initializes the seed for the random number generator whose state is "
"maintained in the object pointed to by I<buf>, which must have been "
"previously initialized by B<initstate_r>(), instead of the seed associated "
"with the global state variable."
msgstr ""

#. type: Plain text
#: build/C/man3/random_r.3:117
msgid ""
"The B<initstate_r>()  function is like B<initstate>(3)  except that it "
"initializes the state in the object pointed to by I<buf>, rather than "
"initializing the global state variable.  Before calling this function, the "
"I<buf.state> field must be initialized to NULL.  The B<initstate_r>()  "
"function records a pointer to the I<statebuf> argument inside the structure "
"pointed to by I<buf>.  Thus, I<statebuf> should not be deallocated so long "
"as I<buf> is still in use.  (So, I<statebuf> should typically be allocated "
"as a static variable, or allocated on the heap using B<malloc>(3)  or "
"similar.)"
msgstr ""

#. type: Plain text
#: build/C/man3/random_r.3:130
msgid ""
"The B<setstate_r>()  function is like B<setstate>(3)  except that it "
"modifies the state in the object pointed to by I<buf>, rather than modifying "
"the global state variable.  I<state> must first have been initialized using "
"B<initstate_r>()  or be the result of a previous call of B<setstate_r>()."
msgstr ""

#. type: Plain text
#: build/C/man3/random_r.3:135
msgid ""
"All of these functions return 0 on success.  On error, -1 is returned, with "
"I<errno> set to indicate the cause of the error."
msgstr ""

#. type: Plain text
#: build/C/man3/random_r.3:140
msgid "A state array of less than 8 bytes was specified to B<initstate_r>()."
msgstr ""

#. type: Plain text
#: build/C/man3/random_r.3:149
msgid "The I<statebuf> or I<buf> argument to B<setstate_r>()  was NULL."
msgstr ""

#. type: Plain text
#: build/C/man3/random_r.3:158
msgid "The I<buf> or I<result> argument to B<random_r>()  was NULL."
msgstr ""

#. type: tbl table
#: build/C/man3/random_r.3:169
#, no-wrap
msgid ""
"B<random_r>(),\n"
"B<srandom_r>(),\n"
msgstr ""

#. type: tbl table
#: build/C/man3/random_r.3:172
#, no-wrap
msgid ""
"B<initstate_r>(),\n"
"B<setstate_r>()"
msgstr ""

#. type: tbl table
#: build/C/man3/random_r.3:172
#, no-wrap
msgid "MT-Safe race:buf"
msgstr ""

#.  These functions appear to be on Tru64, but don't seem to be on
#.  Solaris, HP-UX, or FreeBSD.
#. type: Plain text
#: build/C/man3/random_r.3:178
msgid "These functions are nonstandard glibc extensions."
msgstr ""

#.  FIXME . https://sourceware.org/bugzilla/show_bug.cgi?id=3662
#. type: Plain text
#: build/C/man3/random_r.3:189
msgid ""
"The B<initstate_r>()  interface is confusing.  It appears that the "
"I<random_data> type is intended to be opaque, but the implementation "
"requires the user to either initialize the I<buf.state> field to NULL or "
"zero out the entire structure before the call."
msgstr ""

#. type: TH
#: build/C/man3/rpmatch.3:29
#, no-wrap
msgid "RPMATCH"
msgstr ""

#. type: Plain text
#: build/C/man3/rpmatch.3:32
msgid "rpmatch - determine if the answer to a question is affirmative or negative"
msgstr ""

#. type: Plain text
#: build/C/man3/rpmatch.3:37
#, no-wrap
msgid "B<int rpmatch(const char *>I<response>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/rpmatch.3:49
#, no-wrap
msgid ""
"B<rpmatch>():\n"
"    Since glibc 2.19:\n"
"        _DEFAULT_SOURCE\n"
"    Glibc 2.19 and earlier:\n"
"        _SVID_SOURCE\n"
msgstr ""

#. type: Plain text
#: build/C/man3/rpmatch.3:53
msgid ""
"B<rpmatch>()  handles a user response to yes or no questions, with support "
"for internationalization."
msgstr ""

#. type: Plain text
#: build/C/man3/rpmatch.3:60
msgid ""
"I<response> should be a null-terminated string containing a user-supplied "
"response, perhaps obtained with B<fgets>(3)  or B<getline>(3)."
msgstr ""

#. type: Plain text
#: build/C/man3/rpmatch.3:70
msgid ""
"The user's language preference is taken into account per the environment "
"variables B<LANG>, B<LC_MESSAGES>, and B<LC_ALL>, if the program has called "
"B<setlocale>(3)  to effect their changes."
msgstr ""

#. type: Plain text
#: build/C/man3/rpmatch.3:76
msgid ""
"Regardless of the locale, responses matching B<\\(ha[Yy]> are always "
"accepted as affirmative, and those matching B<\\(ha[Nn]> are always accepted "
"as negative."
msgstr ""

#. type: Plain text
#: build/C/man3/rpmatch.3:85
msgid ""
"After examining I<response>, B<rpmatch>()  returns 0 for a recognized "
"negative response (\"no\"), 1 for a recognized positive response (\"yes\"), "
"and -1 when the value of I<response> is unrecognized."
msgstr ""

#. type: Plain text
#: build/C/man3/rpmatch.3:89
msgid ""
"A return value of -1 may indicate either an invalid input, or some other "
"error.  It is incorrect to only test if the return value is nonzero."
msgstr ""

#. type: Plain text
#: build/C/man3/rpmatch.3:102
msgid ""
"B<rpmatch>()  can fail for any of the reasons that B<regcomp>(3)  or "
"B<regexec>(3)  can fail; the cause of the error is not available from "
"I<errno> or anywhere else, but indicates a failure of the regex engine (but "
"this case is indistinguishable from that of an unrecognized value of "
"I<response>)."
msgstr ""

#. type: tbl table
#: build/C/man3/rpmatch.3:112
#, no-wrap
msgid "B<rpmatch>()"
msgstr ""

#.  It is available on at least AIX 5.1 and FreeBSD 6.0.
#. type: Plain text
#: build/C/man3/rpmatch.3:120
msgid ""
"B<rpmatch>()  is not required by any standard, but is available on a few "
"other systems."
msgstr ""

#. type: Plain text
#: build/C/man3/rpmatch.3:135
msgid ""
"The B<rpmatch>()  implementation looks at only the first character of "
"I<response>.  As a consequence, \"nyes\" returns 0, and \"ynever; not in a "
"million years\" returns 1.  It would be preferable to accept input strings "
"much more strictly, for example (using the extended regular expression "
"notation described in B<regex>(7)): B<\\(ha([yY]|yes|YES)$> and "
"B<\\(ha([nN]|no|NO)$>."
msgstr ""

#. type: Plain text
#: build/C/man3/rpmatch.3:139
msgid ""
"The following program displays the results when B<rpmatch>()  is applied to "
"the string given in the program's command-line argument."
msgstr ""

#. type: Plain text
#: build/C/man3/rpmatch.3:146
#, no-wrap
msgid ""
"#define _SVID_SOURCE\n"
"#include E<lt>locale.hE<gt>\n"
"#include E<lt>stdlib.hE<gt>\n"
"#include E<lt>string.hE<gt>\n"
"#include E<lt>stdio.hE<gt>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/rpmatch.3:154
#, no-wrap
msgid ""
"int\n"
"main(int argc, char *argv[])\n"
"{\n"
"    if (argc != 2 || strcmp(argv[1], \"--help\") == 0) {\n"
"        fprintf(stderr, \"%s response\\en\", argv[0]);\n"
"        exit(EXIT_FAILURE);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: build/C/man3/rpmatch.3:159
#, no-wrap
msgid ""
"    setlocale(LC_ALL, \"\");\n"
"    printf(\"rpmatch() returns: %d\\en\", rpmatch(argv[1]));\n"
"    exit(EXIT_SUCCESS);\n"
"}\n"
msgstr ""

#. type: Plain text
#: build/C/man3/rpmatch.3:166
msgid ""
"B<fgets>(3), B<getline>(3), B<nl_langinfo>(3), B<regcomp>(3), "
"B<setlocale>(3)"
msgstr ""

#. type: TH
#: build/C/man3/setenv.3:37
#, no-wrap
msgid "SETENV"
msgstr ""

#. type: Plain text
#: build/C/man3/setenv.3:40
msgid "setenv - change or add an environment variable"
msgstr ""

#. type: Plain text
#: build/C/man3/setenv.3:45
#, no-wrap
msgid ""
"B<int setenv(const char *>I<name>B<, const char *>I<value>B<, int "
">I<overwrite>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/setenv.3:47
#, no-wrap
msgid "B<int unsetenv(const char *>I<name>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/setenv.3:57
msgid "B<setenv>(), B<unsetenv>():"
msgstr ""

#. type: Plain text
#: build/C/man3/setenv.3:60
#, no-wrap
msgid ""
"_POSIX_C_SOURCE\\ E<gt>=\\ 200112L\n"
"    || /* Glibc versions E<lt>= 2.19: */ _BSD_SOURCE\n"
msgstr ""

#. type: Plain text
#: build/C/man3/setenv.3:95
msgid ""
"The B<setenv>()  function adds the variable I<name> to the environment with "
"the value I<value>, if I<name> does not already exist.  If I<name> does "
"exist in the environment, then its value is changed to I<value> if "
"I<overwrite> is nonzero; if I<overwrite> is zero, then the value of I<name> "
"is not changed (and B<setenv>()  returns a success status).  This function "
"makes copies of the strings pointed to by I<name> and I<value> (by contrast "
"with B<putenv>(3))."
msgstr ""

#. type: Plain text
#: build/C/man3/setenv.3:106
msgid ""
"The B<unsetenv>()  function deletes the variable I<name> from the "
"environment.  If I<name> does not exist in the environment, then the "
"function succeeds, and the environment is unchanged."
msgstr ""

#. type: Plain text
#: build/C/man3/setenv.3:114
msgid ""
"B<setenv>()  and B<unsetenv>()  functions return zero on success, or -1 on "
"error, with I<errno> set to indicate the cause of the error."
msgstr ""

#. type: Plain text
#: build/C/man3/setenv.3:120
msgid ""
"I<name> is NULL, points to a string of length 0, or contains an \\(aq=\\(aq "
"character."
msgstr ""

#. type: Plain text
#: build/C/man3/setenv.3:123
msgid "Insufficient memory to add a new variable to the environment."
msgstr ""

#. type: tbl table
#: build/C/man3/setenv.3:135
#, no-wrap
msgid ""
"B<setenv>(),\n"
"B<unsetenv>()"
msgstr ""

#. type: Plain text
#: build/C/man3/setenv.3:146
msgid "POSIX.1 does not require B<setenv>()  or B<unsetenv>()  to be reentrant."
msgstr ""

#. type: Plain text
#: build/C/man3/setenv.3:154
msgid ""
"Prior to glibc 2.2.2, B<unsetenv>()  was prototyped as returning I<void>; "
"more recent glibc versions follow the POSIX.1-compliant prototype shown in "
"the SYNOPSIS."
msgstr ""

#. type: Plain text
#: build/C/man3/setenv.3:163
msgid ""
"POSIX.1 specifies that if I<name> contains an \\(aq=\\(aq character, then "
"B<setenv>()  should fail with the error B<EINVAL>; however, versions of "
"glibc before 2.3.4 allowed an \\(aq=\\(aq sign in I<name>."
msgstr ""

#. type: Plain text
#: build/C/man3/setenv.3:168
msgid "B<clearenv>(3), B<getenv>(3), B<putenv>(3), B<environ>(7)"
msgstr ""

#. type: TH
#: build/C/man3/strfromd.3:32
#, no-wrap
msgid "STRFROMD"
msgstr ""

#. type: Plain text
#: build/C/man3/strfromd.3:36
msgid "strfromd, strfromf, strfroml - convert a floating-point value into a string"
msgstr ""

#. type: Plain text
#: build/C/man3/strfromd.3:46
#, no-wrap
msgid ""
"B<int strfromd(char *restrict >I<str>B<, size_t >I<n>B<,>\n"
"B<             const char *restrict >I<format>B<, double >I<fp>B<);>\n"
"B<int strfromf(char *restrict >I<str>B<, size_t >I<n>B<,>\n"
"B<             const char *restrict >I<format>B<, float >I<fp>B<);>\n"
"B<int strfroml(char *restrict >I<str>B<, size_t >I<n>B<,>\n"
"B<             const char *restrict >I<format>B<, long double >I<fp>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/strfromd.3:57
msgid "B<strfromd>(), B<strfromf>(), B<strfroml>():"
msgstr ""

#. type: Plain text
#: build/C/man3/strfromd.3:59
msgid "__STDC_WANT_IEC_60559_BFP_EXT__"
msgstr ""

#. type: Plain text
#: build/C/man3/strfromd.3:73
msgid ""
"These functions convert a floating-point value, I<fp>, into a string of "
"characters, I<str>, with a configurable I<format> string.  At most I<n> "
"characters are stored into I<str>."
msgstr ""

#. type: Plain text
#: build/C/man3/strfromd.3:79
msgid ""
"The terminating null byte ('\\e0') is written if and only if I<n> is "
"sufficiently large, otherwise the written string is truncated at I<n> "
"characters."
msgstr ""

#. type: Plain text
#: build/C/man3/strfromd.3:86
msgid ""
"The B<strfromd>(), B<strfromf>(), and B<strfroml>()  functions are "
"equivalent to"
msgstr ""

#. type: Plain text
#: build/C/man3/strfromd.3:90
#, no-wrap
msgid "snprintf(str, n, format, fp);\n"
msgstr ""

#. type: Plain text
#: build/C/man3/strfromd.3:96
msgid "except for the I<format> string."
msgstr ""

#. type: SS
#: build/C/man3/strfromd.3:96
#, no-wrap
msgid "Format of the format string"
msgstr ""

#. type: Plain text
#: build/C/man3/strfromd.3:114
msgid ""
"The I<format> string must start with the character \\(aq%\\(aq.  This is "
"followed by an optional precision which starts with the period character "
"(.), followed by an optional decimal integer.  If no integer is specified "
"after the period character, a precision of zero is used.  Finally, the "
"format string should have one of the conversion specifiers B<a>, B<A>, B<e>, "
"B<E>, B<f>, B<F>, B<g>, or B<G>."
msgstr ""

#. type: Plain text
#: build/C/man3/strfromd.3:123
msgid ""
"The conversion specifier is applied based on the floating-point type "
"indicated by the function suffix.  Therefore, unlike B<snprintf>(), the "
"format string does not have a length modifier character.  See B<snprintf>(3)  "
"for a detailed description of these conversion specifiers."
msgstr ""

#. type: Plain text
#: build/C/man3/strfromd.3:126
msgid ""
"The implementation conforms to the C99 standard on conversion of NaN and "
"infinity values:"
msgstr ""

#. type: Plain text
#: build/C/man3/strfromd.3:145
msgid ""
"If I<fp> is a NaN, +NaN, or -NaN, and B<f> (or B<a>, B<e>, B<g>)  is the "
"conversion specifier, the conversion is to \"nan\", \"nan\", or \"-nan\", "
"respectively.  If B<F> (or B<A>, B<E>, B<G>)  is the conversion specifier, "
"the conversion is to \"NAN\" or \"-NAN\"."
msgstr ""

#. type: Plain text
#: build/C/man3/strfromd.3:149
msgid "Likewise if I<fp> is infinity, it is converted to [-]inf or [-]INF."
msgstr ""

#. type: Plain text
#: build/C/man3/strfromd.3:154
msgid "A malformed I<format> string results in undefined behavior."
msgstr ""

#. type: Plain text
#: build/C/man3/strfromd.3:169
msgid ""
"The B<strfromd>(), B<strfromf>(), and B<strfroml>()  functions return the "
"number of characters that would have been written in I<str> if I<n> had "
"enough space, not counting the terminating null byte.  Thus, a return value "
"of I<n> or greater means that the output was truncated."
msgstr ""

#. type: Plain text
#: build/C/man3/strfromd.3:176
msgid ""
"The B<strfromd>(), B<strfromf>(), and B<strfroml>()  functions are available "
"in glibc since version 2.25."
msgstr ""

#. type: Plain text
#: build/C/man3/strfromd.3:182
msgid ""
"For an explanation of the terms used in this section, see B<attributes>(7)  "
"and the B<POSIX Safety Concepts> section in GNU C Library manual."
msgstr ""

#. type: tbl table
#: build/C/man3/strfromd.3:192
#, no-wrap
msgid ""
"B<strfromd>(),\n"
"B<strfromf>(),\n"
"B<strfroml>()"
msgstr ""

#. type: tbl table
#: build/C/man3/strfromd.3:193 build/C/man3/strfromd.3:194
#, no-wrap
msgid "\\^"
msgstr ""

#. type: tbl table
#: build/C/man3/strfromd.3:193
#, no-wrap
msgid "Asynchronous signal safety"
msgstr ""

#. type: tbl table
#: build/C/man3/strfromd.3:193
#, no-wrap
msgid "AS-Unsafe heap"
msgstr ""

#. type: tbl table
#: build/C/man3/strfromd.3:194
#, no-wrap
msgid "Asynchronous cancellation safety"
msgstr ""

#. type: tbl table
#: build/C/man3/strfromd.3:194
#, no-wrap
msgid "AC-Unsafe mem"
msgstr ""

#. type: Plain text
#: build/C/man3/strfromd.3:198
msgid "Note: these attributes are preliminary."
msgstr ""

#. type: Plain text
#: build/C/man3/strfromd.3:200
msgid "C99, ISO/IEC TS 18661-1."
msgstr ""

#. type: Plain text
#: build/C/man3/strfromd.3:209
msgid ""
"The B<strfromd>(), B<strfromf>(), and B<strfroml>()  functions take account "
"of the B<LC_NUMERIC> category of the current locale."
msgstr ""

#. type: Plain text
#: build/C/man3/strfromd.3:212
msgid ""
"To convert the value 12.1 as a float type to a string using decimal "
"notation, resulting in \"12.100000\":"
msgstr ""

#. type: Plain text
#: build/C/man3/strfromd.3:220
#, no-wrap
msgid ""
"#define __STDC_WANT_IEC_60559_BFP_EXT__\n"
"#include E<lt>stdlib.hE<gt>\n"
"int ssize = 10;\n"
"char s[ssize];\n"
"strfromf(s, ssize, \"%f\", 12.1);\n"
msgstr ""

#. type: Plain text
#: build/C/man3/strfromd.3:225
msgid ""
"To convert the value 12.3456 as a float type to a string using decimal "
"notation with two digits of precision, resulting in \"12.35\":"
msgstr ""

#. type: Plain text
#: build/C/man3/strfromd.3:233
#, no-wrap
msgid ""
"#define __STDC_WANT_IEC_60559_BFP_EXT__\n"
"#include E<lt>stdlib.hE<gt>\n"
"int ssize = 10;\n"
"char s[ssize];\n"
"strfromf(s, ssize, \"%.2f\", 12.3456);\n"
msgstr ""

#. type: Plain text
#: build/C/man3/strfromd.3:238
msgid ""
"To convert the value 12.345e19 as a double type to a string using scientific "
"notation with zero digits of precision, resulting in \"1E+20\":"
msgstr ""

#. type: Plain text
#: build/C/man3/strfromd.3:246
#, no-wrap
msgid ""
"#define __STDC_WANT_IEC_60559_BFP_EXT__\n"
"#include E<lt>stdlib.hE<gt>\n"
"int ssize = 10;\n"
"char s[ssize];\n"
"strfromd(s, ssize, \"%.E\", 12.345e19);\n"
msgstr ""

#. type: Plain text
#: build/C/man3/strfromd.3:252
msgid "B<atof>(3), B<snprintf>(3), B<strtod>(3)"
msgstr ""

#. type: TH
#: build/C/man3/strtod.3:45
#, no-wrap
msgid "STRTOD"
msgstr ""

#. type: Plain text
#: build/C/man3/strtod.3:48
msgid "strtod, strtof, strtold - convert ASCII string to floating-point number"
msgstr ""

#. type: Plain text
#: build/C/man3/strtod.3:52
msgid "B<double strtod(const char *>I<nptr>B<, char **>I<endptr>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/strtod.3:54
msgid "B<float strtof(const char *>I<nptr>B<, char **>I<endptr>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/strtod.3:56
msgid "B<long double strtold(const char *>I<nptr>B<, char **>I<endptr>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/strtod.3:65
msgid "B<strtof>(), B<strtold>():"
msgstr ""

#. type: Plain text
#: build/C/man3/strtod.3:83
msgid ""
"The B<strtod>(), B<strtof>(), and B<strtold>()  functions convert the "
"initial portion of the string pointed to by I<nptr> to I<double>, I<float>, "
"and I<long double> representation, respectively."
msgstr ""

#. type: Plain text
#: build/C/man3/strtod.3:90
msgid ""
"The expected form of the (initial portion of the) string is optional leading "
"white space as recognized by B<isspace>(3), an optional plus (\\(aq+\\(aq) "
"or minus sign (\\(aq-\\(aq) and then either (i) a decimal number, or (ii) a "
"hexadecimal number, or (iii) an infinity, or (iv) a NAN (not-a-number)."
msgstr ""

#. type: Plain text
#: build/C/man3/strtod.3:99
msgid ""
"A I<decimal number> consists of a nonempty sequence of decimal digits "
"possibly containing a radix character (decimal point, locale-dependent, "
"usually \\(aq.\\(aq), optionally followed by a decimal exponent.  A decimal "
"exponent consists of an \\(aqE\\(aq or \\(aqe\\(aq, followed by an optional "
"plus or minus sign, followed by a nonempty sequence of decimal digits, and "
"indicates multiplication by a power of 10."
msgstr ""

#. type: Plain text
#: build/C/man3/strtod.3:110
msgid ""
"A I<hexadecimal number> consists of a \"0x\" or \"0X\" followed by a "
"nonempty sequence of hexadecimal digits possibly containing a radix "
"character, optionally followed by a binary exponent.  A binary exponent "
"consists of a \\(aqP\\(aq or \\(aqp\\(aq, followed by an optional plus or "
"minus sign, followed by a nonempty sequence of decimal digits, and indicates "
"multiplication by a power of 2.  At least one of radix character and binary "
"exponent must be present."
msgstr ""

#. type: Plain text
#: build/C/man3/strtod.3:114
msgid "An I<infinity> is either \"INF\" or \"INFINITY\", disregarding case."
msgstr ""

#. type: Plain text
#: build/C/man3/strtod.3:123
msgid ""
"A I<NAN> is \"NAN\" (disregarding case) optionally followed by a string, "
"I<(n-char-sequence)>, where I<n-char-sequence> specifies in an "
"implementation-dependent way the type of NAN (see NOTES)."
msgstr ""

#. type: Plain text
#: build/C/man3/strtod.3:125
msgid "These functions return the converted value, if any."
msgstr ""

#. type: Plain text
#: build/C/man3/strtod.3:132
msgid ""
"If I<endptr> is not NULL, a pointer to the character after the last "
"character used in the conversion is stored in the location referenced by "
"I<endptr>."
msgstr ""

#. type: Plain text
#: build/C/man3/strtod.3:139
msgid ""
"If no conversion is performed, zero is returned and (unless I<endptr> is "
"null) the value of I<nptr> is stored in the location referenced by "
"I<endptr>."
msgstr ""

#. type: Plain text
#: build/C/man3/strtod.3:150
msgid ""
"If the correct value would cause overflow, plus or minus B<HUGE_VAL>, "
"B<HUGE_VALF>, or B<HUGE_VALL> is returned (according to the return type and "
"sign of the value), and B<ERANGE> is stored in I<errno>."
msgstr ""

#. type: Plain text
#: build/C/man3/strtod.3:161
msgid ""
"If the correct value would cause underflow, a value with magnitude no larger "
"than B<DBL_MIN>, B<FLT_MIN>, or B<LDBL_MIN> is returned and B<ERANGE> is "
"stored in I<errno>."
msgstr ""

#. type: TP
#: build/C/man3/strtod.3:162 build/C/man3/strtol.3:151 build/C/man3/strtoul.3:152
#, no-wrap
msgid "B<ERANGE>"
msgstr ""

#. type: Plain text
#: build/C/man3/strtod.3:165
msgid "Overflow or underflow occurred."
msgstr ""

#. type: tbl table
#: build/C/man3/strtod.3:177
#, no-wrap
msgid ""
"B<strtod>(),\n"
"B<strtof>(),\n"
"B<strtold>()"
msgstr ""

#. type: Plain text
#: build/C/man3/strtod.3:184
msgid "B<strtod>()  was also described in C89."
msgstr ""

#. type: Plain text
#: build/C/man3/strtod.3:193
msgid ""
"Since 0 can legitimately be returned on both success and failure, the "
"calling program should set I<errno> to 0 before the call, and then determine "
"if an error occurred by checking whether I<errno> has a nonzero value after "
"the call."
msgstr ""

#.  From glibc 2.8's stdlib/strtod_l.c:
#.      We expect it to be a number which is put in the
#.      mantissa of the number.
#.  It looks as though at least FreeBSD (according to the manual) does
#.  something similar.
#.  C11 says: "An implementation may use the n-char sequence to determine
#. 	extra information to be represented in the NaN's significant."
#. type: Plain text
#: build/C/man3/strtod.3:208
msgid ""
"In the glibc implementation, the I<n-char-sequence> that optionally follows "
"\"NAN\" is interpreted as an integer number (with an optional '0' or '0x' "
"prefix to select base 8 or 16)  that is to be placed in the mantissa "
"component of the returned value."
msgstr ""

#. type: Plain text
#: build/C/man3/strtod.3:213 build/C/man3/strtoul.3:225
msgid ""
"See the example on the B<strtol>(3)  manual page; the use of the functions "
"described in this manual page is similar."
msgstr ""

#. type: Plain text
#: build/C/man3/strtod.3:223
msgid ""
"B<atof>(3), B<atoi>(3), B<atol>(3), B<nan>(3), B<nanf>(3), B<nanl>(3), "
"B<strfromd>(3), B<strtol>(3), B<strtoul>(3)"
msgstr ""

#. type: TH
#: build/C/man3/strtoimax.3:24
#, no-wrap
msgid "STRTOIMAX"
msgstr ""

#. type: Plain text
#: build/C/man3/strtoimax.3:27
msgid "strtoimax, strtoumax - convert string to integer"
msgstr ""

#. type: Plain text
#: build/C/man3/strtoimax.3:30
#, no-wrap
msgid "B<#include E<lt>inttypes.hE<gt>>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/strtoimax.3:33
#, no-wrap
msgid ""
"B<intmax_t strtoimax(const char *>I<nptr>B<, char **>I<endptr>B<, int "
">I<base>B<);>\n"
"B<uintmax_t strtoumax(const char *>I<nptr>B<, char **>I<endptr>B<, int "
">I<base>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/strtoimax.3:44
msgid ""
"These functions are just like B<strtol>(3)  and B<strtoul>(3), except that "
"they return a value of type I<intmax_t> and I<uintmax_t>, respectively."
msgstr ""

#. type: Plain text
#: build/C/man3/strtoimax.3:57
msgid ""
"On success, the converted value is returned.  If nothing was found to "
"convert, zero is returned.  On overflow or underflow B<INTMAX_MAX> or "
"B<INTMAX_MIN> or B<UINTMAX_MAX> is returned, and I<errno> is set to "
"B<ERANGE>."
msgstr ""

#. type: tbl table
#: build/C/man3/strtoimax.3:68
#, no-wrap
msgid ""
"B<strtoimax>(),\n"
"B<strtoumax>()"
msgstr ""

#. type: Plain text
#: build/C/man3/strtoimax.3:78
msgid "B<imaxabs>(3), B<imaxdiv>(3), B<strtol>(3), B<strtoul>(3), B<wcstoimax>(3)"
msgstr ""

#. type: TH
#: build/C/man3/strtol.3:32
#, no-wrap
msgid "STRTOL"
msgstr ""

#. type: Plain text
#: build/C/man3/strtol.3:35
msgid "strtol, strtoll, strtoq - convert a string to a long integer"
msgstr ""

#. type: Plain text
#: build/C/man3/strtol.3:40
#, no-wrap
msgid ""
"B<long strtol(const char *>I<nptr>B<, char **>I<endptr>B<, int "
">I<base>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/strtol.3:43
#, no-wrap
msgid ""
"B<long long strtoll(const char *>I<nptr>B<, char **>I<endptr>B<, int "
">I<base>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/strtol.3:52
msgid "B<strtoll>():"
msgstr ""

#. type: Plain text
#: build/C/man3/strtol.3:55
#, no-wrap
msgid ""
"_ISOC99_SOURCE\n"
"    || /* Glibc versions E<lt>= 2.19: */ _SVID_SOURCE || _BSD_SOURCE\n"
msgstr ""

#. type: Plain text
#: build/C/man3/strtol.3:66
msgid ""
"The B<strtol>()  function converts the initial part of the string in I<nptr> "
"to a long integer value according to the given I<base>, which must be "
"between 2 and 36 inclusive, or be the special value 0."
msgstr ""

#. type: Plain text
#: build/C/man3/strtol.3:79
msgid ""
"The string may begin with an arbitrary amount of white space (as determined "
"by B<isspace>(3))  followed by a single optional \\(aq+\\(aq or \\(aq-\\(aq "
"sign.  If I<base> is zero or 16, the string may then include a \"0x\" or "
"\"0X\" prefix, and the number will be read in base 16; otherwise, a zero "
"I<base> is taken as 10 (decimal) unless the next character is \\(aq0\\(aq, "
"in which case it is taken as 8 (octal)."
msgstr ""

#. type: Plain text
#: build/C/man3/strtol.3:88
msgid ""
"The remainder of the string is converted to a I<long> value in the obvious "
"manner, stopping at the first character which is not a valid digit in the "
"given base.  (In bases above 10, the letter \\(aqA\\(aq in either uppercase "
"or lowercase represents 10, \\(aqB\\(aq represents 11, and so forth, with "
"\\(aqZ\\(aq representing 35.)"
msgstr ""

#. type: Plain text
#: build/C/man3/strtol.3:109
msgid ""
"If I<endptr> is not NULL, B<strtol>()  stores the address of the first "
"invalid character in I<*endptr>.  If there were no digits at all, "
"B<strtol>()  stores the original value of I<nptr> in I<*endptr> (and returns "
"0).  In particular, if I<*nptr> is not \\(aq\\e0\\(aq but I<**endptr> is "
"\\(aq\\e0\\(aq on return, the entire string is valid."
msgstr ""

#. type: Plain text
#: build/C/man3/strtol.3:117
msgid ""
"The B<strtoll>()  function works just like the B<strtol>()  function but "
"returns a I<long long> integer value."
msgstr ""

#. type: Plain text
#: build/C/man3/strtol.3:144
msgid ""
"The B<strtol>()  function returns the result of the conversion, unless the "
"value would underflow or overflow.  If an underflow occurs, B<strtol>()  "
"returns B<LONG_MIN>.  If an overflow occurs, B<strtol>()  returns "
"B<LONG_MAX>.  In both cases, I<errno> is set to B<ERANGE>.  Precisely the "
"same holds for B<strtoll>()  (with B<LLONG_MIN> and B<LLONG_MAX> instead of "
"B<LONG_MIN> and B<LONG_MAX>)."
msgstr ""

#. type: Plain text
#: build/C/man3/strtol.3:151 build/C/man3/strtoul.3:152
msgid "(not in C99)  The given I<base> contains an unsupported value."
msgstr ""

#. type: Plain text
#: build/C/man3/strtol.3:154 build/C/man3/strtoul.3:155
msgid "The resulting value was out of range."
msgstr ""

#. type: Plain text
#: build/C/man3/strtol.3:161 build/C/man3/strtoul.3:162
msgid ""
"The implementation may also set I<errno> to B<EINVAL> in case no conversion "
"was performed (no digits seen, and 0 returned)."
msgstr ""

#. type: tbl table
#: build/C/man3/strtol.3:173
#, no-wrap
msgid ""
"B<strtol>(),\n"
"B<strtoll>(),\n"
"B<strtoq>()"
msgstr ""

#. type: Plain text
#: build/C/man3/strtol.3:178
msgid "B<strtol>(): POSIX.1-2001, POSIX.1-2008, C89, C99 SVr4, 4.3BSD."
msgstr ""

#. type: Plain text
#: build/C/man3/strtol.3:181
msgid "B<strtoll>(): POSIX.1-2001, POSIX.1-2008, C99."
msgstr ""

#. type: Plain text
#: build/C/man3/strtol.3:199
msgid ""
"Since B<strtol>()  can legitimately return 0, B<LONG_MAX>, or B<LONG_MIN> "
"(B<LLONG_MAX> or B<LLONG_MIN> for B<strtoll>())  on both success and "
"failure, the calling program should set I<errno> to 0 before the call, and "
"then determine if an error occurred by checking whether I<errno> has a "
"nonzero value after the call."
msgstr ""

#. type: Plain text
#: build/C/man3/strtol.3:204
msgid ""
"According to POSIX.1, in locales other than \"C\" and \"POSIX\", these "
"functions may accept other, implementation-defined numeric strings."
msgstr ""

#. type: Plain text
#: build/C/man3/strtol.3:206 build/C/man3/strtoul.3:202
msgid "BSD also has"
msgstr ""

#. type: Plain text
#: build/C/man3/strtol.3:210
#, no-wrap
msgid ""
"B<quad_t strtoq(const char *>I<nptr>B<, char **>I<endptr>B<, int "
">I<base>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/strtol.3:219
msgid ""
"with completely analogous definition.  Depending on the wordsize of the "
"current architecture, this may be equivalent to B<strtoll>()  or to "
"B<strtol>()."
msgstr ""

#. type: Plain text
#: build/C/man3/strtol.3:233
msgid ""
"The program shown below demonstrates the use of B<strtol>().  The first "
"command-line argument specifies a string from which B<strtol>()  should "
"parse a number.  The second (optional) argument specifies the base to be "
"used for the conversion.  (This argument is converted to numeric form using "
"B<atoi>(3), a function that performs no error checking and has a simpler "
"interface than B<strtol>().)  Some examples of the results produced by this "
"program are the following:"
msgstr ""

#. type: Plain text
#: build/C/man3/strtol.3:249
#, no-wrap
msgid ""
"$B< ./a.out 123>\n"
"strtol() returned 123\n"
"$B< ./a.out \\(aq    123\\(aq>\n"
"strtol() returned 123\n"
"$B< ./a.out 123abc>\n"
"strtol() returned 123\n"
"Further characters after number: \"abc\"\n"
"$B< ./a.out 123abc 55>\n"
"strtol: Invalid argument\n"
"$B< ./a.out \\(aq\\(aq>\n"
"No digits were found\n"
"$B< ./a.out 4000000000>\n"
"strtol: Numerical result out of range\n"
msgstr ""

#. type: Plain text
#: build/C/man3/strtol.3:258
#, no-wrap
msgid ""
"#include E<lt>stdlib.hE<gt>\n"
"#include E<lt>limits.hE<gt>\n"
"#include E<lt>stdio.hE<gt>\n"
"#include E<lt>errno.hE<gt>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/strtol.3:265
#, no-wrap
msgid ""
"int\n"
"main(int argc, char *argv[])\n"
"{\n"
"    int base;\n"
"    char *endptr, *str;\n"
"    long val;\n"
msgstr ""

#. type: Plain text
#: build/C/man3/strtol.3:270
#, no-wrap
msgid ""
"    if (argc E<lt> 2) {\n"
"        fprintf(stderr, \"Usage: %s str [base]\\en\", argv[0]);\n"
"        exit(EXIT_FAILURE);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: build/C/man3/strtol.3:273
#, no-wrap
msgid ""
"    str = argv[1];\n"
"    base = (argc E<gt> 2) ? atoi(argv[2]) : 0;\n"
msgstr ""

#. type: Plain text
#: build/C/man3/strtol.3:276
#, no-wrap
msgid ""
"    errno = 0;    /* To distinguish success/failure after call */\n"
"    val = strtol(str, &endptr, base);\n"
msgstr ""

#. type: Plain text
#: build/C/man3/strtol.3:278
#, no-wrap
msgid "    /* Check for various possible errors */\n"
msgstr ""

#. type: Plain text
#: build/C/man3/strtol.3:283
#, no-wrap
msgid ""
"    if (errno != 0) {\n"
"        perror(\"strtol\");\n"
"        exit(EXIT_FAILURE);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: build/C/man3/strtol.3:288
#, no-wrap
msgid ""
"    if (endptr == str) {\n"
"        fprintf(stderr, \"No digits were found\\en\");\n"
"        exit(EXIT_FAILURE);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: build/C/man3/strtol.3:290
#, no-wrap
msgid "    /* If we got here, strtol() successfully parsed a number */\n"
msgstr ""

#. type: Plain text
#: build/C/man3/strtol.3:292
#, no-wrap
msgid "    printf(\"strtol() returned %ld\\en\", val);\n"
msgstr ""

#. type: Plain text
#: build/C/man3/strtol.3:295
#, no-wrap
msgid ""
"    if (*endptr != \\(aq\\e0\\(aq)        /* Not necessarily an "
"error... */\n"
"        printf(\"Further characters after number: \\e\"%s\\e\"\\en\", "
"endptr);\n"
msgstr ""

#. type: Plain text
#: build/C/man3/strtol.3:306
msgid ""
"B<atof>(3), B<atoi>(3), B<atol>(3), B<strtod>(3), B<strtoimax>(3), "
"B<strtoul>(3),"
msgstr ""

#. type: TH
#: build/C/man3/strtoul.3:33
#, no-wrap
msgid "STRTOUL"
msgstr ""

#. type: Plain text
#: build/C/man3/strtoul.3:36
msgid "strtoul, strtoull, strtouq - convert a string to an unsigned long integer"
msgstr ""

#. type: Plain text
#: build/C/man3/strtoul.3:42
#, no-wrap
msgid ""
"B<unsigned long strtoul(const char *>I<nptr>B<, char **>I<endptr>B<, int "
">I<base>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/strtoul.3:45
#, no-wrap
msgid ""
"B<unsigned long long strtoull(const char *>I<nptr>B<, char "
"**>I<endptr>B<,>\n"
"B<                                int >I<base>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/strtoul.3:54
msgid "B<strtoull>():"
msgstr ""

#. type: Plain text
#: build/C/man3/strtoul.3:57
#, no-wrap
msgid ""
"_ISOC99_SOURCE ||\n"
"    || /* Glibc versions E<lt>= 2.19: */ _SVID_SOURCE || _BSD_SOURCE\n"
msgstr ""

#. type: Plain text
#: build/C/man3/strtoul.3:72
msgid ""
"The B<strtoul>()  function converts the initial part of the string in "
"I<nptr> to an I<unsigned long> value according to the given I<base>, which "
"must be between 2 and 36 inclusive, or be the special value 0."
msgstr ""

#. type: Plain text
#: build/C/man3/strtoul.3:86
msgid ""
"The string may begin with an arbitrary amount of white space (as determined "
"by B<isspace>(3))  followed by a single optional \\(aq+\\(aq or \\(aq-\\(aq "
"sign.  If I<base> is zero or 16, the string may then include a \"0x\" "
"prefix, and the number will be read in base 16; otherwise, a zero I<base> is "
"taken as 10 (decimal) unless the next character is \\(aq0\\(aq, in which "
"case it is taken as 8 (octal)."
msgstr ""

#. type: Plain text
#: build/C/man3/strtoul.3:95
msgid ""
"The remainder of the string is converted to an I<unsigned long> value in the "
"obvious manner, stopping at the first character which is not a valid digit "
"in the given base.  (In bases above 10, the letter \\(aqA\\(aq in either "
"uppercase or lowercase represents 10, \\(aqB\\(aq represents 11, and so "
"forth, with \\(aqZ\\(aq representing 35.)"
msgstr ""

#. type: Plain text
#: build/C/man3/strtoul.3:116
msgid ""
"If I<endptr> is not NULL, B<strtoul>()  stores the address of the first "
"invalid character in I<*endptr>.  If there were no digits at all, "
"B<strtoul>()  stores the original value of I<nptr> in I<*endptr> (and "
"returns 0).  In particular, if I<*nptr> is not \\(aq\\e0\\(aq but "
"I<**endptr> is \\(aq\\e0\\(aq on return, the entire string is valid."
msgstr ""

#. type: Plain text
#: build/C/man3/strtoul.3:124
msgid ""
"The B<strtoull>()  function works just like the B<strtoul>()  function but "
"returns an I<unsigned long long> value."
msgstr ""

#. type: Plain text
#: build/C/man3/strtoul.3:145
msgid ""
"The B<strtoul>()  function returns either the result of the conversion or, "
"if there was a leading minus sign, the negation of the result of the "
"conversion represented as an unsigned value, unless the original "
"(nonnegated) value would overflow; in the latter case, B<strtoul>()  returns "
"B<ULONG_MAX> and sets I<errno> to B<ERANGE>.  Precisely the same holds for "
"B<strtoull>()  (with B<ULLONG_MAX> instead of B<ULONG_MAX>)."
msgstr ""

#. type: tbl table
#: build/C/man3/strtoul.3:174
#, no-wrap
msgid ""
"B<strtoul>(),\n"
"B<strtoull>(),\n"
"B<strtouq>()"
msgstr ""

#. type: Plain text
#: build/C/man3/strtoul.3:179
msgid "B<strtoul>(): POSIX.1-2001, POSIX.1-2008, C89, C99 SVr4."
msgstr ""

#. type: Plain text
#: build/C/man3/strtoul.3:182
msgid "B<strtoull>(): POSIX.1-2001, POSIX.1-2008, C99."
msgstr ""

#. type: Plain text
#: build/C/man3/strtoul.3:196
msgid ""
"Since B<strtoul>()  can legitimately return 0 or B<ULONG_MAX> (B<ULLONG_MAX> "
"for B<strtoull>())  on both success and failure, the calling program should "
"set I<errno> to 0 before the call, and then determine if an error occurred "
"by checking whether I<errno> has a nonzero value after the call."
msgstr ""

#. type: Plain text
#: build/C/man3/strtoul.3:200
msgid ""
"In locales other than the \"C\" locale, other strings may be accepted.  (For "
"example, the thousands separator of the current locale may be supported.)"
msgstr ""

#. type: Plain text
#: build/C/man3/strtoul.3:206
#, no-wrap
msgid ""
"B<u_quad_t strtouq(const char *>I<nptr>B<, char **>I<endptr>B<, int "
">I<base>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/strtoul.3:215
msgid ""
"with completely analogous definition.  Depending on the wordsize of the "
"current architecture, this may be equivalent to B<strtoull>()  or to "
"B<strtoul>()."
msgstr ""

#. type: Plain text
#: build/C/man3/strtoul.3:220
msgid ""
"Negative values are considered valid input and are silently converted to the "
"equivalent I<unsigned long> value."
msgstr ""

#. type: Plain text
#: build/C/man3/strtoul.3:233
msgid ""
"B<a64l>(3), B<atof>(3), B<atoi>(3), B<atol>(3), B<strtod>(3), B<strtol>(3), "
"B<strtoumax>(3)"
msgstr ""

#. type: TH
#: build/C/man3/system.3:31
#, no-wrap
msgid "SYSTEM"
msgstr ""

#. type: Plain text
#: build/C/man3/system.3:34
msgid "system - execute a shell command"
msgstr ""

#. type: Plain text
#: build/C/man3/system.3:39
#, no-wrap
msgid "B<int system(const char *>I<command>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/system.3:50
msgid ""
"The B<system>()  library function uses B<fork>(2)  to create a child process "
"that executes the shell command specified in I<command> using B<execl>(3)  "
"as follows:"
msgstr ""

#. type: Plain text
#: build/C/man3/system.3:54
#, no-wrap
msgid "execl(\"/bin/sh\", \"sh\", \"-c\", command, (char *) NULL);\n"
msgstr ""

#. type: Plain text
#: build/C/man3/system.3:59
msgid "B<system>()  returns after the command has been completed."
msgstr ""

#. type: Plain text
#: build/C/man3/system.3:71
msgid ""
"During execution of the command, B<SIGCHLD> will be blocked, and B<SIGINT> "
"and B<SIGQUIT> will be ignored, in the process that calls B<system>().  "
"(These signals will be handled according to their defaults inside the child "
"process that executes I<command>.)"
msgstr ""

#. type: Plain text
#: build/C/man3/system.3:77
msgid ""
"If I<command> is NULL, then B<system>()  returns a status indicating whether "
"a shell is available on the system."
msgstr ""

#. type: Plain text
#: build/C/man3/system.3:81
msgid "The return value of B<system>()  is one of the following:"
msgstr ""

#. type: Plain text
#: build/C/man3/system.3:86
msgid ""
"If I<command> is NULL, then a nonzero value if a shell is available, or 0 if "
"no shell is available."
msgstr ""

#. type: Plain text
#: build/C/man3/system.3:92
msgid ""
"If a child process could not be created, or its status could not be "
"retrieved, the return value is -1 and I<errno> is set to indicate the error."
msgstr ""

#. type: Plain text
#: build/C/man3/system.3:97
msgid ""
"If a shell could not be executed in the child process, then the return value "
"is as though the child shell terminated by calling B<_exit>(2)  with the "
"status 127."
msgstr ""

#. type: Plain text
#: build/C/man3/system.3:104
msgid ""
"If all system calls succeed, then the return value is the termination status "
"of the child shell used to execute I<command>.  (The termination status of a "
"shell is the termination status of the last command it executes.)"
msgstr ""

#. type: Plain text
#: build/C/man3/system.3:113
msgid ""
"In the last two cases, the return value is a \"wait status\" that can be "
"examined using the macros described in B<waitpid>(2).  (i.e., "
"B<WIFEXITED>(), B<WEXITSTATUS>(), and so on)."
msgstr ""

#. type: Plain text
#: build/C/man3/system.3:116
msgid "B<system>()  does not affect the wait status of any other children."
msgstr ""

#. type: Plain text
#: build/C/man3/system.3:120
msgid "B<system>()  can fail with any of the same errors as B<fork>(2)."
msgstr ""

#. type: tbl table
#: build/C/man3/system.3:130
#, no-wrap
msgid "B<system>()"
msgstr ""

#. type: Plain text
#: build/C/man3/system.3:134
msgid "POSIX.1-2001, POSIX.1-2008, C89, C99."
msgstr ""

#. type: Plain text
#: build/C/man3/system.3:151
msgid ""
"B<system>()  provides simplicity and convenience: it handles all of the "
"details of calling B<fork>(2), B<execl>(3), and B<waitpid>(2), as well as "
"the necessary manipulations of signals; in addition, the shell performs the "
"usual substitutions and I/O redirections for I<command>.  The main cost of "
"B<system>()  is inefficiency: additional system calls are required to create "
"the process that runs the shell and to execute the shell."
msgstr ""

#. type: Plain text
#: build/C/man3/system.3:163
msgid ""
"If the B<_XOPEN_SOURCE> feature test macro is defined (before including "
"I<any> header files), then the macros described in B<waitpid>(2)  "
"(B<WEXITSTATUS>(), etc.) are made available when including "
"I<E<lt>stdlib.hE<gt>>."
msgstr ""

#. type: Plain text
#: build/C/man3/system.3:174
msgid ""
"As mentioned, B<system>()  ignores B<SIGINT> and B<SIGQUIT>.  This may make "
"programs that call it from a loop uninterruptible, unless they take care "
"themselves to check the exit status of the child.  For example:"
msgstr ""

#. type: Plain text
#: build/C/man3/system.3:179
#, no-wrap
msgid ""
"while (something) {\n"
"    int ret = system(\"foo\");\n"
msgstr ""

#. type: Plain text
#: build/C/man3/system.3:184
#, no-wrap
msgid ""
"    if (WIFSIGNALED(ret) &&\n"
"        (WTERMSIG(ret) == SIGINT || WTERMSIG(ret) == SIGQUIT))\n"
"            break;\n"
"}\n"
msgstr ""

#. type: Plain text
#: build/C/man3/system.3:192
msgid ""
"According to POSIX.1, it is unspecified whether handlers registered using "
"B<pthread_atfork>(3)  are called during the execution of B<system>().  In "
"the glibc implementation, such handlers are not called."
msgstr ""

#. type: Plain text
#: build/C/man3/system.3:206
msgid ""
"In versions of glibc before 2.1.3, the check for the availability of "
"I</bin/sh> was not actually performed if I<command> was NULL; instead it was "
"always assumed to be available, and B<system>()  always returned 1 in this "
"case.  Since glibc 2.1.3, this check is performed because, even though "
"POSIX.1-2001 requires a conforming implementation to provide a shell, that "
"shell may not be available or executable if the calling program has "
"previously called B<chroot>(2)  (which is not specified by POSIX.1-2001)."
msgstr ""

#. type: Plain text
#: build/C/man3/system.3:213
msgid ""
"It is possible for the shell command to terminate with a status of 127, "
"which yields a B<system>()  return value that is indistinguishable from the "
"case where a shell could not be executed in the child process."
msgstr ""

#. type: SS
#: build/C/man3/system.3:213
#, no-wrap
msgid "Caveats"
msgstr ""

#. type: Plain text
#: build/C/man3/system.3:233
msgid ""
"Do not use B<system>()  from a privileged program (a set-user-ID or "
"set-group-ID program, or a program with capabilities)  because strange "
"values for some environment variables might be used to subvert system "
"integrity.  For example, B<PATH> could be manipulated so that an arbitrary "
"program is executed with privilege.  Use the B<exec>(3)  family of functions "
"instead, but not B<execlp>(3)  or B<execvp>(3)  (which also use the B<PATH> "
"environment variable to search for an executable)."
msgstr ""

#. type: Plain text
#: build/C/man3/system.3:243
msgid ""
"B<system>()  will not, in fact, work properly from programs with set-user-ID "
"or set-group-ID privileges on systems on which I</bin/sh> is bash version 2: "
"as a security measure, bash 2 drops privileges on startup.  (Debian uses a "
"different shell, B<dash>(1), which does not do this when invoked as B<sh>.)"
msgstr ""

#. type: Plain text
#: build/C/man3/system.3:253
msgid ""
"Any user input that is employed as part of I<command> should be I<carefully> "
"sanitized, to ensure that unexpected shell commands or command options are "
"not executed.  Such risks are especially grave when using B<system>()  from "
"a privileged program."
msgstr ""

#. type: Plain text
#: build/C/man3/system.3:262
msgid ""
"B<sh>(1), B<execve>(2), B<fork>(2), B<sigaction>(2), B<sigprocmask>(2), "
"B<wait>(2), B<exec>(3), B<signal>(7)"
msgstr ""

#. type: TH
#: build/C/man7/vdso.7:13
#, no-wrap
msgid "VDSO"
msgstr ""

#. type: Plain text
#: build/C/man7/vdso.7:16
msgid "vdso - overview of the virtual ELF dynamic shared object"
msgstr ""

#. type: Plain text
#: build/C/man7/vdso.7:18
msgid "B<#include E<lt>sys/auxv.hE<gt>>"
msgstr ""

#. type: Plain text
#: build/C/man7/vdso.7:20
msgid "B<void *vdso = (uintptr_t) getauxval(AT_SYSINFO_EHDR);>"
msgstr ""

#. type: Plain text
#: build/C/man7/vdso.7:29
msgid ""
"The \"vDSO\" (virtual dynamic shared object) is a small shared library that "
"the kernel automatically maps into the address space of all user-space "
"applications.  Applications usually do not need to concern themselves with "
"these details as the vDSO is most commonly called by the C library.  This "
"way you can code in the normal way using standard functions and the C "
"library will take care of using any functionality that is available via the "
"vDSO."
msgstr ""

#. type: Plain text
#: build/C/man7/vdso.7:37
msgid ""
"Why does the vDSO exist at all? There are some system calls the kernel "
"provides that user-space code ends up using frequently, to the point that "
"such calls can dominate overall performance.  This is due both to the "
"frequency of the call as well as the context-switch overhead that results "
"from exiting user space and entering the kernel."
msgstr ""

#. type: Plain text
#: build/C/man7/vdso.7:42
msgid ""
"The rest of this documentation is geared toward the curious and/or C library "
"writers rather than general developers.  If you're trying to call the vDSO "
"in your own application rather than using the C library, you're most likely "
"doing it wrong."
msgstr ""

#. type: SS
#: build/C/man7/vdso.7:42
#, no-wrap
msgid "Example background"
msgstr ""

#. type: Plain text
#: build/C/man7/vdso.7:56
msgid ""
"Making system calls can be slow.  In x86 32-bit systems, you can trigger a "
"software interrupt (I<int $0x80>)  to tell the kernel you wish to make a "
"system call.  However, this instruction is expensive: it goes through the "
"full interrupt-handling paths in the processor's microcode as well as in the "
"kernel.  Newer processors have faster (but backward incompatible) "
"instructions to initiate system calls.  Rather than require the C library to "
"figure out if this functionality is available at run time, the C library can "
"use functions provided by the kernel in the vDSO."
msgstr ""

#. type: Plain text
#: build/C/man7/vdso.7:63
msgid ""
"Note that the terminology can be confusing.  On x86 systems, the vDSO "
"function used to determine the preferred method of making a system call is "
"named \"__kernel_vsyscall\", but on x86-64, the term \"vsyscall\" also "
"refers to an obsolete way to ask the kernel what time it is or what CPU the "
"caller is on."
msgstr ""

#. type: Plain text
#: build/C/man7/vdso.7:79
msgid ""
"One frequently used system call is B<gettimeofday>(2).  This system call is "
"called both directly by user-space applications as well as indirectly by the "
"C library.  Think timestamps or timing loops or polling\\(emall of these "
"frequently need to know what time it is right now.  This information is also "
"not secret\\(emany application in any privilege mode (root or any "
"unprivileged user) will get the same answer.  Thus the kernel arranges for "
"the information required to answer this question to be placed in memory the "
"process can access.  Now a call to B<gettimeofday>(2)  changes from a system "
"call to a normal function call and a few memory accesses."
msgstr ""

#. type: SS
#: build/C/man7/vdso.7:79
#, no-wrap
msgid "Finding the vDSO"
msgstr ""

#. type: Plain text
#: build/C/man7/vdso.7:86
msgid ""
"The base address of the vDSO (if one exists) is passed by the kernel to each "
"program in the initial auxiliary vector (see B<getauxval>(3)), via the "
"B<AT_SYSINFO_EHDR> tag."
msgstr ""

#. type: Plain text
#: build/C/man7/vdso.7:95
msgid ""
"You must not assume the vDSO is mapped at any particular location in the "
"user's memory map.  The base address will usually be randomized at run time "
"every time a new process image is created (at B<execve>(2)  time).  This is "
"done for security reasons, to prevent \"return-to-libc\" attacks."
msgstr ""

#. type: Plain text
#: build/C/man7/vdso.7:104
msgid ""
"For some architectures, there is also an B<AT_SYSINFO> tag.  This is used "
"only for locating the vsyscall entry point and is frequently omitted or set "
"to 0 (meaning it's not available).  This tag is a throwback to the initial "
"vDSO work (see I<History> below) and its use should be avoided."
msgstr ""

#. type: SS
#: build/C/man7/vdso.7:104
#, no-wrap
msgid "File format"
msgstr ""

#. type: Plain text
#: build/C/man7/vdso.7:111
msgid ""
"Since the vDSO is a fully formed ELF image, you can do symbol lookups on "
"it.  This allows new symbols to be added with newer kernel releases, and "
"allows the C library to detect available functionality at run time when "
"running under different kernel versions.  Oftentimes the C library will do "
"detection with the first call and then cache the result for subsequent "
"calls."
msgstr ""

#. type: Plain text
#: build/C/man7/vdso.7:120
msgid ""
"All symbols are also versioned (using the GNU version format).  This allows "
"the kernel to update the function signature without breaking backward "
"compatibility.  This means changing the arguments that the function accepts "
"as well as the return value.  Thus, when looking up a symbol in the vDSO, "
"you must always include the version to match the ABI you expect."
msgstr ""

#. type: Plain text
#: build/C/man7/vdso.7:125
msgid ""
"Typically the vDSO follows the naming convention of prefixing all symbols "
"with \"__vdso_\" or \"__kernel_\" so as to distinguish them from other "
"standard symbols.  For example, the \"gettimeofday\" function is named "
"\"__vdso_gettimeofday\"."
msgstr ""

#. type: Plain text
#: build/C/man7/vdso.7:129
msgid ""
"You use the standard C calling conventions when calling any of these "
"functions.  No need to worry about weird register or stack behavior."
msgstr ""

#. type: SS
#: build/C/man7/vdso.7:130
#, no-wrap
msgid "Source"
msgstr ""

#. type: Plain text
#: build/C/man7/vdso.7:134
msgid ""
"When you compile the kernel, it will automatically compile and link the vDSO "
"code for you.  You will frequently find it under the architecture-specific "
"directory:"
msgstr ""

#. type: Plain text
#: build/C/man7/vdso.7:137
#, no-wrap
msgid ""
"    find arch/$ARCH/ -name \\(aq*vdso*.so*\\(aq -o -name "
"\\(aq*gate*.so*\\(aq\n"
msgstr ""

#. type: SS
#: build/C/man7/vdso.7:137
#, no-wrap
msgid "vDSO names"
msgstr ""

#. type: Plain text
#: build/C/man7/vdso.7:143
msgid ""
"The name of the vDSO varies across architectures.  It will often show up in "
"things like glibc's B<ldd>(1)  output.  The exact name should not matter to "
"any code, so do not hardcode it."
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:148
#, no-wrap
msgid "user ABI"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:148
#, no-wrap
msgid "vDSO name"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:149 build/C/man7/vdso.7:199 build/C/man7/vdso.7:228 build/C/man7/vdso.7:265 build/C/man7/vdso.7:283 build/C/man7/vdso.7:311 build/C/man7/vdso.7:347 build/C/man7/vdso.7:369 build/C/man7/vdso.7:408 build/C/man7/vdso.7:446 build/C/man7/vdso.7:467 build/C/man7/vdso.7:485 build/C/man7/vdso.7:503 build/C/man7/vdso.7:521 build/C/man7/vdso.7:546 build/C/man7/vdso.7:565
#, no-wrap
msgid "_"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:150
#, no-wrap
msgid "aarch64"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:150 build/C/man7/vdso.7:151 build/C/man7/vdso.7:153 build/C/man7/vdso.7:156 build/C/man7/vdso.7:161 build/C/man7/vdso.7:162
#, no-wrap
msgid "linux-vdso.so.1"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:151
#, no-wrap
msgid "arm"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:152
#, no-wrap
msgid "ia64"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:152 build/C/man7/vdso.7:159 build/C/man7/vdso.7:160
#, no-wrap
msgid "linux-gate.so.1"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:153
#, no-wrap
msgid "mips"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:154
#, no-wrap
msgid "ppc/32"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:154 build/C/man7/vdso.7:157
#, no-wrap
msgid "linux-vdso32.so.1"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:155
#, no-wrap
msgid "ppc/64"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:155 build/C/man7/vdso.7:158
#, no-wrap
msgid "linux-vdso64.so.1"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:156
#, no-wrap
msgid "riscv"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:157
#, no-wrap
msgid "s390"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:158
#, no-wrap
msgid "s390x"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:159
#, no-wrap
msgid "sh"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:160
#, no-wrap
msgid "i386"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:161
#, no-wrap
msgid "x86-64"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:162
#, no-wrap
msgid "x86/x32"
msgstr ""

#. type: SS
#: build/C/man7/vdso.7:168
#, no-wrap
msgid "strace(1), seccomp(2), and the vDSO"
msgstr ""

#. type: Plain text
#: build/C/man7/vdso.7:177
msgid ""
"When tracing systems calls with B<strace>(1), symbols (system calls) that "
"are exported by the vDSO will I<not> appear in the trace output.  Those "
"system calls will likewise not be visible to B<seccomp>(2)  filters."
msgstr ""

#. type: SH
#: build/C/man7/vdso.7:177
#, no-wrap
msgid "ARCHITECTURE-SPECIFIC NOTES"
msgstr ""

#. type: Plain text
#: build/C/man7/vdso.7:180
msgid "The subsections below provide architecture-specific notes on the vDSO."
msgstr ""

#. type: Plain text
#: build/C/man7/vdso.7:189
msgid ""
"Note that the vDSO that is used is based on the ABI of your user-space code "
"and not the ABI of the kernel.  Thus, for example, when you run an i386 "
"32-bit ELF binary, you'll get the same vDSO regardless of whether you run it "
"under an i386 32-bit kernel or under an x86-64 64-bit kernel.  Therefore, "
"the name of the user-space ABI should be used to determine which of the "
"sections below is relevant."
msgstr ""

#. type: SS
#: build/C/man7/vdso.7:189
#, no-wrap
msgid "ARM functions"
msgstr ""

#.  See linux/arch/x86/vdso/vdso32.lds.S
#. type: Plain text
#: build/C/man7/vdso.7:193 build/C/man7/vdso.7:222 build/C/man7/vdso.7:259 build/C/man7/vdso.7:277 build/C/man7/vdso.7:402 build/C/man7/vdso.7:440 build/C/man7/vdso.7:461 build/C/man7/vdso.7:479 build/C/man7/vdso.7:497 build/C/man7/vdso.7:515 build/C/man7/vdso.7:559
msgid "The table below lists the symbols exported by the vDSO."
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:198 build/C/man7/vdso.7:227 build/C/man7/vdso.7:264 build/C/man7/vdso.7:282 build/C/man7/vdso.7:368 build/C/man7/vdso.7:407 build/C/man7/vdso.7:445 build/C/man7/vdso.7:466 build/C/man7/vdso.7:484 build/C/man7/vdso.7:502 build/C/man7/vdso.7:520 build/C/man7/vdso.7:545 build/C/man7/vdso.7:564
#, no-wrap
msgid "symbol"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:198 build/C/man7/vdso.7:227 build/C/man7/vdso.7:264 build/C/man7/vdso.7:282 build/C/man7/vdso.7:368 build/C/man7/vdso.7:407 build/C/man7/vdso.7:445 build/C/man7/vdso.7:466 build/C/man7/vdso.7:484 build/C/man7/vdso.7:502 build/C/man7/vdso.7:520 build/C/man7/vdso.7:545 build/C/man7/vdso.7:564
#, no-wrap
msgid "version"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:200 build/C/man7/vdso.7:528 build/C/man7/vdso.7:549 build/C/man7/vdso.7:568
#, no-wrap
msgid "__vdso_gettimeofday"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:200 build/C/man7/vdso.7:201
#, no-wrap
msgid "LINUX_2.6 (exported since Linux 4.1)"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:201 build/C/man7/vdso.7:527 build/C/man7/vdso.7:547 build/C/man7/vdso.7:566
#, no-wrap
msgid "__vdso_clock_gettime"
msgstr ""

#.  See linux/arch/arm/kernel/entry-armv.S
#.  See linux/Documentation/arm/kernel_user_helpers.txt
#. type: Plain text
#: build/C/man7/vdso.7:214
msgid ""
"Additionally, the ARM port has a code page full of utility functions.  Since "
"it's just a raw page of code, there is no ELF information for doing symbol "
"lookups or versioning.  It does provide support for different versions "
"though."
msgstr ""

#. type: Plain text
#: build/C/man7/vdso.7:219
msgid ""
"For information on this code page, it's best to refer to the kernel "
"documentation as it's extremely detailed and covers everything you need to "
"know: I<Documentation/arm/kernel_user_helpers.txt>."
msgstr ""

#. type: SS
#: build/C/man7/vdso.7:219
#, no-wrap
msgid "aarch64 functions"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:229 build/C/man7/vdso.7:447 build/C/man7/vdso.7:504 build/C/man7/vdso.7:523
#, no-wrap
msgid "__kernel_rt_sigreturn"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:229 build/C/man7/vdso.7:230 build/C/man7/vdso.7:231 build/C/man7/vdso.7:232
#, no-wrap
msgid "LINUX_2.6.39"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:230 build/C/man7/vdso.7:266 build/C/man7/vdso.7:376 build/C/man7/vdso.7:415 build/C/man7/vdso.7:448 build/C/man7/vdso.7:470 build/C/man7/vdso.7:488
#, no-wrap
msgid "__kernel_gettimeofday"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:231 build/C/man7/vdso.7:267 build/C/man7/vdso.7:371 build/C/man7/vdso.7:410 build/C/man7/vdso.7:449 build/C/man7/vdso.7:469 build/C/man7/vdso.7:487
#, no-wrap
msgid "__kernel_clock_gettime"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:232 build/C/man7/vdso.7:370 build/C/man7/vdso.7:409 build/C/man7/vdso.7:450 build/C/man7/vdso.7:468 build/C/man7/vdso.7:486
#, no-wrap
msgid "__kernel_clock_getres"
msgstr ""

#. type: SS
#: build/C/man7/vdso.7:238
#, no-wrap
msgid "bfin (Blackfin) functions (port removed in Linux 4.17)"
msgstr ""

#.  See linux/arch/blackfin/kernel/fixed_code.S
#.  See http://docs.blackfin.uclinux.org/doku.php?id=linux-kernel:fixed-code
#. type: Plain text
#: build/C/man7/vdso.7:250
msgid ""
"As this CPU lacks a memory management unit (MMU), it doesn't set up a vDSO "
"in the normal sense.  Instead, it maps at boot time a few raw functions into "
"a fixed location in memory.  User-space applications then call directly into "
"that region.  There is no provision for backward compatibility beyond "
"sniffing raw opcodes, but as this is an embedded CPU, it can get away with "
"things\\(emsome of the object formats it runs aren't even ELF based (they're "
"bFLT/FLAT)."
msgstr ""

#. type: Plain text
#: build/C/man7/vdso.7:253
msgid ""
"For information on this code page, it's best to refer to the public "
"documentation:"
msgstr ""

#. type: Plain text
#: build/C/man7/vdso.7:255
msgid "http://docs.blackfin.uclinux.org/doku.php?id=linux-kernel:fixed-code"
msgstr ""

#. type: SS
#: build/C/man7/vdso.7:255
#, no-wrap
msgid "mips functions"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:266 build/C/man7/vdso.7:267
#, no-wrap
msgid "LINUX_2.6 (exported since Linux 4.4)"
msgstr ""

#. type: SS
#: build/C/man7/vdso.7:273
#, no-wrap
msgid "ia64 (Itanium) functions"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:284
#, no-wrap
msgid "__kernel_sigtramp"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:284 build/C/man7/vdso.7:285 build/C/man7/vdso.7:286 build/C/man7/vdso.7:522 build/C/man7/vdso.7:523 build/C/man7/vdso.7:524
#, no-wrap
msgid "LINUX_2.5"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:285
#, no-wrap
msgid "__kernel_syscall_via_break"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:286
#, no-wrap
msgid "__kernel_syscall_via_epc"
msgstr ""

#. type: Plain text
#: build/C/man7/vdso.7:305
msgid ""
"The Itanium port is somewhat tricky.  In addition to the vDSO above, it also "
"has \"light-weight system calls\" (also known as \"fast syscalls\" or "
"\"fsys\").  You can invoke these via the I<__kernel_syscall_via_epc> vDSO "
"helper.  The system calls listed here have the same semantics as if you "
"called them directly via B<syscall>(2), so refer to the relevant "
"documentation for each.  The table below lists the functions available via "
"this mechanism."
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:310 build/C/man7/vdso.7:346
#, no-wrap
msgid "function"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:312
#, no-wrap
msgid "clock_gettime"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:313
#, no-wrap
msgid "getcpu"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:314
#, no-wrap
msgid "getpid"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:315
#, no-wrap
msgid "getppid"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:316
#, no-wrap
msgid "gettimeofday"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:317
#, no-wrap
msgid "set_tid_address"
msgstr ""

#. type: SS
#: build/C/man7/vdso.7:323
#, no-wrap
msgid "parisc (hppa) functions"
msgstr ""

#.  See linux/arch/parisc/kernel/syscall.S
#.  See linux/Documentation/parisc/registers
#. type: Plain text
#: build/C/man7/vdso.7:334
msgid ""
"The parisc port has a code page with utility functions called a gateway "
"page.  Rather than use the normal ELF auxiliary vector approach, it passes "
"the address of the page to the process via the SR2 register.  The "
"permissions on the page are such that merely executing those addresses "
"automatically executes with kernel privileges and not in user space.  This "
"is done to match the way HP-UX works."
msgstr ""

#. type: Plain text
#: build/C/man7/vdso.7:339
msgid ""
"Since it's just a raw page of code, there is no ELF information for doing "
"symbol lookups or versioning.  Simply call into the appropriate offset via "
"the branch instruction, for example:"
msgstr ""

#. type: Plain text
#: build/C/man7/vdso.7:341
#, no-wrap
msgid "    ble E<lt>offsetE<gt>(%sr2, %r0)\n"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:346
#, no-wrap
msgid "offset"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:348
#, no-wrap
msgid "00b0"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:348
#, no-wrap
msgid "lws_entry (CAS operations)"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:349
#, no-wrap
msgid "00e0"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:349
#, no-wrap
msgid "set_thread_pointer (used by glibc)"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:350
#, no-wrap
msgid "0100"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:350
#, no-wrap
msgid "linux_gateway_entry (syscall)"
msgstr ""

#. type: SS
#: build/C/man7/vdso.7:356
#, no-wrap
msgid "ppc/32 functions"
msgstr ""

#.  See linux/arch/powerpc/kernel/vdso32/vdso32.lds.S
#. type: Plain text
#: build/C/man7/vdso.7:363
msgid ""
"The table below lists the symbols exported by the vDSO.  The functions "
"marked with a I<*> are available only when the kernel is a PowerPC64 "
"(64-bit) kernel."
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:370 build/C/man7/vdso.7:371 build/C/man7/vdso.7:372 build/C/man7/vdso.7:373 build/C/man7/vdso.7:374 build/C/man7/vdso.7:375 build/C/man7/vdso.7:376 build/C/man7/vdso.7:377 build/C/man7/vdso.7:378 build/C/man7/vdso.7:379 build/C/man7/vdso.7:380 build/C/man7/vdso.7:409 build/C/man7/vdso.7:410 build/C/man7/vdso.7:411 build/C/man7/vdso.7:412 build/C/man7/vdso.7:413 build/C/man7/vdso.7:414 build/C/man7/vdso.7:415 build/C/man7/vdso.7:416 build/C/man7/vdso.7:417 build/C/man7/vdso.7:418
#, no-wrap
msgid "LINUX_2.6.15"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:372 build/C/man7/vdso.7:411
#, no-wrap
msgid "__kernel_datapage_offset"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:373 build/C/man7/vdso.7:412
#, no-wrap
msgid "__kernel_get_syscall_map"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:374 build/C/man7/vdso.7:413
#, no-wrap
msgid "__kernel_get_tbfreq"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:375
#, no-wrap
msgid "__kernel_getcpu I<*>"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:377
#, no-wrap
msgid "__kernel_sigtramp_rt32"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:378
#, no-wrap
msgid "__kernel_sigtramp32"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:379 build/C/man7/vdso.7:417
#, no-wrap
msgid "__kernel_sync_dicache"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:380 build/C/man7/vdso.7:418
#, no-wrap
msgid "__kernel_sync_dicache_p5"
msgstr ""

#. type: Plain text
#: build/C/man7/vdso.7:399 build/C/man7/vdso.7:437
msgid ""
"The B<CLOCK_REALTIME_COARSE> and B<CLOCK_MONOTONIC_COARSE> clocks are I<not> "
"supported by the I<__kernel_clock_getres> and I<__kernel_clock_gettime> "
"interfaces; the kernel falls back to the real system call."
msgstr ""

#. type: SS
#: build/C/man7/vdso.7:399
#, no-wrap
msgid "ppc/64 functions"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:414 build/C/man7/vdso.7:451
#, no-wrap
msgid "__kernel_getcpu"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:416
#, no-wrap
msgid "__kernel_sigtramp_rt64"
msgstr ""

#. type: SS
#: build/C/man7/vdso.7:437
#, no-wrap
msgid "riscv functions"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:447 build/C/man7/vdso.7:448 build/C/man7/vdso.7:449 build/C/man7/vdso.7:450 build/C/man7/vdso.7:451 build/C/man7/vdso.7:452
#, no-wrap
msgid "LINUX_4.15"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:452
#, no-wrap
msgid "__kernel_flush_icache"
msgstr ""

#. type: SS
#: build/C/man7/vdso.7:458
#, no-wrap
msgid "s390 functions"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:468 build/C/man7/vdso.7:469 build/C/man7/vdso.7:470 build/C/man7/vdso.7:486 build/C/man7/vdso.7:487 build/C/man7/vdso.7:488
#, no-wrap
msgid "LINUX_2.6.29"
msgstr ""

#. type: SS
#: build/C/man7/vdso.7:476
#, no-wrap
msgid "s390x functions"
msgstr ""

#. type: SS
#: build/C/man7/vdso.7:494
#, no-wrap
msgid "sh (SuperH) functions"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:504 build/C/man7/vdso.7:505 build/C/man7/vdso.7:506 build/C/man7/vdso.7:547 build/C/man7/vdso.7:548 build/C/man7/vdso.7:549 build/C/man7/vdso.7:550 build/C/man7/vdso.7:566 build/C/man7/vdso.7:567 build/C/man7/vdso.7:568 build/C/man7/vdso.7:569
#, no-wrap
msgid "LINUX_2.6"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:505 build/C/man7/vdso.7:522
#, no-wrap
msgid "__kernel_sigreturn"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:506 build/C/man7/vdso.7:524
#, no-wrap
msgid "__kernel_vsyscall"
msgstr ""

#. type: SS
#: build/C/man7/vdso.7:512
#, no-wrap
msgid "i386 functions"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:527 build/C/man7/vdso.7:528 build/C/man7/vdso.7:529
#, no-wrap
msgid "LINUX_2.6 (exported since Linux 3.15)"
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:529 build/C/man7/vdso.7:550 build/C/man7/vdso.7:569
#, no-wrap
msgid "__vdso_time"
msgstr ""

#. type: SS
#: build/C/man7/vdso.7:535
#, no-wrap
msgid "x86-64 functions"
msgstr ""

#.  See linux/arch/x86/vdso/vdso.lds.S
#. type: Plain text
#: build/C/man7/vdso.7:540
msgid ""
"The table below lists the symbols exported by the vDSO.  All of these "
"symbols are also available without the \"__vdso_\" prefix, but you should "
"ignore those and stick to the names below."
msgstr ""

#. type: tbl table
#: build/C/man7/vdso.7:548 build/C/man7/vdso.7:567
#, no-wrap
msgid "__vdso_getcpu"
msgstr ""

#. type: SS
#: build/C/man7/vdso.7:556
#, no-wrap
msgid "x86/x32 functions"
msgstr ""

#. type: SS
#: build/C/man7/vdso.7:575
#, no-wrap
msgid "History"
msgstr ""

#. type: Plain text
#: build/C/man7/vdso.7:582
msgid ""
"The vDSO was originally just a single function\\(emthe vsyscall.  In older "
"kernels, you might see that name in a process's memory map rather than "
"\"vdso\".  Over time, people realized that this mechanism was a great way to "
"pass more functionality to user space, so it was reconceived as a vDSO in "
"the current format."
msgstr ""

#. type: Plain text
#: build/C/man7/vdso.7:586
msgid "B<syscalls>(2), B<getauxval>(3), B<proc>(5)"
msgstr ""

#. type: Plain text
#: build/C/man7/vdso.7:588
msgid "The documents, examples, and source code in the Linux source code tree:"
msgstr ""

#. type: Plain text
#: build/C/man7/vdso.7:594
#, no-wrap
msgid ""
"Documentation/ABI/stable/vdso\n"
"Documentation/ia64/fsys.txt\n"
"Documentation/vDSO/* (includes examples of using the vDSO)\n"
msgstr ""

#. type: Plain text
#: build/C/man7/vdso.7:596
#, no-wrap
msgid "find arch/ -iname \\(aq*vdso*\\(aq -o -iname \\(aq*gate*\\(aq\n"
msgstr ""

#. type: TH
#: build/C/man3/wcstombs.3:16
#, no-wrap
msgid "WCSTOMBS"
msgstr ""

#. type: Plain text
#: build/C/man3/wcstombs.3:19
msgid "wcstombs - convert a wide-character string to a multibyte string"
msgstr ""

#. type: Plain text
#: build/C/man3/wcstombs.3:24
#, no-wrap
msgid ""
"B<size_t wcstombs(char *>I<dest>B<, const wchar_t *>I<src>B<, size_t "
">I<n>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/wcstombs.3:43
msgid ""
"If I<dest> is not NULL, the B<wcstombs>()  function converts the "
"wide-character string I<src> to a multibyte string starting at I<dest>.  At "
"most I<n> bytes are written to I<dest>.  The sequence of characters placed "
"in I<dest> begins in the initial shift state.  The conversion can stop for "
"three reasons:"
msgstr ""

#. type: Plain text
#: build/C/man3/wcstombs.3:49
msgid ""
"A wide character has been encountered that can not be represented as a "
"multibyte sequence (according to the current locale).  In this case, "
"I<(size_t)\\ -1> is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/wcstombs.3:54
msgid ""
"The length limit forces a stop.  In this case, the number of bytes written "
"to I<dest> is returned, but the shift state at this point is lost."
msgstr ""

#. type: Plain text
#: build/C/man3/wcstombs.3:61
msgid ""
"The wide-character string has been completely converted, including the "
"terminating null wide character (L\\(aq\\e0\\(aq).  In this case, the "
"conversion ends in the initial shift state.  The number of bytes written to "
"I<dest>, excluding the terminating null byte (\\(aq\\e0\\(aq), is returned."
msgstr ""

#. type: Plain text
#: build/C/man3/wcstombs.3:67
msgid ""
"The programmer must ensure that there is room for at least I<n> bytes at "
"I<dest>."
msgstr ""

#. type: Plain text
#: build/C/man3/wcstombs.3:75
msgid ""
"If I<dest> is NULL, I<n> is ignored, and the conversion proceeds as above, "
"except that the converted bytes are not written out to memory, and no length "
"limit exists."
msgstr ""

#. type: Plain text
#: build/C/man3/wcstombs.3:80
msgid ""
"In order to avoid the case 2 above, the programmer should make sure I<n> is "
"greater than or equal to I<wcstombs(NULL,src,0)+1>."
msgstr ""

#. type: Plain text
#: build/C/man3/wcstombs.3:90
msgid ""
"The B<wcstombs>()  function returns the number of bytes that make up the "
"converted part of a multibyte sequence, not including the terminating null "
"byte.  If a wide character was encountered which could not be converted, "
"I<(size_t)\\ -1> is returned."
msgstr ""

#. type: tbl table
#: build/C/man3/wcstombs.3:100
#, no-wrap
msgid "B<wcstombs>()"
msgstr ""

#. type: Plain text
#: build/C/man3/wcstombs.3:112
msgid ""
"The behavior of B<wcstombs>()  depends on the B<LC_CTYPE> category of the "
"current locale."
msgstr ""

#. type: Plain text
#: build/C/man3/wcstombs.3:116
msgid ""
"The function B<wcsrtombs>(3)  provides a better interface to the same "
"functionality."
msgstr ""

#. type: Plain text
#: build/C/man3/wcstombs.3:122
msgid "B<mblen>(3), B<mbstowcs>(3), B<mbtowc>(3), B<wcsrtombs>(3), B<wctomb>(3)"
msgstr ""

#. type: TH
#: build/C/man3/wctomb.3:16
#, no-wrap
msgid "WCTOMB"
msgstr ""

#. type: Plain text
#: build/C/man3/wctomb.3:19
msgid "wctomb - convert a wide character to a multibyte sequence"
msgstr ""

#. type: Plain text
#: build/C/man3/wctomb.3:24
#, no-wrap
msgid "B<int wctomb(char *>I<s>B<, wchar_t >I<wc>B<);>\n"
msgstr ""

#. type: Plain text
#: build/C/man3/wctomb.3:45
msgid ""
"If I<s> is not NULL, the B<wctomb>()  function converts the wide character "
"I<wc> to its multibyte representation and stores it at the beginning of the "
"character array pointed to by I<s>.  It updates the shift state, which is "
"stored in a static anonymous variable known only to the B<wctomb>()  "
"function, and returns the length of said multibyte representation, that is, "
"the number of bytes written at I<s>."
msgstr ""

#. type: Plain text
#: build/C/man3/wctomb.3:51
msgid ""
"The programmer must ensure that there is room for at least B<MB_CUR_MAX> "
"bytes at I<s>."
msgstr ""

#.  The Dinkumware doc and the Single UNIX specification say this, but
#.  glibc doesn't implement this.
#. type: Plain text
#: build/C/man3/wctomb.3:63
msgid ""
"If I<s> is NULL, the B<wctomb>()  function resets the shift state, known "
"only to this function, to the initial state, and returns nonzero if the "
"encoding has nontrivial shift state, or zero if the encoding is stateless."
msgstr ""

#. type: Plain text
#: build/C/man3/wctomb.3:77
msgid ""
"If I<s> is not NULL, the B<wctomb>()  function returns the number of bytes "
"that have been written to the byte array at I<s>.  If I<wc> can not be "
"represented as a multibyte sequence (according to the current locale), -1 is "
"returned."
msgstr ""

#. type: Plain text
#: build/C/man3/wctomb.3:84
msgid ""
"If I<s> is NULL, the B<wctomb>()  function returns nonzero if the encoding "
"has nontrivial shift state, or zero if the encoding is stateless."
msgstr ""

#. type: tbl table
#: build/C/man3/wctomb.3:94
#, no-wrap
msgid "B<wctomb>()"
msgstr ""

#. type: Plain text
#: build/C/man3/wctomb.3:105
msgid ""
"The behavior of B<wctomb>()  depends on the B<LC_CTYPE> category of the "
"current locale."
msgstr ""

#. type: Plain text
#: build/C/man3/wctomb.3:110
msgid ""
"The function B<wcrtomb>(3)  provides a better interface to the same "
"functionality."
msgstr ""

#. type: Plain text
#: build/C/man3/wctomb.3:117
msgid ""
"B<MB_CUR_MAX>(3), B<mblen>(3), B<mbstowcs>(3), B<mbtowc>(3), B<wcrtomb>(3), "
"B<wcstombs>(3)"
msgstr ""

#. type: TH
#: build/C/man2/getrandom.2:27
#, no-wrap
msgid "GETRANDOM"
msgstr ""

#. type: Plain text
#: build/C/man2/getrandom.2:30
msgid "getrandom - obtain a series of random bytes"
msgstr ""

#. type: Plain text
#: build/C/man2/getrandom.2:32
msgid "B<#include E<lt>sys/random.hE<gt>>"
msgstr ""

#. type: Plain text
#: build/C/man2/getrandom.2:34
msgid ""
"B<ssize_t getrandom(void *>I<buf>B<, size_t >I<buflen>B<, unsigned int "
">I<flags>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man2/getrandom.2:44
msgid ""
"The B<getrandom>()  system call fills the buffer pointed to by I<buf> with "
"up to I<buflen> random bytes.  These bytes can be used to seed user-space "
"random number generators or for cryptographic purposes."
msgstr ""

#. type: Plain text
#: build/C/man2/getrandom.2:55
msgid ""
"By default, B<getrandom>()  draws entropy from the I<urandom> source (i.e., "
"the same source as the I</dev/urandom> device).  This behavior can be "
"changed via the I<flags> argument."
msgstr ""

#. type: Plain text
#: build/C/man2/getrandom.2:65
msgid ""
"If the I<urandom> source has been initialized, reads of up to 256 bytes will "
"always return as many bytes as requested and will not be interrupted by "
"signals.  No such guarantees apply for larger buffer sizes.  For example, if "
"the call is interrupted by a signal handler, it may return a partially "
"filled buffer, or fail with the error B<EINTR>."
msgstr ""

#. type: Plain text
#: build/C/man2/getrandom.2:74
msgid ""
"If the I<urandom> source has not yet been initialized, then B<getrandom>()  "
"will block, unless B<GRND_NONBLOCK> is specified in I<flags>."
msgstr ""

#. type: Plain text
#: build/C/man2/getrandom.2:79
msgid ""
"The I<flags> argument is a bit mask that can contain zero or more of the "
"following values ORed together:"
msgstr ""

#. type: TP
#: build/C/man2/getrandom.2:79
#, no-wrap
msgid "B<GRND_RANDOM>"
msgstr ""

#. type: Plain text
#: build/C/man2/getrandom.2:104
msgid ""
"If this bit is set, then random bytes are drawn from the I<random> source "
"(i.e., the same source as the I</dev/random> device)  instead of the "
"I<urandom> source.  The I<random> source is limited based on the entropy "
"that can be obtained from environmental noise.  If the number of available "
"bytes in the I<random> source is less than requested in I<buflen>, the call "
"returns just the available random bytes.  If no random bytes are available, "
"the behavior depends on the presence of B<GRND_NONBLOCK> in the I<flags> "
"argument."
msgstr ""

#. type: TP
#: build/C/man2/getrandom.2:104
#, no-wrap
msgid "B<GRND_NONBLOCK>"
msgstr ""

#. type: Plain text
#: build/C/man2/getrandom.2:122
msgid ""
"By default, when reading from the I<random> source, B<getrandom>()  blocks "
"if no random bytes are available, and when reading from the I<urandom> "
"source, it blocks if the entropy pool has not yet been initialized.  If the "
"B<GRND_NONBLOCK> flag is set, then B<getrandom>()  does not block in these "
"cases, but instead immediately returns -1 with I<errno> set to B<EAGAIN>."
msgstr ""

#. type: Plain text
#: build/C/man2/getrandom.2:136
msgid ""
"On success, B<getrandom>()  returns the number of bytes that were copied to "
"the buffer I<buf>.  This may be less than the number of bytes requested via "
"I<buflen> if either B<GRND_RANDOM> was specified in I<flags> and "
"insufficient entropy was present in the I<random> source or the system call "
"was interrupted by a signal."
msgstr ""

#. type: Plain text
#: build/C/man2/getrandom.2:140
msgid "On error, -1 is returned, and I<errno> is set appropriately."
msgstr ""

#. type: tbl table
#: build/C/man2/getrandom.2:141 build/C/man7/random.7:190 build/C/man7/random.7:204
#, no-wrap
msgid "B<EAGAIN>"
msgstr ""

#. type: Plain text
#: build/C/man2/getrandom.2:148
msgid ""
"The requested entropy was not available, and B<getrandom>()  would have "
"blocked if the B<GRND_NONBLOCK> flag was not set."
msgstr ""

#. type: TP
#: build/C/man2/getrandom.2:148 build/C/man3/getentropy.3:66
#, no-wrap
msgid "B<EFAULT>"
msgstr ""

#. type: Plain text
#: build/C/man2/getrandom.2:153
msgid "The address referred to by I<buf> is outside the accessible address space."
msgstr ""

#. type: TP
#: build/C/man2/getrandom.2:153
#, no-wrap
msgid "B<EINTR>"
msgstr ""

#. type: Plain text
#: build/C/man2/getrandom.2:163
msgid ""
"The call was interrupted by a signal handler; see the description of how "
"interrupted B<read>(2)  calls on \"slow\" devices are handled with and "
"without the B<SA_RESTART> flag in the B<signal>(7)  man page."
msgstr ""

#. type: Plain text
#: build/C/man2/getrandom.2:167
msgid "An invalid flag was specified in I<flags>."
msgstr ""

#. type: TP
#: build/C/man2/getrandom.2:167 build/C/man3/getentropy.3:82
#, no-wrap
msgid "B<ENOSYS>"
msgstr ""

#. type: Plain text
#: build/C/man2/getrandom.2:172
msgid ""
"The glibc wrapper function for B<getrandom>()  determined that the "
"underlying kernel does not implement this system call."
msgstr ""

#. type: Plain text
#: build/C/man2/getrandom.2:176
msgid ""
"B<getrandom>()  was introduced in version 3.17 of the Linux kernel.  Support "
"was added to glibc in version 2.25."
msgstr ""

#. type: Plain text
#: build/C/man2/getrandom.2:178
msgid "This system call is Linux-specific."
msgstr ""

#. type: Plain text
#: build/C/man2/getrandom.2:182
msgid ""
"For an overview and comparison of the various interfaces that can be used to "
"obtain randomness, see B<random>(7)."
msgstr ""

#. type: Plain text
#: build/C/man2/getrandom.2:200
msgid ""
"Unlike I</dev/random> and I</dev/urandom>, B<getrandom>()  does not involve "
"the use of pathnames or file descriptors.  Thus, B<getrandom>()  can be "
"useful in cases where B<chroot>(2)  makes I</dev> pathnames invisible, and "
"where an application (e.g., a daemon during start-up)  closes a file "
"descriptor for one of these files that was opened by a library."
msgstr ""

#. type: SS
#: build/C/man2/getrandom.2:200
#, no-wrap
msgid "Maximum number of bytes returned"
msgstr ""

#. type: Plain text
#: build/C/man2/getrandom.2:202
msgid "As of Linux 3.19 the following limits apply:"
msgstr ""

#. type: Plain text
#: build/C/man2/getrandom.2:210
msgid ""
"When reading from the I<urandom> source, a maximum of 33554431 bytes is "
"returned by a single call to B<getrandom>()  on systems where I<int> has a "
"size of 32 bits."
msgstr ""

#. type: Plain text
#: build/C/man2/getrandom.2:214
msgid "When reading from the I<random> source, a maximum of 512 bytes is returned."
msgstr ""

#. type: SS
#: build/C/man2/getrandom.2:214
#, no-wrap
msgid "Interruption by a signal handler"
msgstr ""

#. type: Plain text
#: build/C/man2/getrandom.2:240
msgid ""
"When reading from the I<urandom> source (B<GRND_RANDOM> is not set), "
"B<getrandom>()  will block until the entropy pool has been initialized "
"(unless the B<GRND_NONBLOCK> flag was specified).  If a request is made to "
"read a large number of bytes (more than 256), B<getrandom>()  will block "
"until those bytes have been generated and transferred from kernel memory to "
"I<buf>.  When reading from the I<random> source (B<GRND_RANDOM> is set), "
"B<getrandom>()  will block until some random bytes become available (unless "
"the B<GRND_NONBLOCK> flag was specified)."
msgstr ""

#. type: Plain text
#: build/C/man2/getrandom.2:265
msgid ""
"The behavior when a call to B<getrandom>()  that is blocked while reading "
"from the I<urandom> source is interrupted by a signal handler depends on the "
"initialization state of the entropy buffer and on the request size, "
"I<buflen>.  If the entropy is not yet initialized, then the call fails with "
"the B<EINTR> error.  If the entropy pool has been initialized and the "
"request size is large (I<buflen>\\ E<gt>\\ 256), the call either succeeds, "
"returning a partially filled buffer, or fails with the error B<EINTR>.  If "
"the entropy pool has been initialized and the request size is small "
"(I<buflen>\\ E<lt>=\\ 256), then B<getrandom>()  will not fail with "
"B<EINTR>.  Instead, it will return all of the bytes that have been "
"requested."
msgstr ""

#. type: Plain text
#: build/C/man2/getrandom.2:271
msgid ""
"When reading from the I<random> source, blocking requests of any size can be "
"interrupted by a signal handler (the call fails with the error B<EINTR>)."
msgstr ""

#. type: Plain text
#: build/C/man2/getrandom.2:277
msgid ""
"Using B<getrandom>()  to read small buffers (E<lt>=\\ 256 bytes) from the "
"I<urandom> source is the preferred mode of usage."
msgstr ""

#. type: Plain text
#: build/C/man2/getrandom.2:284
msgid ""
"The special treatment of small values of I<buflen> was designed for "
"compatibility with OpenBSD's B<getentropy>(3), which is nowadays supported "
"by glibc."
msgstr ""

#. type: Plain text
#: build/C/man2/getrandom.2:298
msgid ""
"The user of B<getrandom>()  I<must> always check the return value, to "
"determine whether either an error occurred or fewer bytes than requested "
"were returned.  In the case where B<GRND_RANDOM> is not specified and "
"I<buflen> is less than or equal to 256, a return of fewer bytes than "
"requested should never happen, but the careful programmer will check for "
"this anyway!"
msgstr ""

#.  FIXME patch proposed https://lkml.org/lkml/2014/11/29/16
#. type: Plain text
#: build/C/man2/getrandom.2:301
msgid "As of Linux 3.19, the following bug exists:"
msgstr ""

#. type: Plain text
#: build/C/man2/getrandom.2:305
msgid ""
"Depending on CPU load, B<getrandom>()  does not react to interrupts before "
"reading all bytes requested."
msgstr ""

#. type: Plain text
#: build/C/man2/getrandom.2:311
msgid "B<getentropy>(3), B<random>(4), B<urandom>(4), B<random>(7), B<signal>(7)"
msgstr ""

#. type: TH
#: build/C/man3/getentropy.3:25
#, no-wrap
msgid "GETENTROPY"
msgstr ""

#. type: Plain text
#: build/C/man3/getentropy.3:28
msgid "getentropy - fill a buffer with random bytes"
msgstr ""

#. type: Plain text
#: build/C/man3/getentropy.3:32
msgid "B<int getentropy(void *>I<buffer>B<, size_t >I<length>B<);>"
msgstr ""

#. type: Plain text
#: build/C/man3/getentropy.3:39
msgid "B<getentropy>():"
msgstr ""

#. type: Plain text
#: build/C/man3/getentropy.3:43
msgid "_DEFAULT_SOURCE"
msgstr ""

#. type: Plain text
#: build/C/man3/getentropy.3:56
msgid ""
"The B<getentropy>()  function writes I<length> bytes of high-quality random "
"data to the buffer starting at the location pointed to by I<buffer>.  The "
"maximum permitted value for the I<length> argument is 256."
msgstr ""

#. type: Plain text
#: build/C/man3/getentropy.3:60
msgid ""
"A successful call to B<getentropy>()  always provides the requested number "
"of bytes of entropy."
msgstr ""

#. type: Plain text
#: build/C/man3/getentropy.3:65
msgid ""
"On success, this function returns zero.  On error, -1 is returned, and "
"I<errno> is set appropriately."
msgstr ""

#. type: Plain text
#: build/C/man3/getentropy.3:73
msgid ""
"Part or all of the buffer specified by I<buffer> and I<length> is not in "
"valid addressable memory."
msgstr ""

#. type: TP
#: build/C/man3/getentropy.3:73 build/C/man3/getentropy.3:77
#, no-wrap
msgid "B<EIO>"
msgstr ""

#. type: Plain text
#: build/C/man3/getentropy.3:77
msgid "I<length> is greater than 256."
msgstr ""

#. type: Plain text
#: build/C/man3/getentropy.3:82
msgid ""
"An unspecified error occurred while trying to overwrite I<buffer> with "
"random data."
msgstr ""

#. type: Plain text
#: build/C/man3/getentropy.3:87
msgid ""
"This kernel version does not implement the B<getrandom>(2)  system call "
"required to implement this function."
msgstr ""

#. type: Plain text
#: build/C/man3/getentropy.3:91
msgid "The B<getentropy>()  function first appeared in glibc 2.25."
msgstr ""

#. type: Plain text
#: build/C/man3/getentropy.3:94
msgid "This function is nonstandard.  It is also present on OpenBSD."
msgstr ""

#. type: Plain text
#: build/C/man3/getentropy.3:99
msgid "The B<getentropy>()  function is implemented using B<getrandom>(2)."
msgstr ""

#. type: Plain text
#: build/C/man3/getentropy.3:105
msgid ""
"Whereas the glibc wrapper makes B<getrandom>(2)  a cancellation point, "
"B<getentropy>()  is not a cancellation point."
msgstr ""

#. type: Plain text
#: build/C/man3/getentropy.3:111
msgid ""
"B<getentropy>()  is also declared in B<E<lt>sys/random.hE<gt>>.  (No feature "
"test macro need be defined to obtain the declaration from that header file.)"
msgstr ""

#. type: Plain text
#: build/C/man3/getentropy.3:120
msgid ""
"A call to B<getentropy>()  may block if the system has just booted and the "
"kernel has not yet collected enough randomness to initialize the entropy "
"pool.  In this case, B<getentropy>()  will keep blocking even if a signal is "
"handled, and will return only once the entropy pool has been initialized."
msgstr ""

#. type: Plain text
#: build/C/man3/getentropy.3:124
msgid "B<getrandom>(2), B<urandom>(4), B<random>(7)"
msgstr ""

#. type: TH
#: build/C/man7/random.7:31
#, no-wrap
msgid "2017-03-13"
msgstr ""

#. type: Plain text
#: build/C/man7/random.7:34
msgid "random - overview of interfaces for obtaining randomness"
msgstr ""

#. type: Plain text
#: build/C/man7/random.7:39
msgid ""
"The kernel random-number generator relies on entropy gathered from device "
"drivers and other sources of environmental noise to seed a cryptographically "
"secure pseudorandom number generator (CSPRNG).  It is designed for security, "
"rather than speed."
msgstr ""

#. type: Plain text
#: build/C/man7/random.7:41
msgid "The following interfaces provide access to output from the kernel CSPRNG:"
msgstr ""

#. type: Plain text
#: build/C/man7/random.7:50
msgid ""
"The I</dev/urandom> and I</dev/random> devices, both described in "
"B<random>(4).  These devices have been present on Linux since early times, "
"and are also available on many other systems."
msgstr ""

#. type: Plain text
#: build/C/man7/random.7:76
msgid ""
"The Linux-specific B<getrandom>(2)  system call, available since Linux "
"3.17.  This system call provides access either to the same source as "
"I</dev/urandom> (called the I<urandom> source in this page)  or to the same "
"source as I</dev/random> (called the I<random> source in this page).  The "
"default is the I<urandom> source; the I<random> source is selected by "
"specifying the B<GRND_RANDOM> flag to the system call.  (The "
"B<getentropy>(3)  function provides a slightly more portable interface on "
"top of B<getrandom>(2).)"
msgstr ""

#. type: SS
#: build/C/man7/random.7:76
#, no-wrap
msgid "Initialization of the entropy pool"
msgstr ""

#. type: Plain text
#: build/C/man7/random.7:80
msgid ""
"The kernel collects bits of entropy from the environment.  When a sufficient "
"number of random bits has been collected, the entropy pool is considered to "
"be initialized."
msgstr ""

#. type: SS
#: build/C/man7/random.7:80
#, no-wrap
msgid "Choice of random source"
msgstr ""

#. type: Plain text
#: build/C/man7/random.7:99
msgid ""
"Unless you are doing long-term key generation (and most likely not even "
"then), you probably shouldn't be reading from the I</dev/random> device or "
"employing B<getrandom>(2)  with the B<GRND_RANDOM> flag.  Instead, either "
"read from the I</dev/urandom> device or employ B<getrandom>(2)  without the "
"B<GRND_RANDOM> flag.  The cryptographic algorithms used for the I<urandom> "
"source are quite conservative, and so should be sufficient for all purposes."
msgstr ""

#. type: Plain text
#: build/C/man7/random.7:112
msgid ""
"The disadvantage of B<GRND_RANDOM> and reads from I</dev/random> is that the "
"operation can block for an indefinite period of time.  Furthermore, dealing "
"with the partially fulfilled requests that can occur when using "
"B<GRND_RANDOM> or when reading from I</dev/random> increases code "
"complexity."
msgstr ""

#. type: SS
#: build/C/man7/random.7:112
#, no-wrap
msgid "Monte Carlo and other probabilistic sampling applications"
msgstr ""

#. type: Plain text
#: build/C/man7/random.7:122
msgid ""
"Using these interfaces to provide large quantities of data for Monte Carlo "
"simulations or other programs/algorithms which are doing probabilistic "
"sampling will be slow.  Furthermore, it is unnecessary, because such "
"applications do not need cryptographically secure random numbers.  Instead, "
"use the interfaces described in this page to obtain a small amount of data "
"to seed a user-space pseudorandom number generator for use by such "
"applications."
msgstr ""

#. type: SS
#: build/C/man7/random.7:122
#, no-wrap
msgid "Comparison between getrandom, /dev/urandom, and /dev/random"
msgstr ""

#. type: Plain text
#: build/C/man7/random.7:130
msgid ""
"The following table summarizes the behavior of the various interfaces that "
"can be used to obtain randomness.  B<GRND_NONBLOCK> is a flag that can be "
"used to control the blocking behavior of B<getrandom>(2).  The final column "
"of the table considers the case that can occur in early boot time when the "
"entropy pool is not yet initialized."
msgstr ""

#. type: tbl table
#: build/C/man7/random.7:135
#, no-wrap
msgid "Pool"
msgstr ""

#. type: tbl table
#: build/C/man7/random.7:138
#, no-wrap
msgid ""
"Blocking\n"
"\\%behavior"
msgstr ""

#. type: tbl table
#: build/C/man7/random.7:140
#, no-wrap
msgid "Behavior when pool is not yet ready"
msgstr ""

#. type: tbl table
#: build/C/man7/random.7:143
#, no-wrap
msgid "I</dev/random>"
msgstr ""

#. type: tbl table
#: build/C/man7/random.7:145
#, no-wrap
msgid "Blocking pool"
msgstr ""

#. type: tbl table
#: build/C/man7/random.7:147 build/C/man7/random.7:177
#, no-wrap
msgid "If entropy too low, blocks until there is enough entropy again"
msgstr ""

#. type: tbl table
#: build/C/man7/random.7:149
#, no-wrap
msgid "Blocks until enough entropy gathered"
msgstr ""

#. type: tbl table
#: build/C/man7/random.7:152
#, no-wrap
msgid "I</dev/urandom>"
msgstr ""

#. type: tbl table
#: build/C/man7/random.7:154
#, no-wrap
msgid "CSPRNG output"
msgstr ""

#. type: tbl table
#: build/C/man7/random.7:156
#, no-wrap
msgid "Never blocks"
msgstr ""

#. type: tbl table
#: build/C/man7/random.7:158
#, no-wrap
msgid ""
"Returns output from uninitialized CSPRNG (may be low entropy and unsuitable "
"for cryptography)"
msgstr ""

#. type: tbl table
#: build/C/man7/random.7:161
#, no-wrap
msgid "B<getrandom>()"
msgstr ""

#. type: tbl table
#: build/C/man7/random.7:164 build/C/man7/random.7:186
#, no-wrap
msgid ""
"Same as\n"
"I</dev/urandom>"
msgstr ""

#. type: tbl table
#: build/C/man7/random.7:166 build/C/man7/random.7:188
#, no-wrap
msgid "Does not block once is pool ready"
msgstr ""

#. type: tbl table
#: build/C/man7/random.7:168 build/C/man7/random.7:179
#, no-wrap
msgid "Blocks until pool ready"
msgstr ""

#. type: tbl table
#: build/C/man7/random.7:172
#, no-wrap
msgid ""
"B<getrandom>()\n"
"B<GRND_RANDOM>"
msgstr ""

#. type: tbl table
#: build/C/man7/random.7:175 build/C/man7/random.7:199
#, no-wrap
msgid ""
"Same as\n"
"I</dev/random>"
msgstr ""

#. type: tbl table
#: build/C/man7/random.7:183
#, no-wrap
msgid ""
"B<getrandom>()\n"
"B<GRND_NONBLOCK>"
msgstr ""

#. type: tbl table
#: build/C/man7/random.7:196
#, no-wrap
msgid ""
"B<getrandom>()\n"
"B<GRND_RANDOM>\n"
"+\n"
"B<GRND_NONBLOCK>"
msgstr ""

#. type: tbl table
#: build/C/man7/random.7:202
#, no-wrap
msgid ""
"B<EAGAIN>\n"
"if not enough entropy available"
msgstr ""

#. type: SS
#: build/C/man7/random.7:208
#, no-wrap
msgid "Generating cryptographic keys"
msgstr ""

#. type: Plain text
#: build/C/man7/random.7:216
msgid ""
"The amount of seed material required to generate a cryptographic key equals "
"the effective key size of the key.  For example, a 3072-bit RSA or "
"Diffie-Hellman private key has an effective key size of 128 bits (it "
"requires about 2^128 operations to break) so a key generator needs only 128 "
"bits (16 bytes) of seed material from I</dev/random>."
msgstr ""

#. type: Plain text
#: build/C/man7/random.7:226
msgid ""
"While some safety margin above that minimum is reasonable, as a guard "
"against flaws in the CSPRNG algorithm, no cryptographic primitive available "
"today can hope to promise more than 256 bits of security, so if any program "
"reads more than 256 bits (32 bytes) from the kernel random pool per "
"invocation, or per reasonable reseed interval (not less than one minute), "
"that should be taken as a sign that its cryptography is I<not> skillfully "
"implemented."
msgstr ""

#. type: Plain text
#: build/C/man7/random.7:233
msgid ""
"B<getrandom>(2), B<getauxval>(3), B<getentropy>(3), B<random>(4), "
"B<urandom>(4), B<signal>(7)"
msgstr ""
