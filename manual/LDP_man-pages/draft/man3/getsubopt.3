.\" Copyright (C) 2007 Michael Kerrisk <mtk.manpages@gmail.com>
.\" and Copyright (C) 2007 Justin Pryzby <pryzbyj@justinpryzby.com>
.\"
.\" %%%LICENSE_START(PERMISSIVE_MISC)
.\" Permission is hereby granted, free of charge, to any person obtaining
.\" a copy of this software and associated documentation files (the
.\" "Software"), to deal in the Software without restriction, including
.\" without limitation the rights to use, copy, modify, merge, publish,
.\" distribute, sublicense, and/or sell copies of the Software, and to
.\" permit persons to whom the Software is furnished to do so, subject to
.\" the following conditions:
.\"
.\" The above copyright notice and this permission notice shall be
.\" included in all copies or substantial portions of the Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
.\" EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
.\" IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
.\" CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
.\" TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
.\" SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
.\" %%%LICENSE_END
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 2007  Akihiro MOTOKI
.\"         all rights reserved.
.\" Translated 2007-06-02, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\"
.TH GETSUBOPT 3 2020\-06\-09 GNU "Linux Programmer's Manual"
.SH 名前
getsubopt \- 文字列中のサブオプション引数の解釈を行う
.SH 書式
\fB#include <stdlib.h>\fP
.PP
\fBint getsubopt(char **\fP\fIoptionp\fP\fB, char * const *\fP\fItokens\fP\fB, char
**\fP\fIvaluep\fP\fB);\fP
.PP
.RS -4
glibc 向けの機能検査マクロの要件 (\fBfeature_test_macros\fP(7)  参照):
.RE
.PP
\fBgetsubopt\fP():
.ad l
.RS 4
.PD 0
.\"    || _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
_XOPEN_SOURCE\ >= 500
    || /* glibc 2.12 以降: */ _POSIX_C_SOURCE\ >=\ 200809L
.PD
.RE
.ad
.SH 説明
\fBgetsubopt\fP()  は、 \fIoptionp\fP で与えられたカンマ区切りのサブオプションリストを解析する。
(このようなサブオプションリストは \fBgetopt\fP(3)  を使ってコマンドラインを解釈した場合に現れることが多い。 例えば、
\fBmount\fP(8)  の \fI\-o\fP オプションを見るとよい。)  それぞれのサブオプションには対応する値を指定することができる。
サブオプションの名前と対応する値は等号 (\(aq=\(aq) で区切られる。 例えば、以下のような文字列を \fIoptionp\fP に渡すことができる。
.PP
.in +4n
.EX
\fBro,name=xyz\fP
.EE
.in
.PP
\fItokens\fP 引数はトークンへのポインターの配列へのポインターで、 配列は NULL で終端される。 \fBgetsubopt\fP()
はこのトークンを \fIoptionp\fP 内で探す。 それぞれのトークンは、NULL 終端された 1文字以上の文字列で、
他のトークンと区別できる必要がある。 また、等号とカンマを含んではならない。
.PP
\fBgetsubopt\fP()  は呼び出されるたびに、 \fIoptionp\fP 中の次の未処理のサブオプションの情報を返す。
サブオプション内に等号があった場合、最初の等号は そのサブオプションの名前と値の区切りと解釈される。 区切りから次のカンマ
(最後のサブオプションの場合、文字列の末尾)  までが、サブオプションの値となる。 サブオプションの名前が \fItokens\fP
内の名前と一致し、値を表す文字列が見つかった場合、 \fBgetsubopt\fP()  は \fI*valuep\fP を値を表す文字列のアドレスに設定する。
\fIoptionp\fP 中の最初のカンマはヌルバイトで上書きされる。そのため、 \fI*valuep\fP はそのサブオプションの「値の文字列」そのものとなる。
.PP
サブオプションが認識されたが、値を表す文字列が見つからなかった場合、 *\fIvaluep\fP は NULL に設定される。
.PP
\fBgetsubopt\fP()  が返る時、 \fIoptionp\fP は次のサブオプションを指している。 ちょうど最後のサブオプションが処理された場合は、
文字列末尾のヌルバイト (\(aq\e0\(aq) を指している。
.SH 返り値
\fIoptionp\fP 内でサブオプションが見つかった場合、 \fBgetsubopt\fP()  は最初のサブオプションにマッチする \fItokens\fP
の要素の添字を返す。 見つからなかった場合、\-1 を返す。この場合、 \fI*valuep\fP は \fIname\fP\fB[=\fP\fIvalue\fP\fB]\fP
の文字列全体となる。
.PP
\fI*optionp\fP は変更されるので、 \fBgetsubopt\fP()  を呼び出す前の最初のサブオプションは \fBgetsubopt\fP()
を呼び出し後のサブオプションと必ずしも同じとは限らない。
.SH 属性
この節で使用されている用語の説明については、 \fBattributes\fP(7) を参照。
.TS
allbox;
lb lb lb
l l l.
インターフェース	属性	値
T{
\fBgetsubopt\fP()
T}	Thread safety	MT\-Safe
.TE
.SH 準拠
POSIX.1\-2001, POSIX.1\-2008.
.SH 注意
\fBgetsubopt\fP()  は、文字列 *\fIoptionp\fP 中に見つけたカンマを上書きするので、文字列 \fI*optionp\fP
は書き込み可能でなければならず、 文字列定数にすることはできない。
.SH 例
以下のプログラムは "\-o" オプションに続いてサブオプションがあることを 期待している。
.PP
.EX
#define _XOPEN_SOURCE 500
#include <stdlib.h>
#include <assert.h>
#include <stdio.h>

int
main(int argc, char **argv)
{
    enum {
        RO_OPT = 0,
        RW_OPT,
        NAME_OPT
    };
    char *const token[] = {
        [RO_OPT]   = "ro",
        [RW_OPT]   = "rw",
        [NAME_OPT] = "name",
        NULL
    };
    char *subopts;
    char *value;
    int opt;

    int readonly = 0;
    int readwrite = 0;
    char *name = NULL;
    int errfnd = 0;

    while ((opt = getopt(argc, argv, "o:")) != \-1) {
        switch (opt) {
        case \(aqo\(aq:
            subopts = optarg;
            while (*subopts != \(aq\e0\(aq && !errfnd) {

            switch (getsubopt(&subopts, token, &value)) {
            case RO_OPT:
                readonly = 1;
                break;

            case RW_OPT:
                readwrite = 1;
                break;

            case NAME_OPT:
                if (value == NULL) {
                    fprintf(stderr, "Missing value for "
                            "suboption \(aq%s\(aq\en", token[NAME_OPT]);
                    errfnd = 1;
                    continue;
                }

                name = value;
                break;

            default:
                fprintf(stderr, "No match found "
                        "for token: /%s/\en", value);
                errfnd = 1;
                break;
            }
        }
        if (readwrite && readonly) {
            fprintf(stderr, "Only one of \(aq%s\(aq and \(aq%s\(aq can be "
                    "specified\en", token[RO_OPT], token[RW_OPT]);
            errfnd = 1;
        }
        break;

        default:
            errfnd = 1;
        }
    }

    if (errfnd || argc == 1) {
        fprintf(stderr, "\enUsage: %s \-o <suboptstring>\en", argv[0]);
        fprintf(stderr, "suboptions are \(aqro\(aq, \(aqrw\(aq, "
                "and \(aqname=<value>\(aq\en");
        exit(EXIT_FAILURE);
    }

    /* Remainder of program... */

    exit(EXIT_SUCCESS);
}
.EE
.SH 関連項目
\fBgetopt\fP(3)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
