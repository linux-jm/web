.\" %%%LICENSE_START(PUBLIC_DOMAIN)
.\" This page is in the public domain.
.\" %%%LICENSE_END
.\"
.\" Almost all details are from RFC 2553.
.\"
.\" 2004-12-14, mtk, Added EAI_OVERFLOW error
.\" 2004-12-14 Fixed description of error return
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Translated 2005-02-26, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2007-01-07, Akihiro MOTOKI, LDP v2.43
.\" Updated 2008-08-11, Akihiro MOTOKI, LDP v3.05
.\" Updated 2010-04-10, Akihiro MOTOKI, LDP v3.24
.\"
.TH GETNAMEINFO 3 2020\-06\-09 GNU "Linux Programmer's Manual"
.SH 名前
getnameinfo \- アドレスから名前への変換をプロトコルに依存しないかたちで行う
.SH 書式
.nf
\fB#include <sys/socket.h>\fP
\fB#include <netdb.h>\fP
.PP
\fBint getnameinfo(const struct sockaddr *\fP\fIaddr\fP\fB, socklen_t \fP\fIaddrlen\fP\fB,\fP
\fB                char *\fP\fIhost\fP\fB, socklen_t \fP\fIhostlen\fP\fB,\fP
\fB                char *\fP\fIserv\fP\fB, socklen_t \fP\fIservlen\fP\fB, int \fP\fIflags\fP\fB);\fP
.fi
.PP
.RS -4
glibc 向けの機能検査マクロの要件 (\fBfeature_test_macros\fP(7)  参照):
.ad l
.RE
.PP
\fBgetnameinfo\fP():
    glibc 2.22 以降: _POSIX_C_SOURCE >= 200112L
    glibc 2.21 以前: _POSIX_C_SOURCE
.ad b
.SH 説明
\fBgetnameinfo\fP()  関数は、 \fBgetaddrinfo\fP(3)  の逆の動作を行う。つまり、プロトコルに依存しないかたちで
ソケットアドレスから対応するホスト名とサービスへの変換を行う。 この関数は \fBgethostbyaddr\fP(3)  と
\fBgetservbyport\fP(3)  の機能を一つにしたものだが、 これらの関数と違い、 \fBgetnameinfo\fP(3)
はリエントラントであり、IPv4 と IPv6 の差分に依存しないかたちで プログラムを書くことができる。
.PP
\fIaddr\fP 引数は、 IP アドレスとポート番号の情報を保持している 汎用的なソケットアドレス構造体 (\fIsockaddr_in\fP 型または
\fIsockaddr_in6\fP 型) へのポインターである。 \fIaddrlen\fP は \fIaddr\fP のサイズである。 \fIhost\fP と
\fIserv\fP 引数は、(それぞれサイズが \fIhostlen\fP と \fIservlen\fP の) 呼び出し側で確保されたバッファーへのポインターであり、
ホスト名とサービス名を含むヌル終端された文字列が それぞれのバッファーに格納される。
.PP
ホスト名が不要であることをこの関数に伝えるには、 \fIhost\fP に NULL を指定するか、 \fIhostlen\fP に 0
を指定する。同様に、サービス名が不要な場合は、 \fIserv\fP に NULL を指定するか、 \fIservlen\fP に 0 を指定する。
しかし、ホスト名とサービス名の両方を不要だと指定することはできない (いずれか一方は要求すること)。
.PP
\fIflags\fP 引数で \fBgetnameinfo\fP()  の動作を変えることができる。指定できる値は以下の通り:
.TP 
\fBNI_NAMEREQD\fP
指定すると、ホスト名が決定できなかった場合にエラーを返す。
.TP 
\fBNI_DGRAM\fP
指定すると、ストリームベース (TCP) でなくデータグラムベース (UDP)  のサービスを対象にする。数は少ないが、 UDP と TCP
で違うサービスを提供しているポート (512\(en514) に対して必要となる。
.TP 
\fBNI_NOFQDN\fP
指定すると、ローカルなホストには fully qualified domain name (FQDN) の ホスト名の部分のみを返す。
.TP 
\fBNI_NUMERICHOST\fP
.\" For example, by calling
.\" .BR inet_ntop ()
.\" instead of
.\" .BR gethostbyaddr ().
.\" POSIX.1-2001 TC1 has NI_NUMERICSCOPE, but glibc doesn't have it.
指定すると、数値形式のホスト名が返される。 (指定しなくても、ノードの名前が決定できない場合は数値形式が返ることがある)。
.TP 
\fBNI_NUMERICSERV\fP
指定すると、数値形式のサービス名 (例えばポート番号) が返される (指定しなくても、サービス名が決定できない場合は数値形式が返ることがある)。
.SS "国際化ドメイン名のための getnameinfo() の拡張"
glibc 2.3.4 から、 \fBgetnameinfo\fP()  に拡張が行われ、ホスト名と 国際化ドメイン名 (Internationalized
Domain Name; IDN) 形式との間で 透過的な変換ができるようになっている (IDN 形式については RFC 3490 の
\fIInternationalizing Domain Names in Applications (IDNA)\fP
を参照)。3つのフラグが新たに定義されている:
.TP 
\fBNI_IDN\fP
このフラグを指定すると、必要であれば、検索処理で見つかった名前は IDN 形式からロケールに応じた符号化形式に変換される。 ASCII
文字だけの名前はこの変換では影響を受けない。このため、 既存のプログラムや環境でこのフラグを使うことができる。
.TP 
\fBNI_IDN_ALLOW_UNASSIGNED\fP, \fBNI_IDN_USE_STD3_ASCII_RULES\fP
これらのフラグをセットすると、IDNA 処理で使用されるフラグ IDNA_ALLOW_UNASSIGNED (未割り当ての Unicode
のコードポイントを許容) と IDNA_USE_STD3_ASCII_RULES (出力が STD3 準拠のホスト名かをチェックする)
がそれぞれ有効になる。
.SH 返り値
.\" FIXME glibc defines the following additional errors, some which
.\" can probably be returned by getnameinfo(); they need to
.\" be documented.
.\"
.\"     #ifdef __USE_GNU
.\"     #define EAI_INPROGRESS  -100  /* Processing request in progress.  */
.\"     #define EAI_CANCELED    -101  /* Request canceled.  */
.\"     #define EAI_NOTCANCELED -102  /* Request not canceled.  */
.\"     #define EAI_ALLDONE     -103  /* All requests done.  */
.\"     #define EAI_INTR        -104  /* Interrupted by a signal.  */
.\"     #define EAI_IDN_ENCODE  -105  /* IDN encoding failed.  */
.\"     #endif
成功すると 0 が返り、(要求されていれば) ノードとサービスの名前がヌル終端された文字列の形式でそれぞれの指定バッファーに返される
(バッファーの長さにあうように縮められるかもしれない)。 エラーの場合は、以下の 0 以外のエラーコードが返される:
.TP 
\fBEAI_AGAIN\fP
指定された名前が現時点では解決できなかった。 後で再試行してみること。
.TP 
\fBEAI_BADFLAGS\fP
\fIflags\fP 引数に不正な値が与えられた。
.TP 
\fBEAI_FAIL\fP
回復できないエラーが発生した。
.TP 
\fBEAI_FAMILY\fP
指定したアドレスファミリーが認識できなかった。 あるいはアドレスの長さが指定されたファミリーに合うものでなかった。
.TP 
\fBEAI_MEMORY\fP
メモリーが足りない。
.TP 
\fBEAI_NONAME\fP
与えられたパラメーターでは名前が解決できない。 \fBNI_NAMEREQD\fP が設定されていたがホスト名が決定できなかったか、
ホスト名もサービス名も要求されなかった。
.TP 
\fBEAI_OVERFLOW\fP
\fIhost\fP または \fIserv\fP が指しているバッファーが小さすぎた。
.TP 
\fBEAI_SYSTEM\fP
システムエラーが起った。 エラーコードは \fIerrno\fP に設定される。
.PP
\fBgai_strerror\fP(3) 関数を使うと、 これらのエラーコードを、 エラーレポートに適した人間が読みやすい文字列に翻訳してくれる。
.SH ファイル
\fI/etc/hosts\fP
.br
\fI/etc/nsswitch.conf\fP
.br
\fI/etc/resolv.conf\fP
.SH バージョン
\fBgetnameinfo\fP()  は、glibc バージョン 2.1 以降で提供されている。
.SH 属性
この節で使用されている用語の説明は \fBattributes\fP(7) を参照のこと。
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
\fBgetnameinfo\fP()
T}	Thread safety	MT\-Safe env locale
.TE
.sp 1
.SH 準拠
POSIX.1\-2001, POSIX.1\-2008, RFC\ 2553.
.SH 注意
適切なバッファーサイズを選択できるように、 \fI<netdb.h>\fP に以下の定数が定義されている。
.PP
.in +4n
.EX
#define NI_MAXHOST      1025
#define NI_MAXSERV      32
.EE
.in
.PP
Since glibc 2.8, these definitions are exposed only if suitable feature test
macros are defined, namely: \fB_GNU_SOURCE\fP, \fB_DEFAULT_SOURCE\fP (since glibc
2.19), or (in glibc versions up to and including 2.19)  \fB_BSD_SOURCE\fP or
\fB_SVID_SOURCE\fP.
.PP
前者は、最近のバージョンの BIND のヘッダーファイル \fI<arpa/nameser.h>\fP 中の定数 \fBMAXDNAME\fP
と同じ値である。 後者は、割り当て済の数値について記した現在の RFC に 列挙されてサービスから推量した値である。
.PP
glibc バージョン 2.2 より前では、 引数 \fIhostlen\fP, \fIservlen\fP の型は \fIsize_t\fP であった。
.SH 例
以下のコードは、指定されたソケットアドレスに対する ホストとサービスの数値表式を取得しようと試みる。 特定のアドレスファミリーに対する参照情報は
一切ハードコードされていないことに着目してほしい。
.PP
.in +4n
.EX
struct sockaddr *addr;     /* input */
socklen_t addrlen;         /* input */
char hbuf[NI_MAXHOST], sbuf[NI_MAXSERV];

if (getnameinfo(addr, addrlen, hbuf, sizeof(hbuf), sbuf,
            sizeof(sbuf), NI_NUMERICHOST | NI_NUMERICSERV) == 0)
    printf("host=%s, serv=%s\en", hbuf, sbuf);
.EE
.in
.PP
以下ではソケットアドレスに 逆向きのアドレスマッピングが存在するかをチェックしている。
.PP
.in +4n
.EX
struct sockaddr *addr;     /* input */
socklen_t addrlen;         /* input */
char hbuf[NI_MAXHOST];

if (getnameinfo(addr, addrlen, hbuf, sizeof(hbuf),
            NULL, 0, NI_NAMEREQD))
    printf("could not resolve hostname");
else
    printf("host=%s\en", hbuf);
.EE
.in
.PP
\fBgetnameinfo\fP()  を使ったプログラム例が \fBgetaddrinfo\fP(3)  に記載されている。
.SH 関連項目
\fBaccept\fP(2), \fBgetpeername\fP(2), \fBgetsockname\fP(2), \fBrecvfrom\fP(2),
\fBsocket\fP(2), \fBgetaddrinfo\fP(3), \fBgethostbyaddr\fP(3), \fBgetservbyname\fP(3),
\fBgetservbyport\fP(3), \fBinet_ntop\fP(3), \fBhosts\fP(5), \fBservices\fP(5),
\fBhostname\fP(7), \fBnamed\fP(8)
.PP
R.\& Gilligan, S.\& Thomson, J.\& Bound and W.\& Stevens, \fIBasic Socket
Interface Extensions for IPv6\fP, RFC\ 2553, March 1999.
.PP
Tatsuya Jinmei and Atsushi Onoe, \fIAn Extension of Format for IPv6 Scoped
Addresses\fP, internet draft, work in progress
.UR ftp://ftp.ietf.org\:/internet\-drafts\:/draft\-ietf\-ipngwg\-scopedaddr\-format\-02.txt
.UE .
.PP
Craig Metz, \fIProtocol Independence Using the Sockets API\fP, Proceedings of
the freenix track: 2000 USENIX annual technical conference, June 2000
.ad l
.UR http://www.usenix.org\:/publications\:/library\:/proceedings\:/usenix2000\:/freenix\:/metzprotocol.html
.UE .
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
