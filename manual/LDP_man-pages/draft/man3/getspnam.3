.\" Copyright (c) 2003 Andries Brouwer (aeb@cwi.nl) and
.\" Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 2004 Yuichi SATO
.\"         all rights reserved.
.\" Translated 2004-08-20, Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated 2013-03-25, Akihiro MOTOKI <amotoki@gmail.com>
.\" Updated 2013-07-17, Akihiro MOTOKI <amotoki@gmail.com>
.\"
.TH GETSPNAM 3 2017\-09\-15 GNU "Linux Programmer's Manual"
.SH 名前
getspnam, getspnam_r, getspent, getspent_r, setspent, endspent,fgetspent,
fgetspent_r, sgetspent, sgetspent_r, putspent, lckpwdf, ulckpwdf \- shadow
パスワードファイルのエントリーを取得する
.SH 書式
.nf
/* 一般的な shadow パスワードファイル API */
\fB#include <shadow.h>\fP
.PP
\fBstruct spwd *getspnam(const char *\fP\fIname\fP\fB);\fP
.PP
\fBstruct spwd *getspent(void);\fP
.PP
\fBvoid setspent(void);\fP
.PP
\fBvoid endspent(void);\fP
.PP
\fBstruct spwd *fgetspent(FILE *\fP\fIstream\fP\fB);\fP
.PP
\fBstruct spwd *sgetspent(const char *\fP\fIs\fP\fB);\fP
.PP
\fBint putspent(const struct spwd *\fP\fIp\fP\fB, FILE *\fP\fIstream\fP\fB);\fP
.PP
\fBint lckpwdf(void);\fP
.PP
\fBint ulckpwdf(void);\fP

/* GNU による拡張 */
\fB#include <shadow.h>\fP
.PP
\fBint getspent_r(struct spwd *\fP\fIspbuf\fP\fB,\fP
\fB        char *\fP\fIbuf\fP\fB, size_t \fP\fIbuflen\fP\fB, struct spwd **\fP\fIspbufp\fP\fB);\fP
.PP
\fBint getspnam_r(const char *\fP\fIname\fP\fB, struct spwd *\fP\fIspbuf\fP\fB,\fP
\fB        char *\fP\fIbuf\fP\fB, size_t \fP\fIbuflen\fP\fB, struct spwd **\fP\fIspbufp\fP\fB);\fP
.PP
\fBint fgetspent_r(FILE *\fP\fIstream\fP\fB, struct spwd *\fP\fIspbuf\fP\fB,\fP
\fB        char *\fP\fIbuf\fP\fB, size_t \fP\fIbuflen\fP\fB, struct spwd **\fP\fIspbufp\fP\fB);\fP
.PP
\fBint sgetspent_r(const char *\fP\fIs\fP\fB, struct spwd *\fP\fIspbuf\fP\fB,\fP
\fB        char *\fP\fIbuf\fP\fB, size_t \fP\fIbuflen\fP\fB, struct spwd **\fP\fIspbufp\fP\fB);\fP
.fi
.PP
.RS -4
glibc 向けの機能検査マクロの要件 (\fBfeature_test_macros\fP(7)  参照):
.RE
.PP
.ad l
\fBgetspent_r\fP(),
\fBgetspnam_r\fP(),
\fBfgetspent_r\fP(),
\fBsgetspent_r\fP():
    glibc 2.19 以降:
        _DEFAULT_SOURCE
    glibc 2.19 以前:
        _BSD_SOURCE || _SVID_SOURCE
.ad b
.SH 説明
昔は暗号化されたパスワードをパスワードファイルに 見えるように公開しておいても安全だと考えられていた。 Julianne Frances Haugh は
shadow パスワードスイートを実装した。 これは暗号化されたパスワードを、root のみが読むことができる shadow パスワードデータベース
(例えば、 ローカルの shadow パスワードファイル \fI/etc/shadow\fP, NIS, LDAP)  に保持する。
.PP
.\" FIXME . I've commented out the following for the
.\" moment.  The relationship between PAM and nsswitch.conf needs
.\" to be clearly documented in one place, which is pointed to by
.\" the pages for the user, group, and shadow password functions.
.\" (Jul 2005, mtk)
.\"
.\" This shadow password setup has been superseded by PAM
.\" (pluggable authentication modules), and the file
.\" .I /etc/nsswitch.conf
.\" now describes the sources to be used.
以下で説明する関数は、伝統的なパスワードデータベースに対する 関数に似ている (例えば \fBgetpwnam\fP(3)  や \fBgetpwent\fP(3)
を参照)。
.PP
\fBgetspnam\fP()  関数は、ユーザー名 \fIname\fP にマッチする shadow パスワードデータベースのエントリーを
要素毎に分解し、各要素を格納した構造体へのポインターを返す。
.PP
.\" some systems require a call of setspent() before the first getspent()
.\" glibc does not
\fBgetspent\fP()  関数は shadow パスワードデータベースにおける次のエントリーへのポインターを返す。 入力ストリームにおける位置は、
\fBsetspent\fP()  で初期化される。 読み込みが終わった後に、 \fBendspent\fP()  を呼び出すと、リソースを解放できる。
.PP
\fBfgetspent\fP()  関数は \fBgetspent\fP()  に似ているが、 \fBsetspent\fP()
で暗黙のうちにオープンされるストリームではなく、与えられたストリームを使う。
.PP
\fBsgetspent\fP()  関数は与えられた文字列 \fIs\fP を解析し struct \fIspwd\fP に格納する。
.PP
\fBputspent\fP()  関数は与えられた struct \fIspwd\fP \fI*p\fP の内容を shadow パスワードファイル形式のテキスト行で
\fIstream\fP に書き出す。 空文字列として、 値が NULL の文字列エントリーと値が \-1 の数値エントリーが 書き出される。
.PP
\fBlckpwdf\fP()  関数は、 shadow パスワードデータベースを 多重同時アクセスから守るためのものである。 この関数はロックの獲得を試み、
成功した場合は 0 を返す。 失敗した場合 (15 秒以内にロックが取得できなかった場合) は \-1 を返す。 \fBulckpwdf\fP()
関数はロックを再び解放する。 shadow パスワードファイルへの直接アクセスから 保護する手段がない点に注意すること。 \fBlckpwdf\fP()
を使うプログラムだけがロックを通知できる。
.PP
.\" Also in libc5
.\" SUN doesn't have sgetspent()
これらの関数はオリジナルの shadow API を構成していた関数であり、 いろいろなシステムで広く利用可能である。
.SS リエントラント版
パスワードデータベースに対するリエントラント版と同じように、 glibc には shadow パスワードファイルに対してリエントラント版がある。
\fBgetspnam_r\fP()  関数は \fBgetspnam\fP()  と似ているが、取得した shadow パスワード構造体を \fIspbuf\fP
が指す領域に格納する。 shadow パスワード構造体は文字列群へのポインターを含み、 これらの文字列群はサイズ \fIbuflen\fP のバッファー
\fIbuf\fP に格納される。 \fI*spbufp\fP には (成功した場合は) 結果へのポインターが格納され、
(エントリーが見つからなかった場合またはエラーが起こった場合は)  NULL が格納される。
.PP
関数 \fBgetspent_r\fP(), \fBfgetspent_r\fP(), \fBsgetspent_r\fP()
はそれぞれリエントラントでないバージョンと同様の機能を持つ。
.PP
.\" SUN doesn't have sgetspent_r()
glibc でないシステムにもこれらと同じ名前の関数があるが、 プロトタイプが異なることも多い。
.SS 構造体
shadow パスワード構造体は \fI<shadow.h>\fP で以下のように定義されている:
.PP
.in +4n
.EX
struct spwd {
    char *sp_namp;     /* ログイン名 */
    char *sp_pwdp;     /* 暗号化されたパスワード */
    long  sp_lstchg;   /* 最終更新日
                          (1970\-01\-01 00:00:00 +0000 (UTC)
                           からの日数) */
    long  sp_min;      /* 変更が出来るようになるまでの最短日数 */
    long  sp_max;      /* 変更をしなくてもよい最長日数 */
    long  sp_warn;     /* パスワードが期限切れになる前に
                          ユーザーに変更の警告を出す日数 */
    long  sp_inact;    /* パスワードが期限切れになってから
                          アカウントが無効になるまでの日数 */
    long  sp_expire;   /* アカウントが無効になる日付
                          (1970\-01\-01 00:00:00 +0000 (UTC)
                           からの日数) */
    unsigned long sp_flag;  /* 予約フィールド */
};
.EE
.in
.SH 返り値
ポインターを返す関数は、これ以上エントリーがない場合や 処理中にエラーが発生した場合 NULL を返す。 \fIint\fP を返り値として持つ関数は、
成功した場合 0 を返し、失敗した場合、 \-1 を返し、 \fIerrno\fP にエラーの原因を示す値を設定する。
.PP
リエントラント版でない関数では、返り値が静的な領域を指しており、 引き続いてこれらの関数を呼び出した場合に上書きされる可能性がある。
.PP
リエントラント版の関数は、成功した場合に 0 を返す。 エラーの場合は、エラー番号が返される。
.SH エラー
.TP 
\fBEACCES\fP
呼び出し元が shadow パスワードファイルにアクセスする許可を持っていない。
.TP 
\fBERANGE\fP
与えられたバッファーが小さすぎる。
.SH ファイル
.TP 
\fI/etc/shadow\fP
ローカルの shadow パスワードデータベースファイル
.TP 
\fI/etc/.pwd.lock\fP
ロックファイル
.PP
インクルードファイル \fI<paths.h>\fP は定数 \fB_PATH_SHADOW\fP を定義している。 これは shadow
パスワードファイルのパス名である。
.SH 属性
この節で使用されている用語の説明については、 \fBattributes\fP(7) を参照。
.TS
allbox;
lbw13 lb lbw30
l l l.
インターフェース	属性	値
T{
\fBgetspnam\fP()
T}	Thread safety	T{
MT\-Unsafe race:getspnam locale
T}
T{
\fBgetspent\fP()
T}	Thread safety	T{
MT\-Unsafe race:getspent
.br
race:spentbuf locale
T}
T{
\fBsetspent\fP(),
.br
\fBendspent\fP(),
.br
\fBgetspent_r\fP()
T}	Thread safety	T{
MT\-Unsafe race:getspent locale
T}
T{
\fBfgetspent\fP()
T}	Thread safety	MT\-Unsafe race:fgetspent
T{
\fBsgetspent\fP()
T}	Thread safety	MT\-Unsafe race:sgetspent
T{
\fBputspent\fP(),
.br
\fBgetspnam_r\fP(),
.br
\fBsgetspent_r\fP()
T}	Thread safety	MT\-Safe locale
T{
\fBlckpwdf\fP(),
.br
\fBulckpwdf\fP(),
.br
\fBfgetspent_r\fP()
T}	Thread safety	MT\-Safe
.TE
.sp 1
In the above table, \fIgetspent\fP in \fIrace:getspent\fP signifies that if any of
the functions \fBsetspent\fP(), \fBgetspent\fP(), \fBgetspent_r\fP(), or
\fBendspent\fP()  are used in parallel in different threads of a program, then
data races could occur.
.SH 準拠
shadow パスワードデータベースと関連 API は POSIX.1 には記載されていない。しかしながら、多くの他のシステムでも 同様の API
が提供されている。
.SH 関連項目
\fBgetgrnam\fP(3), \fBgetpwnam\fP(3), \fBgetpwnam_r\fP(3), \fBshadow\fP(5)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
