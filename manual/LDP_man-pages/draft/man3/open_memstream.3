.\" Copyright 2005, 2012, 2016 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under the GPL.
.\" %%%LICENSE_END
.\"
.\" 2008-12-04, Petr Baudis <pasky@suse.cz>: Document open_wmemstream()
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH OPEN_MEMSTREAM 3 2020\-06\-09 GNU "Linux Programmer's Manual"
.SH 名前
open_memstream, open_wmemstream \- open a dynamic memory buffer stream
.SH 書式
.nf
\fB#include <stdio.h>\fP
.PP
\fBFILE *open_memstream(char **\fP\fIptr\fP\fB, size_t *\fP\fIsizeloc\fP\fB);\fP

\fB#include <wchar.h>\fP
.PP
\fBFILE *open_wmemstream(wchar_t **\fP\fIptr\fP\fB, size_t *\fP\fIsizeloc\fP\fB);\fP
.fi
.PP
.RS -4
glibc 向けの機能検査マクロの要件 (\fBfeature_test_macros\fP(7)  参照):
.RE
.PP
\fBopen_memstream\fP(), \fBopen_wmemstream\fP():
.PD 0
.ad l
.RS 4
.TP  4
glibc 2.10 以降:
_POSIX_C_SOURCE\ >=\ 200809L
.TP 
glibc 2.10 より前:
_GNU_SOURCE
.RE
.ad
.PD
.SH 説明
The \fBopen_memstream\fP()  function opens a stream for writing to a memory
buffer.  The function dynamically allocates the buffer, and the buffer
automatically grows as needed.  Initially, the buffer has a size of zero.
After closing the stream, the caller should \fBfree\fP(3)  this buffer.
.PP
The locations pointed to by \fIptr\fP and \fIsizeloc\fP are used to report,
respectively, the current location and the size of the buffer.  The
locations referred to by these pointers are updated each time the stream is
flushed (\fBfflush\fP(3))  and when the stream is closed (\fBfclose\fP(3)).  These
values remain valid only as long as the caller performs no further output on
the stream.  If further output is performed, then the stream must again be
flushed before trying to access these values.
.PP
バッファー末尾のヌルバイトは保持される。 このヌルバイトは \fIsizeloc\fP に格納されるサイズには「含まれない」。
.PP
The stream maintains the notion of a current position, which is initially
zero (the start of the buffer).  Each write operation implicitly adjusts the
buffer position.  The stream's buffer position can be explicitly changed
with \fBfseek\fP(3)  or \fBfseeko\fP(3).  Moving the buffer position past the end
of the data already written fills the intervening space with null
characters.
.PP
\fBopen_wmemstream\fP()  は \fBopen_memstream\fP()
と同様だが、バイトではなくワイド文字に対して操作を行う点が異なる。
.SH 返り値
成功して終了した場合には、 \fBopen_memstream\fP(), \fBopen_wmemstream\fP()  は \fIFILE\fP ポインターを返す。
失敗した場合は、 NULL を返し、 \fIerrno\fP にエラーを示す値をセットする。
.SH バージョン
\fBopen_memstream\fP() は glibc 1.0.x ですでに利用可能であった。 \fBopen_wmemstream\fP() は glibc
2.4 以降で利用可能である。
.SH 属性
この節で使用されている用語の説明については、 \fBattributes\fP(7) を参照。
.TS
allbox;
lb lb lb
l l l.
インターフェース	属性	値
T{
\fBopen_memstream\fP(),
.br
\fBopen_wmemstream\fP
T}	Thread safety	MT\-Safe
.TE
.sp 1
.SH 準拠
POSIX.1\-2008.  これらの関数は POSIX.1\-2001 では規定れていないが、 Linux 以外のシステムで広く利用可能である。
.SH 注意
これらの関数が返すファイルストリームに対応するファイル ディスクリプターはない (つまり、返されたストリームに対して \fBfileno\fP(3)
を呼び出すとエラーが返ることになる)。
.SH バグ
.\" http://sourceware.org/bugzilla/show_bug.cgi?id=1996
バージョン 2.7 より前の glibc では、 \fBopen_memstream\fP()
で作成されたストリームの末尾より先にファイル位置を動かしても、 バッファーが伸長されず、 \fBfseek\fP(3)  が失敗し \-1 が返る。
.SH 例
\fBfmemopen\fP(3) 参照。
.SH 関連項目
\fBfmemopen\fP(3), \fBfopen\fP(3), \fBsetbuf\fP(3)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
