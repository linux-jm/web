.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\" and Copyright (c) 2014 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 17:51:15 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified 11 May 1998 by Joseph S. Myers (jsm28@cam.ac.uk)
.\" Modified 14 May 2001, 23 Sep 2001 by aeb
.\" 2004-12-20, mtk
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 1996 Shoichi OZAWA
.\"	all right reserved.
.\" Translated 1996-09-01, Shoichi OZAWA <ozawa@omika.hitachi.co.jp>
.\" Updated 2001-03-19, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2001-10-16, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2005-02-27, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\"
.TH SYSTEM 3 2019\-03\-06 "" "Linux Programmer's Manual"
.SH 名前
system \- シェルコマンドの実行
.SH 書式
.nf
\fB#include <stdlib.h>\fP
.PP
\fBint system(const char *\fP\fIcommand\fP\fB);\fP
.fi
.SH 説明
\fBsystem\fP() ライブラリ関数は、\fBfork\fP(2) を使って子プロセスを作成し、その子プロセスは以下のように \fIcommand\fP
で指定されたシェルコマンドを \fBexecl\fP(3) を使って実行する。
.PP
.in +4n
.EX
execl("/bin/sh", "sh", "\-c", command, (char *) NULL);
.EE
.in
.PP
\fBsystem\fP() が返るのはコマンドが完了した後である。
.PP
コマンドの実行中は、 \fBsystem\fP() を呼び出したプロセスでは、 \fBSIGCHLD\fP はブロックされ、 \fBSIGINT\fP と
\fBSIGQUIT\fP は無視される (\fIcommand\fP を実行する子プロセスでは、これらのシグナルはデフォルトの処理方法にしたがって処理される)。
.PP
\fIcommand\fP が NULL の場合、 \fBsystem\fP()  はそのシステムでシェルが利用可能かを示すステータスを返す。
.SH 返り値
\fBsystem\fP() の返り値は以下のいずれかである。
.IP * 3
\fIcommand\fP が NULL の場合、 シェルが利用可能ならゼロ以外の値、利用不可なら 0。
.IP *
If a child process could not be created, or its status could not be
retrieved, the return value is \-1 and \fIerrno\fP is set to indicate the error.
.IP *
子プロセスでシェルを実行できなかった場合、 返り値は子プロセスがステータス 127 で \fB_exit\fP(2) を呼び出して終了したのと同じになる。
.IP *
システムコールがすべて成功した場合、 返り値は \fIcommand\fP を実行するのに使用された子プロセスのシェルの終了ステータスとなる
(シェルの終了ステータスはそのシェルが実行した最後のコマンドの終了ステータスである)。
.PP
最後の 2 つの場合、返り値は "wait status" であり、 \fBwaitpid\fP(2) に書かれているマクロ (つまり
\fBWIFEXITED\fP() や \fBWEXITSTATUS\fP() などのマクロ) を使って検査することができる。
.PP
\fBsystem\fP()  は他の子プロセスのウエイトステータスには影響を与えない。
.SH エラー
\fBsystem\fP()  can fail with any of the same errors as \fBfork\fP(2).
.SH 属性
この節で使用されている用語の説明については、 \fBattributes\fP(7) を参照。
.TS
allbox;
lb lb lb
l l l.
インターフェース	属性	値
T{
\fBsystem\fP()
T}	Thread safety	MT\-Safe
.TE
.SH 準拠
POSIX.1\-2001, POSIX.1\-2008, C89, C99.
.SH 注意
\fBsystem\fP() により簡便性と利便性がもたらされる。この関数は \fBfork\fP(2), \fBexecl\fP(3), \fBwaitpid\fP(2)
の呼び出しにおける詳細をすべて行うとともに、 シグナルの適切な処理も行う。 また、シェルは \fIcommand\fP に対して通常の置換
(substitutions) と I/O リダイレクトを行う。 \fBsystem\fP() を使用することによる主なコストは非効率性である。
シェルを実行するプロセスを作成するためとそのシェルを実行するために、余計にシステムコールが必要となる。
.PP
(「どの」ヘッダーファイルをインクルードするよりも前に)  機能検査マクロ \fB_XOPEN_SOURCE\fP が定義された場合には、
\fBwaitpid\fP(2)  で説明されているマクロ群 (\fBWEXITSTATUS\fP()  等) が \fI<stdlib.h>\fP
をインクルードすると利用可能になる。
.PP
既に述べたように、 \fBsystem\fP()  は \fBSIGINT\fP と \fBSIGQUIT\fP を無視する。 よってループから \fBsystem\fP()
を呼ぶプログラムは、 以下の例のように子プロセスの終了状態を自分でチェックしておかないと、 中断できなくなるかもしれない。
.PP
.in +4n
.EX
while (something) {
    int ret = system("foo");

    if (WIFSIGNALED(ret) &&
        (WTERMSIG(ret) == SIGINT || WTERMSIG(ret) == SIGQUIT))
            break;
}
.EE
.in
.PP
According to POSIX.1, it is unspecified whether handlers registered using
\fBpthread_atfork\fP(3)  are called during the execution of \fBsystem\fP().  In
the glibc implementation, such handlers are not called.
.PP
glibc 2.1.3 より前のバージョンでは、 \fIcommand\fP が NULL の場合に \fI/bin/sh\fP
が利用可能かどうかのチェックは実際には行わず、 いつでも利用可能であるとみなしていた。 \fBsystem\fP()  はこの場合に常に 1 を返していた。
POSIX.1\-2001 ではシェルが提供されているという標準に準拠した実装を 要求しているが、glibc 2.1.3
以降ではシェルのチェックを実行している。 なぜなら、呼び出し元のプログラムが \fBsystem\fP()  を呼び出すより前に (POSIX.1\-2001
では規定されていない)  \fBchroot\fP(2)  を呼び出していた時には、シェルが利用可能でない場合や実行可能ファイル でない場合があるからである。
.PP
.\"
シェルコマンドがステータス 127 で終了することもある。 この場合、\fBsystem\fP()
の返り値は、子プロセスでシェルが実行できなかった場合と区別できない。
.SS Caveats
Do not use \fBsystem\fP()  from a privileged program (a set\-user\-ID or
set\-group\-ID program, or a program with capabilities)  because strange
values for some environment variables might be used to subvert system
integrity.  For example, \fBPATH\fP could be manipulated so that an arbitrary
program is executed with privilege.  Use the \fBexec\fP(3)  family of functions
instead, but not \fBexeclp\fP(3)  or \fBexecvp\fP(3)  (which also use the \fBPATH\fP
environment variable to search for an executable).
.PP
\fBsystem\fP()  will not, in fact, work properly from programs with set\-user\-ID
or set\-group\-ID privileges on systems on which \fI/bin/sh\fP is bash version 2:
as a security measure, bash 2 drops privileges on startup.  (Debian uses a
different shell, \fBdash\fP(1), which does not do this when invoked as \fBsh\fP.)
.PP
Any user input that is employed as part of \fIcommand\fP should be \fIcarefully\fP
sanitized, to ensure that unexpected shell commands or command options are
not executed.  Such risks are especially grave when using \fBsystem\fP()  from
a privileged program.
.SH 関連項目
\fBsh\fP(1), \fBexecve\fP(2), \fBfork\fP(2), \fBsigaction\fP(2), \fBsigprocmask\fP(2),
\fBwait\fP(2), \fBexec\fP(3), \fBsignal\fP(7)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
