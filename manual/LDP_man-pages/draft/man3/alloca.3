.\" Copyright (c) 1980, 1991 Regents of the University of California.
.\" All rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)alloca.3	5.1 (Berkeley) 5/2/91
.\"
.\" Converted Mon Nov 29 11:05:55 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Tue Oct 22 23:41:56 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2002-07-17, aeb
.\" 2008-01-24, mtk:
.\"     Various rewrites and additions (notes on longjmp() and SIGSEGV).
.\"     Weaken warning against use of alloca() (as per Debian bug 461100).
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 1996 Kentaro OGAWA
.\"         all rights reserved.
.\" Translated Sat, 13 Jul 1996 22:44:04 +0900
.\"         by Kentaro OGAWA <k_ogawa@oyna.cc.muroran-it.ac.jp>
.\" Updated & Modified Tue Oct 16 01:01:48 JST 2001
.\"         by Yuichi SATO <ysato@mail.sbvl.muroran-it.ac.jp>
.\" Updated & Modified Sat Aug 31 04:42:49 JST 2002 by Yuichi SATO
.\" Updated 2013-03-26, Akihiro MOTOKI <amotoki@gmail.com>
.\" Updated 2013-07-24, Akihiro MOTOKI <amotoki@gmail.com>
.\"
.TH ALLOCA 3 2019\-03\-06 GNU "Linux Programmer's Manual"
.SH 名前
alloca \- 自動的に解放されるメモリーを割り当てる
.SH 書式
\fB#include <alloca.h>\fP
.PP
\fBvoid *alloca(size_t \fP\fIsize\fP\fB);\fP
.SH 説明
\fBalloca\fP()  関数は、 \fIsize\fP バイトの領域を呼出元のスタックフレームに割り付ける。 この一時的な領域は、 \fBalloca\fP()
を呼び出した関数が呼出元に返るときに自動的に解放される。
.SH 返り値
\fBalloca\fP()  関数は、割り付けた領域の始まりを指すポインターを返す。 割り付けによってスタックオーバーフローが起った場合の
プログラムの動作は定義されていない。
.SH 属性
この節で使用されている用語の説明については、 \fBattributes\fP(7) を参照。
.TS
allbox;
lb lb lb
l l l.
インターフェース	属性	値
T{
\fBalloca\fP()
T}	Thread safety	MT\-Safe
.TE
.SH 準拠
この関数は POSIX.1 にはない。
.PP
32V, PWB, PWB.2, 3BSD, 4BSD に \fBalloca\fP()  関数が登場した証拠がある。 4.3BSD
には、マニュアルページがある。 Linux は、GNU 版を使っている。 この関数は POSIX.1\-2001 にはない。
.SH 注意
\fBalloca\fP()  関数は、機種とコンパイラに依存する。 特定のアプリケーションでは、この関数を使うと \fBmalloc\fP(3)  と
\fBfree\fP(3)  を組み合わせて使った場合に比べて効率を改善することができる。 特定の場合では、この関数を使うことで、 \fBlongjmp\fP(3)
や \fBsiglongjmp\fP(3)  を使うアプリケーションでのメモリーの開放を簡単にすることができる。
それ以外の場合では、この関数の使用は推奨されない。
.PP
\fBalloca\fP() により割り当てられる空間はスタックフレームから割り当てられるので、 関数の戻り先が \fBlongjmp\fP(3) や
\fBsiglongjmp\fP(3) の呼び出しによりジャンプした場合には、 割り当てられた空間は自動的に解放される。
.PP
The space allocated by \fBalloca\fP()  is \fInot\fP automatically deallocated if
the pointer that refers to it simply goes out of scope.
.PP
\fBalloca\fP()  で割り当てられた空間を \fBfree\fP(3)  しようとすることのないように！
.SS "GNU 版についての注意"
通常 \fBgcc\fP(1) は \fBalloca\fP()  の呼び出しをインラインコードに変換する。 \fI\-ansi\fP, \fI\-std=c89\fP,
\fI\-std=c99\fP, \fI\-std=c11\fP のいずれかのオプションが指定され、\fBかつ\fP \fI<alloca.h>\fP
がインクルードされていない場合、 この変換は行われない。 それ以外の場合 (\-ansi オプションも \-std=c* オプションも指定されない場合)
には、 glibc 版の \fI<stdlib.h>\fP は \fI<alloca.h>\fP
をインクルードするが、このファイルには以下の行が含まれており、
.PP
.in +4n
.EX
#ifdef  __GNUC__
#define alloca(size)   __builtin_alloca (size)
#endif
.EE
.in
.PP
独自版の __builtin_alloca (size) 関数がある場合、厄介な結果になる。
.PP
このコードはインライン化されているので、 この関数のアドレスを取得したり、 他のライブラリをリンクして動作を変更することはできない。
.PP
通常このインラインコードはスタックポインターを移動する 1 つの命令 (instruction) から構成されており、
スタックオーバーフローをチェックしない。 よって NULL エラーが返されることはない。
.SH バグ
スタックフレームが拡張できなかった場合、エラー通知は行われない。 (しかしながら、割り当てに失敗した後で、プログラムが割り当てられなかった
空間にアクセスしようとした場合に \fBSIGSEGV\fP シグナルを受信することだろう。)
.PP
多くのシステムにおいて、関数コールの引数のリスト内では \fBalloca\fP()  が使えない。 これは、 \fBalloca\fP()
によって予約されるスタック領域が、 関数引数に使われるスタック領域の中に現れてしまうためである。
.SH 関連項目
\fBbrk\fP(2), \fBlongjmp\fP(3), \fBmalloc\fP(3)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
