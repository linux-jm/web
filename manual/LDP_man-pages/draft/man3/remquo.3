.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.\" based on glibc infopages
.\" polished, aeb
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 2005 Yuichi SATO
.\" and Copyright (c) 2008 Akihiro MOTOKI
.\" Translated Tue Feb  1 06:39:08 JST 2005
.\"         by Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated 2008-09-16, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\"
.TH REMQUO 3 2017\-09\-15 GNU "Linux Programmer's Manual"
.SH 名前
remquo, remquof, remquol \- 商の一部と剰余を求める
.SH 書式
.nf
\fB#include <math.h>\fP
.PP
\fBdouble remquo(double \fP\fIx\fP\fB, double \fP\fIy\fP\fB, int *\fP\fIquo\fP\fB);\fP
\fBfloat remquof(float \fP\fIx\fP\fB, float \fP\fIy\fP\fB, int *\fP\fIquo\fP\fB);\fP
\fBlong double remquol(long double \fP\fIx\fP\fB, long double \fP\fIy\fP\fB, int *\fP\fIquo\fP\fB);\fP
.fi
.PP
\fI\-lm\fP でリンクする。
.PP
.RS -4
glibc 向けの機能検査マクロの要件 (\fBfeature_test_macros\fP(7)  参照):
.RE
.PP
.ad l
\fBremquo\fP(), \fBremquof\fP(), \fBremquol\fP():
.RS 4
_ISOC99_SOURCE || _POSIX_C_SOURCE\ >=\ 200112L
.RE
.ad
.SH 説明
これらの関数は \fIx\fP を \fIy\fP で割ったときの商の一部と剰余を計算する。 商のいくつかのビットが \fIquo\fP ポインターを使って格納される。
剰余は関数の結果として返される。
.PP
剰余の値は \fBremainder\fP(3)  関数で計算されるものと同じである。
.PP
\fIquo\fP ポインターを使って格納される値には、 \fIx\ /\ y\fP の符号と最低でも商の下位 3 ビットが含まれる。
.PP
.\" A possible application of this function might be the computation
.\" of sin(x). Compute remquo(x, pi/2, &quo) or so.
.\"
.\" glibc, UnixWare: return 3 bits
.\" MacOS 10: return 7 bits
たとえば \fIremquo(29.0,\ 3.0)\fP は \-1.0 を返し、 (訳注: quo の指しているものには) 2 が格納される。
実際の商が整数値にならない点に注意すること。
.SH 返り値
成功すると、これらの関数は \fBremainder\fP(3)  に書かれている同様の関数と同じ値を返す。
.PP
\fIx\fP か \fIy\fP が NaN の場合、NaN が返される。
.PP
\fIx\fP が無限大で \fIy\fP が NaN でない場合、 領域エラー (domain error) が発生し、NaN が返される。
.PP
\fIy\fP がゼロで \fIx\fP が NaN でない場合、 領域エラー (domain error) が発生し、NaN が返される。
.SH エラー
これらの関数を呼び出した際にエラーが発生したかの判定方法についての情報は \fBmath_error\fP(7)  を参照のこと。
.PP
以下のエラーが発生する可能性がある。
.TP 
領域エラー (domain error): \fIx\fP が無限大か \fIy\fP が 0 で、 他の引数が NaN でない
.\" .I errno
.\" is set to
.\" .BR EDOM .
不正 (invalid) 浮動小数点例外 (\fBFE_INVALID\fP)  が上がる。
.PP
.\" FIXME . Is it intentional that these functions do not set errno?
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6802
これらの関数は \fIerrno\fP を設定しない。
.SH バージョン
これらの関数は glibc バージョン 2.1 で初めて登場した。
.SH 属性
この節で使用されている用語の説明については、 \fBattributes\fP(7) を参照。
.TS
allbox;
lbw30 lb lb
l l l.
インターフェース	属性	値
T{
\fBremquo\fP(),
\fBremquof\fP(),
\fBremquol\fP()
T}	Thread safety	MT\-Safe
.TE
.SH 準拠
C99, POSIX.1\-2001, POSIX.1\-2008.
.SH 関連項目
\fBfmod\fP(3), \fBlogb\fP(3), \fBremainder\fP(3)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
