.\" peter memishian -- meem@gnu.ai.mit.edu
.\" $Id: insque.3,v 1.2 1996/10/30 21:03:39 meem Exp meem $
.\" and Copyright (c) 2010, Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   Linux libc source code (5.4.7)
.\"   Solaris 2.x, OSF/1, and HP-UX manpages
.\"   Curry's "UNIX Systems Programming for SVR4" (O'Reilly & Associates 1996)
.\"
.\" Changed to POSIX, 2003-08-11, aeb+wh
.\" mtk, 2010-09-09: Noted glibc 2.4 bug, added info on circular
.\"	lists, added example program
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 1998 AKAMATSU Kazuo
.\"         all rights reserved.
.\" Translated Thu Jan 7 16:00 JST 1999
.\"         by AKAMATSU Kazuo
.\" Updated Sun Sep 14 JST 2003 by Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2012-04-30, Akihiro MOTOKI <amotoki@gmail.com>
.\"
.TH INSQUE 3 2020\-11\-01 "" "Linux Programmer's Manual"
.SH 名前
insque, remque \- キューにアイテムを挿入/削除する
.SH 書式
.nf
\fB#include <search.h>\fP
.PP
\fBvoid insque(void *\fP\fIelem\fP\fB, void *\fP\fIprev\fP\fB);\fP
.PP
\fBvoid remque(void *\fP\fIelem\fP\fB);\fP
.fi
.PP
.RS -4
glibc 向けの機能検査マクロの要件 (\fBfeature_test_macros\fP(7)  参照):
.RE
.PP
.ad l
\fBinsque\fP(), \fBremque\fP():
.RS 4
.\"    || _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
_XOPEN_SOURCE\ >=\ 500
    || /* Glibc since 2.19: */ _DEFAULT_SOURCE
    || /* Glibc versions <= 2.19: */ _SVID_SOURCE
.RE
.ad
.SH 説明
The \fBinsque\fP()  and \fBremque\fP()  functions manipulate doubly linked lists.
Each element in the list is a structure of which the first two elements are
a forward and a backward pointer.  The linked list may be linear (i.e., NULL
forward pointer at the end of the list and NULL backward pointer at the
start of the list)  or circular.
.PP
\fBinsque\fP() 関数は \fIelem\fP で示される要素を \fIprev\fP で示される
要素の直後に挿入する。
.PP
リストが線形の場合、\fIinsque(elem, NULL)\fP を呼び出すと、
リストの最初の要素を挿入することができる。
この呼び出しを行うと \fIelem\fP の次へのポインターと前へのポインターに
共に NULL が設定される。
.PP
リストが環状の場合、呼び出す側が、最初の要素の次へのポインターと前へのポインター
が自分自身を指し、また  \fBinsque\fP() の呼び出しで \fIprev\fP 引数が最初の要素
を指すように保証しなければならない。
.PP
The \fBremque\fP()  function removes the element pointed to by \fIelem\fP from the
doubly linked list.
.SH 属性
この節で使用されている用語の説明については、 \fBattributes\fP(7) を参照。
.TS
allbox;
lb lb lb
l l l.
インターフェース	属性	値
T{
\fBinsque\fP(),
\fBremque\fP()
T}	Thread safety	MT\-Safe
.TE
.sp 1
.SH 準拠
POSIX.1\-2001, POSIX.1\-2008.
.SH 注意
.\" e.g., SunOS, Linux libc4 and libc5
On ancient systems, the arguments of these functions were of type \fIstruct
qelem *\fP, defined as:
.PP
.in +4n
.EX
struct qelem {
    struct qelem *q_forw;
    struct qelem *q_back;
    char          q_data[1];
};
.EE
.in
.PP
この定義は \fI<search.h>\fP をインクルードする前に \fB_GNU_SOURCE\fP を定義することで得られる。
.PP
.\" Linux libc4 and libc 5 placed them
.\" in \fI<stdlib.h>\fP.
これらの関数のプロトタイプの置かれる場所は、UNIX の種類により異なる。
上記は POSIX 版である。 \fI<string.h>\fP にあるシステムもある。
.SH バグ
glibc 2.4 以前では \fIprev\fP に NULL を指定することができなかった。
その結果、線形のリストを作成するためには、
呼び出し側は、最初の呼び出しで、リストの最初の 2 つの要素を持ち、
各要素の次へのポインターと前へのポインターを適切に初期化したリストを
作成しなければならなかった。
.SH EXAMPLES
次のプログラムは \fBinsque\fP() の使用法を示したものである。
下記はプログラムの実行例である。
.PP
.in +4n
.EX
$ \fB./a.out \-c a b c\fP
Traversing completed list:
    a
    b
    c
That was a circular list
.EE
.in
.SS プログラムのソース
\&
.EX
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <search.h>

struct element {
    struct element *forward;
    struct element *backward;
    char *name;
};

static struct element *
new_element(void)
{
    struct element *e = malloc(sizeof(*e));
    if (e == NULL) {
        fprintf(stderr, "malloc() failed\en");
        exit(EXIT_FAILURE);
    }

    return e;
}

int
main(int argc, char *argv[])
{
    struct element *first, *elem, *prev;
    int circular, opt, errfnd;

    /* The "\-c" command\-line option can be used to specify that the
       list is circular */

    errfnd = 0;
    circular = 0;
    while ((opt = getopt(argc, argv, "c")) != \-1) {
        switch (opt) {
        case \(aqc\(aq:
            circular = 1;
            break;
        default:
            errfnd = 1;
            break;
        }
    }

    if (errfnd || optind >= argc) {
        fprintf(stderr,  "Usage: %s [\-c] string...\en", argv[0]);
        exit(EXIT_FAILURE);
    }

    /* Create first element and place it in the linked list */

    elem = new_element();
    first = elem;

    elem\->name = argv[optind];

    if (circular) {
        elem\->forward = elem;
        elem\->backward = elem;
        insque(elem, elem);
    } else {
        insque(elem, NULL);
    }

    /* Add remaining command\-line arguments as list elements */

    while (++optind < argc) {
        prev = elem;

        elem = new_element();
        elem\->name = argv[optind];
        insque(elem, prev);
    }

    /* Traverse the list from the start, printing element names */

    printf("Traversing completed list:\en");
    elem = first;
    do {
        printf("    %s\en", elem\->name);
        elem = elem\->forward;
    } while (elem != NULL && elem != first);

    if (elem == first)
        printf("That was a circular list\en");

    exit(EXIT_SUCCESS);
}
.EE
.SH "SEE ALSO"
\fBqueue\fP(7)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
