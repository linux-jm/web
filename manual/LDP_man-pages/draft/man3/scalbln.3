.\" Copyright 2004 Andries Brouwer <aeb@cwi.nl>.
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 2012  Akihiro MOTOKI
.\"         all rights reserved.
.\" Translated 2012-05-05, Akihiro MOTOKI <amotoki@gmail.com>
.\" Updated 2013-07-22, Akihiro MOTOKI <amotoki@gmail.com>
.\"
.TH SCALBLN 3 2020\-11\-01 "" "Linux Programmer's Manual"
.SH 名前
scalbn, scalbnf, scalbnl, scalbln, scalblnf, scalblnl \-
浮動小数点数に基数の整数乗を掛ける
.SH 書式
\fB#include <math.h>\fP
.PP
\fBdouble scalbln(double \fP\fIx\fP\fB, long \fP\fIexp\fP\fB);\fP
.br
\fBfloat scalblnf(float \fP\fIx\fP\fB, long \fP\fIexp\fP\fB);\fP
.br
\fBlong double scalblnl(long double \fP\fIx\fP\fB, long \fP\fIexp\fP\fB);\fP
.PP
\fBdouble scalbn(double \fP\fIx\fP\fB, int \fP\fIexp\fP\fB);\fP
.br
\fBfloat scalbnf(float \fP\fIx\fP\fB, int \fP\fIexp\fP\fB);\fP
.br
\fBlong double scalbnl(long double \fP\fIx\fP\fB, int \fP\fIexp\fP\fB);\fP
.PP
\fI\-lm\fP でリンクする。
.PP
.RS -4
glibc 向けの機能検査マクロの要件 (\fBfeature_test_macros\fP(7)  参照):
.RE
.PP
.ad l
\fBscalbln\fP(), \fBscalblnf\fP(), \fBscalblnl\fP():
.RS
_ISOC99_SOURCE || _POSIX_C_SOURCE\ >=\ 200112L
    || /* glibc 2.19 以降: */ _DEFAULT_SOURCE
.RE
.br
\fBscalbn\fP(), \fBscalbnf\fP(), \fBscalbnl\fP():
.RS
_ISOC99_SOURCE || _POSIX_C_SOURCE\ >=\ 200112L
    || /* Since glibc 2.19: */ _DEFAULT_SOURCE
    || /* Glibc versions <= 2.19: */ _BSD_SOURCE || _SVID_SOURCE
.RE
.ad b
.SH 説明
これらの関数は最初の引数 \fIx\fP に \fBFLT_RADIX\fP の \fIexp\fP 乗を掛ける (\fBFLT_RADIX\fP はおそらく 2
である)。つまり、以下の式の値を返す。
.PP
.nf
    x * FLT_RADIX ** exp
.fi
.PP
.\" not in /usr/include but in a gcc lib
\fBFLT_RADIX\fP の定義は \fI<float.h>\fP をインクルードすることで得られる。
.SH 返り値
成功すると、これらの関数は \fIx\fP * \fBFLT_RADIX\fP ** \fIexp\fP を返す。
.PP
\fIx\fP が NaN の場合、NaN が返される。
.PP
\fIx\fP が正の無限大 (負の無限大) の場合、正の無限大 (負の無限大) が返される。
.PP
\fIx\fP が +0 (\-0) の場合、+0 (\-0) が返される。
.PP
結果がオーバーフローする場合、 範囲エラー (range error) が発生し、 各関数はそれぞれ \fBHUGE_VAL\fP,
\fBHUGE_VALF\fP, \fBHUGE_VALL\fP を返す。符号は \fIx\fP と同じになる。
.PP
結果がアンダーフローする場合、範囲エラーが発生し、 各関数は 0 を返す。符号は \fIx\fP と同じになる。
.SH エラー
これらの関数を呼び出した際にエラーが発生したかの判定方法についての情報は \fBmath_error\fP(7)  を参照のこと。
.PP
以下のエラーが発生する可能性がある。
.TP 
範囲エラー (range error)、オーバーフローの場合
.\" .I errno
.\" is set to
.\" .BR ERANGE .
オーバーフロー浮動小数点例外 (\fBFE_OVERFLOW\fP)  が上がる。
.TP 
範囲エラー (range error)、アンダーフローの場合
\fIerrno\fP に \fBERANGE\fP が設定される。 アンダーフロー浮動小数点例外 (\fBFE_UNDERFLOW\fP)  が上がる。
.SH バージョン
これらの関数は glibc バージョン 2.1 で初めて登場した。
.SH 属性
この節で使用されている用語の説明については、 \fBattributes\fP(7) を参照。
.TS
allbox;
lbw33 lb lb
l l l.
インターフェース	属性	値
T{
\fBscalbn\fP(),
\fBscalbnf\fP(),
\fBscalbnl\fP(),
.br
\fBscalbln\fP(),
\fBscalblnf\fP(),
\fBscalblnl\fP()
T}	Thread safety	MT\-Safe
.TE
.SH 準拠
C99, POSIX.1\-2001, POSIX.1\-2008.
.SH 注意
これらの関数は、 \fBscalb\fP(3) に説明がある廃止予定の関数群とは二番目の
引数の型が異なる。このページで説明する関数群は、二番目の引数の型が
整数である。これに対して \fBscalb\fP(3) に説明がある関数群は、二番目の
引数の型が \fIdouble\fP である。
.PP
\fBFLT_RADIX\fP が 2 の場合 (これが普通だが)、
その場合は \fBscalbn\fP() は \fBldexp\fP(3) と等価である。
.SH バグ
.\" http://sources.redhat.com/bugzilla/show_bug.cgi?id=6803
バージョン 2.20 より前の glibc では、これらの関数は範囲エラーの場合に \fIerrno\fP を設定しなかった。
.SH 関連項目
\fBldexp\fP(3), \fBscalb\fP(3)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
