.\" Copyright 1995-2000 David Engel (david@ods.com)
.\" Copyright 1995 Rickard E. Faith (faith@cs.unc.edu)
.\" Copyright 2000 Ben Collins (bcollins@debian.org)
.\"    Redone for GLibc 2.2
.\" Copyright 2000 Jakub Jelinek (jakub@redhat.com)
.\"    Corrected.
.\" and Copyright (C) 2012, 2016, Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Do not restrict distribution.
.\" May be distributed under the GNU General Public License
.\" %%%LICENSE_END
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 1998 NAKANO Takeo all rights reserved.
.\" Translated Sat May 23 1998 by NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\" Updated & Modified Wed Jan 6 1999 by NAKANO Takeo
.\" Updated & Modified Wed Jan 16 21:05:41 JST 2002
.\"                 by Yuichi SATO <ysato@h4.dion.ne.jp>
.\" Updated 2013-05-04, Akihiro MOTOKI <amotoki@gmail.com>
.\"
.TH LDD 1 2019\-03\-06 "" "Linux Programmer's Manual"
.SH 名前
ldd \- 共有オブジェクトへの依存関係を表示する
.SH 書式
\fBldd\fP [\fIoption\fP]... \fIfile\fP...
.SH 説明
\fBldd\fP prints the shared objects (shared libraries) required by each program
or shared object specified on the command line.  An example of its use and
output (using \fBsed\fP(1)  to trim leading white space for readability in this
page)  is the following:
.PP
.in +4n
.EX
$ \fBldd /bin/ls | sed \(aqs/^ */    /\(aq\fP
    linux\-vdso.so.1 (0x00007ffcc3563000)
    libselinux.so.1 => /lib64/libselinux.so.1 (0x00007f87e5459000)
    libcap.so.2 => /lib64/libcap.so.2 (0x00007f87e5254000)
    libc.so.6 => /lib64/libc.so.6 (0x00007f87e4e92000)
    libpcre.so.1 => /lib64/libpcre.so.1 (0x00007f87e4c22000)
    libdl.so.2 => /lib64/libdl.so.2 (0x00007f87e4a1e000)
    /lib64/ld\-linux\-x86\-64.so.2 (0x00005574bf12e000)
    libattr.so.1 => /lib64/libattr.so.1 (0x00007f87e4817000)
    libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f87e45fa000)
.EE
.in
.PP
.\"
In the usual case, \fBldd\fP invokes the standard dynamic linker (see
\fBld.so\fP(8))  with the \fBLD_TRACE_LOADED_OBJECTS\fP environment variable set
to 1.  This causes the dynamic linker to inspect the program's dynamic
dependencies, and find (according to the rules described in \fBld.so\fP(8))
and load the objects that satisfy those dependencies.  For each dependency,
\fBldd\fP displays the location of the matching object and the (hexadecimal)
address at which it is loaded.  (The \fIlinux\-vdso\fP and \fIld\-linux\fP shared
dependencies are special; see \fBvdso\fP(7)  and \fBld.so\fP(8).)
.SS セキュリティ
.\" The circumstances are where the program has an interpreter
.\" other than ld-linux.so. In this case, ldd tries to execute the
.\" program directly with LD_TRACE_LOADED_OBJECTS=1, with the
.\" result that the program interpreter gets control, and can do
.\" what it likes, or pass control to the program itself.
.\" Much more detail at
.\" http://www.catonmat.net/blog/ldd-arbitrary-code-execution/
.\" Mainline glibc's ldd allows this possibility (the line
.\"      try_trace "$file"
.\" in glibc 2.15, for example), but many distro versions of
.\" ldd seem to remove that code path from the script.
.\" glibc commit eedca9772e99c72ab4c3c34e43cc764250aa3e3c
Be aware that in some circumstances (e.g., where the program specifies an
ELF interpreter other than \fIld\-linux.so\fP), some versions of \fBldd\fP may
attempt to obtain the dependency information by attempting to directly
execute the program, which may lead to the execution of whatever code is
defined in the program's ELF interpreter, and perhaps to execution of the
program itself.  (In glibc versions before 2.27, the upstream \fBldd\fP
implementation did this for example, although most distributions provided a
modified version that did not.)
.PP
Thus, you should \fInever\fP employ \fBldd\fP on an untrusted executable, since
this may result in the execution of arbitrary code.  A safer alternative
when dealing with untrusted executables is:
.PP
.in +4n
.EX
$ \fBobjdump \-p /path/to/program | grep NEEDED\fP
.EE
.in
.PP
Note, however, that this alternative shows only the direct dependencies of
the executable, while \fBldd\fP shows the entire dependency tree of the
executable.
.SH オプション
.TP 
\fB\-\-version\fP
\fBldd\fP のバージョン番号を表示する。
.TP 
\fB\-v\fP, \fB\-\-verbose\fP
シンボルのバージョン情報などを含めた全ての情報を表示する。
.TP 
\fB\-u\fP, \fB\-\-unused\fP
使用されていない直接の依存関係を表示する (glibc 2.3.4 以降)。
.TP 
\fB\-d\fP, \fB\-\-data\-relocs\fP
リロケーションを実行し、足りないオブジェクトについてレポートする (ELF のみ)。
.TP 
\fB\-r\fP, \fB\-\-function\-relocs\fP
足りないオブジェクトや関数についてレポートする (ELF のみ)。
.TP 
\fB\-\-help\fP
.\" .SH NOTES
.\" The standard version of
.\" .B ldd
.\" comes with glibc2.
.\" Libc5 came with an older version, still present
.\" on some systems.
.\" The long options are not supported by the libc5 version.
.\" On the other hand, the glibc2 version does not support
.\" .B \-V
.\" and only has the equivalent
.\" .BR \-\-version .
.\" .LP
.\" The libc5 version of this program will use the name of a library given
.\" on the command line as-is when it contains a \(aq/\(aq; otherwise it
.\" searches for the library in the standard locations.
.\" To run it
.\" on a shared library in the current directory, prefix the name with "./".
使用法を表示する。
.SH バグ
\fBldd\fP は a.out 共有ライブラリでは動作しない。
.PP
.\" .SH AUTHOR
.\" David Engel.
.\" Roland McGrath and Ulrich Drepper.
\fBldd\fP は非常に古い a.out プログラム (\fBldd\fP のサポートがコンパイラに追加される以前にビルドされたようなプログラム)
では動作しない。 このようなプログラムに対して \fBldd\fP を用いると、プログラムは \fIargc\fP = 0 で実行される。結果は予想不可能である。
.SH 関連項目
\fBpldd\fP(1), \fBsprof\fP(1), \fBld.so\fP(8), \fBldconfig\fP(8)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
