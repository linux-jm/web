.\" This manpage is Copyright (C) 2006, Michael Kerrisk
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 2006 Akihiro MOTOKI all rights reserved.
.\" Translated 2006-07-16, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2007-05-01, Akihiro MOTOKI, LDP v2.46
.\" Updated 2007-09-08, Akihiro MOTOKI, LDP v2.64
.\" Updated 2009-04-23, Akihiro MOTOKI, LDP v3.21
.\" Updated 2012-04-30, Akihiro MOTOKI <amotoki@gmail.com>
.\"
.TH FEATURE_TEST_MACROS 7 2020\-11\-01 Linux "Linux Programmer's Manual"
.SH 名前
feature_test_macros \- 機能検査マクロ
.SH 説明
機能検査マクロ (feature test macro) により、プログラマは プログラムがコンパイルされる際にシステムのヘッダーファイルにより
公開される定義を制御することができる。
.PP
\fB注意:\fP 機能検査マクロを機能させるには、機能検査マクロの定義を 「どのヘッダーファイルのインクルードよりも前で」行わなければならない。
これを実現するには、 コンパイルコマンドで指定する方法 (\fIcc \-DMACRO=value\fP)  と、ソースコード内で必要なマクロの定義を
どのヘッダーのインクルードよりも前で行う方法がある。どのヘッダーファイルをインクルードするよりも前にこれらのマクロを定義しなければならないという要件が存在するのは、ヘッダーファイルはお互いに自由にインクルードできるからである。そのため、例えば、以下の例では、ヘッダー
\fI<abc.h>\fP 自身が \fI<xyz.h>\fP をインクルードしていると、 \fB_GNU_SOURCE\fP
マクロの定義は全く効果がないかもしれない (このようなインクルードは POSIX では明示的に認められている)。
.PP
.in +4n
.EX
#include <abc.h>
#define _GNU_SOURCE
#include <xyz.h>
.EE
.in
.PP
機能検査マクロを使うと、非標準の定義が公開されないようにでき、 移植性のあるアプリケーションを作成するのに役立つ。
他のマクロを使うと、デフォルトでは公開されない非標準の定義を公開することができる。
.PP
以下で説明する機能検査マクロのそれぞれの正確な影響を確認するには、 ヘッダーファイル \fI<features.h>\fP を調べればよい。
\fB注意\fP: アプリケーションが \fI<features.h>\fP
を直接インクルードする必要は「ない」。実際のところ、インクルードするのは全く勧められない。「注意」の節を参照。
.SS マニュアルページでの機能検査マクロの要件の規定
関数が機能検査マクロの定義を必要とする場合、 マニュアルページの書式 (SYNOPSIS) の節に 以下の形式の注釈を入れる (以下の例は
\fBacct\fP(2)  のマニュアルページからの引用である)。
.PP
.RS
\fB#include <unistd.h>\fP
.PP
\fBint acct(const char *\fP\fIfilename\fP\fB);\fP
.PP
.RS -4
.EX
glibc 向けの機能検査マクロの要件
(\fBfeature_test_macros\fP(7)
参照):
.EE
.RE
.PP
\fBacct\fP(): _BSD_SOURCE || (_XOPEN_SOURCE && _XOPEN_SOURCE\ <\ 500)
.RE
.PP
\fB||\fP は、 \fBacct\fP(2)  の定義を \fI<unistd.h>\fP
から得るには、以下のマクロの定義のいずれかを、どのヘッダーファイルの インクルードよりも前で行わなければならないことを意味する。
.PP
.in +4n
.EX
#define _BSD_SOURCE
#define _XOPEN_SOURCE        /* 500 未満の任意の値 */
.EE
.in
.PP
別の方法としては、等価な定義をコンパイル用のコマンドで 指定することもできる。
.PP
.in +4n
.EX
cc \-D_BSD_SOURCE
cc \-D_XOPEN_SOURCE           # 500 未満の任意の値
.EE
.in
.PP
後で述べるが、 \fB「いくつかの機能検査マクロはデフォルトで定義される」\fP 点に注意すること。 このため、「書式」に記載された機能検査マクロを常に
明示的に指定する必要があるわけではない。
.PP
あまり多くないが、マニュアルページによっては、 機能検査マクロの要件を以下のように簡単な表現で記載する場合がある。 (以下の例は
\fBreadahead\fP(2)  のマニュアルページからの引用である)。
.PP
.RS +4
.EX
\fB#define _GNU_SOURCE\fP
\fB#include <fcntl.h>\fP
.PP
\fBssize_t readahead(int \fP\fIfd\fP\fB, off64_t *\fP\fIoffset\fP\fB, size_t \fP\fIcount\fP\fB);\fP
.EE
.RE
.PP
関数定義の公開に使える機能検査マクロが一つだけで、 デフォルトではそのマクロが定義されない場合に、 この形式の表現を利用する。
.SS "glibc が解釈する機能検査マクロ"
以下では、Linux glibc 2.\fIx\fP (\fIx\fP > 0) において、 機能検査マクロがどのように扱われるかを説明する。
.PP
First, though a summary of a few details for the impatient:
.IP * 3
The macros that you most likely need to use in modern source code are
\fB_POSIX_C_SOURCE\fP (for definitions from various versions of POSIX.1),
\fB_XOPEN_SOURCE\fP (for definitions from various versions of SUS),
\fB_GNU_SOURCE\fP (for GNU and/or Linux specific stuff), and \fB_DEFAULT_SOURCE\fP
(to get definitions that would normally be provided by default).
.IP *
Certain macros are defined with default values.  Thus, although one or more
macros may be indicated as being required in the SYNOPSIS of a man page, it
may not be necessary to define them explicitly.  Full details of the
defaults are given later in this man page.
.IP *
Defining \fB_XOPEN_SOURCE\fP with a value of 600 or greater produces the same
effects as defining \fB_POSIX_C_SOURCE\fP with a value of 200112L or greater.
Where one sees
.IP
.in +4n
.EX
_POSIX_C_SOURCE >= 200112L
.EE
.in
.IP
in the feature test macro requirements in the SYNOPSIS of a man page, it is
implicit that the following has the same effect:
.IP
.in +4n
.EX
_XOPEN_SOURCE >= 600
.EE
.in
.IP *
Defining \fB_XOPEN_SOURCE\fP with a value of 700 or greater produces the same
effects as defining \fB_POSIX_C_SOURCE\fP with a value of 200809L or greater.
Where one sees
.IP
.in +4n
.EX
_POSIX_C_SOURCE >= 200809L
.EE
.in
.IP
in the feature test macro requirements in the SYNOPSIS of a man page, it is
implicit that the following has the same effect:
.IP
.in +4n
.EX
_XOPEN_SOURCE >= 700
.EE
.in
.\" The details in glibc 2.0 are simpler, but combining a
.\" a description of them with the details in later glibc versions
.\" would make for a complicated description.
.PP
Linux/glibc は以下の機能検査マクロを解釈する:
.TP 
\fB__STRICT_ANSI__\fP
ISO 標準の C。 \fBgcc\fP(1)  を \fI\-std=c99\fP や \fI\-ansi\fP などのフラグを付けて起動した場合、
このマクロは暗黙のうちに定義される。
.TP 
\fB_POSIX_C_SOURCE\fP
このマクロを定義すると、ヘッダーファイルで以下の定義が公開される。
.RS
.IP \(bu 3
値が 1 の場合、POSIX.1\-1990 と ISO C (1990) に準拠する定義が公開される。
.IP \(bu
値が 2 以上の場合、 POSIX.2\-1992 関連の定義も追加で公開される。
.IP \(bu
.\" 199506L functionality is available only since glibc 2.1
値が 199309 以上の場合、 POSIX.1b (リアルタイム拡張) 関連の定義が追加で公開される。
.IP \(bu
値が 199506 以上の場合、 POSIX.1c (スレッド) 関連の定義が追加で公開される。
.IP \(bu
(glibc 2.3.3 以降)  値が 200112L 以上の場合、 (XSI 拡張を除く) POSIX.1\-2001
基本仕様に対応する定義も追加で公開される。また C95 (glibc 2.12 以降) と C99 (glibc 2.10 以降) の機能も公開される
(言い換えると、 \fB_ISOC99_SOURCE\fP を定義するのと等価である)。
.IP \(bu
(glibc 2.10 以降)  値が 200809L 以上の場合、 (XSI 拡張を除く) POSIX.1\-2008
基本仕様に対応する定義が追加で公開される。
.RE
.TP 
\fB_POSIX_SOURCE\fP
このマクロは廃止予定である。 このマクロが定義されると、値に関わらず、 \fB_POSIX_C_SOURCE\fP を値 1 で定義するのと等価となる。
.IP
Since this macro is obsolete, its usage is generally not documented when
discussing feature test macro requirements in the man pages.
.TP 
\fB_XOPEN_SOURCE\fP
このマクロを定義すると、ヘッダーファイルで以下の定義が公開される。
.RS
.IP \(bu 3
どんな値でも、ヘッダーファイルで POSIX.1, POSIX.2, XPG4 に準拠する定義が公開される。
.IP \(bu
値が 500 以上の場合、 SUSv2 (UNIX 98) 関連の定義が追加で公開される。
.IP \(bu
(glibc 2.2 以降)  値が 600 以上の場合、 SUSv3 (UNIX 03; POSIX.1\-2001 基本仕様 + XSI 拡張と同じ)
関連の定義と C99 での定義が追加で公開される。
.IP \(bu
(glibc 2.10 以降)  値が 700 以上の場合、 SUSv4 (POSIX.1\-2008 基本仕様 + XSI 拡張と同じ)
関連の定義が追加で公開される。
.RE
.IP
\fB__STRICT_ANSI__\fP が定義されていない場合、または \fB_XOPEN_SOURCE\fP が 500 以上の値で定義されていて、
\fB_POSIX_SOURCE\fP も \fB_POSIX_C_SOURCE\fP も明示的に定義されていない場合、以下のマクロが暗黙のうちに定義される。
.RS
.IP \(bu 3
\fB_POSIX_SOURCE\fP が値 1 で定義される。
.IP \(bu
\fB_POSIX_C_SOURCE\fP は、\fB_XOPEN_SOURCE\fP の値に基づいて定義される。
.RS
.TP 
\fB_XOPEN_SOURCE\fP < 500
\fB_POSIX_C_SOURCE\fP が値 2 で定義される。
.TP 
500 <= \fB_XOPEN_SOURCE\fP < 600
\fB_POSIX_C_SOURCE\fP が値 199506L で定義される。
.TP 
600 <= \fB_XOPEN_SOURCE\fP < 700
\fB_POSIX_C_SOURCE\fP が値 200112L で定義される。
.TP 
700 <= \fB_XOPEN_SOURCE\fP (glibc 2.10 以降)
\fB_POSIX_C_SOURCE\fP が値 200809L で定義される。
.RE
.RE
.IP
In addition, defining \fB_XOPEN_SOURCE\fP with a value of 500 or greater
produces the same effects as defining \fB_XOPEN_SOURCE_EXTENDED\fP.
.TP 
\fB_XOPEN_SOURCE_EXTENDED\fP
このマクロが定義され、さらに \fB_XOPEN_SOURCE\fP が定義されていると、XPG4v2 (SUSv1) UNIX 拡張 (UNIX 95)
に対応する定義が公開される。 \fB_XOPEN_SOURCE\fP が 500 以上の値で定義するのは \fB_XOPEN_SOURCE_EXTENDED\fP
を定義するのと同じ効果となる。新しいソースコードで \fB_XOPEN_SOURCE_EXTENDED\fP を使用するのは避けるべきである。
.IP
Since defining \fB_XOPEN_SOURCE\fP with a value of 500 or more has the same
effect as defining \fB_XOPEN_SOURCE_EXTENDED\fP, the latter (obsolete) feature
test macro is generally not described in the SYNOPSIS in man pages.
.TP 
\fB_ISOC99_SOURCE\fP (glibc 2.1.3 以降)
ISO C99 標準に準拠した宣言を公開する。
.IP
初期のバージョン 2.1.x の glibc では、これと等価な \fB_ISOC9X_SOURCE\fP という名前のマクロが使われていた
(なぜなら、C99 標準はまだ確定していなかったからである)。 \fB_ISOC9X_SOURCE\fP マクロの使用は廃止されているが、 glibc
は過去との互換性のため今でもこのマクロを認識する。
.IP
\fB_ISOC99_SOURCE\fP を定義すると、 ISO C (1990) Amendment 1 ("C95") の定義も公開される (C95
での主要な変更点は国際化文字集合のサポートであった)。
.IP
Invoking the C compiler with the option \fI\-std=c99\fP produces the same
effects as defining this macro.
.TP 
\fB_ISOC11_SOURCE\fP (glibc 2.16 以降)
ISO C11 標準に準拠した宣言を公開する。 このマクロを定義すると (\fB_ISOC99_SOURCE\fP 同様) C99 と C95
の機能も有効になる。
.IP
Invoking the C compiler with the option \fI\-std=c11\fP produces the same
effects as defining this macro.
.TP 
\fB_LARGEFILE64_SOURCE\fP
LFS (Large File Summit) により "暫定拡張 (transitional extension)" Single UNIX
Specification として規定された代替 API (alternative API) に関する定義を公開する (
.UR http:\:/\:/opengroup.org\:/platform\:/lfs.html
.UE
参照)。 代替 API は新規オブジェクト
(関数と型) の集合で構成され、 その名前は "64" で終わる (例えば、 \fIoff_t\fP に対応するのは \fIoff64_t\fP、
\fBlseek\fP()  に対応するのは \fBlseek64\fP()  である)。 新しいプログラムではこのマクロを利用しないこと。 代わりに
\fI_FILE_OFFSET_BITS=64\fP を利用すること。
.TP 
\fB_LARGEFILE_SOURCE\fP
このマクロは、歴史的には、ファイルオフセットで \fIlong\fP を使う以前の API (\fBfseek\fP(3) や \fBftell\fP(3))
の制限を解決する関数 (特に \fBfseeko\fP(3) と \fBftello\fP(3)) を公開するのに使われていた。 このマクロは
\fB_XOPEN_SOURCE\fP が 500 以上の値で定義されている場合に暗黙のうちに定義される。
新しいプログラムではこのマクロは使用すべきではない。 \fB_XOPEN_SOURCE\fP をただ定義するか、 \fB_FILE_OFFSET_BITS\fP
を値 64 で定義するのが、同じ結果を得るための推奨される方法である。
.TP 
\fB_FILE_OFFSET_BITS\fP
このマクロを値 64 で定義すると、ファイル I/O とファイルシステム操作に 関連する 32 ビット版の関数とデータタイプは自動的に 64 ビット版に
変換される。 これは、32 ビットシステムで大きなファイル (> 2 ギガバイト) の I/O を実行する際に役立つ
(このマクロを定義すると、コンパイルし直すだけで大きなファイルを 扱えるプログラムを書くことができる)。
.IP
64 ビットシステムは、もともと 2 ギガバイトより大きなファイルを 扱えるので、64 ビットシステムではこのマクロは効果を持たない。
.TP 
\fB_BSD_SOURCE\fP (glibc 2.20 以降では非推奨)
このマクロを定義すると、値に関わらず、ヘッダーファイルで BSD 由来の定義が公開される。
.IP
バージョン 2.18 以前の glibc では、このマクロを定義すると、相容れない標準が存在する状況において BSD 由来の定義を優先するようになる。
ただし、 \fB_SVID_SOURCE\fP, \fB_POSIX_SOURCE\fP, \fB_POSIX_C_SOURCE\fP,
\fB_XOPEN_SOURCE\fP, \fB_XOPEN_SOURCE_EXTENDED\fP, \fB_GNU_SOURCE\fP
が一つでも定義された場合には、BSD 由来の定義は優先されなくなる。 glibc 2.19 以降では、 \fB_BSD_SOURCE\fP
を定義しても相容れない標準があっても BSD 由来の定義が優先されることはもはやなくなった。
.IP
.\" commit c941736c92fa3a319221f65f6755659b2a5e0a20
.\" commit 498afc54dfee41d33ba519f496e96480badace8e
.\" commit acd7f096d79c181866d56d4aaf3b043e741f1e2c
.\" commit ade40b10ff5fa59a318cf55b9d8414b758e8df78
glibc 2.20 以降では、このマクロは非推奨である。 このマクロは現在は \fB_DEFAULT_SOURCE\fP を定義するのと同じ効果を持つが、
(\fB_DEFAULT_SOURCE\fP が合わせて定義されていない場合には) コンパイル時の警告が出る。 代わりに \fB_DEFAULT_SOURCE\fP
を使用すること。 glibc 2.19 以前で \fB_BSD_SOURCE\fP が必要で glibc 2.20 以降で
\fB_DEFAULT_SOURCE\fP を必要とするプログラムを警告を出さずにコンパイルするには、 \fB_BSD_SOURCE\fP と
\fB_DEFAULT_SOURCE\fP の\fI両方\fPを定義すること。
.TP 
\fB_SVID_SOURCE\fP (glibc 2.20 以降では非推奨)
このマクロを定義すると (値に関わらず) ヘッダーファイルで System V 由来の定義が公開される (SVID == System V
Interface Definition; \fBstandards\fP(7)  参照)。
.IP
glibc 2.20 以降、 \fB_BSD_SOURCE\fP と同様にこのマクロは非推奨となっている。
.TP 
\fB_DEFAULT_SOURCE\fP (glibc 2.19 以降)
このマクロを使うと、「デフォルト」が無効になるような場合でも「デフォルト」の定義が提供されるようにすることができる。「デフォルト」が無効になるような状況は、個別のマクロが明示的に定義された場合や、コンパイラが「標準」モードのいずれか
(例えば \fIcc\ \-std=c99\fP)
で起動された場合などである。他の個々のマクロが定義されず、コンパイラも「標準」モードのいずれかを指定して起動されていない場合は、
\fB_DEFAULT_SOURCE\fP を定義しても何の効果もない。
.IP
「デフォルト」定義は、 POSIX.1\-2008 と ISO C99 で必須となっている定義と、もともとは BSD と System V
由来の種々の定義を公開する。 glibc 2.19 以前では、これらのデフォルトは以下を明示的に定義するのとほぼ等価である。
.IP
    cc \-D_BSD_SOURCE \-D_SVID_SOURCE \-D_POSIX_C_SOURCE=200809
.TP 
\fB_ATFILE_SOURCE\fP (glibc 2.4 以降)
このマクロを定義すると (値に関わらず) ヘッダーファイルで 名前の末尾が "at" の各種の関数の定義が公開される。 \fBopenat\fP(2)
参照。 glibc 2.10 以降では、 \fB_POSIX_C_SOURCE\fP が 200809L 以上の値で定義された場合には、
このマクロも暗黙のうちに定義される。
.TP 
\fB_GNU_SOURCE\fP
このマクロを定義すると (値に関わらず) 以下のマクロが暗黙のうちに定義される: \fB_ATFILE_SOURCE\fP,
\fB_LARGEFILE64_SOURCE\fP, \fB_ISOC99_SOURCE\fP, \fB_XOPEN_SOURCE_EXTENDED\fP,
\fB_POSIX_SOURCE\fP, 値 200809L の \fB_POSIX_C_SOURCE\fP (バージョン 2.10 より前の glibc では値は
200112L、 バージョン 2.5 より前の glibc では値は 199506L、 バージョン 2.1 より前の glibc では値は
199309L), 値 700 の \fB_XOPEN_SOURCE\fP (バージョン 2.10 より前の glibc では値は 600、 バージョン
2.2 より前の glibc では値は 500)。
.IP
glibc 2.19 以降では、 \fB_GNU_SOURCE\fP を定義すると、 \fB_DEFAULT_SOURCE\fP も暗黙のうちに定義される。
バージョン 2.20 より前の glibc では、 \fB_GNU_SOURCE\fP を定義すると、 \fB_BSD_SOURCE\fP と
\fB_SVID_SOURCE\fP も暗黙のうちに定義されていた。
.TP 
\fB_REENTRANT\fP
.\" Zack Weinberg
.\"     There did once exist C libraries where it was necessary. The ones
.\"     I remember were proprietary Unix vendor libcs from the mid-1990s
.\"     You would get completely unlocked stdio without _REENTRANT.
Historically, on various C libraries it was necessary to define this macro
in all multithreaded code.  (Some C libraries may still require this.)  In
glibc, this macro also exposed definitions of certain reentrant functions.
.IP
However, glibc has been thread\-safe by default for many years; since glibc
2.3, the only effect of defining \fB_REENTRANT\fP has been to enable one or two
of the same declarations that are also enabled by defining
\fB_POSIX_C_SOURCE\fP with a value of 199606L or greater.
.IP
\fB_REENTRANT\fP is now obsolete.  In glibc 2.25 and later, defining
\fB_REENTRANT\fP is equivalent to defining \fB_POSIX_C_SOURCE\fP with the value
199606L.  If a higher POSIX conformance level is selected by any other means
(such as \fB_POSIX_C_SOURCE\fP itself, \fB_XOPEN_SOURCE\fP, \fB_DEFAULT_SOURCE\fP, or
\fB_GNU_SOURCE\fP), then defining \fB_REENTRANT\fP has no effect.
.IP
This macro is automatically defined if one compiles with \fIcc\ \-pthread\fP.
.TP 
\fB_THREAD_SAFE\fP
(非推奨の) \fB_REENTRANT\fP の同義語。 他のいくつかの実装との互換性を提供するためのもの。
.TP 
\fB_FORTIFY_SOURCE\fP (glibc 2.3.4 以降)
.\" For more detail, see:
.\" http://gcc.gnu.org/ml/gcc-patches/2004-09/msg02055.html
.\" [PATCH] Object size checking to prevent (some) buffer overflows
.\" * From: Jakub Jelinek <jakub at redhat dot com>
.\" * To: gcc-patches at gcc dot gnu dot org
.\" * Date: Tue, 21 Sep 2004 04:16:40 -0400
.\" Look for __USE_FORTIFY_LEVEL in the header files
Defining this macro causes some lightweight checks to be performed to detect
some buffer overflow errors when employing various string and memory
manipulation functions (for example, \fBmemcpy\fP(3), \fBmemset\fP(3),
\fBstpcpy\fP(3), \fBstrcpy\fP(3), \fBstrncpy\fP(3), \fBstrcat\fP(3), \fBstrncat\fP(3),
\fBsprintf\fP(3), \fBsnprintf\fP(3), \fBvsprintf\fP(3), \fBvsnprintf\fP(3), \fBgets\fP(3),
and wide character variants thereof).  For some functions, argument
consistency is checked; for example, a check is made that \fBopen\fP(2)  has
been supplied with a \fImode\fP argument when the specified flags include
\fBO_CREAT\fP.  Not all problems are detected, just some common cases.
.IP
.\" For example, given the following code
.\"        int d;
.\"        char buf[1000], buf[1000];
.\"        strcpy(fmt, "Hello world\n%n");
.\"        snprintf(buf, sizeof(buf), fmt, &d);
.\"
.\" Compiling with "gcc -D_FORTIFY_SOURCE=2 -O1" and then running will
.\" cause the following diagnostic at run time at the snprintf() call
.\"
.\"        *** %n in writable segment detected ***
.\"        Aborted (core dumped)
.\"
\fB_FORTIFY_SOURCE\fP が 1 に設定された場合、コンパイラの最適化レベルが 1 (\fIgcc\ \-O1\fP)
かそれ以上であれば、規格に準拠するプログラムの振る舞いを 変化させないようなチェックが実行される。 \fB_FORTIFY_SOURCE\fP が 2
に設定された場合、さらなるチェックが追加されるが、 規格に準拠するプログラムのいくつかが失敗する可能性がある。
.IP
いくつかのチェックは (ヘッダーファイルに実装されたマクロのロジックにより)
コンパイル時に実行でき、コンパイラの警告として表示される。他のチェックは実行時に行われ、チェックに失敗した場合には実行時エラーとなる。
.IP
このマクロを使用するにはコンパイラの対応が必要であり、 バージョン 4.0 以降の \fBgcc\fP(1)  で利用できる。
.SS デフォルトの定義、暗黙の定義、組み合わせ定義
機能検査マクロが一つも明示的に定義されなかった場合、 デフォルトで機能検査マクロ \fB_BSD_SOURCE\fP (glibc 2.19 以前),
\fB_SVID_SOURCE\fP (glibc 2.19 以前), \fB_DEFAULT_SOURCE\fP (glibc 2.19 以降),
\fB_POSIX_SOURCE\fP, \fB_POSIX_C_SOURCE\fP=200809L が定義される (バージョン 2.10 より前の glibc
では値は 200112L、 バージョン 2.4 より前の glibc では値は 199506L、 バージョン 2.1 より前の glibc では値は
199309L)。
.PP
\fB__STRICT_ANSI__\fP, \fB_ISOC99_SOURCE\fP, \fB_ISOC11_SOURCE\fP (glibc 2.18 以降),
\fB_POSIX_SOURCE\fP, \fB_POSIX_C_SOURCE\fP, \fB_XOPEN_SOURCE\fP,
\fB_XOPEN_SOURCE_EXTENDED\fP (glibc 2.11 以前), \fB_BSD_SOURCE\fP (glibc 2.19 以前),
\fB_SVID_SOURCE\fP (glibc 2.19 以前) のいずれかが明示的に定義された場合、 \fB_BSD_SOURCE\fP,
\fB_SVID_SOURCE\fP, \fB_SVID_SOURCE\fP はデフォルトでは定義されない。
.PP
\fB_POSIX_SOURCE\fP と \fB_POSIX_C_SOURCE\fP が明示的に定義されない場合で、 \fB__STRICT_ANSI__\fP
が定義されない、もしくは \fB_XOPEN_SOURCE\fP が 500 以上の値で定義されたときには、
.IP * 3
\fB_POSIX_SOURCE\fP が値 1 で定義され、かつ
.IP *
\fB_POSIX_C_SOURCE\fP は以下の値のいずれか一つで定義される。
.RS 3
.IP \(bu 3
2 (\fB_XOPEN_SOURCE\fP が 500 未満の値で定義された場合)
.IP \(bu
199506L (\fB_XOPEN_SOURCE\fP が 500 以上 600 未満の値で定義された場合)
.IP \(bu
(glibc 2.4 以降)  200112L (\fB_XOPEN_SOURCE\fP が 600 以上 700 未満の値で定義された場合)
.IP \(bu
(glibc 2.10 以降)  200809L (\fB_XOPEN_SOURCE\fP が 700 以上の値で定義された場合)
.IP \(bu
古いバージョンの glibc では \fB_POSIX_C_SOURCE\fP の値として 200112L や 200809L は存在せず、
\fB_POSIX_C_SOURCE\fP の値がどうなるかは glibc のバージョンにより異なる。
.IP \(bu
\fB_XOPEN_SOURCE\fP が未定義の場合、 \fB_POSIX_C_SOURCE\fP の値は glibc のバージョンにより異なる。 バージョン
2.4 より前の glibc では 199506L、 バージョン 2.4 以降 2.9 未満では 200112L、 glibc 2.10 以降では
200809L となる。
.RE
.PP
また、複数のマクロを定義することもできる。 この場合、定義したマクロはすべて有効になる。
.SH 準拠
POSIX.1 では \fB_POSIX_C_SOURCE\fP, \fB_POSIX_SOURCE\fP, \fB_XOPEN_SOURCE\fP が規定されている。
.PP
\fB_XOPEN_SOURCE_EXTENDED\fP は XPG4v2 (別名 SUSv1) で規定されていたが、 SUSv2 以降には存在しない。
\fB_FILE_OFFSET_BITS\fP はどの標準でも規定されていないが、 他のいくつかの実装で採用されている。
.PP
\fB_BSD_SOURCE\fP, \fB_SVID_SOURCE\fP, \fB_DEFAULT_SOURCE\fP, \fB_ATFILE_SOURCE\fP,
\fB_GNU_SOURCE\fP, \fB_FORTIFY_SOURCE\fP, \fB_REENTRANT\fP, \fB_THREAD_SAFE\fP は Linux
(glibc) 固有である。
.SH 注意
\fI<features.h>\fP は Linux/glibc 固有のヘッダーファイルである。
他のシステムにも同様の目的のファイルがあるが、普通は違う名前である。 このヘッダーファイルは、他のヘッダーファイルにより必要に応じて
自動的にインクルードされる。機能検査マクロを利用するために 明示的にインクルードする必要はない。
.PP
上記の機能検査マクロのうちどれが定義されたかにしたがって、 \fI<features.h>\fP は、他の glibc
ヘッダーファイルでチェックされる各種の他のマクロを、 内部で定義する。これらのマクロの名前はアンダースコア 2つで始まる (例えば
\fB__USE_MISC\fP)。 ユーザープログラムはこれらのマクロを \fI決して\fP 直接定義すべきではない。
代わりに、上記のリストにある適切な機能検査マクロを利用すべきである。
.SH 例
下記のプログラムを使うと、各種の機能検査マクロが glibc のバージョン に応じてどのように設定されるかや、どの機能検査マクロが明示的に
設定されるか、を調べることができる。 以下に示すシェルセッションは、 glibc 2.10 のシステムでの実行結果の例である。
.PP
.in +4n
.EX
$ \fBcc ftm.c\fP
$ \fB./a.out\fP
_POSIX_SOURCE defined
_POSIX_C_SOURCE defined: 200809L
_BSD_SOURCE defined
_SVID_SOURCE defined
_ATFILE_SOURCE defined
$ \fBcc \-D_XOPEN_SOURCE=500 ftm.c\fP
$ \fB./a.out\fP
_POSIX_SOURCE defined
_POSIX_C_SOURCE defined: 199506L
_XOPEN_SOURCE defined: 500
$ \fBcc \-D_GNU_SOURCE ftm.c\fP
$ \fB./a.out\fP
_POSIX_SOURCE defined
_POSIX_C_SOURCE defined: 200809L
_ISOC99_SOURCE defined
_XOPEN_SOURCE defined: 700
_XOPEN_SOURCE_EXTENDED defined
_LARGEFILE64_SOURCE defined
_BSD_SOURCE defined
_SVID_SOURCE defined
_ATFILE_SOURCE defined
_GNU_SOURCE defined
.EE
.in
.SS プログラムのソース
\&
.EX
/* ftm.c */

#include <stdint.h>
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int
main(int argc, char *argv[])
{
#ifdef _POSIX_SOURCE
    printf("_POSIX_SOURCE defined\en");
#endif

#ifdef _POSIX_C_SOURCE
    printf("_POSIX_C_SOURCE defined: %jdL\en",
            (intmax_t) _POSIX_C_SOURCE);
#endif

#ifdef _ISOC99_SOURCE
    printf("_ISOC99_SOURCE defined\en");
#endif

#ifdef _ISOC11_SOURCE
    printf("_ISOC11_SOURCE defined\en");
#endif

#ifdef _XOPEN_SOURCE
    printf("_XOPEN_SOURCE defined: %d\en", _XOPEN_SOURCE);
#endif

#ifdef _XOPEN_SOURCE_EXTENDED
    printf("_XOPEN_SOURCE_EXTENDED defined\en");
#endif

#ifdef _LARGEFILE64_SOURCE
    printf("_LARGEFILE64_SOURCE defined\en");
#endif

#ifdef _FILE_OFFSET_BITS
    printf("_FILE_OFFSET_BITS defined: %d\en", _FILE_OFFSET_BITS);
#endif

#ifdef _BSD_SOURCE
    printf("_BSD_SOURCE defined\en");
#endif

#ifdef _SVID_SOURCE
    printf("_SVID_SOURCE defined\en");
#endif

#ifdef _DEFAULT_SOURCE
    printf("_DEFAULT_SOURCE defined\en");
#endif

#ifdef _ATFILE_SOURCE
    printf("_ATFILE_SOURCE defined\en");
#endif

#ifdef _GNU_SOURCE
    printf("_GNU_SOURCE defined\en");
#endif

#ifdef _REENTRANT
    printf("_REENTRANT defined\en");
#endif

#ifdef _THREAD_SAFE
    printf("_THREAD_SAFE defined\en");
#endif

#ifdef _FORTIFY_SOURCE
    printf("_FORTIFY_SOURCE defined\en");
#endif

    exit(EXIT_SUCCESS);
}
.EE
.SH 関連項目
\fBlibc\fP(7), \fBstandards\fP(7), \fBsystem_data_types\fP(7)
.PP
.\" But beware: the info libc document is out of date (Jul 07, mtk)
\fIinfo libc\fP の "Feature Test Macros" の節。
.PP
\fI/usr/include/features.h\fP
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
