.\" Copyright (c) 2016 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH SIGNAL\-SAFETY 7 2020\-12\-21 Linux "Linux Programmer's Manual"
.SH 名前
signal\-safety \- 非同期シグナルで安全な関数 (async\-signal\-safe functions)
.SH 説明
An \fIasync\-signal\-safe\fP function is one that can be safely called from
within a signal handler.  Many functions are \fInot\fP async\-signal\-safe.  In
particular, nonreentrant functions are generally unsafe to call from a
signal handler.
.PP
The kinds of issues that render a function unsafe can be quickly understood
when one considers the implementation of the \fIstdio\fP library, all of whose
functions are not async\-signal\-safe.
.PP
When performing buffered I/O on a file, the \fIstdio\fP functions must maintain
a statically allocated data buffer along with associated counters and
indexes (or pointers)  that record the amount of data and the current
position in the buffer.  Suppose that the main program is in the middle of a
call to a \fIstdio\fP function such as \fBprintf\fP(3)  where the buffer and
associated variables have been partially updated.  If, at that moment, the
program is interrupted by a signal handler that also calls \fBprintf\fP(3),
then the second call to \fBprintf\fP(3)  will operate on inconsistent data,
with unpredictable results.
.PP
To avoid problems with unsafe functions, there are two possible choices:
.IP 1. 3
Ensure that (a) the signal handler calls only async\-signal\-safe functions,
and (b) the signal handler itself is reentrant with respect to global
variables in the main program.
.IP 2.
Block signal delivery in the main program when calling functions that are
unsafe or operating on global data that is also accessed by the signal
handler.
.PP
Generally, the second choice is difficult in programs of any complexity, so
the first choice is taken.
.PP
POSIX.1 specifies a set of functions that an implementation must make
async\-signal\-safe.  (An implementation may provide safe implementations of
additional functions, but this is not required by the standard and other
implementations may not provide the same guarantees.)
.PP
In general, a function is async\-signal\-safe either because it is reentrant
or because it is atomic with respect to signals (i.e., its execution can't
be interrupted by a signal handler).
.PP
The set of functions required to be async\-signal\-safe by POSIX.1 is shown in
the following table.  The functions not otherwise noted were required to be
async\-signal\-safe in POSIX.1\-2001; the table details changes in the
subsequent standards.
.PP
.TS
lb lb
l l.
関数	Notes
\fBabort\fP(3)	POSIX.1\-2001 TC1 で追加
\fBaccept\fP(2)
\fBaccess\fP(2)
\fBaio_error\fP(3)
\fBaio_return\fP(3)
\fBaio_suspend\fP(3)	下記の「注意」を参照
\fBalarm\fP(2)
\fBbind\fP(2)
\fBcfgetispeed\fP(3)
\fBcfgetospeed\fP(3)
\fBcfsetispeed\fP(3)
\fBcfsetospeed\fP(3)
\fBchdir\fP(2)
\fBchmod\fP(2)
\fBchown\fP(2)
\fBclock_gettime\fP(2)
\fBclose\fP(2)
\fBconnect\fP(2)
\fBcreat\fP(2)
\fBdup\fP(2)
\fBdup2\fP(2)
\fBexecl\fP(3)	POSIX.1\-2008 で追加; 下記の「注意」を参照
\fBexecle\fP(3)	下記の「注意」を参照
\fBexecv\fP(3)	POSIX.1\-2008 で追加
\fBexecve\fP(2)
\fB_exit\fP(2)
\fB_Exit\fP(2)
\fBfaccessat\fP(2)	POSIX.1\-2008 で追加
\fBfchdir\fP(2)	POSIX.1\-2008 TC1 で追加
\fBfchmod\fP(2)
\fBfchmodat\fP(2)	POSIX.1\-2008 で追加
\fBfchown\fP(2)
\fBfchownat\fP(2)	POSIX.1\-2008 で追加
\fBfcntl\fP(2)
\fBfdatasync\fP(2)
\fBfexecve\fP(3)	POSIX.1\-2008 で追加
\fBffs\fP(3)	POSIX.1\-2008 TC2 で追加
\fBfork\fP(2)	下記の「注意」を参照
\fBfstat\fP(2)
\fBfstatat\fP(2)	POSIX.1\-2008 で追加
\fBfsync\fP(2)
\fBftruncate\fP(2)
\fBfutimens\fP(3)	POSIX.1\-2008 で追加
\fBgetegid\fP(2)
\fBgeteuid\fP(2)
\fBgetgid\fP(2)
\fBgetgroups\fP(2)
\fBgetpeername\fP(2)
\fBgetpgrp\fP(2)
\fBgetpid\fP(2)
\fBgetppid\fP(2)
\fBgetsockname\fP(2)
\fBgetsockopt\fP(2)
\fBgetuid\fP(2)
\fBhtonl\fP(3)	POSIX.1\-2008 TC2 で追加
\fBhtons\fP(3)	POSIX.1\-2008 TC2 で追加
\fBkill\fP(2)
\fBlink\fP(2)
\fBlinkat\fP(2)	POSIX.1\-2008 で追加
\fBlisten\fP(2)
\fBlongjmp\fP(3)	POSIX.1\-2008 TC2 で追加; 下記の「注意」を参照
\fBlseek\fP(2)
\fBlstat\fP(2)
\fBmemccpy\fP(3)	POSIX.1\-2008 TC2 で追加
\fBmemchr\fP(3)	POSIX.1\-2008 TC2 で追加
\fBmemcmp\fP(3)	POSIX.1\-2008 TC2 で追加
\fBmemcpy\fP(3)	POSIX.1\-2008 TC2 で追加
\fBmemmove\fP(3)	POSIX.1\-2008 TC2 で追加
\fBmemset\fP(3)	POSIX.1\-2008 TC2 で追加
\fBmkdir\fP(2)
\fBmkdirat\fP(2)	POSIX.1\-2008 で追加
\fBmkfifo\fP(3)
\fBmkfifoat\fP(3)	POSIX.1\-2008 で追加
\fBmknod\fP(2)	POSIX.1\-2008 で追加
\fBmknodat\fP(2)	POSIX.1\-2008 で追加
\fBntohl\fP(3)	POSIX.1\-2008 TC2 で追加
\fBntohs\fP(3)	POSIX.1\-2008 TC2 で追加
\fBopen\fP(2)
\fBopenat\fP(2)	POSIX.1\-2008 で追加
\fBpause\fP(2)
\fBpipe\fP(2)
\fBpoll\fP(2)
\fBposix_trace_event\fP(3)
\fBpselect\fP(2)
\fBpthread_kill\fP(3)	POSIX.1\-2008 TC1 で追加
\fBpthread_self\fP(3)	POSIX.1\-2008 TC1 で追加
\fBpthread_sigmask\fP(3)	POSIX.1\-2008 TC1 で追加
\fBraise\fP(3)
\fBread\fP(2)
\fBreadlink\fP(2)
\fBreadlinkat\fP(2)	POSIX.1\-2008 で追加
\fBrecv\fP(2)
\fBrecvfrom\fP(2)
\fBrecvmsg\fP(2)
\fBrename\fP(2)
\fBrenameat\fP(2)	POSIX.1\-2008 で追加
\fBrmdir\fP(2)
\fBselect\fP(2)
\fBsem_post\fP(3)
\fBsend\fP(2)
\fBsendmsg\fP(2)
\fBsendto\fP(2)
\fBsetgid\fP(2)
\fBsetpgid\fP(2)
\fBsetsid\fP(2)
\fBsetsockopt\fP(2)
\fBsetuid\fP(2)
\fBshutdown\fP(2)
\fBsigaction\fP(2)
\fBsigaddset\fP(3)
\fBsigdelset\fP(3)
\fBsigemptyset\fP(3)
\fBsigfillset\fP(3)
\fBsigismember\fP(3)
\fBsiglongjmp\fP(3)	POSIX.1\-2008 TC2 で追加; 下記の「注意」を参照
\fBsignal\fP(2)
\fBsigpause\fP(3)
\fBsigpending\fP(2)
\fBsigprocmask\fP(2)
\fBsigqueue\fP(2)
\fBsigset\fP(3)
\fBsigsuspend\fP(2)
\fBsleep\fP(3)
\fBsockatmark\fP(3)	POSIX.1\-2001 TC2 で追加
\fBsocket\fP(2)
\fBsocketpair\fP(2)
\fBstat\fP(2)
\fBstpcpy\fP(3)	POSIX.1\-2008 TC2 で追加
\fBstpncpy\fP(3)	POSIX.1\-2008 TC2 で追加
\fBstrcat\fP(3)	POSIX.1\-2008 TC2 で追加
\fBstrchr\fP(3)	POSIX.1\-2008 TC2 で追加
\fBstrcmp\fP(3)	POSIX.1\-2008 TC2 で追加
\fBstrcpy\fP(3)	POSIX.1\-2008 TC2 で追加
\fBstrcspn\fP(3)	POSIX.1\-2008 TC2 で追加
\fBstrlen\fP(3)	POSIX.1\-2008 TC2 で追加
\fBstrncat\fP(3)	POSIX.1\-2008 TC2 で追加
\fBstrncmp\fP(3)	POSIX.1\-2008 TC2 で追加
\fBstrncpy\fP(3)	POSIX.1\-2008 TC2 で追加
\fBstrnlen\fP(3)	POSIX.1\-2008 TC2 で追加
\fBstrpbrk\fP(3)	POSIX.1\-2008 TC2 で追加
\fBstrrchr\fP(3)	POSIX.1\-2008 TC2 で追加
\fBstrspn\fP(3)	POSIX.1\-2008 TC2 で追加
\fBstrstr\fP(3)	POSIX.1\-2008 TC2 で追加
\fBstrtok_r\fP(3)	POSIX.1\-2008 TC2 で追加
\fBsymlink\fP(2)
\fBsymlinkat\fP(2)	POSIX.1\-2008 で追加
\fBtcdrain\fP(3)
\fBtcflow\fP(3)
\fBtcflush\fP(3)
\fBtcgetattr\fP(3)
\fBtcgetpgrp\fP(3)
\fBtcsendbreak\fP(3)
\fBtcsetattr\fP(3)
\fBtcsetpgrp\fP(3)
\fBtime\fP(2)
\fBtimer_getoverrun\fP(2)
\fBtimer_gettime\fP(2)
\fBtimer_settime\fP(2)
\fBtimes\fP(2)
\fBumask\fP(2)
\fBuname\fP(2)
\fBunlink\fP(2)
\fBunlinkat\fP(2)	POSIX.1\-2008 で追加
\fButime\fP(2)
\fButimensat\fP(2)	POSIX.1\-2008 で追加
\fButimes\fP(2)	POSIX.1\-2008 で追加
\fBwait\fP(2)
\fBwaitpid\fP(2)
\fBwcpcpy\fP(3)	POSIX.1\-2008 TC2 で追加
\fBwcpncpy\fP(3)	POSIX.1\-2008 TC2 で追加
\fBwcscat\fP(3)	POSIX.1\-2008 TC2 で追加
\fBwcschr\fP(3)	POSIX.1\-2008 TC2 で追加
\fBwcscmp\fP(3)	POSIX.1\-2008 TC2 で追加
\fBwcscpy\fP(3)	POSIX.1\-2008 TC2 で追加
\fBwcscspn\fP(3)	POSIX.1\-2008 TC2 で追加
\fBwcslen\fP(3)	POSIX.1\-2008 TC2 で追加
\fBwcsncat\fP(3)	POSIX.1\-2008 TC2 で追加
\fBwcsncmp\fP(3)	POSIX.1\-2008 TC2 で追加
\fBwcsncpy\fP(3)	POSIX.1\-2008 TC2 で追加
\fBwcsnlen\fP(3)	POSIX.1\-2008 TC2 で追加
\fBwcspbrk\fP(3)	POSIX.1\-2008 TC2 で追加
\fBwcsrchr\fP(3)	POSIX.1\-2008 TC2 で追加
\fBwcsspn\fP(3)	POSIX.1\-2008 TC2 で追加
\fBwcsstr\fP(3)	POSIX.1\-2008 TC2 で追加
\fBwcstok\fP(3)	POSIX.1\-2008 TC2 で追加
\fBwmemchr\fP(3)	POSIX.1\-2008 TC2 で追加
\fBwmemcmp\fP(3)	POSIX.1\-2008 TC2 で追加
\fBwmemcpy\fP(3)	POSIX.1\-2008 TC2 で追加
\fBwmemmove\fP(3)	POSIX.1\-2008 TC2 で追加
\fBwmemset\fP(3)	POSIX.1\-2008 TC2 で追加
\fBwrite\fP(2)
.TE
.PP
注意:
.IP * 3
POSIX.1\-2001 and POSIX.1\-2001 TC2 required the functions \fBfpathconf\fP(3),
\fBpathconf\fP(3), and \fBsysconf\fP(3)  to be async\-signal\-safe, but this
requirement was removed in POSIX.1\-2008.
.IP *
If a signal handler interrupts the execution of an unsafe function, and the
handler terminates via a call to \fBlongjmp\fP(3)  or \fBsiglongjmp\fP(3)  and the
program subsequently calls an unsafe function, then the behavior of the
program is undefined.
.IP *
.\" http://www.opengroup.org/austin/aardvark/latest/xshbug3.txt
.\"
POSIX.1\-2001 TC1 clarified that if an application calls \fBfork\fP(2)  from a
signal handler and any of the fork handlers registered by
\fBpthread_atfork\fP(3)  calls a function that is not async\-signal\-safe, the
behavior is undefined.  A future revision of the standard is likely to
remove \fBfork\fP(2)  from the list of async\-signal\-safe functions.
.IP * 3
.\"
Asynchronous signal handlers that call functions which are cancellation
points and nest over regions of deferred cancellation may trigger
cancellation whose behavior is as if asynchronous cancellation had occurred
and may cause application state to become inconsistent.
.SS errno
.\"
Fetching and setting the value of \fIerrno\fP is async\-signal\-safe provided
that the signal handler saves \fIerrno\fP on entry and restores its value
before returning.
.SS "Deviations in the GNU C library"
The following known deviations from the standard occur in the GNU C library:
.IP * 3
.\" https://sourceware.org/bugzilla/show_bug.cgi?id=19534
Before glibc 2.24, \fBexecl\fP(3)  and \fBexecle\fP(3)  employed \fBrealloc\fP(3)
internally and were consequently not async\-signal\-safe.  This was fixed in
glibc 2.24.
.IP *
.\" FIXME . https://sourceware.org/bugzilla/show_bug.cgi?id=13172
The glibc implementation of \fBaio_suspend\fP(3)  is not async\-signal\-safe
because it uses \fBpthread_mutex_lock\fP(3)  internally.
.SH 関連項目
\fBsigaction\fP(2), \fBsignal\fP(7), \fBstandards\fP(7)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
