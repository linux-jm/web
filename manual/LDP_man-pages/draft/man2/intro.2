.\" Copyright (C) 2007 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 2007-10-23 mtk: moved the _syscallN specific material to the
.\"     new _syscall(2) page, and substantially enhanced and rewrote
.\"     the remaining material on this page.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 2008  Akihiro MOTOKI
.\"         all rights reserved.
.\" Translated 2008-02-10, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\"
.TH INTRO 2 2020\-11\-01 Linux "Linux Programmer's Manual"
.SH 名前
intro \- システムコールの説明
.SH 説明
マニュアルの 2 章では Linux のシステムコールについて説明している。 システムコールは Linux カーネルへのエントリーポイントである。
通常は、システムコールは直接起動される訳ではなく、 ほとんどのシステムコールには対応する C ライブラリのラッパー関数があり、
そのラッパー関数がシステムコールを呼び出すのに必要な処理を実行する。 そのため、システムコールを呼び出すのは通常のライブラリ関数を呼び出すのと
同じように見える。
.PP
多くの場合、 C ライブラリのラッパー関数が行うのは以下のことだけである。
.IP * 3
引数と一意なシステムコール番号をカーネルが期待するレジスターにコピーする
.IP *
カーネルがシステムコールの実際の処理を行う時点でカーネルモードに入る
.IP *
カーネルが CPU をユーザーモードに返した際にシステムコールがエラー番号を返したいれば \fIerrno\fP を設定する
.PP
しかし、ラッパー関数がこれ以上のことを行う場合もいくつかある。例えば、カーネルモードに入る前に引数に対する前処理を実行したり、システムコールが返した値に対する後処理を行うなどである。このような場合、セクション
2 のマニュアルページでは、基本的に、C ライブラリ API インターフェース (通常は GNU C ライブラリのもの)
と生のシステムコールの両方の詳細をできるだけ説明しようとする。ほとんどの場合、メインとなる「説明」では C
ライブラリのインターフェースに焦点をあてて説明し、システムコールでの差分については「注意」のセクションに説明がある。
.PP
Linux のシステムコールのリストについては \fBsyscalls\fP(2)  を参照のこと。
.SH 返り値
エラーの場合、ほとんどのシステムコールは負のエラー番号を返す (具体的には \fBerrno\fP(3)
で説明されている定数のいずれかを負にした値を返す)。 C ライブラリのラッパーは呼び出し元からこうした詳細を隠蔽している。
システムコールが負の値を返した場合、ラッパーは絶対値を \fIerrno\fP 変数にコピーし、ラッパーの返り値として \-1 を返す。
.PP
成功時にシステムコールが返す値はシステムコールにより異なる。 多くのシステムコールは成功時に 0 を返すが、 成功時に 0
以外の値を返すシステムコールもある。 詳細は個々のマニュアルページで説明されている。
.PP
マニュアルページの「書式」の節に規定されたヘッダーファイルから関数の定義を 得るために、プログラマが機能検査マクロを定義しなければならない場合がある
(機能検査マクロの定義が必要な場合、これらの機能検査マクロの定義は 「どの」ヘッダーファイルのインクルードよりも前で行われなければならない)。
このような場合には、必要なマクロがマニュアルページで説明されている。 機能検査マクロのさらなる情報については、
\fBfeature_test_macros\fP(7)  を参照のこと。
.SH 準拠
この章の関数が準拠する UNIX システムや標準を示すのにいくつかの単語や略号が 使用されている。 \fBstandards\fP(7)  を参照のこと。
.SH 注意
.SS 直接呼び出す
ほとんどの場合、直接システムコールを呼び出す必要はないが、 場合によっては標準 C ライブラリに適切な関数が実装されていないこともある。
このような場合は、プログラマは \fBsyscall\fP(2)  を使って、自分でシステムコールを呼び出さなければならない。 過去には、
\fB_syscall\fP(2)  マクロの一つを使ってシステムコールの呼び出すこともできた。
.SS 著者と著作権
著者と著作権に関しては各マニュアルページのソースのヘッダーを参照すること。 これらはページごとに異なる可能性があることに注意してほしい。
.SH 関連項目
.ad l
.nh
\fB_syscall\fP(2), \fBsyscall\fP(2), \fBsyscalls\fP(2), \fBerrno\fP(3), \fBintro\fP(3),
\fBcapabilities\fP(7), \fBcredentials\fP(7), \fBfeature_test_macros\fP(7),
\fBmq_overview\fP(7), \fBpath_resolution\fP(7), \fBpipe\fP(7), \fBpty\fP(7),
\fBsem_overview\fP(7), \fBshm_overview\fP(7), \fBsignal\fP(7), \fBsocket\fP(7),
\fBstandards\fP(7), \fBsystem_data_types\fP(7), \fBsymlink\fP(7), \fBsysvipc\fP(7),
\fBtime\fP(7)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
