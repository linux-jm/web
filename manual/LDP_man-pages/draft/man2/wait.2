.\" Copyright (c) 1993 by Thomas Koenig <ig25@rz.uni-karlsruhe.de>
.\" and Copyright (c) 2004 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 13:30:06 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Sun Aug 21 17:42:42 1994 by Rik Faith <faith@cs.unc.edu>
.\"          (Thanks to Koen Holtman <koen@win.tue.nl>)
.\" Modified Wed May 17 15:54:12 1995 by Rik Faith <faith@cs.unc.edu>
.\"           To remove *'s from status in macros (Thanks to Michael Shields).
.\" Modified as suggested by Nick Duffek <nsd@bbc.com>, aeb, 960426
.\" Modified Mon Jun 23 14:09:52 1997 by aeb - add EINTR.
.\" Modified Thu Nov 26 02:12:45 1998 by aeb - add SIGCHLD stuff.
.\" Modified Mon Jul 24 21:37:38 2000 by David A. Wheeler
.\"          <dwheeler@dwheeler.com> - noted thread issues.
.\" Modified 26 Jun 01 by Michael Kerrisk
.\"          Added __WCLONE, __WALL, and __WNOTHREAD descriptions
.\" Modified 2001-09-25, aeb
.\" Modified 26 Jun 01 by Michael Kerrisk, <mtk.manpages@gmail.com>
.\"	Updated notes on setting disposition of SIGCHLD to SIG_IGN
.\" 2004-11-11, mtk
.\"	Added waitid(2); added WCONTINUED and WIFCONTINUED()
.\"	Added text on SA_NOCLDSTOP
.\"	Updated discussion of SA_NOCLDWAIT to reflect 2.6 behavior
.\"	Much other text rewritten
.\" 2005-05-10, mtk, __W* flags can't be used with waitid()
.\" 2008-07-04, mtk, removed erroneous text about SA_NOCLDSTOP
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 1997 HANATAKA Shinya all rights reserved.
.\" Japanese Version Copyright (c) 2005 Akihiro MOTOKI all rights reserved.
.\" Translated 1997-03-04, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Modified 2000-09-23, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Updated 2001-06-25, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2001-10-15, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2001-12-13, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2002-10-21, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2003-01-27, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2003-09-12, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2005-03-19, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2005-12-26, Akihiro MOTOKI
.\" Updated 2008-07-31, Akihiro MOTOKI, LDP v3.05
.\" Updated 2013-05-06, Akihiro MOTOKI <amotoki@gmail.com>
.\"
.TH WAIT 2 2020\-11\-01 Linux "Linux Programmer's Manual"
.SH 名前
wait, waitpid, waitid \- プロセスの状態変化を待つ
.SH 書式
\fB#include <sys/types.h>\fP
.br
\fB#include <sys/wait.h>\fP
.PP
\fBpid_t wait(int *\fP\fIwstatus\fP\fB);\fP
.PP
\fBpid_t waitpid(pid_t \fP\fIpid\fP\fB, int *\fP\fIwstatus\fP\fB, int \fP\fIoptions\fP\fB);\fP
.PP
\fBint waitid(idtype_t \fP\fIidtype\fP\fB, id_t \fP\fIid\fP\fB, siginfo_t *\fP\fIinfop\fP\fB, int \fP\fIoptions\fP\fB);\fP
                /* これは glibc と POSIX のインターフェイスである。
                   生のシステムコールについての情報は「注意」の節を参照。 */
.PP
.RS -4
glibc 向けの機能検査マクロの要件 (\fBfeature_test_macros\fP(7)  参照):
.RE
.PP
.ad l
.PD 0
\fBwaitid\fP():
.RS 4
.\"    (_XOPEN_SOURCE && _XOPEN_SOURCE_EXTENDED)
glibc 2.26 以降:
_XOPEN_SOURCE >= 500 ||
    _POSIX_C_SOURCE\ >=\ 200809L
.br
glibc 2.25 以前:
    _XOPEN_SOURCE
        || /* Since glibc 2.12: */ _POSIX_C_SOURCE\ >=\ 200809L
        || /* Glibc versions <= 2.19: */ _BSD_SOURCE
.RE
.PD
.ad
.SH 説明
これらのシステムコールはいずれも、呼び出し元プロセスの子プロセスの 状態変化を待ち、状態が変化したその子プロセスの情報を取得するのに 使用される。
状態変化とは以下のいずれかである: 子プロセスの終了、シグナルによる子プロセスの停止、 シグナルによる子プロセスの再開。
子プロセスが終了した場合は、wait を実行することで、 システムがその子プロセスに関連するリソースを解放できるようになる。 wait
が実行されなかった場合には、終了した子プロセスは 「ゾンビ」状態で残り続ける (下記の注意の章を参照のこと)。
.PP
子プロセスの状態変化がすでに発生していた場合、これらのコールは すぐに復帰する。それ以外の場合は、子プロセスの状態変化が起こるか、
シグナルハンドラーによりシステムコールが中断されるまで、 停止 (block) する (後者は、 \fBsigaction\fP(2)  の
\fBSA_RESTART\fP フラグによりシステムコールが自動的に再スタートするようになっていない 場合の動作である)。
以下の説明では、状態変化が起こったがこれらのシステムコールのいずれかに よって待たれていない子プロセスを \fIwaitable\fP (待ち可能) と呼ぶ。
.SS "wait() と waitpid()"
\fBwait\fP()  システムコールは、子プロセスのいずれかが終了するまで 呼び出し元のスレッドの実行を一時停止する。 呼び出し
\fIwait(&wstatus)\fP は以下と等価である:
.PP
.in +4n
.EX
waitpid(\-1, &wstatus, 0);
.EE
.in
.PP
\fBwaitpid\fP() システムコールは、 \fIpid\fP 引数で指定した子プロセスの状態変化が起こるまで、
呼び出し元のスレッドの実行を一時停止する。デフォルトでは、 \fBwaitpid\fP() は子プロセスの終了だけを待つが、この動作は \fIoptions\fP
引数により変更可能である。
.PP
\fIpid\fP に指定できる値は以下の通り:
.IP "< \-1"
プロセスグループID が \fIpid\fP の絶対値に等しい子プロセスのいずれかが終了するまでを待つ。
.IP \-1
子プロセスのどれかが終了するまで待つ。
.IP 0
プロセスグループ ID が、\fBwaitpid\fP() が呼ばれた時点での呼び出し元のプロセスのプロセスグループ ID と等しい子プロセスを待つ。
.IP "> 0"
プロセスID が \fIpid\fP に等しい子プロセスを待つ。
.PP
\fIoptions\fP の値は次の定数の 0 個以上の論理和である:
.TP 
\fBWNOHANG\fP
状態変化が起こった子プロセスがない場合にすぐに復帰する。
.TP 
\fBWUNTRACED\fP
子プロセスが停止した場合にも復帰する (子プロセスが \fBptrace\fP(2)  でトレースされている場合は除く)。
このオプションが指定されていない場合でも、停止したプロセスが 「トレース (traced)」されていれば、子プロセスの状態が報告される。
.TP 
\fBWCONTINUED\fP (Linux 2.6.10 以降)
停止した子プロセスが \fBSIGCONT\fP の配送により再開した場合にも復帰する。
.PP
(Linux 専用オプションについては後述する)
.PP
\fIwstatus\fP が NULL でなければ、 \fBwait\fP()  や \fBwaitpid\fP()  は \fIstatus\fP で指す \fIint\fP
に状態情報を格納する。 この整数は以下のマクロを使って検査できる。 (これらのマクロの引数には、 \fBwait\fP()  や \fBwaitpid\fP()
が書き込んだ整数そのものを指定する。ポインターではない!)
.TP 
\fBWIFEXITED(\fP\fIwstatus\fP\fB)\fP
子プロセスが正常に終了した場合に真を返す。 「正常に」とは、 \fBexit\fP(3)  か \fB_exit\fP(2)  が呼び出された場合、もしくは
main() から復帰した場合である。
.TP 
\fBWEXITSTATUS(\fP\fIwstatus\fP\fB)\fP
子プロセスの終了ステータスを返す。 終了ステータスは \fIstatus\fP 引数の下位 8ビットで構成されており、 \fBexit\fP(3)  や
\fB_exit\fP(2)  の呼び出し時に渡された値、もしくは main() の return 文の 引数として指定された値である。
このマクロを使用するのは \fBWIFEXITED\fP が真を返した場合だけにすべきである。
.TP 
\fBWIFSIGNALED(\fP\fIwstatus\fP\fB)\fP
子プロセスがシグナルにより終了した場合に真を返す。
.TP 
\fBWTERMSIG(\fP\fIwstatus\fP\fB)\fP
子プロセス終了の原因となったシグナルの番号を返す。 このマクロを使用するのは \fBWIFSIGNALED\fP が真を返した場合だけにすべきである。
.TP 
\fBWCOREDUMP(\fP\fIwstatus\fP\fB)\fP
returns true if the child produced a core dump (see \fBcore\fP(5)).  This macro
should be employed only if \fBWIFSIGNALED\fP returned true.
.IP
This macro is not specified in POSIX.1\-2001 and is not available on some
UNIX implementations (e.g., AIX, SunOS).  Therefore, enclose its use inside
\fI#ifdef WCOREDUMP ... #endif\fP.
.TP 
\fBWIFSTOPPED(\fP\fIwstatus\fP\fB)\fP
子プロセスがシグナルの配送により停止した場合に真を返す。 これが真になるのは、システムコールが \fBWUNTRACED\fP
を指定して呼び出された場合か、子プロセスがトレースされている場合 (\fBptrace\fP(2)  参照) だけである。
.TP 
\fBWSTOPSIG(\fP\fIwstatus\fP\fB)\fP
子プロセスを停止させたシグナルの番号を返す。 このマクロを使用するのは \fBWIFSTOPPED\fP が 0 以外を返した場合だけにすべきである。
.TP 
\fBWIFCONTINUED(\fP\fIwstatus\fP\fB)\fP
(Linux 2.6.10 以降)  子プロセスが \fBSIGCONT\fP の配送により再開した場合に真を返す。
.SS waitid()
\fBwaitid\fP()  システムコール (Linux 2.6.9 以降で利用可能) を使うと、
子プロセスのどの状態変化を待つかについてより細かな制御ができる。
.PP
引数 \fIidtype\fP と \fIid\fP でどの子プロセスを待つかを選択する:
.IP "\fIidtype\fP == \fBP_PID\fP"
プロセスID が \fIid\fP と一致する子プロセスを待つ。
.IP "\fIidtype\fP == \fBP_PIDFD\fP (since Linux 5.4)"
.\" commit 3695eae5fee0605f316fbaad0b9e3de791d7dfaf
Wait for the child referred to by the PID file descriptor specified in
\fIid\fP.  (See \fBpidfd_open\fP(2)  for further information on PID file
descriptors.)
.IP "\fIidtype\fP == \fBP_PGID\fP"
.\" commit 821cc7b0b205c0df64cce59aacc330af251fa8f7
Wait for any child whose process group ID matches \fIid\fP.  Since Linux 5.4,
if \fIid\fP is zero, then wait for any child that is in the same process group
as the caller's process group at the time of the call.
.IP "\fIidtype\fP == \fBP_ALL\fP"
子プロセス全部を対象に待つ。 \fIid\fP は無視される。
.PP
子プロセスのどの状態変化を待つかは以下のフラグで指定する (\fIoptions\fP には 1個以上のフラグの論理和をとって指定する):
.TP 
\fBWEXITED\fP
子プロセスの終了を待つ。
.TP 
\fBWSTOPPED\fP
子プロセスがシグナルの配送により停止するのを待つ。
.TP 
\fBWCONTINUED\fP
(停止していた) 子プロセスが \fBSIGCONT\fP が配送されて再開するのを待つ。
.PP
さらに以下のフラグを論理和の形で \fIoptions\fP に指定できる:
.TP 
\fBWNOHANG\fP
\fBwaitpid\fP()  と同様。
.TP 
\fBWNOWAIT\fP
waitable 状態のプロセスをそのままにする。この後で wait コールを 使って、同じ子プロセスの状態情報をもう一度取得することができる。
.PP
成功した場合には、 \fBwaitid\fP()  は \fIinfop\fP が指す \fIsiginfo_t\fP 構造体の以下のフィールドを設定する:
.TP 
\fIsi_pid\fP
子プロセスのプロセスID。
.TP 
\fIsi_uid\fP
子プロセスの実ユーザーID (このフィールドは他のほとんどの実装では設定されない)。
.TP 
\fIsi_signo\fP
常に \fBSIGCHLD\fP が設定される。
.TP 
\fIsi_status\fP
\fB_exit\fP(2)  (か \fBexit\fP(3))  に指定された子プロセスの終了ステータス、もしくは
子プロセスの終了、停止、再開の原因となったシグナルが設定される。 このフィールドをどう解釈するかは、 \fIsi_code\fP
フィールドを参照して決めることができる。
.TP 
\fIsi_code\fP
以下のいずれかが設定される: \fBCLD_EXITED\fP (子プロセスが \fB_exit\fP(2)  を呼び出した); \fBCLD_KILLED\fP
(シグナルにより子プロセスが kill された); \fBCLD_DUMPED\fP (シグナルにより子プロセスが kill され、コアダンプが行われた);
\fBCLD_STOPPED\fP (シグナルにより子プロセスが停止した); \fBCLD_TRAPPED\fP
(トレースされていた子プロセスがトラップを受信した); \fBCLD_CONTINUED\fP (\fBSIGCONT\fP により子プロセスが再開された)。
.PP
If \fBWNOHANG\fP was specified in \fIoptions\fP and there were no children in a
waitable state, then \fBwaitid\fP()  returns 0 immediately and the state of the
\fIsiginfo_t\fP structure pointed to by \fIinfop\fP depends on the
implementation.  To (portably) distinguish this case from that where a child
was in a waitable state, zero out the \fIsi_pid\fP field before the call and
check for a nonzero value in this field after the call returns.
.PP
.\" POSIX.1-2001 leaves this possibility unspecified; most
.\" implementations (including Linux) zero out the structure
.\" in this case, but at least one implementation (AIX 5.1)
.\" does not -- MTK Nov 04
POSIX.1\-2008 Technical Corrigendum 1 (2013) adds the requirement that when
\fBWNOHANG\fP is specified in \fIoptions\fP and there were no children in a
waitable state, then \fBwaitid\fP()  should zero out the \fIsi_pid\fP and
\fIsi_signo\fP fields of the structure.  On Linux and other implementations
that adhere to this requirement, it is not necessary to zero out the
\fIsi_pid\fP field before calling \fBwaitid\fP().  However, not all
implementations follow the POSIX.1 specification on this point.
.SH 返り値
\fBwait\fP(): 成功すると、終了した子プロセスのプロセスID を返す。 エラーの場合 \-1 を返す。
.PP
\fBwaitpid\fP(): 成功すると、状態が変化した子プロセスのプロセスID を返す。 \fBWNOHANG\fP が指定されていて、 \fIpid\fP
で指示された子プロセスが一つ以上存在するが、どの子プロセスでも 状態変化が起こっていなかった場合は、 0 を返す。 エラーの場合 \-1 を返す。
.PP
.\" FIXME As reported by Vegard Nossum, if infop is NULL, then waitid()
.\" returns the PID of the child.  Either this is a bug, or it is intended
.\" behavior that needs to be documented.  See my Jan 2009 LKML mail
.\" "waitid() return value strangeness when infop is NULL".
\fBwaitid\fP(): 成功すると 0 を返す。 \fBWNOHANG\fP が指定されていて、 \fIpid\fP
で指示された子プロセスで状態変化が起こっていなかった場合にも 0 を返す。
.PP
エラーの場合 \-1 を返す。 エラーの場合、これらのシステムコールはいずれも \fIerrno\fP に適切な値を設定する。
.SH エラー
.TP 
\fBECHILD\fP
(\fBwait\fP()  の場合)  呼び出し元プロセスには、wait を行っていない子プロセスはない。
.TP 
\fBECHILD\fP
(\fBwaitpid\fP()  か \fBwaitid\fP()  の場合)  \fIpid\fP (\fBwaitpid\fP())  か \fIidtype\fP と
\fIid\fP (\fBwaitid\fP())  で指定したプロセスが存在しないか、呼び出し元プロセスの子プロセスでない (\fBSIGCHLD\fP の動作に
\fBSIG_IGN\fP を設定した場合には、自分自身の子プロセスでも起こりうる。 スレッドに関しては「Linux での注意」の節も参照すること)。
.TP 
\fBEINTR\fP
\fBWNOHANG\fP が設定されておらず、禁止 (block) されていないシグナルや \fBSIGCHLD\fP を受信した。 \fBsignal\fP(7)
参照。
.TP 
\fBEINVAL\fP
\fIoptions\fP 引数が不正である。
.SH 準拠
SVr4, 4.3BSD, POSIX.1\-2001.
.SH 注意
A child that terminates, but has not been waited for becomes a "zombie".
The kernel maintains a minimal set of information about the zombie process
(PID, termination status, resource usage information)  in order to allow the
parent to later perform a wait to obtain information about the child.  As
long as a zombie is not removed from the system via a wait, it will consume
a slot in the kernel process table, and if this table fills, it will not be
possible to create further processes.  If a parent process terminates, then
its "zombie" children (if any)  are adopted by \fBinit\fP(1), (or by the
nearest "subreaper" process as defined through the use of the \fBprctl\fP(2)
\fBPR_SET_CHILD_SUBREAPER\fP operation); \fBinit\fP(1)  automatically performs a
wait to remove the zombies.
.PP
POSIX.1\-2001 では以下のように規定されている。 \fBSIGCHLD\fP の動作が \fBSIG_IGN\fP に設定されたか、 \fBSIGCHLD\fP
に対して \fBSA_NOCLDWAIT\fP フラグが設定された場合 (\fBsigaction\fP(2)  参照)、終了した子プロセスはゾンビにはならず、
\fBwait\fP()  や \fBwaitpid\fP()  の呼び出しは全ての子プロセスが終了するまで停止し、 子プロセスが全部終了した後 \fIerrno\fP
に \fBECHILD\fP を設定して失敗する。 (もともとの POSIX 標準は \fBSIGCHLD\fP に \fBSIG_IGN\fP
を設定した場合の振る舞いを未規定のままにしている。 \fBSIGCHLD\fP のデフォルトの動作が「無視」であるにもかかわらず、 \fBSIGCHLD\fP
の動作として \fBSIG_IGN\fP を明示的に設定した場合にはゾンビプロセスの子プロセスの扱いが 異なる点に注意すること。)
.PP
Linux 2.6 はこの仕様に準拠している。 しかし、Linux 2.4 (とそれ以前のバージョン) はそうではない: \fBSIGCHLD\fP
が無視される状態で \fBwait\fP()  または \fBwaitpid\fP()  が呼び出された場合、 \fBSIGCHLD\fP
が無視されていないかのように振る舞う。 つまり、呼び出しによって次の子プロセスの終了までブロックされ、 終了した子プロセスの PID と状態が返される。
.SS "Linux での注意"
Linux カーネルでは、カーネルによってスケジュールされるスレッドは プロセスと明確に区別できる構成要素ではない。スレッドは Linux 固有の
\fBclone\fP(2)  システムコールを使用して生成されるプロセスに過ぎない。 移植性のある \fBpthread_create\fP(3)
コールのような他のルーチンは \fBclone\fP(2)  を使用して実装されている; これらでは \fBwaitid\fP()  を使うことはできない。
Linux 2.4 より前では、スレッドは単に特殊なプロセスであったので、 例え同じスレッドグループであっても、
あるスレッドが別のスレッドの子プロセスが終了するのを待つことは出来なかった。 しかし、POSIX ではこのような機能を規定しており、 Linux 2.4
以降では、あるスレッドが同じスレッドグループの他のスレッドの 子プロセスが終了するのを待つことができるようになった。
そして将来はこれがデフォルトの動作になるであろう。
.PP
.\" commit 91c4e8ea8f05916df0c8a6f383508ac7c9e10dba
The following Linux\-specific \fIoptions\fP are for use with children created
using \fBclone\fP(2); they can also, since Linux 4.7, be used with \fBwaitid\fP():
.TP 
\fB__WCLONE\fP
.\" since 0.99pl10
"clone" な子プロセスだけを待つ。 指定されなかった場合は非 "clone" な子プロセスだけを待つ ("clone"
な子プロセスは、終了時に親プロセスへ全くシグナルを送らないか、 \fBSIGCHLD\fP 以外のシグナルを送る)。 このオプションは \fB__WALL\fP
も指定された場合は無視される。
.TP 
\fB__WALL\fP (Linux 2.4 以降)
.\" since patch-2.3.48
"clone" であるかないかに関わらず、 全ての子プロセスを待つ。
.TP 
\fB__WNOTHREAD\fP (Linux 2.4 以降)
.\" since patch-2.4.0-test8
同じスレッドグループの他のスレッドの子プロセスは待たない。 Linux 2.4 より前ではデフォルトであった。
.PP
.\" commit bf959931ddb88c4e4366e96dd22e68fa0db9527c
.\" prevents cases where an unreapable zombie is created if
.\" /sbin/init doesn't use __WALL.
Since Linux 4.7, the \fB__WALL\fP flag is automatically implied if the child is
being ptraced.
.SS "C ライブラリとカーネルの違い"
\fBwait\fP()  is actually a library function that (in glibc) is implemented as
a call to \fBwait4\fP(2).
.PP
.\" e.g., i386 has the system call, but not x86-64
On some architectures, there is no \fBwaitpid\fP()  system call; instead, this
interface is implemented via a C library wrapper function that calls
\fBwait4\fP(2).
.PP
生の \fBwaitid\fP() システムコールは \fIstruct rusage\ *\fP 型の第 5 引数を取る。 この引数が NULL 以外の場合、
この引数が子プロセスのリソース使用状況を返すのに使用される。 これは \fBwait4\fP(2) と同じ方法である。 詳細は \fBgetrusage\fP(2)
を参照。
.SH バグ
POSIX.1\-2008 によると、 \fBwaitid\fP() を呼び出すアプリケーションは、 \fIinfop\fP が \fIsiginfo_t\fP
構造体を指していること (つまり \fIinfop\fP が NULL でないポインターであること) を保証しなければならない。 Linux では、
\fIinfop\fP が NULL の場合、 \fBwaitid\fP() は成功し、wait している子プロセスのプロセス ID を返す。
アプリケーションは、この食い違った、非標準で、不必要な機能に依存しないようにすべきである。
.SH 例
.\" fork.2 refers to this example program.
以下のプログラムは、 \fBfork\fP(2)  と \fBwaitpid\fP()  の使用方法の例を示している。 このプログラムでは子プロセスを生成する。
コマンドライン引数が指定されなかったときは、 子プロセスは \fBpause\fP(2)  を使ってその実行を一時停止し、ユーザーがその子プロセスに
シグナルを送信できるようにする。 コマンドライン引数が指定された場合は、 子プロセスは直ちに終了し、
コマンドラインで指定された整数を終了ステータスとして使用する。 親プロセスは、 \fBwaitpid\fP()  を使って子プロセスを監視し、 wait
のステータス値を上記の W*() マクロを使って解析するという ループを実行する。
.PP
以下のシェルのセッションはこのプログラムの使用例を示したものである。
.PP
.in +4n
.EX
$\fB ./a.out &\fP
Child PID is 32360
[1] 32359
$\fB kill \-STOP 32360\fP
stopped by signal 19
$\fB kill \-CONT 32360\fP
continued
$\fB kill \-TERM 32360\fP
killed by signal 15
[1]+  Done                    ./a.out
$
.EE
.in
.SS プログラムのソース
\&
.EX
#include <sys/wait.h>
#include <stdint.h>
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>

int
main(int argc, char *argv[])
{
    pid_t cpid, w;
    int wstatus;

    cpid = fork();
    if (cpid == \-1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (cpid == 0) {            /* Code executed by child */
        printf("Child PID is %jd\en", (intmax_t) getpid());
        if (argc == 1)
            pause();                    /* Wait for signals */
        _exit(atoi(argv[1]));

    } else {                    /* Code executed by parent */
        do {
            w = waitpid(cpid, &wstatus, WUNTRACED | WCONTINUED);
            if (w == \-1) {
                perror("waitpid");
                exit(EXIT_FAILURE);
            }

            if (WIFEXITED(wstatus)) {
                printf("exited, status=%d\en", WEXITSTATUS(wstatus));
            } else if (WIFSIGNALED(wstatus)) {
                printf("killed by signal %d\en", WTERMSIG(wstatus));
            } else if (WIFSTOPPED(wstatus)) {
                printf("stopped by signal %d\en", WSTOPSIG(wstatus));
            } else if (WIFCONTINUED(wstatus)) {
                printf("continued\en");
            }
        } while (!WIFEXITED(wstatus) && !WIFSIGNALED(wstatus));
        exit(EXIT_SUCCESS);
    }
}
.EE
.SH 関連項目
\fB_exit\fP(2), \fBclone\fP(2), \fBfork\fP(2), \fBkill\fP(2), \fBptrace\fP(2),
\fBsigaction\fP(2), \fBsignal\fP(2), \fBwait4\fP(2), \fBpthread_create\fP(3),
\fBcore\fP(5), \fBcredentials\fP(7), \fBsignal\fP(7)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
