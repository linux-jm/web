.\" Copyright (C) 1995 Andries Brouwer (aeb@cwi.nl)
.\" and Copyright (C) 2012, 2014 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Written 11 June 1995 by Andries Brouwer <aeb@cwi.nl>
.\" 2008-02-15, Jeremy Kerr <jk@ozlabs.org>
.\"     Add info on command type 10; add details on types 6, 7, 8, & 9.
.\" 2008-02-15, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Update LOG_BUF_LEN details; update RETURN VALUE section.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 1997 HANATAKA Shinya
.\"         all rights reserved.
.\" Translated Mon Dec 16 11:16:34 JST 2001
.\"         by HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Updated Thu Mar 6 2003 by Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2005-09-06, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2008-04-04, Akihiro MOTOKI, LDP v2.79
.\" Updated 2008-07-31, Akihiro MOTOKI, LDP v3.05
.\" Updated 2012-04-30, Akihiro MOTOKI <amotoki@gmail.com>
.\" Updated 2012-05-29, Akihiro MOTOKI <amotoki@gmail.com>
.\" Updated 2013-05-06, Akihiro MOTOKI <amotoki@gmail.com>
.\"
.TH SYSLOG 2 " 2020\-08\-13" Linux "Linux Programmer's Manual"
.SH 名前
syslog, klogctl \- カーネルのメッセージリングバッファーを読んだり消去したりする; console_loglevel の設定を行う
.SH 書式
.nf
\fBint syslog(int \fP\fItype\fP\fB, char *\fP\fIbufp\fP\fB, int \fP\fIlen\fP\fB);\fP
\fB/* glibc ではラッパー関数は提供されていない */\fP
.PP
 /* glibc インターフェース */
\fB#include <sys/klog.h>\fP
.PP
\fBint klogctl(int \fP\fItype\fP\fB, char *\fP\fIbufp\fP\fB, int \fP\fIlen\fP\fB);\fP
.fi
.SH 説明
\fI注意\fP: おそらく、あなたが探しているのは、 \fBsyslogd\fP(8) と通信する C ライブラリ関数の \fBsyslog\fP() でしょう。詳細は
\fBsyslog\fP(3) を参照のこと。
.PP
このページはカーネルの \fBsyslog\fP() システムコールについて説明している。 \fBsyslog\fP() システムコールはカーネルの
\fIprintk\fP() バッファーを制御するために使用される。 このシステムコールに対する glibc ラッパー関数は \fBklogctl\fP()
と呼ばれている。
.SS "カーネルログバッファー (kernel log buffer)"
.\" Under "General setup" ==> "Kernel log buffer size"
.\" For 2.6, precisely the option seems to have appeared in 2.5.55.
カーネルは長さ \fBLOG_BUF_LEN\fP の巡回式のバッファーを持っており、 それにはカーネル関数の \fBprintk\fP()
の引数として与えられた メッセージが (そのログレベルにかかわらず) 格納される。 初期のカーネルでは \fBLOG_BUF_LEN\fP の値は 4096
であった。 カーネル 1.3.54 からは 8192、 カーネル 2.1.113 からは 16384 になり、 カーネル 2.4.23 以降および
2.6 以降ではカーネル設定オプション (\fBCONFIG_LOG_BUF_SHIFT\fP、 デフォルト値はアーキテクチャー依存)
で値を設定できるようになっている。 Linux 2.6.6 以降では、コマンド 10 (下記参照) でバッファーのサイズを問い合わせできる。
.SS コマンド
\fItype\fP 引数はこの関数が行う動作を決定する。 以下のリストに示す値を \fItype\fP に指定できる。
シンボル名はカーネルソースで定義されているが、ユーザー空間には公開されていない。 したがって、数字を使うか、名前を自分で定義する必要がある。
.TP 
\fBSYSLOG_ACTION_CLOSE\fP (0)
ログをクローズする。現在のところ NOP である。
.TP 
\fBSYSLOG_ACTION_OPEN\fP (1)
ログをオープンする。現在のところ NOP である。
.TP 
\fBSYSLOG_ACTION_READ\fP (2)
ログを読み出す。 この呼び出しは、 カーネルログバッファーが空でなくなるまで待って、 最大 \fIlen\fP バイトまで \fIbufp\fP
が指すバッファーに読み込み、 読み込んだバイト数を返す。 ログから読まれたバイトはログバッファーから消える。 つまり、情報は一度しか読むことができない。
これはユーザーのプログラムが \fI/proc/kmsg\fP を読んだ時にカーネルによって実行される関数でもある。
.TP 
\fBSYSLOG_ACTION_READ_ALL\fP (3)
リングバッファーに残っているメッセージをすべて読み出し、 \fIbufp\fP が指すバッファーに格納する。 この呼び出しログバッファーの最後の \fIlen\fP
バイトを (非破壊的に) 読み出すが、 最後の「リングバッファー消去」命令 (下記のコマンド 5 参照)
以降にバッファーに書き込まれた情報しか読み出せない。 返り値は読み込んだバイト数である。
.TP 
\fBSYSLOG_ACTION_READ_CLEAR\fP (4)
リングバッファーに残っているメッセージをすべて読み出し、クリアする。 この呼び出しは \fItype\fP 3
と全く同じことを行い、追加で「リングバッファー消去」 ("clear ring buffer") コマンドも実行する。
.TP 
\fBSYSLOG_ACTION_CLEAR\fP (5)
「リングバッファー消去」 (\"clear ring buffer\") コマンドのみを実行する。 引数 \fIbufp\fP と \fIlen\fP
は無視される。
.IP
このコマンドは実際にリングバッファーをクリアするわけではなく、 コマンド 3 (\fBSYSLOG_ACTION_READ_ALL\fP) と 4
(\fBSYSLOG_ACTION_READ_CLEAR\fP で返す内容を決定するカーネルの管理変数を設定する。 このコマンドはコマンド 2
(\fBSYSLOG_ACTION_READ\fP) と 9 (\fBSYSLOG_ACTION_SIZE_UNREAD\fP) には影響を与えない。
.TP 
\fBSYSLOG_ACTION_CONSOLE_OFF\fP (6)
.\" commit 1aaad49e856ce41adc07d8ae0c8ef35fc4483245
このコマンドは \fIconsole_loglevel\fP の現在の値を保存し、それから \fIconsole_loglevel\fP を
\fIminimum_console_loglevel\fP に設定する。 これにより、コンソールにメッセージが出力されなくなる。 Linux 2.6.32
より前では、 このコマンドは \fIconsole_loglevel\fP を \fIminimum_console_loglevel\fP
に設定するだけであった。 下記の \fI/proc/sys/kernel/printk\fP の議論を参照。
.IP
引数 \fIbufp\fP と \fIlen\fP は無視される。
.TP 
\fBSYSLOG_ACTION_CONSOLE_ON\fP (7)
.\" commit 1aaad49e856ce41adc07d8ae0c8ef35fc4483245
直前に \fBSYSLOG_ACTION_CONSOLE_OFF\fP コマンドがされた場合、 このコマンドは \fIconsole_loglevel\fP
を前のコマンドが保存した値に戻す。 Linux 2.6.32 より前では、 このコマンドは単に \fIconsole_loglevel\fP を
\fIdefault_console_loglevel\fP に設定するだけであった。 下記の \fI/proc/sys/kernel/printk\fP
の議論を参照。
.IP
引数 \fIbufp\fP と \fIlen\fP は無視される。
.TP 
\fBSYSLOG_ACTION_CONSOLE_LEVEL\fP (8)
\fIconsole_loglevel\fP を \fIlen\fP で指定された値に設定する。 \fIlen\fP は 1 以上 8 以下の整数でなければならない。
カーネルにより、暗黙のうちに \fIlen\fP に \fIminimum_console_loglevel\fP で指定される最小値が適用される。
詳細は「ログレベル」の節を参照のこと。 引数 \fIbufp\fP は無視される。
.TP 
\fBSYSLOG_ACTION_SIZE_UNREAD\fP (9) (Linux 2.4.10 以降)
コマンド 2 (\fBSYSLOG_ACTION_READ\fP) でカーネルログバッファーから読み出せるバイト数を返す。 引数 \fIbufp\fP と
\fIlen\fP は無視される。
.TP 
\fBSYSLOG_ACTION_SIZE_BUFFER\fP (10) (Linux 2.6.6 以降)
カーネルログバッファーの全体のサイズを返す。 引数 \fIbufp\fP と \fIlen\fP は無視される。
.PP
.\"
.\"
コマンド種別 3 と 10 以外のコマンドは全て特権が必要である。
バージョン 2.6.37 より前の Linux カーネルでは、
コマンド種別 3 と 10 は非特権プロセスも呼び出すことができる。
Linux 2.6.37 以降では、\fI/proc/sys/kernel/dmesg_restrict\fP が値 0 の場合に限り、
非特権プロセスはこれらのコマンドを呼び出すことができる。
Linux 2.6.37 より前では、「特権を持つ (privileged)」とは呼び出し者が
\fBCAP_SYS_ADMIN\fP ケーパビリティを持つことを意味する。
Linux 2.6.37 以降では、「特権を持つ」とは呼び出し者が
\fBCAP_SYS_ADMIN\fP ケーパビリティか
(新しい) \fBCAP_SYSLOG\fP ケーパビリティのいずれかを持つことを意味する
(この目的で \fBCAP_SYS_ADMIN\fP ケーパビリティを使うのは今は非推奨である)。
.SS /proc/sys/kernel/printk
\fI/proc/sys/kernel/printk\fP は書き込み可能なファイルで、 エラーメッセージのログ出力を行う際にカーネルの
\fIprintk()\fP の動作に影響を持つ 4 つの整数値が入っている。 4 つの値は以下のとおりである。
.TP 
\fIconsole_loglevel\fP
.\" since Linux 2.4
メッセージのログレベルがこの値よりも小さい場合のみ、メッセージだけがコンソールに出力される。 このフィールドのデフォルト値は
\fBDEFAULT_CONSOLE_LOGLEVEL\fP (7) だが、 カーネルのコマンドラインに "quiet" という単語が含まれている場合は 4
に設定され、 "debug" という単語が含まれている場合は 10 に設定され、 カーネルフォールトが発生した場合には 15 に設定される (但し、10
や 15 という数字に意味はなく、8 と同等である)。 \fIconsole_loglevel\fP の値は \fItype\fP が 8 の
\fBsyslog\fP() の呼び出しによって設定でき、 設定できる値の範囲は 1\(en8 である。
.TP 
\fIdefault_message_loglevel\fP
.\" commit 5af5bcb8d37f99ba415a1adc6da71051b84f93a5
この値は、明示的にログレベルが指定されていない \fIprintk()\fP メッセージのログレベルとして使用される。 Linux 2.6.38 以前では、
このフィールドのデフォルト値は 4 (\fBKERN_WARNING\fP) にハードコードされていた。 Linux 2.6.39 以降では、
デフォルト値はカーネルの設定オプション \fBCONFIG_DEFAULT_MESSAGE_LOGLEVEL\fP で定義されており、 デフォルト値は 4
である。
.TP 
\fIminimum_console_loglevel\fP
このフィールドの値は \fIconsole_loglevel\fP に設定できる最小値である。
.TP 
\fIdefault_console_loglevel\fP
.\"
.\"
\fIconsole_loglevel\fP のデフォルト値である。
.SS ログレベル
すべての \fIprintk\fP() メッセージにはそれぞれログレベルがある。 ログレベルがメッセージの一部として明示的に指定されなかった場合は、
ログレベルは \fIdefault_message_loglevel\fP になる。ログレベルの一般的な意味は以下のとおりである。
.TS
lB lB lB
lB c l.
カーネル定数	レベル値	意味
KERN_EMERG	0	システムが使用不可
KERN_ALERT	1	直ちに対応しなければならない
KERN_CRIT	2	危険な状況
KERN_ERR	3	エラー状況
KERN_WARNING	4	警告状況
KERN_NOTICE	5	通常だが重要な状況
KERN_INFO	6	参考情報
KERN_DEBUG	7	デバッグレベルのメッセージ
.TE
.sp 1
カーネルの \fIprintk()\fP ルーチンは、メッセージのログレベルが \fIconsole_loglevel\fP よりも小さい値の場合にのみ、
メッセージをコンソールに出力する。
.SH 返り値
\fItype\fP が 2, 3, 4 の場合、成功すると \fBsyslog\fP()  は読み出したバイト数を返す。 \fItype\fP が 9 の場合、
カーネルログバッファーにある現在読み出し可能なバイト数を返す。 \fItype\fP が 10 の場合、 カーネルログバッファーの総量を返す。 \fItype\fP
がそれ以外の値の場合、成功すると 0 が返される。
.PP
エラーの場合は、\-1\ が返り、 \fIerrno\fP にエラーを示す値が設定される。
.SH エラー
.TP 
\fBEINVAL\fP
不正な引数 (具体的には、 \fItype\fP が正しくない、もしくは \fItype\fP が 2, 3, 4 の場合に \fIbuf\fP が NULL か
\fIlen\fP が 0 未満である、もしくは \fItype\fP が 8 の場合に \fIlevel\fP が 1 以上 8 以下の範囲に入っていない)。
.TP 
\fBENOSYS\fP
カーネルの設定オプション \fBCONFIG_PRINTK\fP を無効にしてカーネルがコンパイルされているため、 \fBsyslog\fP()
システムコールが利用できない。
.TP 
\fBEPERM\fP
十分な権限を持たないプロセス (正確にはケーパビリティ \fBCAP_SYS_ADMIN\fP も \fBCAP_SYSLOG\fP も持たないプロセス) が
\fIconsole_loglevel\fP を変更しようとしたか、 カーネルメッセージリングを消去しようとした。
.TP 
\fBERESTARTSYS\fP
システムコールがシグナルによって割り込まれ、何も読み出せなかった。 (トレース中にしか発生することはない)
.SH 準拠
このシステムコールは Linux 特有であり、移植を意図したプログラムでは 使用してはいけない。
.SH 注意
.\" In libc4 and libc5 the number of this call was defined by
.\" .BR SYS_klog .
.\" In glibc 2.0 the syscall is baptized
.\" .BR klogctl ().
かなり初期の頃から、同じ名前を持つシステムコールとライブラリルーチンが
全く異なる別物であるのは不幸なことだと指摘されてきた。
.SH 関連項目
 \fBdmesg\fP(1), \fBsyslog\fP(3), \fBcapabilities\fP(7)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
