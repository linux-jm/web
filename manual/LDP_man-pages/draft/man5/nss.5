.\" Copyright (C) 2006 Red Hat, Inc. All rights reserved.
.\" Author: Ulrich Drepper <drepper@redhat.com>
.\"
.\" %%%LICENSE_START(GPLv2_MISC)
.\" This copyrighted material is made available to anyone wishing to use,
.\" modify, copy, or redistribute it subject to the terms and conditions of the
.\" GNU General Public License v.2.
.\"
.\" This program is distributed in the hope that it will be useful, but WITHOUT
.\" ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
.\" FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
.\" more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH NSS 5 2020\-06\-09 Linux "Linux Programmer's Manual"
.SH 名前
nss \- 名前サービス切り替え (Name Service Switch) の設定ファイル
.SH 説明
パスワードやグループのデータベースなどのシステムデータベースからのデータ取得の関数の呼び出しは、 GNU C
ライブラリの名前サービス切り替えの実装により処理される。 提供されている様々なサービスは個別のモジュールにより実装されており、
各モジュールは本質的に大きく異なっている。
.PP
GNU C ライブラリでのデフォルト実装は、 デフォルトでは保守的になっており、 安全でないデータは使用しない。 これはいくつかの状況、
特にデータベースが大きい場合、では非常にコストがかかることがある。 いくつかのモジュールでは、 安全であると分かっている場合、
システム管理者がショットカットを使うようにすることができる。 この前提が正しいことを保証するのはシステム管理者の責任である。
.PP
他には実装が時間を追って変化しているモジュールもある。 モジュールの実装がメモリー使用量を優先してスピードを犠牲にしていた場合、
優先度を変更すると問題が起こる場合がある。
.PP
\fI/etc/default/nss\fP ファイルには変数がいくつかある。 各変数は一つもしくは複数の NSS モジュールの動作を制御する。
ホワイトスペースは無視される。 \(aq#\(aq で始まる行はコメントとして扱われる。
.PP
現在のところ認識される変数は次の通り。
.TP 
\fBNETID_AUTHORITATIVE =\fP \fITRUE\fP|\fIFALSE\fP
TRUE に設定されると、 \fBinitgroups\fP(3) 関数の NIS バックエンドが \fInetid.byname\fP NIS
マップからの情報を信頼できるものとして受け取る。 \fIgroup.byname\fP マップが大きい場合、 これによりこの関数を大きくスピードアップできる。
\fInetid.byname\fP マップの内容は\fBそのまま\fP使用される。 システム管理者は内容が正しく生成されていることを保証しなければならない。
.TP 
\fBSERVICES_AUTHORITATIVE =\fP \fITRUE\fP|\fIFALSE\fP
TRUE に設定されると、 関数 \fBgetservbyname\fP(3) と \fBgetservbyname_r\fP(3) の NIS バックエンドが
\fIservices.byservicename\fP NIS マップが存在し、その情報を信頼できるものとみなす。 特に、
サービス名とサービス別名の両方に対して /proto ありと /proto なしの両方のキーが含まれているとみなす。
システム管理者は内容が正しく生成されていることを保証しなければならない。
.TP 
\fBSETENT_BATCH_READ =\fP \fITRUE\fP|\fIFALSE\fP
TRUE に設定されると、 関数 \fBsetpwent\fP(3) と \fBsetgrent\fP(3) の NIS バックエンドは、
全データベースを一度に読み込み、 それから対応する \fBgetpwent\fP(3) や \fBgetgrent\fP(3) の呼び出しで一つ一つ要求を処理する。
TRUE でない場合、 \fBgetpwent\fP(3) や \fBgetgrent\fP(3) の各々の呼び出しで、
次のエントリーを取得するためにサーバーとのネットワーク通信が発生する。
.SH ファイル
\fI/etc/default/nss\fP
.SH 例
デフォルト設定は、 以下の設定ファイルと同じである。
.PP
.in +4n
.EX
NETID_AUTHORITATIVE=FALSE
SERVICES_AUTHORITATIVE=FALSE
SETENT_BATCH_READ=FALSE
.EE
.in
.\" .SH AUTHOR
.\" Ulrich Drepper <drepper@redhat.com>
.\"
.SH 関連項目
\fInsswitch.conf\fP
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 5.10 の一部である。プロジェクトの説明とバグ報告に関する情報は
\%https://www.kernel.org/doc/man\-pages/ に書かれている。
