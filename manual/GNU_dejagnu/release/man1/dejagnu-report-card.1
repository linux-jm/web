.\" Copyright (C) 2018  Free Software Foundation, Inc.
.\" You may distribute this file under the terms of the GNU Free
.\" Documentation License.
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" translated 2022-04-06
.\"
.Dd 2018/12/31
.Os GNU
.Dt DEJAGNU-REPORT-CARD 1 URM
.Sh 名前
.Nm dejagnu\ report\ card
.Nd 複数ツールに対するテスト結果の取りまとめ
.Sh 書式
.Nm dejagnu\ report\ card
.Oo Ao Ar option Ac \*(Ba Ao Ar tool Ac \*(Ba Ao Ar file Ac Oc ...
.Sh 説明
The
.Nm
コマンドは、 複数ツールによるテスト結果を表形式で表示します。 生成されるこの表においては、 以下の項目を一覧表示します。
各ツールごとに (そして複数パスが実行された場合には、 各パスごとに)、 テストの成功数 (passed)、 失敗数 (failed)、 未対応数
(unsupported)、 未解決数 (unresolved)、 未実施数 (untested) です。 失敗することが予想されるテストは、
成功することが予想されるテストとは、 別カラムに分けてカウントされます。 ただし失敗することが分かっている ("known") テストと、
失敗が予想される ("expected") テストは、 まとめられます。 テストが警告やエラーを生成した場合、 関連する行の終わりに
.Ql !W!
や
.Ql !E!
というタグがつきます。
.Pp
オプションでなく引数リストの場合には、 ツール名またはファイル名が含まれる場合があります。
.Nm
コマンドは、 DejaGnu 概要ファイル
(summary file) を読み込もうとします。 そして、 その場合には名称の翻訳を行います。
.Bl -tag -width ".Pa *.sum"
.It Pa *.sum
そのまま用います。
.It Pa *.log
同じベース名を用いて
.Pa *.sum
に書き換えます。
.It Pa *.
概要ファイルを用いるために、 文字列
.Pa sum
が後ろにつけられます。 この処理は、 シェル上の Readline によって、
ファイル名補完を用いた場合の利便性のために行われるものであり、 補完がドットまで行われるからです。
.It Pa *
ツール名として扱われます。 後ろに
.Pa .sum
がつけられます。
.El
.Sh オプション
.Bl -tag -width ".Fl v , -verbose"
.It Fl v , -verbose
.Nm
の操作自体を説明する追加情報を出力します。
.El
.Sh ファイル
.Nm
コマンドが出力を生成する際には、 DejaGnu によって作られた概要ファイルを読み込んで、 "PASS" や "FAIL"
などの数をカウントします。
.Pp
引数に名前が指定されなかった場合、 カレントディレクトリ内の
.Pa *.sum
に一致するファイルすべてが読み込まれます。
.Sh 例
.Ss DejaGnu 自体のテストスイートから、 単純な例を示します。 
.Bd -literal
$ dejagnu report card
\             __________________________________________________
\            /    PASS   FAIL  ?PASS  ?FAIL  UNSUP  UNRES UNTEST
\            |--------------------------------------------------
\  launcher  |      52      0      0      0      0      0      0
libdejagnu  |       5      0      0      0      0      0      0
\   runtest  |     135      0      0      0      0      0      0
\            |--------------------------------------------------
\            |     192      0      0      0      0      0      0
\            \e__________________________________________________
.Ed
.Pp
3 つのツールがテストされました。 そこでは全部で 192 個のテストがあり、 すべて成功することが予想されているものです。 この例において、
テストはすべて成功 (pass) しています。 したがってこれ以外のカラムは、 すべてゼロになっています。
.Ql ?PASS
と
.Ql ?FAIL
のカラムは、 それぞれ失敗することが分かっている (known) ものと、 失敗が予想される (expected) ものであったもので、
実際には、 予想に反して成功したものと、 予想どおりに失敗したものを、 それぞれ示しています。 残りの 3 つのカラムは、
例外的な結果を示しているもので、 サポートされていない (unsupported) テスト、 未解決 (unresolved) のテスト、
単純にテストしない (untested) ものとして宣言されているスタブテストをそれぞれ示しています。
.Pp
.ne 16v
.Ss dejagnu-report-card に対するテストが追加された後の同様の結果例
.Bd -literal
$ dejagnu report-card
\                    __________________________________________________
\                   /    PASS   FAIL  ?PASS  ?FAIL  UNSUP  UNRES UNTEST
\                   |--------------------------------------------------
\   launcher        |      52      0      0      0      0      0      0
\ libdejagnu        |       5      0      0      0      0      0      0
report-card / awk  |      36      0      0      0      0      0      0
report-card / sh   |      36      0      0      0      0      0      0
report-card / tcl  |      36      0      0      0      0      0      0
\    runtest        |     135      0      0      0      0      0      0
\                   |--------------------------------------------------
\              awk  |      36      0      0      0      0      0      0
\              sh   |      36      0      0      0      0      0      0
\              tcl  |      36      0      0      0      0      0      0
\                   |--------------------------------------------------
\                   |     300      0      0      0      0      0      0
\                   \e__________________________________________________
.Ed
.Pp
.Ql report-card
ツールに対して、 各実装ごとに 1 つ、 合計で 3 つのパスが追加されています。 (この後に shell と
Tcl による実装は、 将来のメンテナンス負荷を減らすために、 取り除かれます。) 前の例と同じく、 テストはすべて期待どおりに成功しています。
ただ前の例と違って興味深いのは、 DejaGnu によるマルチパスのテスト機能が利用されている点です。 これに従って、
パスごとの概要行が追加されています。 この例において、 マルチパスのテストを行っているのは
.Ql report-card
ツールだけです。
そこで各パスの合計値は、 他の合計値とは違って、 単に
.Ql report-card
のテスト数にすぎません。
.Pp
また、
.Nm
の実行に用いたコマンドが、 ここでは多少異なっている点を確認してください。
.Xr dejagnu 1
の実行にあたっては、
複数単語をダッシュ文字でつなぎ合わせて 1 つの引数として受け渡すことができます。 こうすることによって、 1 つのコマンド名に含まれる複数単語を、
ダッシュや空白により交互に区切って、 コマンドライン上から指定することができます。
.Sh 関連項目
.Xr dejagnu 1
.Xr runtest 1
.Pp
DejaGnu の完全なドキュメントは Texinfo マニュアルとしてメンテナンスされています。
.Nm info
プログラムが適切にインストールされていれば、 コマンド
.Li info dejagnu
の実行によって、 完全なマニュアルを参照できます。
.Sh 著者
.An Jacob Bachmeyer
.\".Sh BUGS
.\"  LocalWords:  Dt dejagnu URM Nm Ao Oo Oc DejaGnu Xr runtest DejaGnu's Bd Ql
.\"  LocalWords:  testsuite UNSUP UNRES UNTEST libdejagnu Readline Ss tcl awk
.\"  LocalWords:  ne multipass
