.\" -*- nroff -*-
.\" Copyright 1997 by Theodore Ts'o.  All Rights Reserved.
.\" .TH RESIZE2FS 8 "February 2012" "E2fsprogs version 1.42.1"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\" 
.\" Japanese Version Copyright (c) 2001-2007 Yuichi SATO
.\"         all rights reserved.
.\" Translated Sun Sep  2 23:47:38 JST 2001
.\"         by Yuichi SATO <ysato@h4.dion.ne.jp>, v1.24
.\" Updated & Modified Sat Mar  6 14:01:56 JST 2004
.\"         by Yuichi SATO <ysato444@yahoo.co.jp>, v1.34
.\" Updated & Modified Mon Feb 19 03:21:10 JST 2007 by Yuichi SATO, v1.39
.\"
.TH RESIZE2FS 8 "February 2012" "E2fsprogs version 1.42.1" 
.SH 名前
resize2fs \- ext2/ext3/ext4 ファイルシステムのサイズを変更する
.SH 書式
\fBresize2fs\fP [ \fB\-fFpPM\fP ] [ \fB\-d\fP \fIdebug\-flags\fP ] [ \fB\-S\fP \fIRAID\-stride\fP ]
\fIdevice\fP [ \fIsize\fP ]
.SH 説明
\fBresize2fs\fP は ext2/ext3/ext4 ファイルシステムのサイズを変更する。
このコマンドを使うと、\fIdevice\fP にあるアンマウントされたファイルシステムを
拡大または縮小することができる。ファイルシステムがマウントされている場合には、
カーネルがオンラインでのサイズ変更をサポートしていると仮定して、
マウントされているファイルシステムのサイズを拡大する。
(この man ページを書いている時点では、Linux 2.6 カーネルで
マウントされているファイルシステムのオンラインでのサイズ変更が
サポートされているのは、ext3 と ext4 である)。
.PP
\fIsize\fP パラメータには希望するファイルシステムの新しいサイズを指定する。 単位が指定されない場合、 \fIsize\fP
パラメータの単位はファイルシステムのブロックサイズとなる。 \fIsize\fP パラメータにはオプションとして
以下の単位指定文字を後ろに付けることができる。 \&'s', 'K', 'M', 'G' は、それぞれ 512 バイトセクタ、
キロバイト、メガバイト、ギガバイトを表す。 ファイルシステムの \fIsize\fP は、パーティションのサイズより大きくすることはできない。 \fIsize\fP
パラメータが指定されない場合、 パーティションのサイズをデフォルトとする。
.PP
注: 上記でキロバイトと言った場合、2 のべき乗のキロバイト (つまり 1024 バイト) を意味している。 一部の正確さにこだわる人たちが
\*(lqkibibytes\*(rq という変な響きの単語を使うべきだと言っているものだ。 メガバイトやギガバイトについても同じで 2 のべき乗である。これらは
\*(lqmebibytes\*(rq とか \*(lqgibibytes\*(rq という人もいるが、ばかげていることこの上ない。こんな細かなことにこだわりたいかい？
.PP
\fBresize2fs\fP プログラムは、パーティションのサイズは操作しない。
ファイルシステムを大きくしようとする場合は、そのファイルシステムがある
パーティションのサイズを大きくできるかを必ず確認すること。
これは、 \fBfdisk\fP(8) を使ってパーティションを削除した後により大きなパーティションを
再作成することで確認できるし、論理ボリュームマネージャ \fBlvm\fP(8)  を使っている場合は、
\fBlvextend\fP(8) を使って確認できる。
パーティションを再作成する場合、 必ず以前と同じ開始ディスクシリンダで作成すること!
そうしないと、サイズ変更の操作は確実にうまく行かず、
ファイルシステム全体を失ってしまうことになる。
\fBfdisk\fP(8) を実行した後に、resize2fs を実行して、ext2 ファイルシステムのサイズを変更すること。
こうすることで、拡大した新しいパーティションの全ての領域を使えるようになる。
.PP
ext2 パーティションを小さくしようとする場合には、 最初に \fBresize2fs\fP を使ってファイルシステムのサイズを小さくする。 続いて
\fBfdisk\fP(8)  を使えばパーティションのサイズを小さくできる。 パーティションのサイズを小さくするときは、 新しい ext2
ファイルシステムのサイズより小さくしないこと!
.SH オプション
.TP 
\fB\-d \fP\fIdebug\-flags\fP
resize2fs のいろいろなデバッグ属性がプログラムに組み込まれている場合、 それらの属性を設定する。 \fIdebug\-flags\fP
は以下のリストのうち希望する属性値を足して計算する。
.br
\	2\	\-\ ブロックの再割り当てをデバッグする。
.br
\	4\	\-\ inode の再割り当てをデバッグする。
.br
\	8\	\-\ inode テーブルの移動をデバッグする。
.TP  
\fB\-f\fP
resize2fs が通常行う安全性チェックを無視させて、 ファイルシステムのサイズ変更操作を強制的に進める。
.TP 
\fB\-F\fP
サイズ変更を始める前に、 ファイルシステムデバイスのバッファキャッシュを消去する。 \fBresize2fs\fP のタイムトライアルをする場合にのみ役立つ。
.TP 
\fB\-M\fP
ファイルシステムを最小サイズまで縮小する。
.TP 
\fB\-p\fP
オフラインでのリサイズ時の \fBresize2fs\fP の各操作について、作業完了分のパーセントを表すバーを表示する。
これによりユーザーはプログラムの動作を追うことができる。
.TP 
\fB\-P\fP
ファイルシステムの最小サイズを表示して終了する。
.TP 
\fB\-S \fP\fIRAID\-stride\fP
\fBresize2fs\fP プログラムは、ファイルシステムが作成されたときに指定された RAID stride をヒューリスティック
(heuristic) に基づいて決定する。 一方、このオプションにより、ユーザは resize2fs で使用される RAID stride
設定を明示的に指定することができる。
.SH 既知のバグ
resize2fs が推定するファイルシステムの最小サイズは正しくないことがある。
特にブロックサイズが 1k か 2k の場合に顕著である。
.SH 作者
\fBresize2fs\fP は Theodore Ts'o <tytso@mit.edu> が作成した。
.SH 著作権
Copyright 1998 by Theodore Ts'o and PowerQuest, Inc.  All rights reserved.
2000 年 4 月の時点では、 \fBresize2fs\fP は GPL の下で再配布可能である。
.SH 関連項目
\fBfdisk\fP(8), \fBe2fsck\fP(8), \fBmke2fs\fP(8), \fBlvm\fP(8), \fBlvextend\fP(8)
