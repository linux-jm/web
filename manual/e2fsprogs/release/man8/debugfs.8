.\" -*- nroff -*-
.\" Copyright 1993, 1994, 1995 by Theodore Ts'o.  All Rights Reserved.
.\" This file may be copied under the terms of the GNU Public License.
.\" 
.\" Japanese Version Copyright 1998 by MATSUMOTO Shoji. All Rights Reserved.
.\" Translated Fri Mar 13 03:10:18 JST 1998 by MATSUMOTO Shoji.
.\" Updated Sat 23 Oct 1999 by NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\" Updated Tue 16 Nov 1999 by NAKANO Takeo
.\" Updated & Modified Thu Aug 16 00:10:30 JST 2001
.\"         by Yuichi SATO <ysato@h4.dion.ne.jp>
.\" Updated Thu 3 Oct 2002 by NAKANO Takeo
.\" Updated & Modified Sat Apr 17 13:18:42 JST 2004
.\"         by Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated & Modified Tue May  3 03:13:30 JST 2005 by Yuichi SATO
.\" Updated & Modified Sat Oct 28 04:28:52 JST 2006 by Yuichi SATO
.\" 
.\"WORD:	allocate	アロケート (する)
.\"WORD:	interactive	対話的
.\"WORD:	stdout		標準出力
.\"WORD:	dump		ダンプする
.\"WORD:	current working directory	カレントワーキングディレクトリ
.\"WORD:	open		オープンする
.\"WORD:	close		クローズする
.\"WORD:	owner		所有者(owner)
.\"WORD:	group		所有グループ(group)
.\"WORD:	permission	パーミッション(permission)
.\"WORD:	free block	空きブロック(free block)
.\"WORD:	directory entry	ディレクトリエントリ
.\"WORD:	link		リンク
.\"WORD:	reference counts	参照数(reference counts)
.\"WORD:	structure	構造体
.\"WORD:	pathname	パス名
.\"WORD:	SPECIFING FILES	ファイル指定
.\"
.TH DEBUGFS 8 "May 2006" "E2fsprogs version 1.39"
.SH 名前
debugfs \- ext2/ext3 ファイルシステムデバッガ
.SH 書式
.B debugfs
[
.B \-Vwci
]
[
.B \-b
blocksize
]
[
.B \-s
superblock
]
[
.B \-f 
cmd_file
]
[
.B \-R
request
]
[
.B \-d
data_source_device
]
[
device
]
.SH 説明
.B debugfs
は対話的なファイルシステムのデバッガである。
ext2 ファイルシステムの状態の調査・変更に利用できる。
.I device
は、ext2 ファイルシステムを含むデバイスに対応する
スペシャルファイルである。(例: /dev/hdXX)
.SH オプション
.TP
.I \-w
ファイルシステムを read/write モードでオープンする。
このオプションを指定しない場合は、
ファイルシステムは read-only モードでオープンされる。
.TP
.I \-c
ファイルシステムを catastrophic
(甚大な破損が起こった場合の) モードでオープンする。
このモードでは inode とグループビットを最初に読み込まない。
これは重度に破損したファイルシステムに対しては有効なことがあるが、
一方このため catastrophic モードではファイルシステムを
read-only でしかオープンできない。
.TP
.I \-i
.I device
が
.B e2image
プログラムによって作成された ext2 イメージファイルであることを指定する。
ext2 イメージファイルは、スーパーブロック・
ブロックグループディスクリプタ・ブロックアロケーションビットマップ・
inode アローケションビットマップ・inode テーブルしか持たないので、
.B debugfs
の多くのコマンドが正しく機能しない。
.B 警告:
安全性のチェックは行わない。
また、
.I \-d
オプションによって
.I data_source_device
を指定せずに、
.IR ls ", " dump
などのコマンドを実行した場合には
.B debugfs 
は変な風に失敗するかもしれない。
.B debugfs 
はデバッグ用のツールなので、洗練された部分のみであるとは限らない!
.TP
.I -d data_source_device
.I \-i
オプションと共に使用され、
読み込みブロックが ext2 イメージファイルに見つからない場合には、
指定された
.I data_source_device
が使用される。
このデバイスにはデータ・ディレクトリ・間接 (indirect) ブロックが含まれる。
.TP
.I -b blocksize
通常のように正しいブロックサイズを検出する動作を行わず、
指定したブロックサイズをそのファイルシステムに用いる。
.TP
.I -s superblock
ファイルシステムのスーパーブロックを、デフォルトの 1 ではなく、
指定したブロック番号から読ませる。
.I -s
オプションを指定した場合、
.I -b
オプションも指定しなければならない。
.TP
.I -f cmd_file
.B debugfs
に、
.I cmd_file
からコマンドを読み込ませ、実行させる。
コマンドの実行を終了すると、
.B debugfs
は終了する。
.TP 
.I -R request
.I request
というひとつのコマンドを実行し、終了する。
.TP
.I -V
.B debugfs
のバージョンを表示して終了する。
.SH ファイル指定
.B debugfs
のコマンドの多くは、
debugfs が現在オープンしているファイルシステムにおける 
inode (パス名ではない) を示す
.I filespec
という引数を取る。
.I filespec
には 2 種類の表記法がある。ひとつは、inode 番号を <> で囲む方法である
(例:
.IR <2> )。
もうひとつはパス名で指定する方法である。
パス名が「/ (スラッシュ)」ではじまる場合、
.B debugfs
が現在オープンしているファイルシステムのルートからの相対パスを表す。
「/」で始まらない場合、カレントワーキングディレクトリからの相対パスを表す。
カレントワーキングディレクトリは
.B debugfs
の
.I cd
コマンドによって変更できる。
.\" 
.\"
.\"
.SH コマンド
.B debugfs
がサポートするコマンドの一覧を以下に示す。
.TP
.I bmap filespec logical_block
.I filespec
で指定した inode における論理ブロック番号
.I logical_block
に対応する物理ブロック番号を表示する。
.TP
.I cat filespec
.I filespec
で指定した inode の内容を標準出力へダンプする。
.TP
.I cd filespec
カレントワーキングディレクトリを
.I filespec
で指定したディレクトリに変更する。
.TP
.I chroot filespec
ルートディレクトリを
.I filespec
で指定したディレクトリに変更する。
.TP
.I close
現在オープンしているファイルシステムをクローズする。
.TP
.I clri file
.I file
で指定した inode の内容をクリアする。
.TP
.I dump [-p] filspec out_file
.I filespec
で指定した inode の内容を
.I out_file
で指定したファイルにダンプする。
.I -p
オプションを与えると、
.I out_file
の所有者 (owner)、所有グループ (group)、パーミッション (permission) を
.I filespec
と同じにする。
.TP
.I expand_dir filespec
.I filespec
で指定したディレクトリを展開する。
.TP
.I feature [fs_feature] [-fs_feature] ...
スーパーブロックの様々なファイルシステム属性をセット/クリアする。
要求のあった属性をセット/クリアした後は、
ファイルシステム属性の現在状態の一覧を表示する。
.TP
.I find_free_block [count [goal]]
.I goal
から始まる最初の
.I count
分の空きブロックを探し、その空きブロックをアロケート (allocate) する。
.TP
.I find_free_inode [dir [mode]]
空き inode を探し、その inode をアロケートする。
.I dir
を指定すると、
これはその inode を置くべきディレクトリの inode と解釈される。
さらに
.I mode
を指定すると、
これは新しい inode のパーミッションと解釈される。
.RI ( mode
にディレクトリであることを指定するビットが立っている場合、
アロケートルーチンの挙動は異なるものになる。)
.TP
.I freeb block [count]
ブロック番号
.I block
をアロケートされていないものとしてマークする。
省略可能な引数
.I count
を指定すると、ブロック番号
.I block
から始まる
.I count
分のブロックをアロケートされていないものとしてマークする。
.TP
.I freei filespec
.I filespec
で指定した inode を解放する。
.TP
.I help
.BR debugfs (8)
で利用できるコマンドのリストを表示する。
.TP
.I icheck block ...
コマンドラインに与えたブロック (複数指定可) 
を利用している inode のリストを表示する。
.TP
.I imap filespec
.I filespec
で指定された inode の (inode テーブルにおける)
inode データ構造の場所を表示する。
.TP
.I init_filesys device blocksize
.I device 
上に、デバイスサイズ
.I blocksize 
の ext2 ファイルシステムを作成する。
このコマンドは、すべてのデータ構造を完全に初期化するわけではない。
これをしたい場合は
.BR mke2fs (8)
プログラムを用いること。
このコマンドは、単にスーパーブロックとブロックディスクリプタを設定する
低レベルライブラリを呼び出すだけである。
.TP
.I kill_file filespec
.I filespec
で指定した inode と、
その inode が使用しているブロックをアロケートから外す (deallocate)。
なお、その inode に対応するディレクトリエントリは削除しないことに注意。
ファイルを unlink したい場合は
.I rm
コマンドを参照のこと。
.TP
.I lcd directory
.B debugfs
プロセスのカレントワーキングディレクトリを
ネイティブファイルシステム (訳註: 作業対象のものではなく、
debugfs が呼び出され、稼働しているファイルシステム) 上の
.I directory
に変更する。
.TP
.I ln filespec dest_file
.I filespec
を指すリンク
.I dest_file
を作成する。
この際 inode の参照数 (reference counts) は変更しないことに注意。
.TP
.I logdump [-acs] [-b<block>] [-i<filespec>] [-f<journal_file>] [output_file]
ext3 ジャーナルの内容をダンプする。
デフォルトではジャーナル inode はスーパーブロックで指定される。
しかし
.I \-i
オプションで上書きすることも可能である。
.I \-i
オプションは使用されるジャーナルを指定する inode 指定子を使う。
ジャーナルデータが書かれたファイルは、
.I \-f
オプションを使って指定することができる。
そして
.I \-s
オプションはスーパーブロックにあるバックアップ情報を使って、
ジャーナルをアロケートする。
.IP
.I \-a
オプションを指定すると、
.I logdump
プログラムは全てのディスクリプタブロックの内容を表示する。
.I \-b
オプションを指定すると、
.I logdump
プログラムは指定されたブロックを参照する全てのジャーナルレコードを表示する。
.I \-c
オプションを指定すると、
.I \-a
と
.I \-b
オプションで選択された全てのデータブロックの内容を表示する。
.TP
.I ls [-l] [-d] filespec
.I filespec
で指定したディレクトリ内にあるファイルをリスト表示する。
.I \-l
フラグを指定すると、より詳細な書式でファイルをリスト表示する。
.I \-d
フラグを指定すると、
このディレクトリにある削除エントリ (deleted entry)
をリスト表示する。
.TP
.I modify_inode filespec
.I filespec
で指定した inode にある inode 構造体の内容を変更する。
.TP
.I mkdir filespec
ディレクトリを作成する。
.TP
.I mknod filespec [p|[[c|b] major minor]]
スペシャルデバイスファイル
(名前付きパイプ、キャラクタデバイス、ブロックデバイス)
を作成する。
キャラクタデバイスおよびブロックデバイスを作成する場合は、
デバイス番号として
.I major
および
.I minor
を指定しなければならない。
.TP
.I ncheck inode_num ...
指定した inode 番号それぞれに対応するパス名のリストを表示する。
.TP
.I open [-w] [-e] [-f] [-i] [-c] [-b blocksize] [-s superblock] device
編集の対象とするファイルシステムをオープンする。
.I \-f
フラグをつけると、通常ではオープンできないような、
不明なファイルシステムや非互換なファイルシステムでも
強制的にオープンする。
.I \-e
フラグをつけるとファイルシステムを排他モードでオープンする。
.IR -b ", " -c ", " -i ", " -s ", " -w
オプションを指定した場合の動作は、
.B debugfs
にコマンドラインオプションを指定した場合と同じである。
.TP
.I pwd
カレントワーキングディレクトリを表示する。
.TP
.I quit
.B debugfs
を終了する。
.TP
.I rdump directory destination
.I directory
と (通常のファイル・シンボリックリンク・
その他のディレクトリを含む) そのディレクトリの全ての内容を、
.I destination
という名前のディレクトリに再帰的にダンプする。
.I destination
はネイティブファイルシステム上に存在するディレクトリでなければならない。
.TP
.I rm pathname
.I pathname
で指定したパス名を unlink する。
.I pathname
の示す inode が何も参照しなくなった場合には、
ファイルのアロケートを外す。
このコマンドは unlink() システムコールのように動作する。
.TP
.I rmdir filespec
.I filespec
で指定したディレクトリを消去する。
.TP
.I setb block [count]
ブロック番号
.I block
をアロケートされているものとしてマークする。
省略可能な引数
.I count
を指定すると、ブロック番号
.I block
から始まる
.I count
分のブロックをアロケートされているものとしてマークする。
.TP
.I seti filespec
inode ビットマップに、
.I filespec
で指定した inode が使用中であるとマークする。
.TP
.I set_inode_field filespec field value
.I filespec
で指定された inode を変更し、inode フィールド
.I field
が値
.I value
を持つようにする。
このコマンドで設定が可能な、正しい inode フィールドのリストは、
.B set_inode_field -l
コマンドによって表示できる。
.TP
.I set_super_value field value
スーパーブロックフィールド
.I field
を
.I value
にする。このコマンドで設定が可能な、
正しいスーパーブロックフィールドのリストは、
.B set_super_value -l
コマンドによって表示できる。
.TP
.I show_super_stats [-h]
スーパーブロックとブロックグループディスクリプタの内容を表示する。
.I \-h
フラグが与えられると、
スーパーブロックの内容だけを表示する。
.TP
.I stat filespec
.I filespec
で指定した inode の inode 構造体の内容を表示する。
.TP
.I testb block [count]
ブロック番号
.I block
がブロックビットマップにおいてアロケートになっているかどうか調べる。
省略可能な引数
.I count
を指定すると、ブロック番号
.I block
から始まる
.I count
分のブロックを検査する。
.TP
.I testi filespec
.I filespec
で指定した inode が
inode ビットマップにおいてアロケートになっているかどうか調べる。
.TP
.I unlink pathname
.I pathname
で指定した、ある inode を指すリンクを削除する。
なおこの際、inode 参照数は変更しないことに注意。
.TP
.I write source_file out_file
ファイルシステム内に
.I out_file
で指定したファイルを作成し、
.I source_file
の内容をそのファイルにコピーする。
.SH 環境変数
.TP
.B DEBUGFS_PAGER, PAGER
.BR debugfs (8)
はいくつかのコマンドの出力を常にページャプログラムにパイプする。
そのようなコマンドとしては、
.IR show_super_stats ,
.IR list_directory ,
.IR show_inode_info ,
.IR list_deleted_inodes ,
.I htree_dump
がある。
特定のページャを環境変数
.B DEBUGFS_PAGER
で明示的に指定することができる。
この環境変数が設定されていない場合は、環境変数
.B PAGER
で指定される。
.IP
1 つのページャが常に使われるので、
.BR less (1)
ページャは特に適さない点に注意すること。
.BR less (1)
はコマンドの表示を表示する前にスクリーンをクリアしたり、
ページャが終了するときにスクリーンへの出力をクリアしてしまうからである。
多くのユーザは
.BR less (1)
ページャをいろいろな目的に使うのを好んでいる。
これが環境変数
.B DEBUGFS_PAGER 
で、より一般的な環境変数
.B PAGER
を上書きできる理由である。
.SH 著者
.B debugfs
は Theodore Ts'o <tytso@mit.edu> によって作成された。
.SH 関連項目
.BR dumpe2fs (8),
.BR e2fsck (8),
.BR mke2fs (8)
