.\" (c) 1998 by James R. Van Zandt <jrv@vanzandt.mv.com>    -*- nroff -*-
.TH mirrordir 1 "1998 November 1" "Linux"
.SH NAME
pslogin \- secure remote tcp login using strong stream
cipher encryption and diffie-hellman key exchanges.
.PP
forward \- arbitrary tcp socket forwarding over a
secure/encrypted channel.
.PP
copydir, mirrordir \- copy, mirror directory trees
via a minimal set of changes, locally or over FTP,
or over a secure tcp connection.
.PP
recursdir \- recurse through local or remote directories
to command/find files or create tar files.
.SH SYNOPSIS
.B mirrordir
.br
[\fB-a\fP, \fB--access-times\fP]
.br
[\fB-m\fP, \fB--strict-mtimes\fP]
.br
[\fB--no-mtimes\fP]
.br
[\fB--ignore-size\fP]
.br
[\fB-A\fP, \fB--mtime-threshold\fP \fIext\fP]
.br
[\fB--time-offset\fP [[\fI+\fP]|\fI-\fP][\fIH\fP]\fIH\fP[\fI:MM\fP]]
.br
[\fB-A\fP, \fB--always-write\fP]
.br
[\fB-r\fP, \fB--restore-access\fP]
.br
[\fB--no-chown\fP]
.br
[\fB--no-chmod\fP]
.br
[\fB-D\fP, \fB--only-delete\fP]
.br
[\fB-b\fP, \fB-S\fP, \fB--backup-extension\fP, \fB--suffix\fP \fIext\fP]
.br
[\fB-N\fP, \fB--num-backups\fP \fInum\fP]
.br
[\fB-O\fP, \fB--backup-outdate\fP \fIsec\fP]
.br
[\fB-B\fP, \fB--block-size\fP \fIbytes\fP]
.br
[\fB-M\fP, \fB--max-bytes\fP \fInum\fP[\fBK\fP|\fBM\fP|\fBG\fP]]
.br
[\fB-s\fP, \fB--starting-file\fP \fIpath\fP]
.br
[\fB-i\fP, \fB--ignore-next-exclude\fP]
.br
[[\fB-i\fP] \fB-X\fP, \fB--exclude\fP \fIpath\fP] [[\fB-i\fP] \fB-X\fP, \fB--exclude\fP \fIpath\fP] ...
.br
[[\fB-i\fP] \fB-F\fP, \fB--exclude-from\fP \fIfile\fP] ...
.br
[[\fB-i\fP] \fB-G\fP, \fB--exclude-glob\fP \fIexpr\fP] [[\fB-i\fP] \fB-G\fP, \fB--exclude-glob\fP \fIexpr\fP] ...
.br
[[\fB-i\fP] \fB-R\fP, \fB--exclude-regexp\fP \fIexpr\fP] [[\fB-i\fP] \fB-R\fP, \fB--exclude-regexp\fP \fIexpr\fP] ...
.br
[\fB-C\fP, \fB--exclude-script\fP [\fIexpr\fP|\fIfile\fP]] [\fB-C\fP, \fB--exclude-script\fP [\fIexpr\fP|\fIfile\fP]] ...
.br
[\fB-h\fP, \fB--help\fP]
.br
[\fB-v\fP, \fB--verbose\fP] [\fB-v\fP, \fB--verbose\fP] ...
.br
[\fB-V\fP, \fB--version\fP]
.br
[\fB-k\fP, \fB--keep-files\fP]
.br
[\fB-l\fP, \fB--no-hard-links\fP]
.br
[\fB--follow-symlinks\fP]
.br
[\fB-L\fP, \fB--strict-locking\fP]
.br
[\fB-p\fP, \fB--password\fP \fIpassword\fP]
.br
[\fB-P\fP, \fB--password-exact\fP \fIpassword\fP]
.br
[\fB--test-login\fP]
.br
[\fB--no-warn-first-login\fP]
.br
[\fB--read-password-from-stdin\fP]
.br
[\fB--allow-empty-ftp-dirs\fP]
.br
[\fB--no-allow-empty-ftp-dirs\fP]
.br
[\fB--netrc\fP]
.br
[\fB--no-netrc\fP]
.br
[\fB--proxy-host\fP \fIhost\fP]
.br
[\fB--secure\fP]
.br
[\fB-z\fP, \fB--gzip\fP]
.br
[\fB--gzip-backups\fP]
.br
[\fB--case-insensitive\fP]
.br
[\fB--to-lower\fP]
.br
[\fB--to-upper\fP]
.br
[\fB--no-use-passive-connections\fP]
.br
[\fB-K\fP, \fB--key-size\fP \fIbits\fP]
.br
[\fB--download-scripts\fP]
.br
[\fB--tar-file\fP \fIfilename\fP]
.br
[\fB--tar-block-size\fP \fIN\fP]
.br
[\fB-t\fP, \fB--dry-run\fP, \fB--test-only\fP]
.br
[\fB--nice\fP \fInum\fP] \fIcontrol mirror\fP
.PP
.B mirrordir
[\fB-c\fP | \fB--copy-mode\fP | \fB--recurs-mode\fP ] 
-[\fBabBCdDFGhklMmNOopRrstvVX\fP] \fIsrc\fP [\fIsrc\fP ...] \fIdest\fP
.PP
.B copydir
-[\fBabBCdeFGhklMmNOopRrstvVX\fP] \fIsrc\fP [\fIsrc\fP ...] \fIdest\fP
.PP
.B recursdir
-[\fBabBCdeFGhklMmNOopRrstvVX\fP] \fIsrc\fP [\fIsrc\fP ...]
.PP
.B pslogin
[\fB--key-size\fP \fIbits\fP]
[\fBmc://\fP][\fIusername\fP\fB@\fP]\fIhostname\fP[\fB:\fP\fIportnumber\fP][\fB/\fP\fIpath\fP]
.PP
.BR "  " "But usually just"
.br
.BR mirrordir " [" --exclude " \fIpath\fP] " "\fIcontrol mirror\fP"
.br
.B copydir
\fIsrc\fP [\fIsrc\fP ...] \fIdest\fP
.br
.B recursdir 
\fIsrc\fP [\fIsrc\fP ...] [\fB-C\fP \fIprogram\fP]
.br
.B pslogin
[\fIusername\fP\fB@\fP]\fIhostname\fP[\fB:\fP\fIportnumber\fP]
.SH DESCRIPTION
.PP
\fBmirrordir\fP is a set of useful utilities for manipulating and
mirroring directories. Included is also the command \fBpslogin\fP - an
alternative to \fBssh\fP(1), and \fBforward\fP(1) for forwarding
arbitrary TCP socket connections over encrypted secure channels.
.PP
\fBmirrordir\fP copies files that are different between the directories
\fIcontrol\fP and \fImirror\fP to the directory \fImirror\fP. Files
whose modification times or sizes differ are copied. File permissions,
ownerships, modification times, access times (only if --access-times is
used), sticky bits, and device types are duplicated. Symlinks are
duplicated without any translation. Symlink modification and access times
(of the symlink itself, not the file it points to) are \fInot\fP
preserved. Hard linked files are merely copied. Creation times cannot be
set with Unix as far as I can see.

\fBmirrordir\fP is a \fBDANGEROUS\fP command because files or
directories that exist in \fImirror\fP that don't exist in \fIcontrol\fP
are deleted. If \fIcontrol\fP is entirely empty, then all files and
directories in \fImirror\fP will be deleted. If \fImirror\fP is entirely
empty, then all files and directories in \fIcontrol\fP will be copied.

In short, \fBmirrordir\fP forces \fImirror\fP to be an exact replica of
the directory tree \fIcontrol\fP in every possible detail suitable for
purposes of timed backup. It naturally descends into subdirectories to
all their depths. \fBmirrordir\fP tries to be as efficient as possible
by making the minimal set of changes necessary to mirror the directory.

Access time duplication is not usually required and creates unnecessary
load. Hence it is given as an option.

The directory \fIcontrol\fP is left untouched. If --restore-access is
given then access times are reset to their original with each read.

If the the --strict-locking option is on, files in \fIcontrol\fP that
are copied are locked for \`shared reading\'. This will ensure, if
another process is busy writing to that file, that the file is not
copied in its incomplete or corrupted state.

Usually \fBmirrordir\fP will not exit, but will give error messages to
stderr to report any problems, and then will continue.

The directory \fImirror\fP or \fIdest\fP must exist, even if it is
empty.

Before erasing all the files in a directory, \fBmirrordir\fP checks for
the file \fB*--keep-me\fP (where \fB*\fP is zero or one characters). If
this file is present it will abort with an error message. Hence such a
file can be created in all directories that you are fearful of being
recursively erased.

\fBcopydir\fP is equivalent to \fBmirrordir\fP \fI-ck
--no-erase-directories\fP ...
.br
(although -c implies -k anyway), so \fBcopydir\fP is very much like a
rigorous version of \fBcp\fP(1) where filenames can also be URLs, and
only outdated files are replaced. Use \fBcopydir\fP instead of
\fBmirrordir\fP for most file transfers. Only use \fBmirrordir\fP, when
you really want to delete things.

\fBrecursdir\fP is a further program that does nothing but descend into
the directories on the command line. It is equivalent to \fBmirrordir\fP
\fI--recurs-mode\fP ...
.br
It was born after the \fB-C\fP option was added, and can be used as a
more rigorous version of \fBfind\fP(1) and can also pack all the files
it finds into a tar file.

\fBpslogin\fP is yet a further program which has almost nothing to
do with the previous three. It envokes a secure login session
using \fBsecure-mcserv\fP. It is equivalent to \fBmirrordir\fP
\fI--login-mode\fP \fI--secure\fP ...
.br
\fBpslogin\fP should be called \fBlogindir\fP. See \fB--login-mode\fP
below.

\fBforward\fP is yet a further program which has almost nothing to
do with first three. It can do forwarding of arbitrary services over a
secure channel. See \fBforward\fP(1) for details.

The importance of this package is that you can use URL's instead of
normal filenames, and hence manipulate files over a network. The URL
types currently supported are \fBftp://\fP and \fBmc://\fP
(\fBhttp://\fP is not a filesystem and therefore is not supported).
\fBmc://\fP is the \fBMidnight Commander\fP filesystem and is served by
the \fBsecure-mcserv\fP daemon. It has the advantage of serving 
cryptographically strong secure file transfers and logins.

You can also use glob expressions in filenames for the \fBrecursdir\fP
and \fBcopydir\fP commands. These will be recursively expanded.
.PP
.SH SECURITY AND ENCRYPTION
\fBmirrordir\fP supports strong stream cipher encryption and
Diffie-Hellman key exchanges with several possible key sizes. Secure
connections work with \fBmc://\fP type connections. See the options
\fB--secure\fP, \fB--key-size\fP, \fB--download-scripts\fP. See the
\fBEXAMPLES\fP section for demo's and the \fBFILES\fP section for where
public/private keys are stored.
.PP
.SH OPTIONS
.TP 
.B --help
Print out detailed help, then exit.
.IP \fB--verbose\fP
Specifies verbose output of file modifications made to \fImirror\fP.
This option can be given multiple times for greater verbosity. Output is
written to stdout.
.IP \fB--restore-access\fP
Restore the access times of \fIcontrol\fP with each
read.
.IP \fB--access-times\fP
Duplicate even the access times of \fIcontrol\fP.
.TP 
\fB--always-write\fP
Force rewrite of every file regardless of whether they appear to
be identical or not.
.TP
\fB--recurs-mode\fP
This is set by default with \fBrecursdir\fP. Listed directories are
read recursively and nothing is done to them. This option is useful with
\fB-C\fP in order to execute shell commands and search for files. Note
the \fBsystem()\fP, \fBexec()\fP and \fBpopen()\fP functions available to
the C interpretor.
.TP
\fB--login-mode\fP
This option is set by default with \fBpslogin\fP. This approximates
\fBrlogin\fP(1) using \fBsecure-mcserv\fP as a server. It is a
secure encrypted connection intended as a replacement to \fBssh\fP(1).
\fBpslogin\fP implies \fB--secure\fP as well. When using this option
or when using \fBpslogin\fP, only one path must be present on the
command-line. The path is of the form
[\fBmc://\fP][\fIusername\fP\fB@\fP]\fIhostname\fP[\fB:\fP\fIportnumber\fP][\fB/\fP\fIpath\fP].
.br
Immediately after logging in, a \fBcd\fP \fI/path\fP will be
executed at the shell prompt. To determine if a prompt is
available, \fBpslogin\fP searches for a \fB#\fP, \fB$\fP or
\fB>\fP character. Should these not be found, \fBpslogin\fP
blocks indefinately. To avoid this behaviour, specify \fB/\fP\fIpath\fP
as exactly \fB/\fP. This will leave you in your login directory.
Alternatively, change your shell prompt to include one of these
characters.
.TP
\fB--copy-mode\fP
This is set by default with \fBcopydir\fP. Approximate the behaviour of
\fBcp\fP(1) as regards source and destination files. This option implies
--keep-files. It overwrites any existing file or directory with the same
name as a source file or directory, but does not delete files or
directories unnecessarily. Multiple source files or directories may be
given. The destination path must be a directory.
.TP 
\fB--no-erase-directories\fP
With this option, if a target directory conflicts with a source file,
and the directory is not empty, then an error message will be printed
and the program will abort. This is the default behaviour for
\fBcopydir\fP.
.TP 
\fB--erase-directories\fP
With this option, if a target directory conflicts with a source file,
then the target directory will be recursively deleted. This is the
default behaviour for \fBmirrordir\fP.
.TP
\fB--allow-empty-ftp-dirs\fP
Some ftp servers do not produce a . or .. directory. This makes it appear
as though you did not have permission to read the directory. This
option overrides this by assuming that such completely empty directories
are merely empty and do not have errors. If you get
\fBunable to open directory: *: Permission denied\fP errors, then you can
use this option. This option is enabled by default (see next).
.TP
\fB--no-allow-empty-ftp-dirs\fP
Because we now cd to the directory to check for permission to access it,
the default behaviour is to allow empty directories.
.TP
\fB--only-delete\fP
Do not make any changes to \fImirror\fP that will cause the total space
occupied by \fImirror\fP to enlarge. This is a useful option when backing
up onto a drive that has limited space, where changes have been made to
\fIcontrol\fP that might cause \fImirror\fP to grow larger during the
duration of the transfer. Running \fBmirrordir\fP once with this option
and then once normally will ensure that the available space is not
overrun.
.TP
\fB-i\fP, \fB--ignore-next-exclude\fP
This option dictates that the next --exclude- type option must
completely overlook those files regardless of their existence or
non-existence in the mirror directory. It has the effect of a
return value of \fBIGNORE\fP for the \fB--exclude-script\fP
option below. This can be used to cause certain files to never be
modified, for example if you would like \fI/etc/named.boot\fP to
never be modified, use \fBmirrordir /mnt/1 /mnt/2 -i --exclude
/mnt/1/etc/named.boot\fP. Note that all paths must be specified in
the control directory and not the mirror directory, hence
\fB--exclude /mnt/2/etc/named.boot\fP won't work. This has the
idiotic behaviour that if you want to avoid erasing a file, you
have to have that file present in the control directory, even if
it has zero length.
.TP
\fB--exclude\fP \fIpath\fP
.RS
Exclude file or directory \fIpath\fP. A large number of excluded paths
on the command-line will slow performance. An excluded path will be
removed from the mirror tree if it already exists, in the same way as
any absent directory or file. Use  the --ignore option to ignore keep
rather than delete these files.

If you have a long list of files to exclude, use the
\fB--exclude-from\fP option.
.RE
.TP
\fB--exclude-glob\fP \fIglob\fP
Exclude file or directory names matching glob style expression
\fIglob\fP. Matches the file without its full path. For shells, the
expression should be enclosed in appropriate quotes to prevent
substitutions.
.TP
\fB--exclude-regexp\fP \fIregex\fP
Exclude full pathnames of files or directories matching \fIregex\fP. For
shells, the expression should be enclosed in appropriate quotes to
prevent substitutions.
.TP
\fB--exclude-script\fP [\fIexpr\fP|\fIfile\fP]
.RS
Cause execution of the script \fIexpr\fP for each file before
doing anything with that file. The script is a C style statement
block, terminating with a \`\fBreturn\fP \fIexpression\fP;\'. The
value of \fIexpression\fP can be one of \fBINCLUDE\fP,
\fBEXCLUDE\fP, \fBUNKNOWN\fP or \fBIGNORE\fP (see \fB-i\fP
above) to explain what is to be done with that file. If
\fIexpr\fP does not contain a semi-colon (;) then it is assumed
to be the name of a file - which is then loaded. In either case,
the text is byte compiled into reverse-polish notation for fast
execution. This option can be specified multiple times and the
scripts will be executed in order until a script returns
something other than \fBUNKNOWN\fP. A return value of
\fBUNKNOWN\fP allows the remaining \fB--exclude-\fP options on
the command-line to take effect.
.PP
If you find that the interpretor incorrectly reports errors or
segfaults, please report the breaking script to me.
.PP
The scripting language itself is a subset of the full C
programming language. For example, the following is a valid
script:
.PP
.nf
/* PATH is the full name of the file including
   its path, DIR is the directory, excluding
   the trailing slash (/), CWD is the current
   directory, and depth() returns the number
   of forward slashes (/) less one. */
if (depth (DIR) - depth (CWD) > 3) {
    printf ("%s: excluded\\n", PATH);
    return EXCLUDE;
} else
    return INCLUDE;
.fi
.PP
The scripting language does not support the assignment operator,
and hence does not support user defined variables.
.PP
The following predefined macros are available. Note that the
expansion of the macros applies equally well to directories as to
files.
.TP
\fBFILE\fP
current file without its path
.TP
\fBNAME\fP
file name without its path or extension or trailing dot (.)
.TP
\fBEXTENSION\fP
file extension without its leading dot (.)
.TP
\fBDIR\fP
directory without file-name or trailing slash (/)
.TP
\fBPATH\fP
full file name with path
.TP
\fBCWD\fP
current working directory
.TP
\fBTIME\fP
current time in seconds
.PP
All of the logical, arithmetic and bitwise C operators are
supported. These are \fB(\fP
\fB)\fP
\fB>=\fP
\fB<=\fP 
\fB>\fP
\fB<\fP
\fB!=\fP
\fB==\fP
\fB&&\fP
\fB||\fP
\fB!\fP
\fB-\fP
\fB+\fP
\fB*\fP
\fB/\fP
\fB%\fP
\fB&\fP
\fB^\fP and have the same meanings and precedences as in C.
.PP
The following further predefined macros are available. Each
returns an integer (type \fBlong int\fP in C). These are based on
a C \fBlstat\fP (or \fBstat\fP if \fB--follow-symlinks\fP is
used) on the file. See \fBstat\fP(2) for a detailed explanation.
.PP
.br
\fBstat.st_dev\fP - device
.br
\fBstat.st_ino\fP - inode
.br
\fBstat.st_mode \fP - permissions
.br
\fBstat.st_nlink\fP - number of hard links
.br
\fBstat.st_uid\fP - user id of owner
.br
\fBstat.st_gid\fP - group id of owner
.br
\fBstat.st_rdev \fP - device type
.br
\fBstat.st_size \fP - file size in bytes
.br
\fBstat.st_blksize\fP - block-size for file-system I/O
.br
\fBstat.st_blocks\fP - number of blocks allocate
.br
\fBstat.st_atime\fP - time of last accessed in seconds
.br
\fBstat.st_mtime\fP - time of last modification in seconds
.br
\fBstat.st_ctime\fP - time of creation
.br
.PP
The following functions return boolean values:
.TP
\fBstrncmp\fP(\fIstring1\fP, \fIstring2\fP, \fIinteger\fP);
returns an integer less than, equal to, or greater than zero
if string1 is found, respectively, to be less than, to match,
or be greater than string2.
.TP
\fBglob\fP(\fIglob\fP, \fIstring\fP);
returns zero if \fIstring\fP matches glob expression \fIglob\fP.
Try to use only one glob expression in your code for
efficiency of the underlying implementation.
.TP
\fBregexp\fP(\fIregexp\fP, \fIstring\fP);
returns zero if \fIstring\fP matches regular expression
\fIregexp\fP. Try to use only one regular expression in your code
for efficiency of the underlying implementation.
.TP
\fBstrstr\fP(\fIstring1\fP, \fIstring2\fP);
returns the first occurance of \fIstring2\fP in \fIstring1\fP
up to the length of \fIstring1\fP, or zero if it did not occur.
.PP
The following functions also return a boolean value and are
analogous to the corresponding macros explained in \fBstat\fP(2).
They return non-zero if the specified condition is true.
.PP
.br
\fBS_ISLNK\fP(\fIinteger\fP); - file is a sym-link
.br
\fBS_ISREG\fP(\fIinteger\fP); - file is a regular file
.br
\fBS_ISDIR\fP(\fIinteger\fP); - file is a directory
.br
\fBS_ISCHR\fP(\fIinteger\fP); - file is a character device
.br
\fBS_ISBLK\fP(\fIinteger\fP); - file is a block device
.br
\fBS_ISFIFO\fP(\fIinteger\fP); - file is an fifo
.br
\fBS_ISSOCK\fP(\fIinteger\fP); - file is a socket
.PP
The following functions manipulate strings:
.TP
\fBstrcat\fP(\fIstring1\fP, \fIstring2\fP);
returns the concatenation of \fIstring1\fP with \fIstring2\fP. Note that
the \fB+\fP operator also concatenates strings.
.TP
\fBdepth\fP(\fIstring\fP);
returns one less than the number of forward slashes (/) in
\fIstring\fP.
.TP
\fBprintf\fP(\fIformat\fP, ...);
behaves like \fBprintf\fP(3) with an important exception: only
\fBlong int\fP format specifiers should be used. The behaviour
of anything that results in conversion of other than a \fBlong
int\fP is undefined. For example, use \fB"%ld"\fP instead of
\fB"%d"\fP. This function prints to stdout.
.PP
The following functions do system calls:
.TP
\fBsystem\fP(\fIcommand\fP);
executes \fB/bin/sh -c\fP \fIcommand\fP, but unlike the C version,
it returns the exit code of the command. I.e. it executes a single
line of shell script, \fIcommand\fP.
.TP
\fBexec\fP(\fIargv0\fP, \fIargv1\fP, ...);
executes process \fIargv0\fP with arguments \fIargv1...\fP.
\fIargv0\fP must be a full path name. This is faster than \fBsystem\fP
because it need not envoke \fBsh\fP.
.TP
\fBpopen\fP([\fIstring\fP, ] \fIshell_command\fP);
like system, but returns the output of \fIshell_command\fP as a string.
If \fIstring\fP is given, this writes string into the standard input
of \fIshell_command\fP and return zero on success.
.PP
The following further integer constants are available and are
analogous to the macros defined in stat.h and explained in
\fBstat\fP(2).
.PP
\fBS_IFMT S_IFSOCK S_IFLNK S_IFREG S_IFBLK S_IFDIR S_IFCHR S_IFIFO
S_ISUID S_ISGID S_ISVTX S_IRWXU S_IRUSR S_IWUSR S_IXUSR S_IRWXG
S_IRGRP S_IWGRP S_IXGRP S_IRWXO S_IROTH S_IWOTH S_IXOTH\fP
.PP
One of the the following constants should be returned using the
\fBreturn\fP keyword, and imply to the caller as follows. If
nothing is returned, the return value is assumed to be
\fBUNKNOWN\fP.
.TP
\fBUNKNOWN\fP
didn't know what to do, continue with other \fB--exclude-\fP options
.TP
\fBINCLUDE\fP
include the file
.TP
\fBIGNORE\fP
do nothing with the file regardless of its existence or
non-existence in the mirror directory
.TP
\fBEXCLUDE\fP
consider the file to be non-existent in the control directory and
hence must be removed from the mirror directory (this does not
override the option \fB--keep-files\fP)
.PP
The following perform flow control analogous to C:
.PP
The \fBif\fP clause causes \fIstatement1\fP, \fIstatement2\fP,
etc. to be executed if \fIinteger\fP is true (i.e. non-zero), or
otherwise causes \fIstatement1\fP, \fIstatement2\fP, etc. to be
executed. The \fBelse\fP {...} part is optional.
.PP
.nf
    \fBif\fP (\fIinteger\fP) {
        \fIstatement1\fP;
        \fIstatement2\fP;
        \.
        \.
        \.
    } \fBelse\fP {
        \fIstatementA\fP;
        \fIstatementB\fP;
        \.
        \.
        \.
    }
.fi
.PP
The \fBreturn\fP clause gives a value back to \fBmirrordir\fP and
causes the script to exit:
.PP
.nf
    \fBreturn\fP \fIexpression\fP;
.fi
.PP
The \fBexit\fP function cause \fBmirrordir\fP to exit with the
specified exit code.
.PP
.nf
    \fBexit\fP(\fIinteger\fP);
.fi
.PP
C scripts would typically be used to exclude types of files. Note
that this is an excessive implementation of a scripting language,
and all the features are not meant for general use. A typical
script will, for example, do nothing more than cause device files
to be excluded:
.PP
.nf
if (S_ISSOCK(stat.st_mode) || S_ISFIFO(stat.st_mode)
         || S_ISBLK(stat.st_mode) || S_ISCHR(stat.st_mode)) {
    return EXCLUDE;
} else
    return INCLUDE;
.fi
.PP
C scripts can also be used to search for files with the
\fB--recurs-mode\fP option (same as the \fBrecursdir\fP
command):
.PP
.nf
/* removes all core files */
/* This example has been moved to the \fBEXAMPLES\fP section. */
.fi
.RE
.PP
.TP
\fB--exclude-from\fP \fIfile\fP
Exclude from a list of paths listed in the file \fIfile\fP. Empty lines and
comment lines (with a # as the first character of the line) are ignored.
This list of files is sorted and binary searched, so if you have lots of
filenames to exclude, it is best to include them here for performance.
This option can be specified multiple times with different files. \fBBUG\fP:
the last path in \fIfile\fP must end with a newline.
.TP
\fB--backup-extension\fP \fIlevel\fP
Create backups of files before deleting or replacing them.
\fIextension\fP is a C style format string e.g. .ORIG.%d (be careful of
shell substitutions with the %). \fIlevel\fP is the highest number of
revision to keep. \fIextension\fP is appended to the filename, the
oldest file having the highest number.
.TP
\fB--backup-outdate \fIsec\fP
Delete backup files older than \fIsec\fP seconds.
.TP
\fB--nice\fP \fInum\fP 
Be nice to other processes by sleeping occasionally. \fInum\fP is a
small integer.  --nice causes the process to sleep for as long as it
is active, times a factor of \fInum\fP. Hence a value of 1 will (very
roughly) double the time it takes to do a copy, and a value of 3 will
quadruple the time. This can be used where one would like timed
backups to place less load on the CPU. --nice may not be available
on your system.
.TP
\fB--no-chmod\fP
Normally the permissions of files are set. If you have restricted access
and cannot change permissions, than this can be used to disable setting
of permissions.
.TP
\fB--no-chown\fP
Normally the ownerships of files are set. If you have restricted access
and cannot change ownerships, than this can be used to disable setting
of ownerships.
.TP
\fB--mtime-threshold\fP \fIsec\fP
This is the deviation in mtime that is allowed for a file before it is
overwritten. If you have mirrored an ftp site, the mtimes are accurate
to within a minute only, thereafter an nfs mirror will cause every file
to be copied: you can then use --mtime-threshold 60 to fix this.
.TP
\fB--time-offset\fP [[\fI+\fP]|\fI-\fP][\fIH\fP]\fIH\fP[\fI:MM\fP]
This sets the time offset of any vfs (i.e. non-local) directory. For
instance, I am 8 hours east of New York, so when I mirror from New York,
I use \fB--time-offset -08:00\fP.
.TP
\fB--test-only, --dry-run\fP
Do not make any changes. If used with --verbose, this will show what
changes would be made. This is an effective way of comparing directory
trees. \fIThis is untested - i.e. I don't know whether this option\fP
\fBactually\fP \fImakes any changes or not!\fP
.TP
\fB--skip-symlinks\fP
Symlinks are treated as though they were not read - hence if they are
found in the mirror directory then they are deleted.
.TP
\fB--keep-files\fP
Don't remove files from \fImirror\fP, even if they don't exist in
\fIcontrol\fP. This makes \fBmirrordir\fP somewhat like \fBcp\fP(1).
.TP
\fB--no-hard-links\fP
\fBmirrordir\fP mirrors hard-links properly unless this option is set, in
which case hard-links are copied as regular files.
.TP
\fB--follow-symlinks\fP
\fBmirrordir\fP mirrors symlinks properly unless this option is set, in
which case symlinks are copied as regular files. Useful for mirroring
the Debian tree. Note that this follows symlinks in both the control and
mirror directories, hence if symlinks already exist in the mirror
directory, these will be left as symlinks. Note that
\fB--follow-symlinks\fP implies \fB--no-hard-links\fP also.
.TP
\fB--strict-locking\fP
Create shared read locks on files as they are read. This prevents
clashes especially when copying files from the mail directory - mail
programs will be trying to write to those files at the same time as
\fBmirrordir\fP is trying to to read from them. This option has
no effect with virtual file systems.
.TP
.BR "--max-bytes " [[ \fInum\fP [  k | M | G ]] "" | \fInum\fP ]
Maximum number of bytes to write before giving the message, `filled up
all blocks - first file/dir not mirrored: \fIpath\fP', which is written
to stdout. The remaining files are deleted from \fImirror\fP, but in
their listed order - hence it is possible that the archive will grow
greater than \fInum\fP while \fBmirrordir\fP is still running. You
should make allowance for this eventuality by making \fInum\fP smaller
than the maximum available space. Also note that some filesystems will
give an error message `No space left on device' before the device is
completely full. You can restart \fBmirrordir\fP with the option
\fB--starting-file\fP \fIpath\fP and hence continue with this file on
another volume. This enables \fBmirrordir\fP to back up across different
devices. \fInum\fP can be appended by \fBk\fP, \fBM\fP or
\fBG\fP (case insensitive) to specify kilobytes, megabytes or gigabytes
respectively. If any single file is greater than this number, then an
error message will be given. See also \fB--block-size\fP.
.TP
.BR "--password " \fIpassword\fP
Specify the password for FTP and mc:// connections. The anonymous password
defaults to your login name @ your local machine name. You will be
prompted for other login passwords. As usual, you are warned that
including passwords in scripts is a security risk. It is much better
to put the password in your
.B "~/.netrc"
file and then not use the \fB--no-netrc\fP option; see
.B "man ftp"
for details.
.TP
\fB--password-exact\fP \fIpassword\fP]
Don't prepend a \fB-\fP to the anonymous password. With ftp
anonymous passwords, a \fB-\fP is usually prepended to the
password string. I don't know why the Midnight Commander vfs did
this, but one user had problems with it, hence this option is
given to send the password exactly as specified by
\fIpassword\fP.
.TP
\fB--test-login\fP
When using \fB--login-mode\fP or \fBpslogin\fP, you may want to
test access non-interactively (eg. in a shell script). To do
this you can run \fBpslogin\fP with this option and then check
its exit status. \fBsecure-mcserv\fP uses this to verify if the
user can login on the password server.
.TP
\fB--no-warn-first-login\fP
The first time you try a secure connection to a machine, no
public key exists on the local machine. There is hence no
security against a man-in-the-middle attack. A warning to this
effect is printed and the user is prompted if they want to
continue. This option disables this warning and goes ahead
regardless.
.TP
\fB--read-password-from-stdin\fP
Instead of specifying the password on the command line, you can
write it into the command via stdin. This is not the same as
typing the invisible password as one normally does, because it
can be used even if there is no terminal. This is useful
for usage within other programs using, say \fBpopen\fP(3).
\fBsecure-mcserv\fP uses this to verify if the user can login
on the password server.
.TP
.BR "--netrc"
Scan the \fB~/.netrc\fP file. By default, this option is on.
.TP
.BR "--no-netrc"
Turn off reading of \fB~/.netrc\fP file.
.TP
\fB--proxy-host\fP \fIhost\fP
Set the proxy for ftp downloads. Don't know how or if this works. Consult the
\fBmc\fP(1) man page for info in proxy support.
.TP
.BR "--secure"
(\fIThis feature is BETA\fP) I have implemented a secure socket layer
for \fBmirrordir\fP. It is enabled with this option and applies to
connections to \fBsecure-mcserv\fP (i.e. using \fBmc://\fP type URLs).
The secure socket library consists of \fBlibdiffie.a\fP and a
header file \fBdiffie-socket.h\fP. If you include \fBdiffie-socket.h\fP
after you include \fBsys/socket.h\fP you can recompile the resulting
program with all normal sockets turned into secure sockets. (This
applies to \fIany\fP program that uses Unix socket calls, but is
untested). The first service supporting this is \fBsecure-mcserv\fP
which compiles and installs by default. Hence you can use the
\fBmc://\fP file system with the \fB--secure\fP option, provided the
remote host is running \fBsecure-mcserv\fP (try \fBsecure-mcserv -h\fP
to for help). \fB--secure\fP uses a stream cipher (much more secure and
faster than block ciphers like DES) with discrete logarithm key
exchanges with public key server authentication (Diffie-Hellman and
p-NEW schemes). For the full details, see the file \fBdiffie-socket.h\fP
in the source distribution. The default key size is 512 bits. Note that
if you are using \fIgcc\fP you should compile \fBmirrordir\fP with the
options \fB-O3 -fomit-frame-pointer -s -Wall\fP to speed key generation.
.TP
.BR "--key-size " \fIbits\fP
The default key size is 512 bits. Sizes require primes to be
generated and compiled into the file field.c, hence only those
primes listed in field.c are supported, which are at the moment
512, 768, 1024 and 1536. 768 is the recommended value for medium
security if you have slow computer. Otherwise 1536 is not an
unreasonably paranoid size for long term security. 512 can be used
if you are not worried about large corporations, well connected
hackers, or governments snooping your connections. Note that the
the stream cipher has a length of \fBbits\fP/2, which means that
you have more chance of being hit by a meteor while cashing in at
the state lottery, than cracking it. Be aware that a person can sniff
your connection and then keep the output for as long as it takes to
break it. In twenty years time a 1536 bit key will be considered
small. Note also that the discrete logarithm problem (used here)
is considered to be more difficult to solve than the factorisation
problem, hence the key is effectively a little larger than for RSA.
This is all my (rather uneducated) opinion.
.TP
\fB--download-scripts\fP
\fBMirrordir\fP comes in two versions, an \fIInternational\fP version and
a \fIUS\fP version (see \fB--version\fP). The \fIUS\fP version contains
no encryption code whatsoever. Instead it downloads the needed
algorithms from \fBencrypt.obsidian.co.za\fP (in \fBSouth Africa\fP).
These are written in a fast, native, C-style interpreted language. There
are four scripts: one for the server Diffie-Hellman key exchange, one
for the client Diffie-Hellman key exchange, one for initialising the
stream cipher and one for actually performing the encryption using the
stream cipher. \fBMirrordir\fP automatically downloads these scripts
when you try to use the security features. The option
\fB--download-scripts\fP however can be used to force a download at any
time. The \fIInternational\fP version contains compiled-in versions of
the stream cipher, hence only two scripts are used, which need never be
downloaded since they come with the distribution. No speed penalty is
incurred by having the Diffie-Hellman exchanges in scripts, however, you
\fIwill\fP notice a significant speed different when using the
encryption scripts compared to compiled-in encryption.
.TP
\fB--version\fP
Prints out the version number as well as whether this is an
\fIInternational\fP or \fIUS\fP version of \fBmirrordir\fP. See
\fB--download-scripts\fP.
.TP
\fB-z\fP, \fB--gzip\fP
Enable compression for \fBmc://\fP connections. This actually envokes a
compressed socket layer at a lower level than the encryption.
Compression uses the \fBlibz\fP library of \fBgzip\fP(1). The degree of
compression is dynamically set to minimise transfer time. It will drop
to no compression for fast ethernet connections, and will go to maximum
compression for slow modem connections. The algorithm adjusts the
compression level so that the time for a TCP write call is between 2%
and 5% of the time for the same amount of data to be \fIdeflated\fP
(i.e. compressed).
.TP
\fB--gzip-backups\fP
Backups are usually just a copy of the file. With this option they are
compressed and a \fB.gz\fP is added to the default extension. Note that
if you specify your own extension using \fB--backup-extension\fP, then
it must have a \fB.gz\fP at the end for compression to work.
.TP
\fB--case-insensitive\fP, \fB--for-Robert-Seese\fP
Ignores case in comparison of filenames and linknames. This option is
useful when interacting with certain brain-dead operating systems. I am
not sure if this option behaves correctly under all circumstances.
.TP
\fB--to-lower\fP
.TP
\fB--to-upper\fP
Convert all new filenames to upper or lower case. When used with
\fB--case-insensitive\fP, it will apply only when creating new files.
When used without \fB--case-insensitive\fP, all files, existing or not,
will be converted to uppercase in the inefficient way of deleting the
old file and then copying the new file. This option is useful when
interacting with certain brain-dead operating systems. I am not sure
if this options behave correctly under all circumstances.
.TP
\fB--no-use-passive-connections\fP
If you get an error message \fBcould not setup passive mode\fP it is likely
because you need to enable this option. I don't really understand what `passive'
means, so don't ask me.
.TP
\fB--tar-file\fP \fIfilename\fP
This is to be used only with \fBrecursdir\fP. It creates a tar archive in
the same format as GNU \fBtar\fP(1) and stores it in \fIfilename\fP.
Leading special prefixes and leading slashes are removed, i.e.
\fIftp://machine/dir/file\fP becomes \fIdir/file\fP. If the first
character of the filename is a | character, the remaining text is
considered as a command through which the output is to be piped. Hence
a gzipped archive can be created for example with
.br
recursdir ftp://machine/dir --tar-file '| gzip -d > foo.tar.gz'
.TP
\fB--tar-block-size\fP \fIN\fP
Sets the block size for tar output to 512 * \fIN\fP. These are the units in
which data is written to the archive. The default is 20. This is
significant only when writing to block devices. This must not be
confused with \fB--block-size\fP.
.TP
.BR "--block-size " \fIbytes\fP
The default block size is 1024 bytes. File sizes are rounded up to the
nearest block when calculating the total number of blocks consumed. If
the actual block size is greater than assumed then it is possible for
fewer blocks to be counted than are actually consumed during writing.
Hence it is essential to specify a block size greater than or equal to
the actual block size when using the option \fB--max-bytes\fP.
.TP
.BR --strict-mtimes
When copying regular files, mirrordir normally only overwrites the
mirror file if it is \fIolder\fP than the control file. This option forces a
copy if there is \fIany\fP discrepancy at all in the modified times of
the files.
.TP
\fB--no-mtimes\fP
Copy files only if their sizes differ. Ignore the file modification
time.
.TP
\fB--ignore-size\fP
Copy files depending on mtime, but ignore size differences.
.TP 
.BR "--starting-file " \fIpath\fP
\fIpath\fP can be a file or directory. Until \fIpath\fP is read, files
or directories will be processed as though they were excluded files
(i.e. if they exist in \fImirror\fP they will be deleted). Directories
that contain \fIpath\fP will be created if they don't exist. After
\fIpath\fP is read, files are mirrored as usual. \fIpath\fP itself will
also be mirrored. If \fIpath\fP or any of its subdirectories are not
present, then \fBmirrordir\fP exits immediately. This is the only  time
\fBmirrordir\fP exits prematurely. This is to prevent the entire
filesystem from being erased on account of \fIpath\fP never being found.
.PP
.SH "FTP SUPPORT"
Ftp transfers are supported using the Midnight Commander's Virtual
File System (\fBVFS\fP), see \fBmc\fP(1). In short, this means that full
URLs as well as local directories are supported. The following example
demonstrates:
.nf
    mirrordir --verbose \\ 
	ftp://lava.obsidian.co.za/pub/mirrordir \\ 
	    /home/mirrordir
.fi
or alternatively,
.nf
    mirrordir --verbose /home/mirrordir \\ 
	ftp://psheer@lava.obsidian.co.za/home/ftp/pub/mirrordir
.fi
also works, but will prompt me for a password first. If you are
\fIuploading\fP to an ftp server, you should not have the 
--strict-mtimes options on, because modification times cannot 
be set via ftp, and hence everything will be copied.
.PP
You will notice (with --verbose) that \fBmirrordir\fP repeatedly tries
to set modification and access times over ftp. I am going to leave these
messages in to remind users of the limitations of the VFS type in use.
These attempts do not appreciably detract from performance. You can use
\fBmc://\fP instead although performance is poor when uploading with
this protocol. Downloading is always preferable to uploading.
.PP
In general you should \fBNOT\fP have an ftp upload in your cron jobs
or use ftp upload to keep directories in sync. Always download from the
other end when trying to keep directories in sync. Uploading is good
for once off uploads only.
.SH EXAMPLES
Here are some nifty things you can do with \fBmirrordir\fP.
.TP
.B Pedantic minimalist copy
.RS
I have two source trees. I like to keep an old copy before I apply
a patch. I just do \fBmkdir tree.OLD\fP and then
.PP
.nf
    \fB  mirrordir -v tree tree.OLD\fP
.fi
.PP
If I run \fBmirrordir\fP again, then only a minimal change is
made, i.e. only the updated files are copied. (\fBcp\fP(1) can in
fact do this).
.RE
.TP
.B System backups
.RS
Some systems used timed backups onto tape archives. Others still use RAID
devices which constantly maintain an identical copy of a partition.
\fBmirrordir\fP provides a further alternative. You can install two
drives in a system - one for use and one for backups - and place
\fBmirrordir\fP in your \fBcron\fP(8) tables. The various backup options
can be set to make backups of files that have changed. The backup
directory might also be readable by users so that they can see their
backed up files. Previous versions of files would also be available for
users that might like to retrieve any older instances of the file.
Because \fBmirrordir\fP executes only the absolutely minimal set of
changes, it is extremely fast. It can be run several times a day or even
continuously with the --nice option.

Backups can also be made by FTP onto a remote machine for additional
security against the destruction of the machine.
.RE
.TP
.B Backing up hourly between two machines:
.RS
On one machine called \fBdar2\fP I have a cron job that runs every six hours:
.PP
.nf
#!/bin/sh

# (this is just in case of any bugs I don't know about,
# but I don't think it is necessary)
killall -9 tee
killall mirrordir >& /dev/null
sleep 2
killall -9 mirrordir >& /dev/null

(                                                               \\
date                                                        ;   \\
echo "mirrordir says (if it said nothing it is bad):"       ;   \\
    mirrordir mc://dar1:12346/ -p abcdefg /mnt/dar1/            \\
    -i --exclude-regexp '^mc://dar1:12346/var/lock/subsys/atd'  \\
    --exclude-regexp '^mc://dar1:12346/proc/'                   \\
    --exclude-regexp '^mc://dar1:12346/mnt/[^/]*/.*$'           \\
    -i --exclude-regexp '^mc://dar1:12346/boot/'                \\
    -i --exclude-regexp '^mc://dar1:12346/etc/lilo.conf'        \\
    -C                                                          \\
\'
if (S_ISDIR (stat.st_mode)) {
    if (!regexp ("^mc://dar1:12346/[^/]*$", PATH))
        printf ("Backing up: %s\n", PATH);
}
\'                                                   ;           \\
date                                                ;           \\
echo "Done"                                         ;           \\
) 2>&1                                                          \\
| tee --ignore-interrupts --append /var/log/mirrordir.log       \\
| mail -s 'dar1 backup results' psheer@obsidian.co.za
.fi
.PP
.RE

.TP
.B Secure transfers and logins
.RS
On the machine \fBturing.co.uk\fP execute
.br
.nf
    \fBsecure-mcserv -p 12345 -d\fP
.fi
.br
On some foreign machine
.br
.nf
    \fBcopydir --secure -K 512 -z \\ 
    mc://alan@turing.co.uk:12345/usr/src/linux/.config .\fP
.fi
.br
to securely copy a file using a security key of 512 bits and using
compression, or
.br
.nf
    \fBpslogin mc://alan@turing.co.uk:12345/\fP
.fi
.br
to login to the machine securely.
.br
.RE
.TP
.B Mirroring FTP sites
.RS
Ftp sites often disable their -R option on ls so that a  traditional
\fBmirror\fP(1) will fail (?). \fBmirrordir\fP does not suffer from this
limitation.
.PP
.nf
    \fBmirrordir -v ftp://metalab.unc.edu/pub /home/ftp/pub\fP
.fi
.PP
.RE
.TP
.B FTP transfers
.RS
Typical FTP transfers can be made easily with a single command using the
--copy-mode option. You can copy multiple files in both directions and
even between two ftp sites (albeit indirectly), just like with
\fBcp\fP(1). I use
.br
.nf
    \fBcopydir -v mirrordir-0.9.15.tar.gz \\ 
    mirrordir.lsm ftp://metalab.unc.edu/incoming/Linux\fP
.fi
to upload \fBmirrordir\fP to the sunsite.
.LP
Passwords for non-anonymous ftp transfers are best placed in the
.B "~/.netrc"
file according to standard ftp convention, and the option --netrc used.
Alternatively use \fBftp://myname@machine/\fP instead.
.RE
.TP
.B Finding files
\fBrecursdir / -C\fP 
.br
.B 'if (!glob ("*.c", FILE)) printf ("%s\\\\n", PATH);'
.br
will print out all the C files on your system.
.br
\fBrecursdir / -C\fP 
.br
.B 'if (S_ISCHR(stat.st_mode)) printf ("%s\\\\n", PATH);'
.br
will print out all character devices on your system.
.TP
.B Backup FTP sites onto tape
.RS
Use
.br
.nf
    \fBrecursdir ftp://user@remote.machine/ \\ 
    --exclude-regexp '//[^/]*/proc/' --tar-file /dev/mt\fP 
.fi
to back-up a remote site onto tape.
.br
.RE
.TP
.B Removing core files
.RS
This removes all core files from your system:
.PP
.nf
recursdir / -C \'
long l;
if (strncmp (PATH, "/proc", 5)) {
    if (S_ISREG (stat.st_mode) && !strcmp ("core", FILE)) {
        if (strstr (popen ("file " + PATH), "ELF 32-bit LSB core")) {
            l = l + stat.st_size;
            printf ("removing: %s, cumu. total = %ldkB\\n", PATH, l >> 10);
            exec ("rm", "-f", PATH);    /* could also use system() */
        }
    }
}
\'
.fi
.PP
.RE
.SH "ENVIRONMENT VARIABLES"
.TP
.B TMPDIR
The directory where you would like temporary files to be stored. The ftp
filesystem downloads files first into the this temporary directory, and
then copies the file into its correct place. See \fBBUGS\fP below.

If TMPDIR is not specified, then it defaults to the directory of the
current file in progress.
.SH "RETURN VALUE"
\fBmirrordir\fP returns the following:
.TP
.B 0
Success.
.TP
.B 1
Some kind of error occurred like a write error, a permissions error or
the like. In this case, the precise error would have been written to
stderr.
.TP
.B 2
A file was in use and therefore could not be copied, but otherwise a
success. In this case the error `unable to open control file for writing'
would have been written to stderr. If you grep for these in stderr, you
can then run mirrordir with just these files. See \fBgrep\fP(1).

.SH BUGS
Some versions of the \fBatd\fP daemon create a lock (or pid?) file with
a lock on the file that cause \fBsecure-mcserv\fP to block indefinately.
You will have to kill \fBatd\fP or exclude (?) this file before hand to
prevent this.

Mirroring over ftp where there is some daylight savings correction, seems
to produce a one hour time offset. Use --time-offset as a temporary
work-around. I don't know if this is \fBmirrordir\fP's fault though.

A bug that caused \fBmirrordir\fP to eat CPU and appear to halt has been
fixed.

A large number of command-line --exclude expressions will slow
performance. This is noted for the purposes of those wanting to
exclude a large list of files. This list should be placed in a
text file and excluded with the \fB--exclude-from\fP option.

Modification and access times of symlinks (not the files they point to)
are not duplicated.

Note that the previous limitation that hardlinked files are treated as
regular files has now been alleviated. The option --no-hard-links is
provided to emulate the behaviour of versions prior to 0.9.8.

No check is made to see if a hard-link would be created across devices,
in which case an appropriate error will be reported.

The ftp file-system downloads files first into the temporary directory,
as a file with the name \fB*ftpfs*\fP. This is a waste of space but is
the default behavior of the vfs library. If there is not enough space in
this directory, then \fBmirrordir\fP will probably hang. See
\fBENVIRONMENT VARIABLES\fP above.

The C scripting language used to exclude files is an excessive
implementation.
.SH FILES
.TP
.B "~/.netrc"
List of machines and corresponding passwords. See the option \fB--netrc\fP.
.TP
.B /etc/ssocket/accept.cs
This script performs the key exchange and signature generation on the
server side of the connection.
.TP
.B /etc/ssocket/connect.cs
This script performs the key exchange and signature authentication on the
client side of the connection.
.TP
.B /etc/ssocket/arcinit.cs
This initialises the stream cipher encryption. (Not present in International versions.)
.TP
.B /etc/ssocket/arcencrypt.cs
This performs the stream cipher encryption. (Not present in International versions.)
.TP
.B /etc/ssocket/private/
This directory contains private keys for the host. Each key will be held
in a file: filenames are 512, 1024 etc. This is a preferable alternative to
databases of keys as it obviates the need for a key management utility. Soon
the Reiser (spelling) filesystem will be standard and database files will
become obsolete anyway.
.TP
.B /etc/ssocket/public/
Analogous to \fB/etc/ssocket/private/\fP for public keys.
.PP
.SH STANDARDS
mirrordir is an invention of its author and does not belong to any
operating system standard (although it should!).
.SH AVAILABILITY
The latest version of the program can be found at either
\fBftp://metalab.unc.edu/pub/Linux/system/backup\fP, or
\fBftp://lava.obsidian.co.za/pub/linux/mirrordir\fP.
.SH AUTHOR
Paul Sheer  <psheer@obsidian.co.za>  <psheer@icon.co.za>
.\" man page by Jim Van Zandt <jrv@vanzandt.mv.com>
.SH "SEE ALSO"
\fBmirror\fP(1), \fBpavuk\fP(1), \fBcp\fP(1), \fBscp\fP(1),
\fBfind\fP(1), \fBmc\fP(1), \fBftp\fP(1), \fBssh\fP(1),
\fBtar\fP(1), \fBrlogin\fP(1), \fBrlogind\fP(8), \fBforward\fP

