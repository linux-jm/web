.\" (c) 1999 by Paul Sheer <psheer@obsidian.co.za>    -*- nroff -*-
.TH forward 1 "1999 February 14" "Linux"
.SH NAME
forward \- arbitrary socket forwarding over a secure or compressed channel
.SH SYNOPSIS
.B forward
.br
[\fB-h\fP, \fB--help\fP]
.br
[\fB-v\fP, \fB--verbose\fP]
.br
[\fB-V\fP, \fB--version\fP]
.br
[\fB-p\fP, \fB--password\fP \fIpassword\fP]
.br
[\fB--netrc\fP]
.br
[\fB--no-netrc\fP]
.br
[\fB--secure\fP]
.br
[\fB-z\fP, \fB--gzip\fP]
.br
[\fB-K\fP, \fB--key-size\fP \fIbits\fP]
.br
[\fIuser\fP\fB@\fP]\fImachine1\fP[\fB:\fP\fIport1\fP] 
.br
\fImachine2\fP\fB:\fP\fIport2\fP
.br
\fIlisten_port\fP
.PP
.SH DESCRIPTION
.PP
\fBforward\fP listens on port \fIlisten_port\fP on your local machine. When
it receives a connection, it forwards this to \fImachine1\fP where a
\fBsecure-mcserv\fP(1) daemon is assumed to be running. The
\fBsecure-mcserv\fP daemon then makes a connection to \fImachine2\fP on
port \fIport2\fP. All traffic is then forwarded transparently between
\fIlisten_port\fP and \fIport2\fP of \fImachine2\fP.

The \fB--secure\fP and \fB--gzip\fP options can be used to effect the
connection between \fIlisten_port\fP of the local machine and 
\fIport2\fP of \fImachine2\fP. In this way \fBforward\fP can be used
to create secure or compressed versions of any service.
.PP
.SH OPTIONS
All options are analogous to those of \fBmirrordir\fP. See \fBmirrordir\fP(1)
for more info. \fB--debug\fP just prevents \fBforward\fP from forking into
the background as a daemon.
.PP
.SH EXAMPLES
I havn't tested this, but they seem logical. Tell me if I've made a typo
somewhere.
.PP
Consider a print server \fBA\fP on some LAN. The LAN has a masquerading server
\fBB\fP giving that LAN internet access. \fBB\fP can see both the internet and \fBA\fP. At
some other site \fBJohn\fP has a machine \fBD\fP using a masquerading server \fBC\fP
to give that LAN internet access. \fBB\fP and \fBC\fP can see each other only over
the open internet. He would like to run lpr on \fBD\fP and have it
automatically print out at \fBA\fP. He would also like the channel between \fBB\fP
and \fBC\fP to be compressed and encrypted (using a 1024 bit key exchange).
.PP
.nf
The procedure is as follows (515 is the printer port):
    A# lpd &
    B# secure-mcserv -d -p 12345
add an entry to ~/.netrc for the password of john on B, then
    C# forward john@B:12345 A:515 515 --secure -K 1024 -z
add an entry to /etc/printcap, defining a printer x on C, then
    D# lpr -Px mydocument
.fi
.PP
Consider \fBJill\fP who doesn't like colleague \fBJohn\fP printing out
screen dumps of her X session. She would like to create a secure X
session between her X server \fBA\fP and her mainframe \fBB\fP.
.PP
.nf
The procedure is as follows (6010 corresponds to display 10.0):
    A# X &
    A# secure-mcserv -d -p 12345
add an entry to ~/.netrc for the password of jill on A, then
    B# forward jill@A:12345 A:6000 6010 --secure -K 1024
    B# export DISPLAY=localhost:10.0
    B# fvwm &
.fi
.PP
.SH LIST OF TESTED SERVICES
Telnet logins, X sessions, printer (lpr) services, http and pop3
connections have been tested and work. Ftp connections do not forward
because of the way ftp tries to do wierd binding things with sockets
(?). Please tell about what else worked, although most everything should
work.
.PP
.SH BUGS
See also the \fBBUGS\fP section of \fBmirrordir\fP(1).
.PP
Out of bounds (\fBMSG_OOB\fP of \fBrecv\fP(2) and \fBsend\fP(2)) data is
never encrypted or compressed. It is sent unmodified in the plain text.
If anyone thinks this is a security risk, please tell me about it and
I'll come up with something.
.PP
Screen resizing (detection?) under \fBrlogin\fP(1) does not seem
to work, although it works under \fBtelnet\fP(1). This must have
something to do with OOB data not being sent properly. I don't
feel like debugging rlogin, rlogind, forward, and secure-mcserv
simultaneously to find the problem. If anyone wants to try this
please go ahead.
.SH FILES
.TP
\fB~/.netrc\fP
List of machines and corresponding passwords.
.SH STANDARDS
mirrordir is an invention of its author and does not belong to any
operating system standard.
.SH AVAILABILITY
The latest version of the program can be found at either
\fBftp://metalab.unc.edu/pub/Linux/system/backup\fP, or
\fBftp://lava.obsidian.co.za/pub/linux/mirrordir\fP.
.SH AUTHOR
Paul Sheer  <psheer@obsidian.co.za>  <psheer@icon.co.za>
.SH "SEE ALSO"
\fBmirrordir\fP(1), \fBpslogin\fP(1), \fBssh\fP(1)

