.\" -*- nroff -*-
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 1997 NAKANO Takeo
.\"   and 2011 Chonan Yoichi,
.\"         all rights reserved.
.\" Translated Thu May 11 1997 by NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\" Modified Fri 14 Aug 1998 by NAKANO Takeo -- bug fixes.
.\" Updated and modified (findutils-4.4.2) Fri Jan 28 12:28:44 JST 2011
.\"         by Chonan Yoichi <cyoichi@maple.ocn.ne.jp>
.\" Updated and modified (findutils-4.6.0) Sat Mar  3 11:18:22 JST 2018
.\"         bu Chonan Yoichi
.\" Translated for 4.9.0, 2022/04/19 ribbon <ribbon@users.osdn.me>
.\"
.\"WORD    end of file string    ファイル終端文字列
.\"
.TH XARGS 1   
.SH 名前
xargs \- 標準入力を読み込んでコマンドラインを作成し実行する
.SH 書式
\fBxargs\fP
.nh
[\fIoptions\fP] [\fIcommand\fP [\fIinitial\-arguments\fP]]
.hy
.
.SH 説明
このマニュアルページは GNU 版 \fBxargs\fP の使用法を説明しています。 \fBxargs\fP は、
標準入力から空白や改行で区切られた一連の項目を読み込み (空白はダブルクォート、 シングルクォート、 バックスラッシュによって保護できます)、
これを引数にして、 指定した \fIcommand\fP を 1 回以上実行する (デフォルトのコマンドは \fIecho\fP です)。 このとき、 ユーザーが
\fIcommand\fP に対して指定した引数 (上記書式の \fIinitial\-arguments\fP) があれば、 標準入力から読み込んだ一連の項目は、
その後ろに追加されます。 標準入力における空行は無視されます。
.P
\fIcommand\fP のコマンドラインは、 (\fB\-n\fP や \fB\-L\fP オプションが使用されていない場合は)
システムが定めているコマンドラインの長さの限界に達するまで、 長いものが作成されます。 そして、 指定された \fIcommand\fP が、
入力項目のリストを一つ残らず処理するのに必要な回数だけ、 呼び出されます。そのため、おおむね、 \fIcommand\fP
が呼び出される回数は、入力項目の数よりも、ずっと少なくてすむことになります。
このことは、たいていの場合、パフォーマンスを著しく向上させることになります。
なお、コマンドの中には、都合がよいことに、並列的に実行できるものもあります。\fB\-P\fP
オプションを参照してください。
.P
Unix では、 ファイル名に空白や改行を含むことが可能なので、 こうしたデフォルトの動作は、 しばしば問題となります。 空白や改行を含むファイル名は、
\fBxargs\fP によって適切に処理されません。 このような状況では、 \fB\-0\fP オプションの利用をお勧めします。 これを用いれば問題を回避できます。
なお、 \fB\-0\fP オプションを使う場合は、 \fBxargs\fP の入力を生成するプログラム側でも、 区切り文字にヌル文字を使うようにする必要があります。
たとえば GNU \fBfind\fP を使う場合ば、 \fB\-print0\fP オプションを用いることになります。
.P
指定したコマンドの実行が、 終了ステータス 255 で終了すると、  \fBxargs\fP は即座に停止して、 それ以上入力を読み込みません。
このときには、 エラーメッセージを標準エラーに出力します。
.
.SH オプション
.TP 
\fB\-0, \-\-null\fP
入力される項目が、 ホワイトスペース (空白や改行) ではなく、 ヌル文字によって区切られます。 また、 クォートやバックスラッシュは、
特別な扱いをしません (つまり、 すべての文字がそのままに解釈されます)。 ファイル終端文字列は無効になり、 他の引数と同じように扱われます。
このオプションは、 入力される項目にホワイトスペース、 クォート、 バックスラッシュなどが含まれる可能性がある場合に、 役に立ちます。 GNU
\fBfind\fP の \fB\-print0\fP オプションは、 このモードに適した入力を生成します。

.TP 
\fB\-a \fP\fIfile\fP\fB, \-\-arg\-file=\fP\fIfile\fP
入力項目を、 標準入力からではなく  \fIfile\fP から読み込みます。 デフォルトでは、 指定したコマンドが実行される際に、 標準入力が
\fI/dev/null\fP に付け換えられますが、 このオプションを使用した場合は、 標準入力の付け換えが起こりません。

.TP 
\fB\-\-delimiter=\fP\fIdelim\fP\fB, \-d\fP\fI delim\fP
入力される一連の項目が、 指定された文字によって区切られることになります。
指定される区切り文字は、 単一の文字でもよく、 \fB\en\fP のような
C 言語式のエスケープ文字でも、 8 進数や 16 進数のエスケープコードでもかまいません。
8 進数や 16 進数のエスケープコードは、 \fBprintf\fP コマンドの場合と同様に解釈されます。
マルチバイト文字には対応していません。
入力を処理する際、 クォートやバックスラッシュは特別扱いされません。
すなわち、 入力中のあらゆる文字が、 文字通りに解釈されます。
\fB\-d\fP オプションを指定すると、 ファイル終端文字列は無効になり、 (\fBxargs\fP
が作成するコマンドラインにおいて) 他の引数と同じように扱われます。
入力が、 項目を改行で区切っているだけのような単純な構成の場合には、
このオプションを使ってもよいですが、 ほとんどの場合、 なるべくなら、 \fBxargs\fP の
\fB\-\-null\fP を使うように、 出力側のプログラムを組み立てる方がよいです。

.TP 
\fB\-E\fP\fI eof\-str\fP
\fIeof\-str\fP をファイル終端文字列として設定します。 ファイル終端文字列が入力中の 1 行として現れると、 それ以後の入力は無視されます。
\fB\-E\fP も \fB\-e\fP も指定しない場合、 ファイル終端文字列は使用されません。
.TP 
\fB\-e\fP[\fIeof\-str\fP], \fB\-\-eof\fP[\fI=eof\-str\fP]
このオプションは \fB\-E\fP オプションの同義語です。\fB\-E\fP の方を使ってください。
理由は、 そちらが POSIX に準拠しているのに対して、 こちらは準拠していないからです。
\fIeof\-str\fP の部分が省略されると、 ファイル終端文字列が存在しないことになります。
\fB\-E\fP も \fB\-e\fP も指定しない場合、 ファイル終端文字列は使用されません。
.TP 
\fB\-I\fP\fI replace\-str\fP
\fIinitial\-arguments\fP 中で文字列 \fIreplace\-str\fP が現れるすべての箇所を、 標準入力から読み込んだ名前で置き換えます。
なお、 標準入力中にクォートされていない空白があっても、 それは入力項目の区切りにはなりません。 区切り文字は改行文字だけになります。 \fB\-x\fP と
\fB\-L\fP 1 の指定を暗に含みます。
.TP 
\fB\-i\fP[\fIreplace\-str\fP], \fB\-\-replace\fP[\fI=replace\-str\fP]
このオプションは、 \fIreplace\-str\fP が指定されていれば、 \fB\-I\fP\fIreplace\-str\fP の同義である。引数
\fIreplace\-str\fP が省略されていれば、 \fB\-I\fP{} と同じことになります。 このオプションは非推奨です。\fB\-I\fP を使ってください。
.TP 
\fB\-L\fP\fI max\-lines\fP
1 コマンド行につき最大 \fImax\-lines\fP 行の (空行ではない) 入力行を使用します。 入力行の行末に空白文字が付いていると、
その行は次の入力行に論理的に続いていることになります。 \fB\-x\fP の指定を暗に含みます。
.TP 
\fB\-l\fP[\fImax\-lines\fP], \fB\-\-max\-lines\fP[=\fImax\-lines\fP]
\fB\-L\fP オプションの同義語です。\fB\-L\fP とは違って、 \fImax\-lines\fP
という引数を指定するかどうかは任意です。引数 \fImax\-lines\fP
を指定しなかった場合は、 デフォルトの 1 が使用されます。POSIX 規格では
\fB\-L\fP の方を使うことになっているので、 \fB\-l\fP オプションの使用はお勧めできません。
.TP 
\fB\-n\fP\fI max\-args\fP\fB, \fP\fB\-\-max\-args\fP=\fImax\-args\fP
1 コマンド行につき最大 \fImax\-args\fP 個の引数を使用します。
作成されたコマンドラインが、 コマンドライン長の上限を超過する場合は
(\fB\-s\fP オプション参照)、 \fImax\-args\fP より少ない引数が使用されることになります。
ただし、 \fB\-x\fP オプションが指定されているときは別で、 その場合は \fBxargs\fP が終了します。
.TP 
\fB\-P\fP\fI max\-procs\fP, \fB\-\-max\-procs\fP=\fImax\-procs\fP
同時に実行するプロセスの最大数を \fImax\-procs\fP にします。 デフォルトは 1 です。 \fImax\-procs\fP が 0 ですと、
\fBxargs\fP はできるだけ多くのプロセスを同時に実行しようとします。 \fB\-P\fP オプションには、 \fB\-n\fP か \fB\-L\fP
オプションを併せて使用するべきです。そうしないと、 おそらく exec 関数がたった一回しか実行されないことになります。 \fBxargs\fP の実行中に、
そのプロセスに SIGUSR1 シグナルを送れば、 同時に実行するコマンドの数を増やすことができます。 また、 SIGUSR2 シグナルを送れば、
その数を減らすことができます。 ただし、 実装が決めている上限を越えて増やすことはできませんし  (上限は \fI\-\-show\-limits\fP
を使えばわかります)、 1 より少なくもできません。 \fBxargs\fP は、 実行しているコマンドを終了させるわけではありません。
実行数を減らすように命じられたときは、 単に現在実行中のコマンドが二つ以上終了するのを待ち、 それから別のコマンドを開始します。

注意してほしいのは、 共有リソースに対する並列アクセスをきちんと管理するのは、 呼び出されるプロセス側の問題であるということです。 たとえば、
複数のプロセスが標準出力に書き出そうとした場合、 出力順は不定です (そして混じり合ってしまうことが多い)。 そうならないためには、
プロセス同士が何らかの形で協力し合う必要があります。 ロックスキーム (locking scheme) のようなものを使うのは、
そうした問題を避けるための一方法です。 ただ一般にロックスキームを使っても、 出力順は適切に保証してくれるものの、 パフォーマンスは低下します。
パフォーマンスが落ちるのが嫌ならば、 単純に各プロセスがそれぞれ別の出力ファイルを作るように (あるいは別のリソースを使うように) すればよいでしょう。
.TP 
\fB\-o, \-\-open\-tty\fP
コマンド実行に先がけて、 子プロセスにおいて stdin を \fI/dev/tty\fP として再オープンします。これは \fBxargs\fP
を使って対話型アプリケーションを実行する場合に有用です。
.TP 
\fB\-p, \-\-interactive\fP
コマンド行 1 行ごとに、 実行するかどうかをユーザーに尋ねるプロンプトを出し、 端末から 1 行読み込みます。コマンド行を実行するのは、 返答が
`y' または `Y' で 始まるときだけです。自動的に \fB\-t\fP が指定されます。
.TP 
\fB\-\-process\-slot\-var\fP=\fIname\fP
複数の子プロセスを同時実行しているとき、 その各子プロセスで環境変数 \fIname\fP にユニークな値をセットします。値は、 子プロセスが終了すると、
再利用されます。この機能は、 たとえば、 初歩的な負荷分散スキームで利用できます。
.TP 
\fB\-r, \-\-no\-run\-if\-empty\fP
標準入力に空白しか含まれていない場合は、 指定したコマンドを実行しません。 通常では、 入力が全くない場合でも、 コマンドが一回は実行されます。
このオプションは GNU 拡張です。
.TP 
\fB\-s\fP\fI max\-chars\fP, \fB\-\-max\-chars\fP\fI=max\-chars\fP
1 コマンド行につき最大 \fImax\-chars\fP の文字を使用します。 この文字数には、 指定したコマンドと
\fIinitial\-arguments\fP、 それに各引数文字列の終端を示すヌル文字も含まれます。 指定できる値の上限は、 システム次第であり、 exec
関数に対する引数の最大長から、 現在の環境のサイズと  2048 バイトの余裕領域を引いたものです。もしその値が 128KiB  以上だったときは、
デフォルトの値には 128KiB が使用されます。 128KiB 未満のときは、 算出された上限がデフォルトの値になります。 1KiB は 1024
バイトです。制限がより厳しい場合でも、 \fBxarg\fP は自動的にそれに対応します。
.TP 
\fB\-\-show\-limits\fP
コマンド行の長さの上限を表示します。コマンド行長の上限は、 オペレーティングシステム、 \fBxargs\fP が設定したバッファサイズ、 それに \fB\-s\fP
オプションによって決まります。\fBxargs\fP にコマンドライン長の上限の表示以外をさせたくない場合は、 入力を \fI/dev/null\fP からパイプで
\fBxargs\fP に渡してください (さらに \fB\-\-no\-run\-if\-empty\fP を指定した方がよいかもしれません)。
.TP 
\fB\-t, \-\-verbose\fP
実行する前に、 コマンドラインを標準エラー出力に表示します。
.TP 
\fB\-x, \-\-exit\fP
作成されたコマンド行がコマンド行長の上限を超過していたら (\fB\-s\fP オプションを参照)、 終了します。
.TP 
\fB\-\-help\fP
\fBxargs\fP のオプションについて簡単に説明し終了します。
.TP 
\fB\-\-version\fP
\fBxargs\fP のバージョン番号を表示して、 終了します。
.PP
オプション \fB\-\-max\-lines\fP (\fB\-L\fP, \fB\-l\fP)、 \fB\-\-replace\fP (\fB\-I\fP, \fB\-i\fP)、
\fB\-\-max\-args\fP (\fB\-n\fP) は同時に指定することはできません。これらを同時に指定した場合、 通常 \fBxargs\fP は、
コマンド行上の最後に指定されたオプションを利用します。つまり誤って指定された (最終分よりも前に指定された)
オプション値はデフォルトにリセットされます。さらに \fBxargs\fP は警告情報を \fIstderr\fP に出力します。この仕様には例外があり、
\fImax\-args\fP に対して特別な値 \fI1\fP ('\fB\-n\fP\fI1\fP') を指定した場合、 \fB\-\-replace\fP
オプションおよびその別名である \fB\-I\fP と \fB\-i\fP の後ろであれば、 \fImax\-args\fP
は無視されます。これは相反する指定にならないからです。

.
.SH 例
.nf
\fBfind /tmp \-name core \-type f \-print | xargs /bin/rm \-f\fP

.fi
\fB/tmp\fP ディレクトリ以下に \fBcore\fP という名前のファイルを探して、 それを消去します。 改行や空白を含むファイル名があると、
正しく動作しないので、注意してください。
.P
\fBfind /tmp \-name core \-type f \-print0 | xargs \-0 /bin/rm \-f\fP

\fB/tmp\fP ディレクトリ以下に \fBcore\fP という名前のファイルを探して、 それを消去します。 ファイル名の処理に当たっては、
ファイル名やディレクトリ名に空白や改行が含まれていても、 適切に扱われるようにしています。

.P
\fBfind /tmp \-depth \-name core \-type f \-delete\fP

\fB/tmp\fP ディレクトリ以下に \fBcore\fP という名前のファイルを探して、 それを消去します。
上の例よりもこちらの方が効率的です (なぜなら、 \fBrm\fP を実行するために
\fBfork\fP(2) と \fBexec\fP(2) を使わないですみますし、 そもそも、 \fBxargs\fP
のプロセスを必要としないからです)。

.P
.nf
\fBcut \-d: \-f1 < /etc/passwd | sort | xargs echo\fP

.fi
システムの全ユーザーを列挙した簡潔なリストを生成します。
.
.SH 終了ステータス
\fBxargs\fP の終了ステータスは以下のとおりです。
.RS
.IP 0
成功した。
.IP 123
指定したコマンドの実行が 1\-125 のステータスで終了した。
.IP 124
指定したコマンドが 255 のステータスで終了した。
.IP 125
指定したコマンドがシグナルによって kill された。
.IP 126
指定したコマンドが実行できない。
.IP 127
指定したコマンドが見つからない。
.IP 1
上記以外のエラーが起きた。
.RE

.P
128 以上の終了ステータスは、 致命的なシグナルのせいでプログラムが止まったことを示すために、 シェルが使用しています。
.
.SH 規格への準拠
GNU xargs version 4.2.9 以来、 ファイルの論理的な終端を示す指標
(a logical end\-of\-file marker) を持たないのが、 \fBxargs\fP
のデフォルトになっています。このことは POSIX (IEEE Std 1003.1, 2004 Edition)
で認められています。
.P
\-l や \-i オプションは 1997 年版の POSIX 規格には存在するが、 2004 年版の POSIX 規格には存在しません。従って、 それぞれ
\-L や \-I の方を使うべきです。
.P
\-o オプションは POSIX 規格を拡張したものであり、 BSD と互換性を図るためのものです。
.P
POSIX 規格は、 実装に当たって、 \fBexec\fP 関数に対する引数のサイズに上限を設けることを認めています。
そして、 その上限は、 環境のサイズも含めて、 少なくとも 4096 バイトあればよいことになっています。
移植性のあるスクリプトを書こうと思ったら、 これより大きいサイズを当てにしてはいけません。
もっとも、 実際の上限がそんなに小さい実装に、 筆者は出会ったことはありません。
\fB\-\-show\-limits\fP オプションを使えば、 使用中のシステムで有効な実際の上限を知ることができます。
.
.SH バグ
\fBxargs\fP を安全に使うことはできません。 なぜなら、 入力ファイルの一覧を作成する時間と、 \fBxargs\fP
からの実行コマンドがその一覧を使用する時間との間に、 必ず差が発生するためです。 仮に、 他のユーザーがすでにシステムにアクセスしていたとして、
そのユーザーが、 その一瞬の隙にファイルシステムを操作して、 \fBxargs\fP が実行するコマンドの動作を、
こちらが意図していないファイルに無理矢理向けてしまう、 といったことができてしまいます。この議論や、 これに関連する問題については、 findutils
に含まれる Texinfo 文書の「Security Considerations」という章でもっと細かく述べているので、 参照してください。 なお、
\fBfind\fP の \fB\-execdir\fP オプションは、 より安全な方法として \fBxargs\fP の代わりに利用されることがよくあります。

\fB\-I\fP オプションを使うと、 標準入力から読み込まれた各行が、 内部的にバッファに保存されます。 つまり、 \fB\-I\fP オプションをつけたときに、
\fBxargs\fP が受けつける入力 1 行には、 長さの上限があるということです。 この制限を回避するには、 \fB\-s\fP オプションを使って、
\fBxargs\fP が使用するバッファ領域のサイズを増やして対処します。 もう 1 つの \fBxargs\fP を追加で実行すれば、
極端に長い行が発生しないようにできます。たとえば以下です。
.P
\fBsomecommand | xargs \-s 50000 echo | xargs \-I '{}' \-s 100000 rm '{}'\fP
.P
\fBxargs\fP の 1 つめの呼び出しでは、 入力行の長さに上限はありません。 これは \fB\-I\fP オプションを使っていないからです。
\fBxargs\fP の 2 つめの呼び出しには、 上限設定がありますが、 処理できなくなるような 1 行は、
入ってこないのが明らかです。こうすることが理想的な解決法というわけではありません。 それよりも、 \fB\-I\fP
オプションが長さの制限を設けないでいる方が望ましいことです。 だからこそ、 この問題を「バグ」セクションで説明しているわけです。 なおこの問題は、
\fBfind\fP(1) の出力では発生しません。 \fBfind\fP は 1 行に 1 ファイル名しか出力しないためです。
.
.SH バグ報告
GNU findutils オンラインヘルプ:
<https://www.gnu.org/software/findutils/#get\-help>
.br
翻訳に関するバグ報告 <https://translationproject.org/team/>
.PP
その他の問題について GNU Savannah バグトラッカー経由での報告:
.RS
<https://savannah.gnu.org/bugs/?group=findutils>
.RE
GNU findutils パッケージのメーリングリスト \fIbug\-findutils\fP において議論されている全般的なトピック:
.RS
<https://lists.gnu.org/mailman/listinfo/bug\-findutils>
.RE
.
.SH 著作権
Copyright \(co 1990\-2022 Free Software Foundation, Inc.  License GPLv3+: GNU
GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
.br
This is free software: you are free to change and redistribute it.  There is
NO WARRANTY, to the extent permitted by law.
.
.SH 関連項目
\fBfind\fP(1), \fBkill\fP(1), \fBlocate\fP(1), \fBupdatedb\fP(1), \fBfork\fP(2),
\fBexecvp\fP(3), \fBlocatedb\fP(5), \fBsignal\fP(7)
.PP
完全なドキュメント <https://www.gnu.org/software/findutils/xargs>
.br
またローカルにおいては \fBinfo xargs\fP により参照できます。
