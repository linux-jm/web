.\" -*- nroff -*-
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 1997 NAKANO Takeo
.\"   and 2010 Chonan Yoichi 
.\"         all rights reserved.
.\" Translated Thu May 11 1997 by NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\" Modified Fri 14 Aug 1998 by NAKANO Takeo -- bug fixes.
.\" Updated and modified (findutils-4.4.2) Mon Dec 20 21:17:50 JST 2010
.\"         by Chonan Yoichi <cyoichi@maple.ocn.ne.jp>
.\" Modified Sun Jan 30 11:44:29 JST 2011 by Chonan Yoichi
.\" Updated and modified (findutils-4.6.0) Sat Mar  3 11:18:22 JST 2018
.\"         by Chonan Yoichi
.\" Translatedd for 4.9.0, 2022/04/18 ribbon <ribbon@users.osdn.me>
.\"
.\" WORD    expression   式
.\" WORD    predicate    述語 (true/false を返すテストのことを主に
.\"                      表します。副作用を起こすアクションも、
.\"                      true/false を返すため、これに含みます。)
.\"                      ただしmanページ内では突然predicateとして出て
.\"                      くるため「述語表現であるXX」と説明的に補います。
.\" WORD    test         テスト (式の1つ; true/falseを返す。)
.\" WORD    action       アクション (式の1つ; 副作用を起こす。)
.\" WORD    operator     オペレーター (式の1つ; -a(and)/-o(or)など。)
.\"                      式 (expression) を構成する primary は
.\"                      option, test, action, operator の 4 つであり、
.\"                      これらを邦訳するには、4 つのバランスを考えて
.\"                      オプション、テスト、アクション、オペレーター
.\"                      とするのが妥当と考えたための訳です。
.\" WORD    directive             ディレクティブ (技術用語として定着と判断)
.\" WORD    access time           アクセス時間
.\" WORD    status change time    ステータス変更時間
.\" WORD    modification time     更新時間
.\" WORD    birth time            生成時間
.\" WORD    sparse file           スパースファイル (技術用語として定着と判断)
.\"
.TH FIND 1   
'\" t
.SH 名前
find \- ディレクトリ階層内のファイル検索
.SH 書式
\fBfind\fP [\-H] [\-L] [\-P] [\-D debugopts] [\-Olevel] [starting\-point...\&]
[expression]
.
.SH 説明
このマニュアルページは GNU 版 \fBfind\fP の使用法を説明しています。 GNU \fBfind\fP は、 指定された検索開始ポイント
(starting\-point) を基準にして、 ディレクトリツリーを検索します。 そして優先規則に従って (「オペレーター」のセクション参照)、
指定された式 (expression) を左から右の順で評価していきます。 たとえば、 \fIand\fP 演算で左辺が false になった場合や、
\fIor\fP 演算で左辺が true になった場合のように、 式の結果が確定すると、 \fBfind\fP は次のファイル名を処理対象とします。
検索開始ポイントが指定されていない場合は、 `.\&' が指定されたものとみなします。
.PP
セキュリティを重視する必要がある状況 (たとえば、 別ユーザーが書き込み可能なディレクトリを、 自分が検索しようとしている場合) のもとで、
\fBfind\fP を利用する場合には、 findutils 文書の 「Security Considerations」の章をよく読んでください。
この文書は \fBFinding Files\fP というものであり、 findutils に含まれています。 この文書の方がマニュアルページに比べて、
詳しい説明や検討が行われているので、 役に立つ情報が得られるかもしれません。
.
.SH オプション
\fB\-H\fP, \fB\-L\fP, \fB\-P\fP というオプションは、 シンボリックリンクの取り扱いを制御します。 このオプションに続くコマンドライン引数は、
検索対象となるファイル名やディレクトリ名として扱われます。 ただしそのように扱われるのは、 次に `\-' で始まる引数や、 `(' や `!'
という引数が現れるところまでです。 その引数以降の記述は、 検索方法を示した式として扱われます。 検索開始ポイントのパスが指定されなかった場合は、
カレントディレクトリが検索対象になります。 また、 式が指定されなかった場合は、 式 \fB\-print\fP が使用されます (ただしどのような場合でも、
\fB\-print\fP ではなく \fB\-print0\fP の利用を検討してください)。
.PP
このマニュアルページでは、 式の中で用いる「オプション」について説明しています。 オプションは、 \fBfind\fP の動作を制御します。
これを指定するのは、 パス名の指定を終えた後ろです。 これとは別に、 「本当の」オプションとして \fB\-H\fP, \fB\-L\fP, \fB\-P\fP, \fB\-D\fP,
\fB\-O\fP という 5 つがあります。 これを用いるのであれば、 パス名の指定よりも前でなければなりません。 なお仕様上は、 ダッシュを 2 つ重ねた
\fB\-\-\fP を使用することで、 それ以降の引数が、 オプションでないことを表すことができるとされます。 ただし、
この後に続く引数がパス引数であるかどうかを決定する処理が原因となって、 2 重のダッシュは実際には動作しません。 つまり式を表す引数 (これも `\-'
で始まります) が現れるところまで、 引数を読み込むことで、 パス引数の終わりが判断されます。 仮にパス引数が `\-' で始まっていたとしたら、
\fBfind\fP はこれを式として取り扱ってしまいます。 このように、 検索開始点であるパス引数は、 適切に解釈されない場合があり、 他にも、
ワイルドカードパターンをシェルが展開する際に、 誤って式のように展開してしまうことがあります。 このような状況を避けるため、
一般的に行う安全策としては、 不安に思うパス名称やワイルドカードの前には、 `./' をつけるようにするか、 '/'
で始まる絶対パス名を用いるようにします。 別の方法として移植性には欠けますが安全な方法があります。 GNU オプションの \fB\-files0\-from\fP
を使って \fBfind\fP の検索開始ポイントを任意に定める方法です。

.IP \-P
シンボリックリンクをたどりません。 これがデフォルトの動作です。 \fBfind\fP がファイルの情報を調べたり表示したりする際に、
そのファイルがシンボリックリンクであれば、 シンボリックリンクそのもののプロパティから取得される情報が用いられます。

.IP \-L
シンボリックリンクをたどります。 \fBfind\fP がファイルの情報を調べたり表示したりする際には、
リンク先ファイルのプロパティから情報が取得され利用されます。 つまりリンクそのものの情報は利用されません (ただし、 シンボリックリンクが切れていたり、
\fBfind\fP がリンク先のファイルを調べることができなかった場合は除きます)。 このオプションの指定は、 暗に \fB\-noleaf\fP
の指定を含みます。 この指定の後ろに \fB\-P\fP オプションを指定しても、 \fB\-noleaf\fP の効果は変わりません。 \fB\-L\fP が有効であって、
\fBfind\fP がサブディレクトリを指し示すシンボリックリンクを見つけた場合は、 サブディレクトリ内が検索されます。
.IP
\fB\-L\fP オプションが有効な場合に、 述語表現である \fB\-type\fP を用いると、 シンボリックリンクそのものではなく、
シンボリックリンク先のファイルのタイプに対して、 確認が行われます (リンク切れである場合は除きます)。 \fBfind\fP の実行中に、
シンボリックリンク切れを起こすようなアクションを行うと (たとえば、 \fB\-delete\fP を指定すると)、 混乱を招く動作が発生することになります。
\fB\-L\fP を使用すると、 述語表現の \fB\-lname\fP や \fB\-ilname\fP は必ず false を返します。

.IP \-H
シンボリックリンクをたどりません。 ただしコマンドライン引数を処理する場合は別です。\fBfind\fP がファイルの情報を調べたり表示したりする際には、
シンボリックリンクそのものからプロパティを取得して、 その情報が利用されます。 このような動作は、
コマンドライン上のファイルがシンボリックリンクであった場合には行われません。 このときには、 リンク先が読み取られます。
つまりその状況では、リンク先が何であっても、 リンク先から取得した情報が利用されます (つまりリンクをたどります)。
シンボリックリンク自体の情報は、リンク先が確認できなかった場合の予備情報として利用されます。 \fB\-H\fP が有効であって、
コマンドラインで指定されたパスのうち、 ディレクトリへのシンボリックリンクがあった場合も、 そのディレクトリの中身が調べられることになります (ただし
\fB\-maxdepth\ 0\fP が指定されていれば、 当然そのような処理にはなりません)。
.P
複数の \fB\-H\fP, \fB\-L\fP, \fB\-P\fP を指定した場合は、 前のものが上書きされます。 つまり、 適用されるものは、
コマンドライン上で最後に指定されたものです。 \fB\-P\fP がデフォルトなので、 \fB\-H\fP や \fB\-L\fP の指定がなければ、 \fB\-P\fP
オプションが有効であると判断できます。

GNU \fBfind\fP は、 検索処理に入る前のコマンドライン処理においても、 ファイル情報を調べることがあります。 上に示したオプションは、
そのような引数の処理に対しても、 影響を及ぼします。 具体的に見てみると、 数多くのテストでは、 その時点で処理対象となっている 1 つのファイルと、
コマンドライン上の複数ファイルとの間で、 比較処理を行います。 どの状況でも、 コマンドラインから指定されたファイルは、 プロパティが調べられて、
その一部は保存されます。 引数上のファイルがシンボリックリンクであって、 \fB\-P\fP オプションが有効な場合 (あるいは \fB\-H\fP と \fB\-L\fP
オプションの指定がどちらもない場合)、 比較処理に用いられるのは、 シンボリックリンクのプロパティ情報です。 そうでない場合には、
リンク先ファイルのプロパティ情報が用いられます。 \fBfind\fP がリンク先をたどれなかった場合 (たとえば権限が不足していた場合や、
リンク先が存在しないファイルであった場合)、 シンボリックリンクそのもののプロパティが用いられます。
.P
\fB\-H\fP あるいは \fB\-L\fP オプションが有効な場合、 \fB\-newer\fP の引数として指定されたものがシンボリックリンクなら、
その参照をたどって、 リンク先のファイルからタイムスタンプを取得します。 このような処理は、 \fB\-newerXY\fP, \fB\-anewer\fP,
\fB\-cnewer\fP でも同様に行われます。

\fB\-follow\fP オプションは、 \fB\-L\fP と同様の効果がありますが、 オプションの指定位置以降に対して有効になります。 (つまり、 \fB\-L\fP
を使わずに、 \fB\-follow\fP が使われた場合、 コマンドライン上、 シンボリックリンクが \fB\-follow\fP の後ろに指定されている場合は、
参照をたどるのに対して、 その前に指定されたものは参照をたどりません。)

.IP "\-D debugopts"
診断情報を出力します。 \fBfind\fP が思うように動かない場合に、 原因調査に役立てることができます。 デバッグオプションを複数指定するときは、
カンマで区切ります。 findutils のリリース間において、 デバッグオプションの互換性は保証されません。 有効なデバッグオプションの一覧は、
\fBfind \-D\ help\fP の出力を確認してください。 有効なデバッグオプションには、 以下のものがあります。
.RS
.IP exec
\-exec, \-execdir, \-ok, \-okdir に関連する診断情報を表示します。
.IP opt
式ツリー (expression tree) の最適化に関する診断情報を表示します。 \-O オプションを参照してください。
.IP rates
述語表現が成功あるいは失敗した回数を、 取りまとめて表示します。
.IP search
ディレクトリツリーを詳細に示します。
.IP stat
システムコールの \fBstat\fP や \fBlstat\fP を使って、 ファイルが調べられた場合に、 メッセージを表示します。 \fBfind\fP
プログラムは、 そのようなシステムコールの呼び出しを、 最小となるように処理します。
.IP tree
式ツリー (expression tree) を、 元の形と最適化した形で示します。
.IP all
すべてのデバッグオプションを有効にします (ただし \fBhelp\fP は除きます)。
.IP help
デバッグ用オプションを説明します。
.RE
.IP \-Olevel
問い合わせの最適化を有効にします。 \fBfind\fP プログラムは、 複数テスト全体の処理内容を変えることなく、 テストの順番を並べ替えて、
実行速度を上げます。 ただし、 副作用を持つ述語は、 他の述語と入れ替えは行いません。 最適化レベルごとの最適化の違いは以下のとおりです。
.RS
.IP 0
最適化レベル 1 と同じです。
.IP 1
これはデフォルトの最適化レベルであり、 従来からある動作です。 ファイル名だけを確認するテスト (たとえば \fB\-name\fP や \fB\-regex\fP)
が先に実行されるように、 式の並び替えを行います。
.IP 2
ファイル名だけを確認するテストよりも、\fB\-type\fP あるいは \fB\-xtype\fP を後に処理します。 ただし i
ノードからの情報を必要とするテストよりは、 前に処理します。 最近の Unix では、 \fBreaddir()\fP
関数がファイルタイプを返すようになっているため、 これらの述語表現は、 ファイル情報を最初に調べる述語表現に比べて、 処理が高速になります。 述語表現の
\fB\-fstype\fP \fIFOO\fP を用いた際に、 指定したファイルシステムタイプ \fIFOO\fP が、 \fBfind\fP の起動時点において不明なもの
(`/etc/mtab' に存在しないもの) であった場合、 この述語表現は \fB\-false\fP に等しくなります。
.IP 3
この最適化レベルでは、 コストベースによって最適化を行う、 完全な問合せオプティマイザー (query optimiser) を有効にします。
コストの低い (つまり高速になる) テストを先に処理し、 コストの高いものは後に処理するというように、 必要に応じた並び替えが行われます。
一定のコストの幅の中では、 述語表現が成功するか否かの可能性を考慮して、 述語表現の評価を先に行ったり、 後に行ったりします。 \fB\-o\fP の場合は、
成功する可能性のあるものが、 先に評価されます。 \fB\-a\fP の場合は、 失敗する可能性のあるものが、 先に評価されます。
.RE
.IP
コストベースのオプティマイザーは、 対象のテストが成功するかどうかに関して、 一定の取り決めを設けています。 成功するかどうかの判断は、
テストの性質を配慮して、 状況により変化する場合があります (たとえば \fB\-type\ f\fP の場合は、 \fB\-type\ c\fP よりも、
成功する可能性が高いとみなしています)。 コストベースのオプティマイザーは現在、 評価中の段階です。 したがって、 \fBfind\fP
の性能が実際に向上しなければ、 削除される予定です。 逆に、 この機能に信頼性や確実さが確認されて、 効果的であることが分かれば、 後々、
下位の最適化レベルにおいて実現するかもしれません。 ただし、 4.3.x 系のリリースにおいては、 デフォルトの動作 (最適化レベル 1)
を変更する予定はありません。 findutils のテストスイートでは、 \fBfind\fP に対するテストすべてにおいて、
各最適化レベルでの処理を実施していて、 その結果が同一になることを確認しています。
.
.SH 式
コマンドライン上で、 検索開始ポイント (starting\-point) のリストの次にくるものが、式 (\fIexpression\fP) です。 式は、
検索方法を定めます。 どのファイルに一致するか、 一致したファイルをどう処理するか、 ということを表します。 式は、 以下の項目から構成されます。

.IP "テスト (test)"
テストは true または false を返します。 通常その値は、 処理時点での対象ファイルの所定のプロパティに基づいて決まります。 たとえば
\fB\-empty\fP というテストは、 対象ファイルが空の場合に true になります。

.IP "アクション (action)"
アクションには副作用があり (たとえば、 標準出力に何かを表示するなどして)、 その上で true または false を返します。 通常その値は、
副作用による処理の成功または失敗に基づいて決まります。 たとえば \fB\-print\fP というアクションは、 対象ファイルの名前を標準出力に出力します。

.IP "グローバルオプション (global option)"
グローバルオプションは、 コマンドライン上に指定されているテストやアクションすべてに影響を及ぼします。 グローバルオプションは、 必ず true
を返します。 たとえば、 \fB\-depth\fP オプションを指定すると、 \fBfind\fP がファイルシステムをたどるときに、 深い方から先
(depth\-first order) に処理します。

.IP "位置オプション (positional option)"
位置オプションは、 この後ろにあるテストやアクションに対してのみ影響を及ぼします。 位置オプションは、 必ず true を返します。 たとえば
\fB\-regextype\fP オプションは、 その記述位置によって動作が決まります。 コマンドライン上で、 この記述以降に現れる正規表現が、
どういった方言の正規表現であるかを指定します。

.IP "オペレーター (operator)"
オペレーターは、 式を構成する項目どうしを結びつけます。 オペレーターには、 \fB\-o\fP (論理 OR の意味) や \fB\-a\fP (論理 AND
の意味) があります。 オペレーターがないところは、 \fB\-a\fP があるものとみなされます。

.P
式がすべて true になったファイルに対して、 アクション \fB\-print\fP が実行されます。 ただしアクション \fB\-prune\fP または
\fB\-quit\fP を除いた、 他のアクションがある場合は、 実行されません。 デフォルトの \fB\-print\fP の動作を発生させないアクションは、
以下のものです。 \fB\-delete\fP, \fB\-exec\fP, \fB\-execdir\fP, \fB\-ok\fP, \fB\-okdir\fP, \fB\-fls\fP,
\fB\-fprint\fP, \fB\-fprintf\fP, \fB\-ls\fP, \fB\-print\fP, \fB\-printf\fP


\fB\-delete\fP というアクションは、 オプションのようにも働きます (\fB\-depth\fP の指定を暗に含むためです)。

.SS 位置オプション
位置オプションは、 常に true を返します。 位置オプションは、 この後ろにあるテストに対してのみ影響を及ぼします。

.IP \-daystart
時間の計測を、 24 時間前からではなく、 本日の始まりからとします (対象は \fB\-amin\fP, \fB\-atime\fP, \fB\-cmin\fP,
\fB\-ctime\fP, \fB\-mmin\fP, \fB\-mtime\fP です)。 このオプションの指定が有効になるのは、
コマンドライン上でこれよりも後ろに記述されたテストに対してのみです。

.IP \-follow
非推奨とされています。 代わりに \fB\-L\fP オプションを使ってください。 これはシンボリックリンクをたどます。 \fB\-noleaf\fP
の指定を暗に含みます。 \fB\-follow\fP オプションが影響を及ぼすのは、 コマンドライン上で、 これよりも後ろに指定されたテストに対してのみです。
\fB\-H\fP あるいは \fB\-L\fP オプションの指定がなければ、 \fB\-follow\fP オプションが記述されると、 述語表現 \fB\-newer\fP
の動作は変わります。 \fB\-newer\fP の引数として指定されたファイルが、 シンボリックリンクであった場合は、 そのリンク先が参照されます。
\fB\-newerXY\fP, \fB\-anewer\fP, \fB\-cnewer\fP についても同様です。 また、 述語表現の \fB\-type\fP も、
シンボリックリンクそのものではなく、 シンボリックリンク先のファイルタイプに一致するようになります。 \fB\-follow\fP を指定すると、 述語表現
\fB\-lname\fP と \fB\-ilname\fP は、 必ず false を返します。

.IP "\-regextype \fItype\fP"
コマンドライン上で、 この後に記述されるテスト \fB\-regex\fP と \fB\-iregex\fP に対して、 解釈する正規表現文法を変更します。
正規表現の種類には何があるかについては、 \fB\-regextype\ help\fP を実行して確認してください。 Texinfo 文書
(「関連項目」参照) では、 各種正規表現の意味や違いについて説明しています。

.IP "\-warn, \-nowarn"
警告メッセージの表示、非表示を切り替えます。 この警告は、 コマンドラインの使用法に関するものだけを対象とします。 逆に \fBfind\fP
のディレクトリ検索時における処理状況に関するものは、 対象としません。 デフォルトの動作は、 標準入力が tty であれば \fB\-warn\fP になり、
そうでなければ \fB\-nowarn\fP になります。 コマンドラインの使用法に関する警告メッセージが出力された場合であっても、 \fBfind\fP
の終了ステータスには影響しません。 環境変数 \fBPOSIXLY_CORRECT\fP が設定された状態で、 \fB\-warn\fP が指定されると、
警告が発生したとしても、 どの警告を出すのかは未定です。

.SS グローバルオプション
グローバルオプションは、必ず true を返します。 グローバルオプションは、 コマンドライン上で、
これよりも前にあるテストに対しても影響を及ぼします。 混乱を避けるために、 コマンドライン上でのグローバルオプションの指定は、
検索開始ポイントのリストの後ろで、 テスト、位置オプション、 アクションの直前に指定してください。 グローバルオプションを、
それとは別の場所で指定すると、 \fBfind\fP は、 混乱する可能性があることを示す警告メッセージを出力します。

グローバルオプションの指定位置は、 検索開始ポイントのリストより後ろです。 このため \fB\-L\fP とは異なる種類のものです。 たとえば以下のとおりです。

.IP \-d
\-depth と同じです。 FreeBSD, NetBSD, MacOS X, OpenBSD との互換性のためにあります。

.IP \-depth
ディレクトリそのものより前に、 ディレクトリの中を処理します。 アクション \fB\-delete\fP には \fB\-depth\fP
オプションが暗に含まれています。

.IP "\-files0\-from \fIfile\fP"
検索開始ポイントを、 コマンドラインから指定されたものを使わずに、 \fIfile\fP から読み込みます。
コマンドラインからの引数として検索開始ポイントを指定することには、 一定の制約がありました。 つまりファイルの指定数に上限があったことです。
またオプション名とかぶるようなファイル名の場合に、 見誤ってしまうことがありました。 このオプションを使うと、 \fBfind\fP
に指定する検索開始ポイントを、 安全にまた任意の数だけ受け渡すことができます。

このオプションを用いることと、 コマンドラインから検索開始ポイントを受け渡すことは、 互いに排他的な関係にあります。
つまり両方を同時に用いることはできません。

引数 \fIfile\fP は必須です。 検索開始ポイントの一覧を \fI標準入力\fP ストリームからとることは可能であり、
たとえばパイプを使って受け渡すことができます。 その場合、 アクション \fB\-ok\fP と \fB\-okdir\fP は用いることができません。
これらはユーザーからの入力確認を行うものであるため、 \fI標準入力\fP からの読み込みとは、 明らかに相容れないものになるからです。

\fIfile\fP 内の検索開始ポイントは、 ASCII NUL 文字によって区切ります。 2 つの連続した NUL 文字、
つまり検索開始ポイントのファイル名の長さがゼロであるものは、 指定することができません。
その場合はエラーメッセージが出力されて、最後にゼロ以外の終了コードが返されます。

指定された \fIfile\fP が空の場合、 \fBfind\fP は検索開始ポイントがないものとして処理をするため、 プログラム引数を解析した後に、
すぐに終了します。 これは、 パス引数が受け渡されなかった場合に、 \fBfind\fP の標準的な呼び出しを行えば、
カレントディレクトリを検索開始ポイントとする動作とは異なることになります。

検索開始ポイントからの処理は、 それ以外の点では通常どおり行われます。 つまり \fBfind\fP は特に指示がない限りは、
サブディレクトリを再帰的に処理します。 検索開始ポイントだけを処理するには、 さらに \fB\-maxdepth\ 0\fP を指定することができます。

さらに注意点です。 入力ファイル内に所定のファイルが複数回記述されていた場合、 それが複数回検索されることになるかどうかは不定です。 \fBfind\fP
の処理中に \fIfile\fP が変更された場合も、 同様に不定です。 また \fBfind\fP が終了する際の、その指定された \fIfile\fP
内の検索位置も、 終了方法が \fB\-quit\fP であるか別の方法であるかを問わず、 不定となります。 ここで "不定" と言っているのは、
動作するしないは分からず、何か特定の処理がなされるかもしれないということであり、 その動作は、 プラットフォームによって変わるかもしれないし、
\fBfindutils\fP のリリースによって変わるかもしれないということです。

.IP "\-help, \-\-help"
\fBfind\fP のコマンドラインの使用方法の概要を表示して終了します。

.IP \-ignore_readdir_race
通常 \fBfind\fP は、 ファイル情報の取得に失敗したときには、 エラーメッセージを出力します。 このオプションを指定した場合、
ディレクトリからファイル名を読み込んだときと、 ファイル情報を取得しようとしたときの間で、 ファイルが削除されてしまっていても、
エラーは表示されません。 この動作は、 コマンドライン上から指定されるファイルやディレクトリに対しても適用されます。 このオプションは、
コマンドラインから読み込みを行う段階で有効となるので、 ファイルシステムの一部に対して、 このオプションをオンとし、
残りの部分はオフとするような指定はできません。 (これを実現しなければならない場合は、 \fBfind\fP コマンドを 2 つ実行することが必要です。1
つは本オプションをオンにして、 もう 1 つはオフにして実行します。)

さらに、 \fB\-ignore_readdir_race\fP オプションを指定した \fBfind\fP の実行では、 親ディレクトリを読み込んだ後に、
対象ファイルが消失している状況が発生した場合、 \fB\-delete\fP アクションからのエラーも無視します。 その場合には、 診断エラーは出力されず、
\fB\-delete\fP アクションからの返り値も true になります。

.IP "\-maxdepth \fIlevels\fP"
検索開始ポイントから最大で、 \fIlevels\fP で示される階層数のディレクトリまで検索します (\fIlevels\fP は負ではない整数です)。
\fB\-maxdepth 0\fP を指定すると、 テストやアクションの対象は、 検索開始ポイントだけになります。

.IP "\-mindepth \fIlevels\fP"
検索開始ポイントから \fIlevels\fP で示される階層数のディレクトリに至るまでは、 テストやアクションを適用しません (\fIlevels\fP
は負ではない整数です。)。 \fB\-mindepth 1\fP を指定すると、 検索開始ポイントを除いたファイルを、 すべて処理することになります。

.IP \-mount
ファイルシステムが異なる場合は、 ディレクトリを検索しません。 これは \fB\-xdev\fP の別名であり、 バージョンが異なる \fBfind\fP
との互換性のために設けられています。

.IP \-noignore_readdir_race
\fB\-ignore_readdir_race\fP の効果を無効にします。

.IP \-noleaf
ディレクトリに含まれるサブディレクトリ数が、 ハードリンク数よりも 2 つ少ない、 とする想定のもとでの最適化を無効にします。
このオプションが必要になるのは、 Unix のディレクトリとリンクに関する慣例に従っていないファイルシステム、 たとえば CD\-ROM、 MS\-DOS
ファイルシステム、 AFS ボリュームマウントポイントを検索する場合です。 通常の Unix ファイルシステムにおいては、 各ディレクトリに最低でも 2
つのハードリンクがあります。 ディレクトリ名そのものと、 `.\&' エントリです。 そしてサブディレクトリがある場合に、 そのサブディレクトリには、
親ディレクトリにリンクする `..\&' というエントリがあります。 そこで \fBfind\fP がディレクトリを調べる際に、
ディレクトリへのリンク数よりも 2 つ分だけ少ないサブディレクトリを調べた後であれば、 ディレクトリ内の残りのエントリは、 ディレクトリではない
(ディレクトリツリー内の「葉」(leaf) ファイルである) ことが決定します。 ファイル名を調べるだけで十分であれば、
ファイル情報を調べる必要がなくなるので、 これを利用すれば、 検索速度が明らかに向上します。

.IP "\-version, \-\-version"
\fBfind\fP のバージョンを表示して終了します。

.IP \-xdev
異なるファイルシステムのディレクトリを検索しません。

.SS "テスト (test)"
テストの中には、 \fB\-newerXY\fP や \fB\-samefile\fP のように、 その時点で対象となっているファイルと、
コマンドラインから指定する参照ファイル (reference file) との間で、 比較を行うものがあります。 そのようなテストが指定された際に、
参照ファイルに対する解釈は、 \fB\-H\fP, \fB\-L\fP, \fB\-P\fP といったオプションや、 先行する \fB\-follow\fP の存在によって決定します。
ただし、 参照ファイルが調べられるのは、 コマンドラインが解析されるときの 1 回だけです。 参照ファイルが調べられなかった場合 (たとえば、
\fBstat\fP(2) システムコールに失敗した場合)、 エラーメッセージが出力されて、 \fBfind\fP は 0 以外のステータスを返して終了します。
.P
数値引数である \fIn\fP は、 以下のテスト、 \fB\-amin\fP, \fB\-mtime\fP, \fB\-gid\fP, \fB\-inum\fP, \fB\-links\fP,
\fB\-size\fP, \fB\-uid\fP, \fB\-used\fP において指定できます。 そして以下のような指定方法があります。
.IP \fI+n\fP
\fIn\fP より大きい。
.IP \fI\-n\fP
\fIn\fP より小さい。
.IP \fIn\fP
\fIn\fP にちょうど等しい。
.
.P
サポートされているテスト:

.IP "\-amin \fIn\fP"
ファイルの最終アクセス時間が、 \fIn\fP 分前と比較して、 それよりも前か後かちょうど同じかをテストします。

.IP "\-anewer \fIreference\fP"
現在ファイルの最終アクセス時間が、 \fIreference\fP (参照ファイル) の最終更新時間よりも、 新しいかどうかをテストします。 引数
\fIreference\fP がシンボリックリンクであり、 \fB\-H\fP や \fB\-L\fP オプションが有効になっている場合は、
リンク先ファイルの最終更新時間が常に利用されます。

.IP "\-atime \fIn\fP"
ファイルの最終アクセス時間が、 \fIn\fP*24 時間前と比較して、 それよりも前か後かちょうど同じかをテストします。 ファイルの最終アクセス時間が、
24 時間の何倍であるかを割り算して計算する際に、 端数は無視されます。 したがって、 \fB\-atime\ +1\fP に一致するためには、
ファイルは少なくとも 2 日前にアクセスされていなければなりません。

.IP "\-cmin \fIn\fP"
ファイルステータスの最終変更時間が、 \fIn\fP 分前と比較して、 それよりも前か後かちょうど同じかをテストします。

.IP "\-cnewer \fIreference\fP"
現在ファイルの最終ステータス変更時間が、 \fIreference\fP (参照ファイル) の最終更新時間よりも、 新しいかどうかをテストします。 引数
\fIreference\fP がシンボリックリンクであり、 \fB\-H\fP や \fB\-L\fP オプションが有効になっている場合は、
リンク先ファイルの最終更新時間が常に利用されます。

.IP "\-ctime \fIn\fP"
ファイルステータスの最終変更時間が、 \fIn\fP*24 時間前と比較して、
それよりも前か後かちょうど同じかをテストします。ファイルステータスの更新時間の解釈にあたって、丸め処理がどのように影響するかについては、
\fB\-atime\fP の説明を参照してください。

.IP \-empty
ファイルが空であって、 通常のファイルかディレクトリであるかどうかをテストします。

.IP \-executable
実行可能なファイルか、 あるいは、 現在のユーザーが  (ファイル名解決の観点で) 検索可能なディレクトリであるかどうかをテストします。 このテストは、
アクセスコントロールリスト (access control list; ACL) や、 この他のパーミッション機能を考慮します。 ちなみに、 テスト
\fB\-perm\fP では無視されます。 本テストは、 システムコール \fBaccess\fP(2) を利用するので、 NFS サーバーが UID マッピング
(つまり root squash) を行っている場合に、 適切に動作しない場合があります。 多くのシステムでは、 クライアントのカーネルにおいて
\fBaccess\fP(2) を実装しているため、 サーバー側にある UID マッピング情報を利用できないからです。 このテストは、
\fBaccess\fP(2) システムコールの結果だけに基づいているため、 このテストが true となったファイルが、
実際に実行できるかどうかの保証はありません。

.IP \-false
必ず false を返します。

.IP "\-fstype \fItype\fP"
ファイルが存在するファイルシステムが、 \fItype\fP かどうかをテストします。 いろいろな Unix システムに対して、
有効なファイルシステムは変わります。 Unix などの各種システムにおいて、 許容されるファイルシステムタイプを、 その一部だけあげてみると、 ufs,
4.2, 4.3, nfs, tmp, mfs, S51K, S52K といったものです。 \fB\-printf\fP のディレクティブ %F を使えば、
現在のファイルシステムタイプを確認することができます。

.IP "\-gid \fIn\fP"
ファイルのグループ ID 番号が、 \fIn\fP と比較して、 それよりも小さいか大きいかちょうど同じかをテストします。

.IP "\-group \fIgname\fP"
ファイルの属するグループが \fIgname\fP かどうかをテストします (グループ ID 番号による指定も可)。

.IP "\-ilname \fIpattern\fP"
\fB\-lname\fP と同様ですが、 大文字小文字は区別しません。 \fB\-L\fP または \fB\-follow\fP オプションが有効な場合、
シンボリックリンクが切れていない限り、 このテストは false を返します。


.IP "\-iname \fIpattern\fP"
\fB\-name\fP と同様ですが、 大文字小文字は区別しません。 たとえば、 パターン `fo*' や `F??' は、 `Foo', `FOO',
`foo', `fOo' などのファイル名に一致します。 また、 パターン `*foo*' は、 `.foobar' というファイルにも一致します。

.IP "\-inum \fIn\fP"
ファイルの i ノード番号が、 \fIn\fP と比較して、 それよりも小さいか大きいかちょうど同じかをテストします。 普通はこれよりも、
\fB\-samefile\fP を使った方が簡単です。

.IP "\-ipath \fIpattern\fP"
\fB\-path\fP と同様です。  ただし大文字小文字を区別しません。

.IP "\-iregex \fIpattern\fP"
\fB\-regex\fP と同様です。 ただし大文字小文字を区別しません。

.IP "\-iwholename \fIpattern\fP"
\fB\-ipath\fP を参照してください。 この別名は、 \fB\-ipath\fP よりも移植性に劣ります。

.IP "\-links \fIn\fP"
ファイルが持つハードリンクの数が、 \fIn\fP と比較して、 小さいか大きいかちょうど同じかをテストします。

.IP "\-lname \fIpattern\fP"
ファイルがシンボリックリンクであって、 その内容がシェルパターン \fIpattern\fP に一致するかどうかをテストします。 メタ文字は、 `/' や
`.\&' を特別扱いしません。 \fB\-L\fP または \fB\-follow\fP オプションが有効な場合には、 シンボリックリンクが切れていない限り、
このテストは false を返します。

.IP "\-mmin \fIn\fP"
ファイルの最終更新時間が、 \fIn\fP 分前と比較して、 それよりも前か後かちょうど同じかをテストします。

.IP "\-mtime \fIn\fP"
ファイルの最終更新時間が、 \fIn\fP*24 時間前と比較して、 それよりも前か後かちょうど同じかをテストします。 何日前かを計算する際、 時間差を 24
時間で割った結果を丸めるため、 ファイル更新時間の解釈にあたって、 その処理がどのように影響するかについては、 \fB\-atime\fP
の説明を参照してください。

.IP "\-name \fIpattern\fP"
ファイルのベース名 (パス名から、 先行するディレクトリを取り除いたもの) が、 シェルのパターン \fIpattern\fP
に一致するかどうかをテストします。 先行するディレクトリを取り除いているので、 \fB\-name\fP を使って一致の確認を行うファイル名には、
スラッシュが含まれないものとして扱われます。 つまり `\-name a/b' としても、 一致するものはありません (その場合は、 おそらく
\fB\-path\fP を用いる必要があります)。 これを行ってしまった場合、 環境変数 \fBPOSIXLY_CORRECT\fP が設定されていない限りは、
警告メッセージが出力されます。 メタ文字 (`*', `?', `[]') は、 ベース名の先頭にある `.\&' に一致します (これは
findutils\-4.2.2 から変更されました。以降のセクション「規格への準拠」を参照してください)。 1
つのディレクトリとそこに含まれるファイルを無視したい場合は、 ディレクトリツリー内の全ファイルを確認するのではなく、 \fB\-prune\fP
を使います。\fB\-prune\fP の説明において、 例を説明しているので参照してください。 波カッコ ('{}') は、 特別な文字としては扱われません。
bash などのシェルにおいては、 シェルパターン内の波カッコに特別な意味を持つものがありますが、 この点は異なります。 ファイル名のマッチングは、
\fBfnmatch\fP(3) ライブラリ関数を用いて行われます。 シェルによってパターンが展開されないように、
パターンはクォートで囲むことを忘れないでください。

.IP "\-newer \fIreference\fP"
対象ファイルの最終更新時間が、 \fIreference\fP ファイルの最終更新時間よりも、 最新であるかどうかをテストします。 \fIreference\fP
がシンボリックリンクであって、 \fB\-H\fP または \fB\-L\fP オプションが有効である場合は、 リンク先ファイルの更新時間が用いられます。

.IP "\-newerXY \fIreference\fP"
対象ファイルのタイムスタンプ \fIX\fP が、 \fIreference\fP ファイルのタイムスタンプ \fIY\fP より、 新しいかどうかをテストします。
\fIX\fP と \fIY\fP の位置に記述する文字は、 以下の文字とします。

.TS
ll
ll
ll
ll
llw(2i).
a	\fIreference\fP ファイルのアクセス時間
B	\fIreference\fP ファイルの生成時間
c	\fIreference\fP ファイルの i ノードステータスが変更された時間
m	\fIreference\fP ファイルの内容更新時間
t	\fIreference\fP に直接時間表現が書かれたとして解釈
.TE

組み合わせによっては、 無効になるものも発生します。 たとえば、 \fIX\fP に \fIt\fP を指定しても無効です。 またシステムによっては、
特定の組み合わせを実装していない場合があります。 たとえば \fIB\fP は、 すべてのシステムでサポートされているわけではありません。 指定された
\fIXY\fP の組み合わせが、 無効や未サポートの場合は、 致命的エラーが発生します。 時間表現は、 GNU \fBdate\fP における \fB\-d\fP
オプションに対する引数と同様のものとして解釈されます。 参照ファイルの生成時間を使用しようとて、 その生成時間が決定できなかった場合は、
致命的エラーになります。 また、 対象ファイルの生成時間を参照するテストを用いた際に、 生成時間が不明な場合は、 そのテストは失敗します。

.IP \-nogroup
ファイルのグループ ID 番号が、 システムに存在していないことをテストします。

.IP \-nouser
ファイルのユーザー ID 番号が、 システムに存在しないことをテストします。

.IP "\-path \fIpattern\fP"
ファイル名が、 シェルのパターン \fIpattern\fP に一致するかどうかをテストします。 メタ文字は、 `/' や `.\&' を特別扱いしません。
したがってたとえば、
.in +4m
.nf
find . \-path "./sr*sc"
.fi
.in
は、 \fI./src/misc\fP というディレクトリ (それが存在している場合) の内容を表示します。 ディレクトリツリー全体を対象としないのであれば、
ツリー内の各ファイルを確認していくのではなく、 \fB\-prune\fP を用います。 パターン一致を確認するようなテストは、
ファイル名すべてに対して適用されます。 つまりそのファイル名は、 コマンドライン上から指定された検索開始点から始まる、 検索対象すべてです。
このパターンにおいて、 絶対パスを指定するなら、 検索開始点も絶対パスでなければ意味がありません。 つまり以下のようなコマンドでは、
どのファイルも一致しません。
.br
.in +4m
.nf
find bar \-path /foo/bar/myfile \-print
.fi
.in
\fBfind\fP が \fB\-path\fP の引数と比較するのは、 その時点で対象としているファイルのディレクトリとベース名を連結した文字列です。
その文字列の末尾がスラッシュになることはないため、 \fB\-path\fP の引数の末尾にスラッシュを指定すると、 何にも一致しないことになります。
(ただし、 コマンドラインで指定された検索開始ポイントには、 おそらく一致します)。 述語表現 \fB\-path\fP は、 HP\-UX の \fBfind\fP
でもサポートされていて、 POSIX 2008 規格に存在します。

.IP "\-perm \fImode\fP"
ファイルの許可属性が \fImode\fP (8 進数表現またはシンボル表現) に一致するかどうかをテストします。 \fImode\fP 指定のこの形式では、
完全一致が求められるので、 この形式をシンボリックモードで使う場合には、 モード文字列の指定が多少複雑になるかもしれません。 たとえば `\-perm
g=w' は、 許可属性が 0020 のファイルにのみ一致します (つまり、 グループの書き込み権限のみを設定します)。 おそらく、 `/' や `\-'
を用いる形式を必要とすることがあります。 たとえば、 `\-perm \-g=w' とすれば、 グループの書き込み許可があるファイルに一致します。
具体例については「例」セクションを参照してください。

.IP "\-perm \-\fImode\fP"
\fImode\fP で指定した許可属性ビットすべてが、 対象ファイルのものに一致するかどうかをテストします。 この形式でも、
シンボリックモード指定が可能です。 このモードは、 ごく普通に用いたくなるはずです。 シンボリックモードでは、 `u'、 `g'、 `o'
を用いる必要があります。 具体例については「例」セクションを参照してください。

.IP "\-perm /\fImode\fP"
\fImode\fP で指定した許可属性ビットの一部が、 対象ファイルのものに一致するかどうかをテストします。 この形式でも、
シンボリックモード指定が可能です。 シンボリックモードでは、 `u'、 `g'、 `o' を用いる必要があります。
具体例については「例」セクションを参照してください。 なお、 \fImode\fP の許可属性ビットが何も設定されていない場合、 このテストは、
どんなファイルにも一致します (この動作は、 \fB\-perm\ \-000\fP と一貫性を持たせるためです)。

.IP "\-perm +\fImode\fP"
この書式は、 もうサポートされていません (2005 年以来、 非推奨となっています)。 代わりに \fB\-perm /\fP\fImode\fP
を用いてください。

.IP \-readable
現在のユーザーによって読み込み可能なファイルであるかどうかをテストします。 このテストは、 アクセスコントロールリスト (access control
list; ACL) や、 その他のパーミッション機能を考慮します。 ちなみに、 テスト \fB\-perm\fP では無視されます。 本テストは、
システムコール \fBaccess\fP(2) を利用するので、 NFS サーバーが UID マッピング (つまり root squash)
を行っている場合に、 適切に動作しない場合があります。 多くのシステムでは、 クライアントのカーネルにおいて \fBaccess\fP(2)
を実装しているため、 サーバー側にある UID マッピング情報を利用できないからです。

.IP "\-regex \fIpattern\fP"
ファイル名が正規表現 \fIpattern\fP に一致するかどうかをテストします。 この処理は、 パス全体への一致を確認するものであって、
ファイル検索ではありません。 したがってたとえば、 `./fubar3' ファイルに一致する正規表現として、 `.*bar.' や `.*b.*3'
は利用できますが、 `f.*r3' は利用できません。 \fBfind\fP が扱う正規表現のデフォルトは、 Emacs 正規表現です ('.'
が改行に一致する点は除きます)。 これは、 \fB\-regextype\fP オプションを用いて変更することができます。

.IP "\-samefile \fIname\fP"
対象ファイルが、 \fIname\fP と同じ i ノードを参照しているかどうかをテストします。 \fB\-L\fP が有効であれば、
シンボリックリンクを対象とすることができます。

.IP "\-size \fIn\fP[cwbkMG]"
ファイルが \fIn\fP 単位分の容量と比較して、 それよりも小さいか大きいかちょうど同じかをテストします。 ここでは丸め処理が行われます。
以下のサフィックスが利用できます。
.RS
.IP `b'
512 バイトブロックを表します (サフィックスの指定がない場合は、 これがデフォルトとなります)。
.IP `c'
バイトを表します。
.IP `w'
2 バイトワードを表します。
.IP `k
キビバイトを表します (kibibyte, KiB, 1024 バイト単位)。
.IP `M'
メビバイトを表します (mebibyte, MiB, 1024 * 1024 単位 = 1\|048\|576 バイト)。
.IP `G'
ギビバイトを表します (gibibyte, GiB, 1024 * 1024 * 1024 単位 =
1\|073\|741\|8241073741824)。
.RE
.IP
サイズというのは単純に、 システムコールの lstat (あるいは stat) に含まれている struct stat の メンバー st_size
のことであり、 上に示すようにして切り上げられます。言い換えると、 その結果は \fBls\ \-l\fP で得られるものと一致します。\fB\-printf\fP
における `%k' と `%b' の書式指定子は、 スパースファイルに対して、 異なる扱いをする点に注意してください。 サフィックス `b' は、 常に
512 バイトブロックを表していて、 1024 バイトブロックを表すことはありません。 この点は、 \fB\-ls\fP の動作とは異なるところです。
.IP
プレフィックスの + と \- は、 ごく普通に、 それより上、 それより下、 を表します。 したがって、 \fIn\fP とちょうど同じ数には一致しません。
サイズとは、 次の数単位に向けて切り上げられることに注意してください。 つまり \fB\-size\ \-1M\fP というのは、 \fB\-size\ \-1\|048\|576c\fP と同じではありません。 前者は、 空のファイルにしか一致しません。 また後者は、 バイトサイズが 0 から
1,048,575 までのファイルに一致します。
.IP \-true
常に true です。

.IP "\-type \fIc\fP"
ファイルタイプが \fIc\fP であるかどうかをテストします。
.RS
.IP b
ブロックスペシャルファイル (バッファーあり)
.IP c
キャラクタースペシャルファイル (バッファーなし)
.IP d
ディレクトリ
.IP p
名前付きパイプ (FIFO)
.IP f
通常のファイル
.IP l
シンボリックリンク。 オプション \fB\-L\fP や \fB\-follow\fP が有効な場合、 シンボリックリンク切れの場合を除いて、 このテストが true
になることはありません。 \fB\-L\fP が有効なときに、 シンボリックリンクを検索するには、 \fB\-xtype\fP を用いてください。
.IP s
ソケット
.IP D
ドア (door) (Solaris の場合)
.RE
.IP
一度に複数のファイルタイプを検索したい場合は、 タイプを表す英字を、 カンマ `,' で区切ったリストで指定します。 (GNU 拡張)
.IP "\-uid \fIn\fP"
ファイル所有者のユーザー ID 番号が、 \fIn\fP と比較して、 それよりも小さいか大きいかちょうど同じかをテストします。

.IP "\-used \fIn\fP"
ファイルのステータスが変更されてから、 ファイルにアクセスした最終時間が、 \fIn\fP 日間と比較して、 小さいか大きいかちょうど同じかをテストします。

.IP "\-user \fIuname\fP"
ファイルの所有者が、 \fIuname\fP というユーザーであるかどうかをテストします (ユーザー ID 番号による指定も可)。

.IP "\-wholename \fIpattern\fP"
\fB\-path\fP を参照してください。 この別名は、 \fB\-path\fP よりも移植性に劣ります。

.IP \-writable
現在のユーザーによって書き込み可能なファイルであるかどうかをテストします。 このテストは、 アクセスコントロールリスト (access control
list; ACL) や、 その他のパーミッション機能を考慮します。 ちなみに、 テスト \fB\-perm\fP では無視されます。 本テストは、
システムコール \fBaccess\fP(2) を利用するので、 NFS サーバーが UID マッピング (つまり root squash)
を行っている場合に、 適切に動作しない場合があります。 多くのシステムでは、 クライアントのカーネルにおいて \fBaccess\fP(2)
を実装しているため、 サーバー側にある UID マッピング情報を利用できないからです。

.IP "\-xtype \fIc\fP"
対象ファイルがシンボリックリンクでなければ、 \fB\-type\fP と同様です。 シンボリックリンクのときは、 以下のように動作します。 \fB\-H\fP や
\fB\-P\fP オプションの指定時は、 リンク先がタイプ \fIc\fP のファイルであれば、 true を返します。 \fB\-L\fP オプションの指定時は、
\fIc\fP が `l' ならば true を返します。 言い換えると、 シンボリックリンクに対して、 \fB\-xtype\fP は、 \fB\-type\fP
がチェックしないファイルタイプをチェックします。
.IP "\-context \fIpattern\fP"
(SELinux 有効時のみ) 対象ファイルのセキュリティコンテキストが glob パターン \fIpattern\fP に一致するかどうかをテストします。

.SS アクション
.IP \-delete
ファイルまたはディレクトリを削除します。 削除に成功すると true を返します。 削除に失敗した場合は、
エラーメッセージを表示して、　ゼロ以外の終了ステータスを返します (最終終了するときです)。

\fB警告\fP: \fBfind\fP はコマンドラインを式として評価する点を忘れないでください。 したがって \fB\-delete\fP を一番初めに記述すると、
それは \fBfind\fP に対して、 検索開始ポイント以下のものをすべて削除させることになります。

コマンドラインから \fB\-delete\fP オプションを指定すると、 自動的に \fB\-depth\fP オプションがオンとなります。 一方で
\fB\-depth\fP は \fB\-prune\fP を無効にするので、 \fB\-delete\fP アクションは \fB\-prune\fP と同時に用いることはできません。

ユーザーの中ではよく、 コマンドライン上において \fB\-delete\fP の前に \fB\-print\fP を指定して、
削除が実際にどのように行われるかをテストしようとします。 予期しない結果を起こさないためにも、 そのようなテストを行うときから、 \fB\-depth\fP
オプションを明示的に指定することを忘れないでください。

\fB\-delete\fP アクションは、 ディレクトリが空でない場合には削除に失敗します。

\fB\-ignore_readdir_race\fP オプションとともに、 このオプションを指定し、 さらに、 親ディレクトリを読み込んだ後に、
対象ファイルが消失している状況が発生した場合、 \fB\-delete\fP アクションからのエラーは無視されます。 その場合には、 診断エラーは出力されず、
終了コードをゼロ以外には変えずに \fB\-delete\fP アクションからの返り値も true になります。


.IP "\-exec \fIcommand\fP ;"
\fIcommand\fP を実行します。 \fIcommand\fP の返り値が 0 なら、 true を返します。 \fBfind\fP のコマンドラインで、
これ以降に指定されている引数は、 `;' という引数が現れるまで、 すべてそのコマンドに対する引数とみなされます。 文字列 `{}' は、
コマンド引数内に現れるすべての箇所で、 対象ファイル名に置き換えられます。 \fBfind\fP の他の実装においては、 引数の中で `{}'
が単独で用いられていないと、 対象ファイル名に置き換えられないものがあります。 文字列 `{}' は、 シェルによって展開されないように、 どちらも
`\e' でエスケープするか、 クォートで囲む必要があります。 アクション \fB\-exec\fP の具体例については、 「例」セクションを参照してください。
指定されたコマンドは、 一致したファイルごとに一回ずつ実行されます。 そのコマンドは、 \fBfind\fP を実行したディレクトリにおいて実行されます。
そこで、 \fB\-exec\fP アクションの実行にあたっては、 セキュリティの問題が避けられません。 したがって、 \fB\-exec\fP の代わりに、
\fB\-execdir\fP アクションを使用してください。

.IP "\-exec \fIcommand\fP {} +"
この形式の \fB\-exec\fP アクションは、  対象ファイルに対して、 指定されたコマンド (\fIcommand\fP) を実行します。 各対象ファイルは、
コマンドラインの末尾に追加されながら、 コマンドラインが構成されるので、 指定コマンドの呼び出し回数は、 対象ファイル数よりも大幅に少なくて済みます。
コマンドラインが構成される処理方法は、 \fBxargs\fP の場合とほぼ同じです。 `{}' の記述は、 コマンドライン中に 1
度しか用いることはできず、 しかも最後に `+' を伴って、 コマンドラインの最終記述としなければなりません。 また、
シェルによって誤った解釈が行われないように、 (`\e' を使って)  エスケープするか、 全体をクォートで囲むことが必要です。 そのコマンドは、
\fBfind\fP を実行したディレクトリにおいて実行されます。 '+' 形式を使った呼び出しにおいて、 終了ステータスにゼロでない値が返ってきたら、
\fBfind\fP も、 終了ステータスにゼロ以外を返します。 \fBfind\fP においてエラーが発生すると、 その場ですぐに終了する場合があります。
その際には、 残りのコマンドがまったく実行されないこともあります。 このため、 \fB\-exec\ \fP\fImy\-command\fP\fB\ ...\ {}\ +\ \-quit\fP では、 \fImy\-command\fP が実際には実行されない場合があります。 なおこの \fB\-exec\fP の形式は、 必ず true
を返します。

.IP "\-execdir \fIcommand\fP ;"
.IP "\-execdir \fIcommand\fP {} +"
\fB\-exec\fP と同様ですが、 指定したコマンドは、 一致したファイルが存在するサブディレクトリ内で実行されます。 このサブディレクトリは、  普通は
\fBfind\fP を実行したディレクトリとは異なるはずです。 \fB\-exec\fP と同じように、 find をシェルから呼び出す場合には {}
をクォートでくくる必要があります。 この形式は、 コマンドを呼び出す方法として、 非常に安全なものです。 一致したファイルのパスを確定させる際に、
競合状態を避けることができるためです。 \fB\-exec\fP アクションの場合と同様、 \fB\-execdir\fP の `+' 形式の実行においても、
一致した複数ファイルを処理するようなコマンドラインが構成されます。 ただし、 指定された \fIcommand\fP の呼び出しは、 どの場合であっても、
必ず同一サブディレクトリ内にあるファイルだけを対象にして実行されます。 このオプションの利用にあたっては、 環境変数 \fBPATH\fP が、  `.'
を参照していないようにする必要があります。 そうしていないと、 攻撃者が、 \fB\-execdir\fP を実行するディレクトリ内に、
いかにも正しいファイルを置くだけで、 任意のコマンド実行を許してしまうことになります。 \fBPATH\fP 内のエントリに、 空のものや、
相対パスのディレクトリ名を含んでいる場合にも、 同じことが言えます。 '+' 形式を使った呼び出しにおいて、
終了ステータスにゼロでない値が返ってきたら、 \fBfind\fP も、 終了ステータスにゼロ以外を返します。 \fBfind\fP においてエラーが発生すると、
その場ですぐに終了する場合があります。 その際には、 残りのコマンドがまったく実行されないこともあります。 このアクションが返す値は、 \fB+\fP と
\fB;\fP のどちらの形式を使うかによって異なります。 \fB\-execdir\ \fP\fIcommand\fP\fB\ {}\ +\fP は必ず true
を返しますが、 \fB\-execdir\ \fP\fIcommand\fP\fB\ {}\ ;\fP は、 \fIcommand\fP が 0 を返したときだけ、 true
を返します。


.IP "\-fls \fIfile\fP"
true を返します。 \fB\-ls\fP と同様ですが、 \fB\-fprint\fP のように、 \fIfile\fP への出力を行います。 出力ファイルは、
この述語表現に一致するものがなくても、 必ず生成されます。 ファイル名に、 普通は使わない文字が含まれている場合の扱いについては、
「普通ではないファイル名」のセクションを参照してください。

.IP "\-fprint \fIfile\fP"
true を返します。 パス付きのファイル名を、 ファイル \fIfile\fP に出力します。　\fBfind\fP の実行時に、 \fIfile\fP
が存在しなければ、 新たに生成されます。 すでに存在していたら、 元の中身は失われます。 ファイル名 \fI/dev/stdout\fP と
\fI/dev/stderr\fP は特別に扱われます。 それぞれ、 標準出力、 標準エラー出力を意味します。 出力ファイルは、
この述語表現に一致するものがなくても、 必ず生成されます。 ファイル名に、 普通は使わない文字が含まれている場合の扱いについては、
「普通ではないファイル名」のセクションを参照してください。

.IP "\-fprint0 \fIfile\fP"
true を返します。 \fB\-print0\fP と同様ですが、 \fB\-fprint\fP のように、 \fIfile\fP への出力を行います。 出力ファイルは、
この述語表現に一致するものがなくても、 必ず生成されます。 ファイル名に、 普通は使わない文字が含まれている場合の扱いについては、
「普通ではないファイル名」のセクションを参照してください。

.IP "\-fprintf \fIfile\fP \fIformat\fP"
true を返します。 \fB\-printf\fP と同様ですが、 \fB\-fprint\fP のように、 \fIfile\fP への出力を行います。 出力ファイルは、
この述語表現に一致するものがなくても、 必ず生成されます。 ファイル名に、 普通は使わない文字が含まれている場合の扱いについては、
「普通ではないファイル名」のセクションを参照してください。

.IP \-ls
true を返します。 対象ファイルを、 \fBls \-dils\fP の書式で標準出力に出力します。 ブロック数は、 1 ブロックに 1\ KB
バイトです。　ただし、 環境変数 \fBPOSIXLY_CORRECT\fP が設定されている場合は、 1 ブロック 512
バイトが使用されます。　ファイル名に、 普通は使わない文字が含まれている場合の扱いについては、
「普通ではないファイル名」のセクションを参照してください。

.IP "\-ok \fIcommand\fP ;"
\fB\-exec\fP と同様ですが、 ユーザーへの問い合わせを行います。　ユーザーが同意すれば、 コマンドを実行します。 同意しなければ、 何もせずに
false を返します。 コマンドが実行される際に、 標準入力はリダイレクトされて、 \fI/dev/null\fP になります。 このオプションは
\fB\-files0\-from\fP オプションとともに指定することはできません。

.IP
プロンプトに対するユーザーの入力は、 肯定、 否定を表す一組の正規表現との一致確認が行われて、 同意したかどうかが決定します。 この正規表現は、
環境変数 \fBPOSIXLY_CORRECT\fP が設定されていれば、 システムから取得されます。 環境変数が設定されていなければ、 \fBfind\fP
が持つメッセージ翻訳から取得されます。 システムに適切な定義が存在しなかった場合は、 \fBfind\fP 自体が持つ定義が使用されます。 どの場合でも、
正規表現そのものの解釈は、 環境変数 \fBLC_CTYPE\fP (文字クラス) や \fBLC_COLLATE\fP (文字の範囲や等価クラス)
の影響を受けます。



.IP "\-okdir \fIcommand\fP ;"
\fB\-execdir\fP と同様ですが、 \fB\-ok\fP と同じように、 ユーザーへの問い合わせを行ないます。 ユーザーが同意しなければ、 何もせずに
false を返します。 コマンドが実行される際に、 標準入力はリダイレクトされて、 \fI/dev/null\fP になります。 このオプションは
\fB\-files0\-from\fP オプションとともに指定することはできません。


.IP \-print
true を返します。 パス付きのファイル名と、 最後に改行文字をつけて、 標準出力に出力します。 \fBfind\fP の出力を、
パイプを使って他のプログラムに受け渡している場合、 対象ファイル名に改行文字が含まれている可能性が、 少しでもあるなら、 \fB\-print\fP ではなく、
\fB\-print0\fP アクションの使用を是非考えてください。 ファイル名に、 普通は使わない文字が含まれている場合の扱いについては、
「普通ではないファイル名」のセクションを参照してください。

.IP \-print0
true を返します。 パス付きのファイル名と、 最後にヌル文字をつけて、 標準出力に出力します (\fB\-print\fP
が改行文字をつけるのとは異なります)。 このアクションを使えば、 \fBfind\fP の出力を処理するプログラムが、
改行文字やホワイトスペースを含むファイル名を、 正しく解釈できるようになります。 このアクションは、 \fBxargs\fP の \fB\-0\fP
オプションに対応します。

.IP "\-printf \fIformat\fP"
true を返します。 これは標準出力に \fIformat\fP を出力します。 \fIformat\fP 内の `\e' によるエスケープや、 `%'
に始まるディレクティブを解釈します。 フィールドの幅や精度は、 C 言語の \fBprintf\fP(3) 関数と同じ方法で指定することができます。
多くのフィールドは、 %d としてではなく、 %s として出力されます。 このため、 フラグが期待通りに動作しないことも発生します。 一方で、 `\-'
フラグ (フィールドを必ず左揃えにする指定) を使えば、 必ず動作します。 \fB\-print\fP とは違って、 \fB\-printf\fP は、
文字列の末尾に改行文字を追加しません。 エスケープとディレクティブには、 以下のものがあります。
.RS
.IP \ea
警告ベル。
.IP \eb
バックスペース。
.IP \ec
このフォーマットによる出力をすぐに停止して、 出力をフラッシュします。
.IP \ef
フォームフィード。
.IP \en
改行文字。
.IP \er
復帰文字。
.IP \et
水平タブ。
.IP \ev
垂直タブ。
.IP \e0
ASCII NUL 文字。
.IP \e\e
バックスラッシュ文字そのもの (`\e')。
.IP \eNNN
ASCII コードが NNN (8 進数) の文字。
.PP
バックスラッシュ文字 `\e' に、 上記以外の文字が続いた場合は、 `\e' が普通の文字として扱われます。　つまり、 2
文字とも表示されることになります。
.IP %%
パーセント文字そのもの。
.IP %a
ファイルの最終アクセス時間を、 C 言語の \fBctime\fP(3) 関数が返す形式で表したものです。
.IP %A\fIk\fP
\fIk\fP で指定された書式に基づいて、 ファイルの最終アクセス時間を表したものです。 \fIk\fP に指定するのは、 `@' か、 あるいは C 言語の
\fBstrftime\fP 関数で用いるディレクティブです。 以下に、 \fIk\fP に指定可能な値を示します。 ただし、 すべてを示すものではありません。
完全な一覧については、 \fBstrftime\fP(3) のドキュメントを参照してください。 指定文字に応じた文字列変換は、
システムによっては利用できない場合があります。 それは、 ライブラリ関数 \fBstrftime\fP(3) の実装が、 システムよって異なるからです。
.RS
.IP @
Jan. 1, 1970, 00:00 GMT からの経過秒数。 小数点以下も表示します。
.PP
時刻フィールド:
.IP H
時 (00..23)
.IP I
時 (01..12)
.IP k
時 ( 0..23)
.IP l
時 ( 1..12)
.IP M
分 (00..59)
.IP p
現在のロケールにおいて AM/PM に相当する文字列。
.IP r
12 時間制の時刻 (hh:mm:ss [AP]M)
.IP S
秒 (00.00 \&..\& 61.00)。 小数点以下も表示します。
.IP T
24 時間制の時刻 (hh:mm:ss.xxxxxxxxxx)
.IP +
日付と時刻。 両者の間は `2004\-04\-28+22:22:05.0' といったように '+' で 区切られます。 これは GNU 拡張です。
時間は、 現在のタイムゾーンによるものが用いられます (したがって、 環境変数 \fBTZ\fP の設定に影響を受ける場合があります)。 秒は、
小数点以下が含まれます。
.IP X
現在のロケールによる時刻表示 (H:M:S)。 秒は小数点以下を含みます。
.IP Z
タイムゾーン (JST など)。 タイムゾーンが決定できなかった場合は、 何も表示されません。
.PP
日付フィールド:
.IP a
現在のロケールによる曜日の短縮形 (Sun..Sat)。
.IP A
現在のロケールによる、 曜日の省略しない表示。 長さは可変 (Sunday..Saturday)。
.IP b
現在のロケールによる月名の短縮形 (Jan..Dec)。
.IP B
現在のロケールによる月名の省略しない表示。 長さは可変 (January..December)。
.IP c
現在のロケールによる日付と時刻の表示 (Sat Nov 04 12:02:33 EST 1989)。 この表示形式は、 \fBctime\fP(3)
のものと同じであり、 \fBctime\fP(3) の形式との互換性を維持するためのものです。 秒は小数点表記されません。
.IP d
その月の何日目かの表示 (01..31)。
.IP D
日付 (mm/dd/yy)。
.IP F
日付 (yyyy\-mm\-dd)。
.IP h
b と同じ。
.IP j
その年の何日目かの表示 (001..366)。
.IP m
月 (01..12)。
.IP U
その年の何週目か (日曜日を週の始まりとする) (00..53)。
.IP w
曜日 (0..6)。
.IP W
その年の何週目か (月曜日を週の始まりとする) (00..53)。
.IP x
現在のロケールによる日付表示 (mm/dd/yy)。
.IP y
年の下二桁 (00..99)。
.IP Y
年 (1970...\&)。
.RE
.IP %b
ファイルが使用するディスク容量を、 1 ブロック 512 バイトのブロック数で表示します。 ディスク領域は、
ファイルシステムブロックサイズの倍数によって割り当てられるので、 たいていは %s/512 より大きくなります。 ただしスパースファイルの場合は、
%s/512 より小さくなることがあります。

.IP %B\fIk\fP
ファイルの生成時間。 フォーマットは  \fIk\fP によって指定します。 これは %A に対するものと同じです。
処理を行っているオペレーティングシステムやファイルシステムが、 生成時間をサポートしていない場合、 このディレクティブは空文字を返します。

.IP %c
ファイルの最終ステータス変更時間を、 C 言語の \fBctime\fP(3) 関数が返す形式で表したものです。
.IP %C\fIk\fP
ファイルの最終ステータス変更時間を、 \fIk\fP で指定した書式で表したものです。　\fIk\fP は %A の場合と同様です。
.IP %d
ディレクトリツリー内で、 対象ファイルがどれだけ深い階層数にあるかを示します。 0 は、 対象ファイルが検索開始ポイントにあることを意味します。
.IP %D
ファイルがどのデバイス上にあるかを、 10 進数のデバイス番号 (stat 構造体の st_dev フィールド) で示します。
.IP %f
ベース名を表します。 ファイル名から、 先頭にあるディレクトリ名を取り除きます (最後の要素のみを残します)。 \fB/\fP に対する結果は `/' です。
処理例については「\fB例\fP」セクションを参照してください。

.IP %F
ファイルがあるファイルシステムのタイプを表します。 ここで表示される値は \-fstype の引数に指定することができます。
.IP %g
ファイルのグループ名を表します。 グループ名が存在しない場合は、 グループ ID 番号を表します。
.IP %G
ファイルのグループ ID 番号。
.IP %h
ディレクトリ名を表します。 つまり、 ファイル名の先頭にあるディレクトリ部分 (最後の要素以外のすべて) を表します。
ファイル名にスラッシュが一つも含まれない場合 (カレントディレクトリ内にあることになるので)、 書式指定子 %h は `.'
に展開されます。対象ファイルがディレクトリそのものであって、 スラッシュ \fB/\fP を含む場合、 %h は空文字に展開されます。
具体例は「\fB例\fP」セクションを参照してください。
.IP %H
検索開始ポイントのうち、 対象ファイルが見つかったものを表します。
.IP %i
ファイルの i ノード番号 (10 進数表示)。
.IP %k
ファイルが利用するディスク容量を、  1 ブロック 1 KB のブロック数で表示します。 ディスク領域は、
ファイルシステムのブロックサイズの倍数によって割り当てられるので、 たいていは %s/1024 より大きくなります。 スパースファイルの場合は、
%s/1024 より小さくなることがあります。
.IP %l
シンボリックリンク先 (シンボリックリンクでない場合は、 空文字列) を表します。
.IP %m
ファイルの許可属性ビット (8 進数表示) を表します。 このオプションが使用している数値は、 たいていの Unix
実装において用いられる「従来の」数値です。 しかし利用中のシステム実装においては、 8 進数で表示する許可属性ビットの並び方が、
普通とは異なるかもしれません。 その場合は、 ファイルの許可属性の実際の値と、 %m の出力とが異なることになります。 数値の先頭に 0
をつけて表示したい場合があります。 そのときは、 \fB#\fP フラグを使って、 たとえば `%#m' のようにします。
.IP %M
ファイルの許可属性を表します (\fBls\fP と同様のシンボルによる表現)。 このディレクティブは、 findutils 4.2.5
以降にサポートされるようになりました。
.IP %n
ファイルのハードリンク数。
.IP %p
ファイル名。
.IP %P
検索開始ポイント名を使って表現した、 対象ファイル名であって、 現在削除されたものを表します。
.IP %s
バイト単位によるファイルサイズ。
.IP %S
ファイルが「まばら」である度合い (sparseness) を表します。 この値は (BLOCKSIZE*st_blocks / st_size)
として計算されます。 ある程度の大きさを持つ普通のファイルの場合、 その正確な値は、 システムによってさまざまです。 スパースファイルであれば、
「まばら」な度合いは、 普通は 1.0 未満です。 一方で、 間接ブロックを使用しているファイルの場合は、 1.0 以上になることがあります。
BLOCKSIZE に設定される値は、 システムに依存しますが、 通常は 512 バイトです。 ファイルサイズが 0 の場合、
この値は未定義として出力されます。 st_blocks をサポートしていないシステムでは、 ファイルの「まばら」な度合いは、 1.0 とみなされます。
.IP %t
ファイルの最終更新時間を、 C 言語の \fBctime\fP(3) 関数が返す形式で表したものです。
.IP %T\fIk\fP
\fIk\fP で指定された書式に基づいて、 ファイルの最終更新時間を表したものです。 \fIk\fP は %A の場合と同様です。
.IP %u
ファイルを所有するユーザー名。 ユーザーに名前がない場合は、 ユーザー ID 番号が用いられます。
.IP %U
ファイルを所有するユーザーの ID 番号。
.IP %y
ファイルタイプ (\fBls \-l\fP の表現と同様です)。 U はタイプ不明 (unknown type) を表します (発生することはありません)。
.IP %Y
ファイルタイプ (%y と同様)。 さらに、 シンボリックリンクをたどります。 `L' はループ、 `N' は非存在、 `?' はその他のエラーであり、
シンボリックリンク先のタイプが決定できなかった場合です。
.IP %Z
(SELinux 有効時のみ) ファイルのセキュリティコンテキスト。
.IP "%{ %[ %("
将来の利用のために予約されています。
.PP
1 つの `%' に対して、 上記以外の文字が続く場合、 `%' 文字は無視されて、 それに続いた文字が表示されます
(新たに指定文字が定義されるかもしれないため、 この動作に期待するのは避けてください)。 書式指定の文字列の最後に `%' だけが 1 つあると、
次に文字がないため、 その動作は不定となります。 何が起きるか分かりませんから、 ロケールによっては、 ドアの鍵を紛失するかもしれませんし、
せっかく読んでいる小説の最後のページが、 なくなってしまうかもしれません。

ディレクティブ %m と %d は、 書式フラグ \fB#\fP, \fB0\fP, \fB+\fP をサポートします。 これ以外のディレクティブは、
数値を表す場合であっても、 このフラグをサポートしません。 このフラグをサポートしない数値関連のディレクティブには、 \fBG\fP, \fBU\fP, \fBb\fP,
\fBD\fP, \fBk\fP, \fBn\fP があります。 書式フラグとして `\-' もサポートされています。これを使えば、 欄出力の右揃え (デフォルト)
を左揃えに変更することができます。
.PP
ファイル名に、 普通は使わない文字が含まれている場合の扱いについては、 「普通ではないファイル名」のセクションを参照してください。


.RE
.IP \-prune
true を返します。 処理対象がディレクトリである場合、 ディレクトリ内に入っていきません。 \fB\-depth\fP が指定してあると、
\fB\-prune\fP は何もしません。 \fB\-delete\fP の指定には、 暗に \fB\-depth\fP の指定が含まれているので、 \fB\-prune\fP と
\fB\-delete\fP を同時に使うことはできません。 たとえば、 \fIsrc/emacs\fP
というディレクトリとその下にあるファイルやディレクトリはスキップするとします。 そしてそれ以外のファイルを表示しようとする場合には、
以下のように実行します。
.in +4m
.nf
find . \-path ./src/emacs \-prune \-o \-print
.fi
.in


.IP \-quit
すぐに終了します (エラーが発生していなければ 0 を返します)。 これは \fB\-prune\fP とは異なります。 \fB\-prune\fP は、
適用されたディレクトリの内容を、 対象外とするものですが、 \fB\-quit\fP は単純に \fBfind\fP をその場で止めます。
子プロセスが残ることはありません。 コマンドラインが、 \fB\-exec\ ...\ +\fP や \fB\-execdir\ ...\ +\fP
の形式で構成されていた場合、 そのコマンドはすべて呼び出されてから、 プログラムが終了します。 \fB\-quit\fP が実行されると、
コマンドライン上に指定されていた残りのファイルは、 処理されません。 たとえば `\fBfind\ \fP\fI/tmp/foo\fP\fB\ \fP
\fI/tmp/bar\fP\fB\ \-print\ \-quit\fP` では、 `/tmp/foo` だけが表示されます。
.br
\fB\-quit\fP を利用するごく普通のケースとして、 ファイルシステム内から検索したいものが見つかったら、 検索をやめるという使い方があります。
たとえば、 1 つのファイルだけを見つけたい場合には、 以下のようにすることができます。
.in +4m
.nf
find / \-name needle \-print \-quit
.fi
.in

.SS オペレーター
以下ではオペレーターを、 優先順位の高いものから順に示します。

.IP "( \fIexpr\fP )"
カッコ内を優先的に処理します。 シェルにとって、 カッコには特別な意味があるため、 普通はクォートでくくる必要があります。
このマニュアルページであげている例では、 この目的でバックスラッシュを多用しています。 つまり `(...)' は、 `\e(...\e)'
のように記述しています。

.IP "! \fIexpr\fP"
\fIexpr\fP が false の場合に　true となります。 通常この記号も、 シェルによって解釈されないようにする必要があります。

.IP "\-not \fIexpr\fP"
!\& \fIexpr\fP と同様ですが、 POSIX には準拠していません。

.IP "\fIexpr1 expr2\fP"
2 つ並んだ式は、 暗に \fB\-a\fP によって結合されたものとして扱われます。 そして \fIexpr1\fP が false の場合、 \fIexpr2\fP
は評価されません。

.IP "\fIexpr1\fP \-a \fIexpr2\fP"
\fIexpr1 expr2\fP と同じです。

.IP "\fIexpr1\fP \-and \fIexpr2\fP"
\fIexpr1 expr2\fP と同様ですが、 POSIX には準拠していません。

.IP "\fIexpr1\fP \-o \fIexpr2\fP"
OR 結合です。 \fIexpr1\fP が true のとき、 \fIexpr2\fP は評価されません。

.IP "\fIexpr1\fP \-or \fIexpr2\fP"
\fIexpr1\fP \fB\-o\fP \fIexpr2\fP と同様ですが、 POSIX には準拠していません。

.IP "\fIexpr1\fP , \fIexpr2\fP"
リストを表します。 必ず \fIexpr1\fP と \fIexpr2\fP の両方が評価されます。 \fIexpr1\fP の値は無視されて、 \fIexpr2\fP
の値が、 リストとしての値になります。 このカンマオペレーターは、 さまざまな種類のものを探すときに便利です。 ただしファイルシステム内の検索は、
一度しか行われません。 さまざまなものに一致した結果を、 複数ファイルに出力するには、 \fB\-fprintf\fP アクションを利用します。
.P
暗に \fB\-a\fP の指定を意図した場合 (たとえばテストとテストの間に、 このオペレーターを記述しなかった場合)、 あるいは明示的に指定した場合は、
\fB\-o\fP よりも優先順位が高いことを覚えておいてください。 たとえば、 \fBfind . \-name afile \-o \-name bfile
\-print\fP とした場合、 \fIafile\fP が出力されることはない、 ということです。
.
.SH 普通ではないファイル名
\fBfind\fP のアクションの多くでは、 他ユーザーが、 出力されるデータを自由に制御できます。 データには、 ファイル名、 サイズ、 更新時間など、
さまざまなものがあります。 ファイル名は、 `\e0' と `/' 以外の文字であれば、 何でも含めることができるため、 潜在的な問題を抱えています。
ファイル名の中に、 普段用いない文字が含まれていると、 端末に対して、 予期しない動作や、 時には望ましくない事態を引き起こすことも可能です。
(たとえば端末次第では、 ファンクションキーの設定変更が行われてしまうかもしれません)。 普段使わない文字を、 どのように処理するかについては、
アクションごとに動作が異なります。 以下にこのことを示します。

.IP "\-print0, \-fprint0"
常にファイル名を修正せずに、 そのまま出力します。 出力先が端末であっても同じです。

.IP "\-ls, \-fls"
普段使わない文字は、 必ずエスケープされます。 ホワイトスペース、 バックスラッシュ、 ダブルクォートは、  C
言語のようなエスケープ表現で出力されます (`\ef', `\e"' など)。 その他の文字では、 8 進数表記によってエスケープして出力されます。
通常の表示可能な文字 (\fB\-ls\fP や \fB\-fls\fP においては、 8 進数の 041 から 0176 に相当する文字) は、
そのまま出力されます。

.IP "\-printf, \-fprintf"
出力先が端末でない場合は、 そのまま出力されます。 出力先が端末の場合は、 利用するディレクティブによって、 出力は変わります。 ディレクティブ %D,
%F, %g, %G, %H, %Y, %y が展開される値は、 ファイル所有者が制御するものではないため、 そのまま出力されます。 ディレクティブ
%a, %b, %c, %d, %i, %k, %m, %M, %n, %s, %t, %u, %U の値は、 ファイル所有者が制御可能なものですが、
だからと言って、 端末に任意にデータ送信してよいものではありません。 したがってこのときのデータも、 そのまま出力されます。 ディレクティブ %f,
%h, %l, %p, %P の出力値は、 クォートでくくられます。 クォートでくくるこの方法は、 GNU \fBls\fP の場合と同じです。 逆に
\fB\-ls\fP や \fB\-fls\fP における方法とは異なります。 \fBfind\fP の出力書式を自由に定めてよい、 ということになれば、 普通は、
終端文字として改行ではなく、 `\e0' を用いるように変更するのが適切です。 これを行うのは、 ファイル名に、
空白や改行が含まれる場合があるためです。 どの文字をクォートでくくるかは、 環境変数 \fBLC_CTYPE\fP の設定を用いて決定されます。

.IP "\-print, \-fprint"
クォートでくくる方法は、 \fB\-printf\fP や \fB\-fprintf\fP と同じです。 \fBfind\fP をスクリプト内で利用する場合や、
一致したファイルにあらゆる文字が含まれる可能性がある場合には、 \fB\-print\fP を用いるのではなく、 \fB\-print0\fP
を用いるようにしてください。
.P
アクション \fB\-ok\fP と \fB\-okdir\fP は、 対象ファイル名をそのまま出力します。 この動作は、 将来のリリースで変わるかもしれません。
.
.SH 規格への準拠
POSIX 規格にできるだけ準拠した動作が必要であれば、 環境変数 \fBPOSIXLY_CORRECT\fP を設定してください。 以下のオプションは、
POSIX 規格 (IEEE Std 1003.1\-2008, 2016 Edition) の中で規定されています。

.IP \fB\-H\fP
このオプションはサポートされています。

.IP \fB\-L\fP
このオプションはサポートされています。

.IP \fB\-name\fP
このオプションはサポートされていますが、 POSIX への適応は、 システムの \fBfnmatch\fP(3) ライブラリ関数が、 どれだけ POSIX
に準拠しているかによって、 変わります。 findutils\-4.2.2 以降、 シェルのメタ文字 (たとえば `*', `?', `[]') は、
ファイル名先頭の `.' 文字に一致するようになりました。 これは IEEE PASC interpretation 126 の要求に従ったものです。
これは、 それ以前の findutils のバージョンから、 変更されている点です。

.IP \fB\-type\fP
サポートされています。 POSIX では `b', `c', `d', `l', `p', `f', `s' を規定しています。 GNU find は、
この他にドア (door) を表す `D' もサポートしています。 これが使えるのは、 OS がこの機能を提供している場合です。 さらに、 GNU
find では、 複数の型指定を一度に行うことが可能であり、 その場合には、 カンマで区切ったリストを指定します。

.IP \fB\-ok\fP
サポートされています。 プロンプトに対する入力は、 `yes'、 `no' を表すパターンに従って解釈されます。 そのパターンは、 環境変数
\fBLC_MESSAGES\fP の設定内容により決定します。 環境変数 \fBPOSIXLY_CORRECT\fP が設定されている場合は、 そのパターンが、
`yes'、 `no' の入力に対するシステム定義として扱われます。 \fBnl_langinfo\fP(3) に関するドキュメント、 特に YESEXPR
と NOEXPR について参照してください。 \fBPOSIXLY_CORRECT\fP が設定されていない場合、 そのパターンは、 \fBfind\fP
が持っているメッセージカタログから取得されます。

.IP \fB\-newer\fP
サポートされています。 指定されたファイルがシンボリックリンクの場合は、 必ずリンク先が参照されます。 これは以前のバージョンから変更されたものであり、
以前は、 比較に用いる時間をシンボリックリンクから取得していました。 「履歴」セクションを参照してください。

.IP \fB\-perm\fP
サポートされています。 環境変数 \fBPOSIXLY_CORRECT\fP が設定されていない場合には、 POSIX では認められていない (たとえば、
+a+x のような) モード引数であっても、 後方互換のために利用できるものがあります。

.IP その他のプライマリ
式を構成するプライマリ (primary) として、 \fB\-atime\fP, \fB\-ctime\fP, \fB\-depth\fP, \fB\-group\fP,
\fB\-links\fP, \fB\-mtime\fP, \fB\-nogroup\fP, \fB\-nouser\fP, \fB\-perm\fP, \fB\-print\fP,
\fB\-prune\fP, \fB\-size\fP, \fB\-user\fP \fB\-xdev\fP が、 すべてサポートされています。

.P
POSIX 規格は、 カッコ `(', `)'、 否定 `!'、 論理 AND/OR のオペレーター \fB\-a\fP, \fB\-o\fP を規定しています。
.P
上記を除いたオプション、 述語、 式などは、 すべて POSIX 規格にはない拡張です。 ただしその拡張の多くは、 GNU find
に特有なものではありません。
.P
POSIX 規格における \fBfind\fP は、 ループの検出ができなければならないと定めています。
.IP
\fBfind\fP ユーティリティは、 無限ループを検出できなければなりません。 無限ループとは、 処理対象となったファイルの上位ディレクトリが、
以前に処理していたものであって、 そのディレクトリに入ることです。 無限ループを検出した場合、 find は、
診断メッセージを標準エラー出力に書き出すものとします。 そして、 ディレクトリ階層上での検索位置を復旧するか、 あるいは終了するものとします。
.P
GNU \fBfind\fP は、 この要件を満たしています。 上位ディレクトリへのハードリンクを含んだディレクトリと、
そういったものを含まないディレクトリを比較してみると、 ディレクトリのリンク数は、 前者の方が少なくなることがよくあります。 このことがあるため、
上位ディレクトリへのリンクであるサブディレクトリに対して、 GNU find は、 最適化によって、 そのディレクトリを調べないケースが発生します。
\fBfind\fP は実際に、 そういったサブディレクトリに入っていかないため、 診断メッセージの出力を抑えることができます。
わかりにくい処理かもしれませんが、 実際にこの動作に期待する人は、 まずいません。 \fB\-noleaf\fP オプションの指定によって、 葉 (leaf)
に関する最適化処理が無効になっていた場合、 ディレクトリの各エントリは、 必ず調べられます。 したがって診断メッセージは、 必要な場面で表示されます。
シンボリックリンクを使っていれば、 ファイルシステム上にこのようなリンクを作り出すことはできません。 ただし \fB\-L\fP オプションや
\fB\-follow\fP オプションを指定しているときには、 シンボリックリンクのループが見つかると、 診断メッセージが表示されます。
ハードリンクを含むループの場合と同様に、 葉に関する最適化によって、 \fBfind\fP がシンボリックリンクに対して、 \fIstat()\fP や
\fIchdir()\fP を用いる必要がないと判断することがあるため、 診断情報は、 かなりの頻度で必要なくなります。
.P
\fB\-d\fP オプションは、 各種の BSD システムとの互換性のためにサポートされています。 したがって、 これを使うのではなく、 POSIX
に準拠する \fB\-depth\fP オプションを用いてください。
.P
環境変数 \fBPOSIXLY_CORRECT\fP は、 テスト \fB\-regex\fP や \fB\-iregex\fP の動作に影響を与えません。
こういったテストは、 POSIX では規定されていないためです。
.
.SH 環境変数

.IP LANG
国際化関連の環境変数において、 値が設定されていない、 あるいは null であるものに対して、 デフォルト値を提供します。

.IP LC_ALL
この環境変数に、 空文字列ではない値が設定されていれば、 国際化関連の環境変数を上書きします。

.IP LC_COLLATE
POSIX の規定では、 この環境変数は、 テスト \fB\-name\fP で用いられるパターンマッチングに影響を及ぼします。 GNU find は、
\fBfnmatch\fP(3) ライブラリ関数を利用しているので、 \fBLC_COLLATE\fP への対応は、 システムのライブラリ次第です。
またこの変数は、 アクション \fB\-ok\fP の入力値の解釈にも影響します。 \fB\-ok\fP における入力値を解釈するものとして、
実際に用いられるパターンは、 \fBLC_MESSAGES\fP 変数の値によって決定されますが、 そのパターンの中に角カッコによる表現が用いられていると、
\fBLC_COLLATE\fP の影響を受けることになります。

.IP LC_CTYPE
システムの \fBfnmatch\fP(3) ライブラリ関数がこの環境変数をサポートしている場合、 この環境変数は、 正規表現で使用される文字クラスと、
\fB\-name\fP テストで使われる文字クラスの扱い方に影響を及ぼします。アクション \fB\-ok\fP のプロンプトにおけるユーザー入力値の解釈には、
正規表現が用いられますが、 この変数は、 その正規表現内の文字クラスの判断に影響します。 環境変数 \fBLC_CTYPE\fP は、 ファイル名の表示時に、
表示できない文字を判断する処理に影響します。 「普通ではないファイル名」のセクションを参照してください。

.IP LC_MESSAGES
国際化されたメッセージで使用するロケールを設定します。 環境変数 \fBPOSIXLY_CORRECT\fP が設定されている場合は、 この変数によって、
アクション \fB\-ok\fP のプロンプト入力値に対する解釈が決定します。

.IP NLSPATH
国際化メッセージカタログを置く場所を設定します。

.IP PATH
\fB\-exec\fP, \fB\-execdir\fP, \fB\-ok\fP, \fB\-okdir\fP から呼び出される実行ファイルが、
どこにあるかを検索するディレクトリに影響します。

.IP POSIXLY_CORRECT
\fB\-ls\fP や \fB\-fls\fP が使用するブロックサイズを決定します。 \fBPOSIXLY_CORRECT\fP が設定されている場合は、 1 ブロックが
512 バイト、 設定されていない場合は、 1 ブロックが 1024 バイトになります。
.IP
またこの変数を設定すると、 デフォルトで警告メッセージを出力しません (つまり \fB\-nowarn\fP が暗に指定されます)。 なぜなら POSIX
の規定では、 \fB\-ok\fP のプロンプトを除くと、 標準エラーに出力されるメッセージは、 すべて診断情報であり、 終了ステータスは 0
以外を返さなければならないからです。
.IP
\fBPOSIXLY_CORRECT\fP が設定されていない場合、 \fI+zzz\fP が適正なシンボリックモード表現でなかったら、 \fB\-perm
\fP\fI+zzz\fP という記述は、 \fB\-perm\fP \fI/zzz\fP として扱われます。 \fBPOSIXLY_CORRECT\fP が設定されている場合、
この記述はエラーになります。
.IP
\fBPOSIXLY_CORRECT\fP が設定されていると、 アクション \fB\-ok\fP のプロンプトに対する入力値の解釈は、 \fBfind\fP
の持つメッセージ翻訳を用いるのではなく、 システムのメッセージカタログに従って行われます。

.IP TZ
タイムゾーンに影響します。 タイムゾーンは、 \fB\-printf\fP や \fB\-fprintf\fP の時間関連ディレクティブにおいて利用されます。
.
.SH 例
.\" A bulleted \[bu] list of examples.
.SS "単純な `find|xargs` のアプローチ"
.IP \[bu]
\fI/tmp\fP ディレクトリ以下にある、 \fIcore\fP という名前のファイルを探して、 それを削除します。
.nf
\&
.in +4m
\fB$ find /tmp \-name core \-type f \-print | xargs /bin/rm \-f\fP
.in
\&
.fi
ただし、 ファイル名の中に、 改行、 シングルクォート、 ダブルクォート、 空白文字が含まれる場合には、 このコマンドは正しく動作しません。
.
.SS "安全な `find \-print0 | xargs \-0` によるアプローチ"
.IP \[bu]
\fI/tmp\fP ディレクトリ以下にある、 \fIcore\fP という名前のファイルを探して、 それを削除します。 ファイルやディレクトリの名前に、
シングルクォート、 ダブルクォート、 空白、 改行などが含まれていても、 適切に処理されます。
.nf
\&
.in +4m
\fB$ find /tmp \-name core \-type f \-print0 | xargs \-0 /bin/rm \-f\fP
.in
\&
.fi
テスト \fB\-name\fP は、 \fB\-type\fP よりも前に置いています。 これは、 \fBstat\fP(2) の呼び出しが、
すべてのファイルに対して行われることを防ぐためです。
.PP
ただし、 \fBfind\fP がファイルシステム内を検索して、 一致するファイルを出力する時間と、 \fBxargs\fP
によるコマンド起動がそのファイルを処理する時間との間では、 まだ競合が発生する点に注意してください。
.
.SS 任意の検索開始ポイントからの処理
.IP \[bu]
プログラム \fIproggy\fP というものがあるとして、 あらかじめ処理を行って、 大量のNUL 区切りのファイル一覧を作るものであったとします。
これを検索開始ポイントととして処理を行って、 その中から通常ファイルと空のファイルを検索します。
.nf
\&
.in +4m
\fB$ proggy | find \-files0\-from \- \-maxdepth 0 \-type f \-empty\fP
.in
\&
.fi
\fB`\-files0\-from\ \-`\fP と記述している部分は、 検索開始ポイントとする名前を \fI標準入力\fP から、
つまりパイプから読み込むことを表しています。 そして \fB\-maxdepth\ 0\fP はサブディレクトリへの再帰的な検索は行わずに、
そこに明示された対象のみを検索するようにしています (検索開始ポイントの指定がただ 1 つである場合)。
.
.SS 各ファイルに対するコマンド実行
.IP \[bu]
カレントディレクトリ以下の各ファイルに対して \fIfile\fP を実行します。
.nf
\&
.in +4m
\fB$ find . \-type f \-exec file \(aq{}\(aq \e;\fP
.in
\&
.fi
波カッコをシングルクォートで囲んでいる点に注意してください。 これは、 句読点がシェルスクリプトの記号として、 解釈されないようにするためです。
同様のこととして、 セミコロンもバックスラッシュを使ってエスケープしています。 シングルクォートを使うのでもかまいません。
.PP
性能やセキュリティのことを考慮すると、 \fB`\-exec\ \&...\&\ +`\fP という記述が望まれるケースが多いかもしれません。
.
.SS "異なる 2 つのアクション、 ファイルシステム検索は 1 回"
.IP \[bu]
ファイルシステムを検索するのは 1 回だけにして、 setuid ビットが立っているファイルやディレクトリの一覧は \fB/root/suid.txt\fP
に出力し、 サイズが大きいファイルの一覧は \fB/root/big.txt\fP に出力するようにします。
.nf
\&
.in +4m
\fB$ find / \e\fP
.in +4m
\fB\e( \-perm \-4000 \-fprintf /root/suid.txt \(aq%#m %u %p\en\(aq \e) , \e\fP
.br
\fB\e( \-size +100M \-fprintf /root/big.txt \(aq%\-10s %p\en\(aq \e)\fP
.in -4m
.in -4m
\&
.fi
この例では、 初めの 2 つの行に対して、 行継続文字 \(aq\e\(aq を用いています。 シェルがコマンド読み込みを行うにあたって、
次の行も継続して読み込むように指示しています。
.
.SS 期間の指定を使ったファイル検索
.IP \[bu]
ホームディレクトリ内のファイルの中から、 修正時間が 24 時間未満のファイルを検索します。
.nf
\&
.in +4m
\fB$ find $HOME \-mtime 0\fP
.in
\&
.fi
このコマンドがそういう動作になるのは、 各ファイルの最終更新時間が、 24 時間単位で割られて、 余りは捨てられるからです。 つまり、 ファイルが
\fB\-mtime 0\fP に一致するのは、 過去 24 時間未満の間に更新されていることを表します。
.
.SS 許可属性を使ったファイル検索
.IP \[bu]
実行可能であり、 読み出し不能なファイルを探します。
.nf
\&
.in +4m
\fB$ find /sbin /usr/sbin \-executable \e! \-readable \-print\fP
.in
\&
.fi
.
.IP \[bu]
ファイルの所有者とグループが読み書き可能であって、 他ユーザーは、 読み込みのみで書き込み不可であるファイルを探します。
.nf
\&
.in +4m
\fB$ find . \-perm 664\fP
.in
\&
.fi
上に示す条件を満たすファイルであっても、 さらに別の許可属性ビットも立っているようなファイル (たとえば、 他ユーザーが実行できるなど) は、
この条件に一致しません。
.
.IP \[bu]
ファイルの所有者とグループが読み書き可能であり、 他ユーザーも読み込みが可能であるようなファイルを探します。　それ以外の許可属性ビット
(たとえば実行ビット) が立っていてもかまいません。
.nf
\&
.in +4m
\fB$ find . \-perm \-664\fP
.in
\&
.fi
したがって上は、 たとえばモードが \fI0777\fP であるようなファイルにも一致します。
.
.IP \[bu]
(ファイルの所有者、 グループ、 他ユーザーの誰でも良いから) 書き込み可能なファイルを探します
.nf
\&
.in +4m
\fB$ find . \-perm /222\fP
.in
\&
.fi
.
.IP \[bu]
ファイルの所有者あるいはグループのいずれかが、 書き込み可能なファイルを探します。
.nf
\&
.in +4m
\fB$ find . \-perm /220\fP
\fB$ find . \-perm /u+w,g+w\fP
\fB$ find . \-perm /u=w,g=w\fP
.in
\&
.fi
上のコマンドは 3 つとも同じ動作をします。 1 つめは、 ファイルの許可属性を 8 進数で表しています。 残りの 2 つは、
シンボルによる表現形式を利用しています。 ファイルが一致する際には、 所有者とグループの両方が書き込み可能である必要はなく、
どちらか一方が満たされれば一致します。
.
.IP \[bu]
ファイルの所有者あるいはグループが、 ともに書き込み可能であるようなファイルを探します。
.nf
\&
.in +4m
\fB$ find . \-perm \-220\fP
\fB$ find . \-perm \-g+w,u+w\fP
.in
\&
.fi
上のコマンドは同じ処理を行ないます。
.
.IP \[bu]
権限に関して、 さらに複雑な検索を以下に示します。
.nf
\&
.in +4m
\fB$ find . \-perm \-444 \-perm /222 \e! \-perm /111\fP
\fB$ find . \-perm \-a+r \-perm /a+w \e! \-perm /a+x\fP
.in
\&
.fi
この 2 つのコマンドは、 両方とも次のような条件のファイルを探します。 つまり、 誰にでも読み出すことが可能 (\fB\-perm \-444\fP または
\fB\-perm \-a+r\fP) であって、 書き込み許可ビットが少なくとも 1 つは立っているもの (\fB\-perm /222\fP または \fB\-perm
/a+w\fP)、 ただし誰にも実行ができないもの (\fB! \-perm /111\fP や \fB! \-perm /a+x\fP)、 というものです。
.
.SS "除外 \- ファイルやサブディレクトリの除き方"
.IP \[bu]
\fI/source\-dir\fP の内容を \fI/dest\-dir\fP にコピーします。 ただし \fI.snapshot\fP という名前のファイル、
またはディレクトリ (その中身) は除きます。 さらに、 名前が `\(ti' で終わるファイル、 またはディレクトリも除きますが、
その中身までは除きません。
.nf
\&
.in +4m
\fB$ cd /source\-dir\fP
\fB$ find . \-name .snapshot \-prune \-o \e( \e! \-name \(aq*~\(aq \-print0 \e) \e\fP
.br
.in +4m
\fB| cpio \-pmd0 /dest\-dir\fP
.in -4m
.in -4m
\&
.fi
\fB\-prune \-o \e( \&...\& \-print0 \e)\fP という形は、 ごく普通に利用されます。 考え方としては、 \fB\-prune\fP
の前にある式が、 取り除く対象になるということです。 アクション \fB\-prune\fP 自体は、 返り値として true を返します。 したがって、
直後に \fB\-o\fP があるおかげで、 取り除き (prune) の対象にならなかったディレクトリが、 \fB\-o\fP の右辺によって評価されることになります
(取り除きの対象になったディレクトリの中身は、 処理の対象になっていないので、 中身を考慮する必要はありません)。 \fB\-o\fP
の右辺の式をカッコで囲んでいるのは、 わかりやすくするためです。 このように記述することで、 アクション \fB\-print0\fP の処理対象が、
\fB\-prune\fP の処理対象以外あることが、 はっきりします。 テストとテストの間にある `and' 条件は、 \fB\-o\fP
よりも強く結びつくものであって、 それがデフォルトになっていますが、 カッコで囲めば、 どのように処理されるかがよくわかります。
.
.IP \[bu]
以下に示されるようなプロジェクトディレクトリがあって、 さらに、 関連する SCM の管理ディレクトリがあるとします。 これに対して、
プロジェクトルートから効率の良い検索を行います。
.nf
\&
.in +4m
\fB$ find repo/ \e\fP
.in +4m
\fB\e( \-exec test \-d \(aq{}/.svn\(aq \e; \e\fP
\fB\-or \-exec test \-d \(aq{}/.git\(aq \e; \e\fP
\fB\-or \-exec test \-d \(aq{}/CVS\(aq \e; \e\fP
\fB\e) \-print \-prune\fP
.in -4m
.in -4m
\&
.fi
出力例:
.nf
\&
.in +4m
\fBrepo/project1/CVS\fP
\fBrepo/gnu/project2/.svn\fP
\fBrepo/gnu/project3/.svn\fP
\fBrepo/gnu/project3/src/.svn\fP
\fBrepo/project4/.git\fP
.in
\&
.fi
この例では、 \fB\-prune\fP を指定することによって、 すでに対象が見つかったディレクトリの配下は、 それ以上の検索が不要なので、
検索を行わないようにしています (たとえば \fIproject3/src\fP は検索されません。 その理由は \fIproject3/.svn\fP が、
すでに見つかっているからです)。 しかし、 となり合わせのディレクトリ (たとえば、 \fIproject2\fP と \fIproject3\fP) は、
確実に検索されます。
.
.SS この他の利用例
.IP \[bu]
複数のファイルタイプを検索します。
.nf
\&
.in +4m
\fB$ find /tmp \-type f,d,l\fP
.in
\&
.fi
ファイルタイプとして、  カンマ区切りのリスト (GNU 拡張) を指定して、 それぞれファイル、 ディレクトリ、 シンボリックリンクを \fI/tmp\fP
ディレクトリの中から検索します。 同じことは、 やや長くなりますが、 移植性の高い記述として、 以下のようにしても同じです。
.nf
\&
.in +4m
\fB$ find /tmp \e( \-type f \-o \-type d \-o \-type l \e)\fP
.in
\&
.fi
.
.IP \[bu]
特定の名前 \fIneedle\fP を持ったファイルを検索して、 最初にそれが見つかった時点で、 すぐに終了するようにします。
.nf
\&
.in +4m
\fB$ find / \-name needle \-print \-quit\fP
.in
\&
.fi
.
.IP \[bu]
\fB\-printf\fP アクションの書式ディレクティブ \fB%f\fP と \fB%h\fP が、 境界条件において、 どのように解釈されるかを示します。
.nf
\&
.in +4m
\fB$ find . .. / /tmp /tmp/TRACE compile compile/64/tests/find \-maxdepth 0 \-printf '[%h][%f]\en'\fP
\fB[.][.]\fP
\fB[.][..]\fP
\fB[][/]\fP
\fB[][tmp]\fP
\fB[/tmp][TRACE]\fP
\fB[.][compile]\fP
\fB[compile/64/tests][find]\fP
.in
\&
.fi
.
.SH 終了ステータス
\fBfind\fP は、 すべてのファイルを正常に処理できれば、 ステータス 0 で終了します。 エラーが起きた場合は、 1 以上を返します。 ここでは、
わざと大まかな説明としていますが、 返り値が 0 以外だった場合、 \fBfind\fP の結果は正しいと思わないでください。

エラーが発生した場合、 \fBfind\fP は、 指定されたアクションを完了しないまま、 その場で終了することがあります。 たとえば、
検索開始ポイントの中には、 検索されずに終わるものもあります。 あるいは \fB\-exec\ \&...\&\ {}\ +\fP や \fB\-execdir\ \&...\&\ {}\ +\fP において、 まだ呼び出しが行われていないプログラムが、 実行されないまま終了することもあります。
.
.SH 履歴
findutils\-4.2.2 以降、 ファイル名のパターンに使われるシェルのメタ文字 (`*', `?', `[]' など) は、 先頭の `.'
に一致します。 これは IEEE POSIX interpretation 126 が要求しているためです。
.P
findutils\-4.3.3 以降 \fB\-perm\ /000\fP は、 どんなファイルにも一致しない、 ではなく、 すべてのファイルに一致する、
になりました。
.P
ナノ秒まで表現するタイムスタンプは、 findutils\-4.3.3 で実装されました。
.P
findutils\-4.3.11 以降、 アクション \fB\-delete\fP の処理に失敗すると、 \fBfind\fP の終了ステータスは 0
以外の値になります。 ただし、 \fBfind\fP は、 その場ですぐには終了しません。 以前のバージョンでは、 \fB\-delete\fP の処理が失敗しても、
\fBfind\fP の終了ステータスとは無関係でした。
.TS
l l l .
機能	追加時期	他システムの対応
\-files0\-from	4.9.0
\-newerXY	4.3.3	BSD
\-D	4.3.1
\-O	4.3.1
\-readable	4.3.0
\-writable	4.3.0
\-executable	4.3.0
\-regextype	4.2.24
\-exec ... +	4.2.12	POSIX
\-execdir	4.2.12	BSD
\-okdir	4.2.12
\-samefile	4.2.11
\-H	4.2.5	POSIX
\-L	4.2.5	POSIX
\-P	4.2.5	BSD
\-delete	4.2.3
\-quit	4.2.3
\-d	4.2.3	BSD
\-wholename	4.2.0
\-iwholename	4.2.0
\-ignore_readdir_race	4.2.0
\-fls	4.0
\-ilname	3.8
\-iname	3.8
\-ipath	3.8
\-iregex	3.8
.TE
.P
\fB\-perm +MODE\fP という文法は、 findutils\-4.5.12 において削除されました。 代わりに、 \fB\-perm /MODE\fP
を使用してください。　\fB+MODE\fP という文法は、 2005 年にリリースされた findutils\-4.2.21 以降、 非推奨となっています。
.
.SH バグではないもの
.SS 意外なオペレーター優先順位
以下のようなコマンド \fBfind . \-name afile \-o \-name bfile \-print\fP は、 \fIafile\fP を出力しません。
なぜなら実際には \fBfind . \-name afile \-o \e( \-name bfile \-a \-print \e)\fP と同じものだからです。
\fB\-a\fP の優先順位は \fB\-o\fP よりも高いことを忘れないでください。 またテストとテストの間に、 オペレーターが指定されていないければ、
\fB\-a\fP であるとみなされる点も注意してください。
.SS "エラーメッセージ \(lqpaths must precede expression\(rq"
.nf
\fB$ find . \-name *.c \-print\fP
find: paths must precede expression
find: possible unquoted pattern after predicate `\-name'?
.fi
.P
\fI*.c\fP というパターンをシェルが展開した際に、 カレントディレクトリの複数ファイルに該当した場合に、 このエラーが発生します。 この場合には、
対象となったファイル名が、 \fBfind\fP におけるコマンドライン上に、 以下のように受け渡されることになります。
.nf
.
\fBfind . \-name frcode.c locate.c word_io.c \-print\fP
.
.fi
上のコマンドは、 もちろん動作しません。 述語表現である \fB\-name\fP の引数は、 パターンを 1 つしか受けつけないからです。
そのような記述とするのではなく、 パターンの表現部分は、 クォートでくくるか、 ワイルドカードをエスケープしてください。 以下のようにすることで、
ファイル名がシェルによって展開されることなく、 \fBfind\fP のファイル名の一致検索の際に、
ワイルドカードを用いたパターン検索ができるようになります。
.nf
\fB$ find . \-name \(aq*.c\(aq \-print\fP
\fB$ find . \-name \e*.c \-print\fP
.fi
.
.SH バグ
POSIX が規定する \fBfind\fP の動作には、 セキュリティ上の問題があって、 これを修正することはできません。 たとえば、 アクション
\fB\-exec\fP は、 本質的に安全ではないため。 代わりに \fB\-execdir\fP を使ってください。
.
.P
環境変数 \fBLC_COLLATE\fP は、 アクション \fB\-ok\fP に対しては、 何の効果も及ぼしません。
.
.SH バグ報告
GNU findutils オンラインヘルプ:
<https://www.gnu.org/software/findutils/#get\-help>
.br
翻訳に関するバグ報告 <https://translationproject.org/team/>
.PP
その他の問題について GNU Savannah バグトラッカー経由での報告:
.RS
<https://savannah.gnu.org/bugs/?group=findutils>
.RE
GNU findutils パッケージのメーリングリスト \fIbug\-findutils\fP において議論されている全般的なトピック:
.RS
<https://lists.gnu.org/mailman/listinfo/bug\-findutils>
.RE
.
.SH 著作権
Copyright \(co 1990\-2022 Free Software Foundation, Inc.  License GPLv3+: GNU
GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
.br
This is free software: you are free to change and redistribute it.  There is
NO WARRANTY, to the extent permitted by law.
.
.SH 関連項目
\fBchmod\fP(1), \fBlocate\fP(1), \fBls\fP(1), \fBupdatedb\fP(1), \fBxargs\fP(1),
\fBlstat\fP(2), \fBstat\fP(2), \fBctime\fP(3)  \fBfnmatch\fP(3), \fBprintf\fP(3),
\fBstrftime\fP(3), \fBlocatedb\fP(5), \fBregex\fP(7)
.PP
完全なドキュメント <https://www.gnu.org/software/findutils/find>
.br
またローカルにおいては \fBinfo find\fP により参照できます。
