.\" DO NOT EDIT THIS FILE, IT IS NOT THE MASTER!
.\" IT IS GENERATED AUTOMATICALLY FROM sudo.mdoc.in
.\"
.\" Copyright (c) 1994-1996, 1998-2005, 2007-2016
.\"	Todd C. Miller <Todd.Miller@courtesan.com>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\" ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.\" Sponsored in part by the Defense Advanced Research Projects
.\" Agency (DARPA) and Air Force Research Laboratory, Air Force
.\" Materiel Command, USAF, under agreement number F39502-99-1-0512.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Japanese Version Copyright (c) 2000-2002 Yuichi SATO
.\"   and 2009 Yoichi Chonan
.\"         all rights reserved.
.\" Translated Sat Oct  7 14:39:18 JST 2000
.\"         by Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated & Modified Fri Dec  6 04:40:44 JST 2002
.\"         by Yuichi SATO
.\" New Translation (sudo-1.6.9p17) Fri Jan 23 10:31:17 JST 2009
.\"         by Yoichi Chonan <cyoichi@maple.ocn.ne.jp>
.\" Updated & Modified (sudo-1.7.2p1) Sat Nov 14 21:15:16 JST 2009
.\"         by Yoichi Chonan
.\" Updated & Modified (sudo-1.8.4p4) Wed May  9 12:26:33 JST 2012
.\"         by Yoichi Chonan
.\" Updated & Modified (sudo-1.8.17) Sat Sep 10 10:39:07 JST 2016
.\"         By Yoichi Chonan
.\"
.TH SUDO 8 "January 19, 2016" "Sudo 1.8.17" "System Manager's Manual"
.nh
.if  n .ad l
.SH 名前
\fBsudo\fP, \fBsudoedit\fP \- コマンドを他のユーザとして実行する
.SH 書式
.HP 5n
\fBsudo\fP \fB\-h\fP\ |\ \fB\-K\fP\ |\ \fB\-k\fP\ |\ \fB\-V\fP
.PD 0
.HP 5n
\fBsudo\fP \fB\-v\fP [\fB\-AknS\fP] [\fB\-g\fP\ \fIgroup\fP] [\fB\-h\fP\ \fIhost\fP] [\fB\-p\fP\ \fIprompt\fP] [\fB\-u\fP\ \fIuser\fP]
.br
.HP 5n
\fBsudo\fP \fB\-l\fP [\fB\-AknS\fP] [\fB\-g\fP\ \fIgroup\fP] [\fB\-h\fP\ \fIhost\fP] [\fB\-p\fP\ \fIprompt\fP] [\fB\-U\fP\ \fIuser\fP] [\fB\-u\fP\ \fIuser\fP] [\fIcommand\fP]
.br
.HP 5n
\fBsudo\fP [\fB\-AbEHnPS\fP] [\fB\-C\fP\ \fInum\fP] [\fB\-g\fP\ \fIgroup\fP] [\fB\-h\fP\ \fIhost\fP]
[\fB\-p\fP\ \fIprompt\fP] [\fB\-r\fP\ \fIrole\fP] [\fB\-t\fP\ \fItype\fP] [\fB\-u\fP\ \fIuser\fP]
[\fIVAR\fP=\fIvalue\fP] [\fB\-i\fP\ |\ \fB\-s\fP] [\fIcommand\fP]
.br
.HP 9n
\fBsudoedit\fP [\fB\-AknS\fP] [\fB\-C\fP\ \fInum\fP] [\fB\-g\fP\ \fIgroup\fP] [\fB\-h\fP\ \fIhost\fP]
[\fB\-p\fP\ \fIprompt\fP] [\fB\-u\fP\ \fIuser\fP] \fIfile\ ...\fP
.PD
.SH 説明
\fBsudo\fP を使用すると、許可されたユーザが、セキュリティポリシーの設定の範囲内で、
スーパーユーザや他のユーザに変身して、\fIcommand\fP を実行することが可能になる。
セキュリティポリシーへの問い合わせは、ユーザ名によって行われるが、
そのユーザ名を決めるのは、\fBsudo\fP を実行するユーザの実ユーザ ID であって、
実効ユーザ ID ではない。
.PP
\fBsudo\fP はセキュリティポリシーと入出力のロギングについて、プラグイン方式をサポートしている。
従って、サードパーティは、
\fBsudo\fP フロントエンドとシームレスに協働するポリシー・プラグインや入出力ロギング・プラグインを、
独自に開発して配布することができる。
デフォルトのセキュリティポリシーは \fIsudoers\fP であり、その設定は、
\fI/etc/sudoers\fP ファイル、もしくは LDAP を通して行われる。
詳細については、「プラグイン」セクションを参照していただきたい。
.PP
セキュリティポリシーは、あるユーザに \fBsudo\fP を使用する権限があるかどうか、
あるとすれば、どんな権限を持っているかを決定する。
セキュリティポリシーは、ユーザにパスワードや他の認証方法を使って、
本人であることを証明するように要求することができる。
認証が必要な場合、ユーザが自分のパスワードを、
設定によって変更可能な制限時間内に入力しないと、\fBsudo\fP は時間切れで終了する
(訳注: \fBsudo\fP はデフォルトでは、root や変身対象ユーザのパスワードではなく、
\fBsudo\fP を実行するユーザ本人のパスワードを要求する)。
この制限時間はポリシー次第であり、 \fIsudoers\fP セキュリティポリシーの場合、
パスワード・プロンプトがタイムアウトするまでのデフォルトの時間は、5 分間である。
.PP
セキュリティポリシーは、一定時間内ならユーザが認証なしで \fBsudo\fP
を何度も実行できるように、認証情報の一時保存 (credential caching)
をサポートしてもよい。\fIsudoers\fP ポリシーでは、sudoers(5)
で変更されないかぎり、認証情報を 5 分間保持する。
ユーザは \fBsudo\fP に \fB\-v\fP を付けて実行することで、
\fIcommand\fP を実行しないでも、保存された認証情報を更新することができる。
.PP
\fBsudoedit\fP というコマンド名で起動するのは、\fBsudo\fP に \fB\-e\fP
オプション (下記参照) を付けて実行するのと同じである。
.PP
セキュリティポリシーは、ユーザが \fBsudo\fP
を使おうとして成功した場合も失敗した場合も、それをログに記録することができる。
入出力プラグインが設定されている場合は、
\fBsudo\fP 経由で実行するコマンドの入出力もログに残すことができる。
.PP
オプションとして以下のものが使用できる。
.TP  12n
\fB\-A\fP, \fB\-\-askpass\fP
通常 \fBsudo\fR がパスワードを要求するとき、
パスワードはユーザが使用している端末から読み込まれる。
\fB\-A\fP (\fIaskpass\fP) オプションを指定すると、
ヘルパー・プログラム (グラフィカルなものでもよい)
が実行され、ユーザのパスワードを読み込んで、それを標準出力に書き出す。
環境変数 SUDO_ASKPASS が設定されているときは、
それがヘルパー・プログラムのパスになる。
それ以外の場合は、sudo.conf(5) に askpass プログラムを指定している行が存在すれば、
その値が使用される。一例を挙げよう。
.nf
.sp
.RS 16n
# askpass ヘルパー・プログラムのパス
Path askpass /usr/X11R6/bin/ssh\-askpass
.RE
.fi
.RS 12n
.sp
利用できる askpass プログラムがないと、\fBsudo\fP はエラーメッセージを出して、
終了する。
.RE
.TP  12n
\fB\-a\fP \fItype\fP, \fB\-\-auth\-type\fP=\fItype\fP
\fI/etc/login.conf\fP で使用可になっていれば、ユーザを認証する際に指定された
BSD の認証方法 \fItype\fP を使用する。システム管理者は、\fI/etc/login.conf\fP
に "auth\-sudo" エントリを追加することで、
sudo 専用の認証方法のリストを指定することができる。このオプションは、
BSD 認証をサポートするシステムでのみ使用できる。
.TP  12n
\fB\-b\fP, \fB\-\-background\fP
指定されたコマンドをバックグラウンドで実行する。
\fBsudo\fP 経由で起動したバックグラウンド・プロセスは、
シェルのジョブ制御を使って操作できないことに注意していただきたい。
バックグラウンドモードでは、ほとんどの対話的なコマンドがうまく動かないだろう。
.TP  12n
\fB\-C\fP \fInum\fP, \fB\-\-close\-from\fP=\fInum\fP
コマンドを実行するに先立って、\fInum\fP 以上の番号のファイル・ディスクリプタをすべてクローズする。
3 未満の値は指定できない。デフォルトでは、コマンドを実行する際に、
\fBsudo\fP は、標準入力、標準出力、標準エラー以外の、
オープンしているすべてのファイル・ディスクリプタを閉じることになっている。
セキュリティポリシーは、ユーザによるこのオプションの使用を制限することができる。
\fIsudoers\fP ポリシーが \fB\-C\fP オプションの使用を許可するのは、
管理者が \fIclosefrom_override\fP オプションを有効にしているときのみである。
.TP  12n
\fB\-c\fP \fIclass\fP, \fB\-\-login\-class\fP=\fIclass\fP
指定されたログインクラス \fIclass\fP のリソース・リミットとスケジューリング優先度で、
コマンドを実行する。引き数 \fIclass\fP に使用できるのは、\fI/etc/login.conf\fP
で定義されたクラス名か、単独の '\-' 文字のどちらかである。
\fIclass\fP が \fB\-\fP ならば、変身対象ユーザのデフォルトのログインクラスが使用されることになる。
それ以外の場合は、コマンドをスーパーユーザ (ユーザ ID が 0) として実行するか、
あるいは、すでにスーパーユーザとして実行しているシェルから
\fBsudo\fP を実行するかのどちらかでなければならない。
実行されるコマンドがログイン・シェルである場合は、
umask や環境変数といった \fI/etc/login.conf\fP の他の設定も、
存在すれば適用されることになる。
このオプションは BSD ログインクラスを採用しているシステムでのみ有効である。
.TP  12n
\fB\-E\fP, \fB\-\-preserve\-env\fP
現在の環境変数をそのまま保持するのがユーザの意向だと、セキュリティポリシーに指示する。
ユーザが環境を保持する許可を持っていない場合は、
セキュリティポリシーがエラーを返すことになるだろう。
.TP  12n
\fB\-e\fP, \fB\-\-edit\fP
何らかのコマンドを実行するのではなく、1 個以上のファイルを編集する。
セキュリティポリシーの参照では、コマンドのパス名の代わりに
"sudoedit" という文字列が使用される。
セキュリティポリシーによってユーザに権限があることが認められると、
次のことが順番に行われる。
.RS 16n
.TP  5n
1.\&
編集対象のファイルのコピーをテンポラリファイルとして作成する。
テンポラリファイルのオーナーは \fBsudo\fP を起動したユーザである。
.TP  5n
2.\&
セキュリティポリシーによって指定されたエディタを起動して、
テンポラリファイルを編集する。\fIsudoers\fP ポリシーでは、環境変数
SUDO_EDITOR, VISUAL, EDITOR を (この順番で) 使用する。
SUDO_EDITOR, VISUAL, EDITOR のどれも設定されていない場合は、
sudoers(5) の \fIeditor\fP オプションにリストされたプログラムのうち、
最初のものが使われる。
.TP  5n
3.\&
編集作業がすむと、テンポラリファイルをオリジナルのファイルにコピーして、
テンポラリファイルを消去する。
.RE
.RS 12n
.sp
編集する権限のないファイルを編集できないようにするため、
セキュリティポリシーによって明示的に許可されていないかぎり、
以下の制限が行われる。
.RS 16n
.TP  4n
\fB\(bu\fP
シンボリックリンクの編集は許可しない (バージョン 1.8.15 以上)。
.TP  4n
\fB\(bu\fP
\fBsudo\fP を実行するのが root であるときを除いて、
編集するファイルのパス中にシンボリックリンクがある場合、
そのリンクの親ディレクトリが \fBsudo\fP を実行するユーザにとって書き込み可能ならば、
リンクをたどらない (バージョン 1.8.16 以上)。
.TP  4n
\fB\(bu\fP
\fBsudo\fP を実行するのが root であるときを除いて、
ファイルが \fBsudo\fP を実行するユーザにとって書き込み可能なディレクトリにある場合、
そのファイルの編集を許可しない (バージョン 1.8.16 以上)。
.RE
.sp
ユーザがデバイス・スペシャルファイルの編集を許可されることは絶対にない。
.sp
指定されたファイルが存在しない場合は作成する。ここで注意すべきは、
\fBsudo\fP によって実行されるコマンドの大部分と違って、
\fB\-e\fP でエディタが実行されるときは、\fBsudo\fP を起動したユーザの環境が、
変更を受けずに使われるということだ。
何らかの理由で \fBsudo\fP が編集した内容でファイルを更新できないときは、
ユーザに警告を発し、編集した内容をテンポラリファイルに保存することになる。
.RE
.TP  12n
\fB\-g\fP \fIgroup\fP, \fB\-\-group\fP=\fIgroup\fP
コマンドを実行するとき、
プライマリ・グループをパスワード・データベースの変身対象ユーザの項目で指定されているものではなく、
\fIgroup\fP に設定する。\fIgroup\fP は、グループ名でもよく、'#' 記号にグループ
ID 番号 (GID) を続けたものでもよい (たとえば、GID 0 なら　#0)。
GID としてコマンドを実行する場合、ほとんどのシェルでは、
\&'#' をバックスラッシュ ('\e') でエスケープする必要がある。
なお、\fB\-u\fP オプションが指定されていない場合、コマンドは
\fBsudo\fP を起動したユーザの資格で実行される。いづれにしろ、
プライマリ・グループが \fIgroup\fP に設定されることに変わりはない。
(訳注: \fB\-g\fP オプションを使用するには、
\fIsudoers\fP ポリシーの場合なら、\fIsudoers\fP ファイルのユーザ設定で、
変身対象となるグループを設定しておく必要がある。詳細については、
sudoers(5) のマニュアルの該当個所を参照していただきたい。)
.TP  12n
\fB\-H\fP, \fB\-\-set\-home\fP
HOME 環境変数を、パスワード・データベースの変身対象ユーザの項目で、
ホームディレクトリとして指定されているものに設定するように、
セキュリティポリシーに要求する。
ポリシーによっては、それがデフォルトの動作になっていることもある。
.TP  12n
\fB\-h\fP, \fB\-\-help\fP
簡単なヘルプメッセージを標準出力に表示して、終了する。
.TP  12n
\fB\-h\fP \fIhost\fP, \fB\-\-host\fP=\fIhost\fP
セキュリティポリシー・プラグインがリモート・コマンドをサポートしているなら、
指定された \fIhost\fP でコマンドを実行する。
\fIsudoers\fP プラグインは、現在のところ、
リモート・コマンドの実行をサポートしていないことに注意していただきたい。
このオプションを \fB\-l\fP オプションと一緒に使えば、
リモート・ホストにおけるユーザの権限のリストを得ることができる。
(訳注: このオプションについは、sudo_plugin(5) のマニュアルの
"Remote command execution" セクションもご覧いただきたい。
そちらの説明が詳しい。)
.TP  12n
\fB\-i\fP, \fB\-\-login\fP
パスワード・データベースの変身対象ユーザの項目でログイン・シェルとして指定されているシェルを実行する。すなわち、
\&\fI.profile\fP や \fI.login\fP といったログイン用のリソース・ファイルが、
シェルによって読み込まれることになる。コマンドを指定すると、
それがシェルに渡され、シェルの  \fB\-c\fP オプションを使って実行される。
コマンドを指定しない場合は、対話的シェルが起動される。\fBsudo\fP は、
シェルを実行する前に、変身対象ユーザのホームディレクトリに移動しようとする。
コマンドの実行は、ユーザが普通にログインしたときの環境とほぼ同じ環境で行われる。
\fIsudoers\fP ポリシーを使用している場合に、
\fB\-i\fP オプションがコマンドの実行環境にどんな影響を与えるかについては、
sudoers(5) のマニュアルの「コマンド環境」セクションに説明がある。
.TP  12n
\fB\-K\fP, \fB\-\-remove\-timestamp\fP
\fB\-k\fP オプションに似ているが、ユーザの保存された認証情報を完全に消去してしまう点と、
コマンドや他のオプションと組み合わせて使えない点が異なっている。
このオプションはパスワードを要求しない。すべてのセキュリティポリシーが、
認証情報の一時保存をサポートしているわけではない。
.TP  12n
\fB\-k\fP, \fB\-\-reset\-timestamp\fP
コマンドを伴わずに使用した場合は、ユーザの保存された認証情報を無効にする。
言い換えると、次回 \fBsudo\fP を実行するときに、
パスワードが要求されるということだ。このオプション自体は、
パスワードを要求しない。このオプションが追加されたのは、
ユーザが \fI.logout\fP ファイルで、\fBsudo\fP
をパスワードなしで実行できる期間を終了させることができるようにするためである。
.sp
コマンドや、パスワードを必要とするような他のオプションと組み合わせて、
このオプションを使用すると、
\fBsudo\fP がユーザの保存された認証情報を無視することになる。
その結果、\fBsudo\fP は (セキュリティポリシーがパスワードを要求するならば)、
プロンプトを出して、パスワードを要求する。
このとき、ユーザの保存された認証情報の更新は行われない。
.sp
すべてのセキュリティポリシーが、認証情報の一時保存をサポートしているわけではない。
.TP  12n
\fB\-l\fP, \fB\-\-list\fP
コマンドを指定しない場合は、\fBsudo\fP を実行しているユーザ (あるいは、
\fB\-U\fP オプションで指定したユーザ) が、現在ログインしているホストで許可されている
(及び、禁じられている) コマンドのリストを表示する。
このオプションを複数回指定すると、
セキュリティポリシーが詳細な出力形式をサポートしていれば、
長い方のリスト形式が使用される。
.sp
コマンドを指定した場合は、その実行がセキュリティポリシーによって許可されていれば、
コマンドの絶対パスが表示される。
コマンドラインでコマンドに引き数まで指定すると
(訳注: その引き数が許可されていれば)、それも一緒に表示される。
指定したコマンドが許可されていない場合は、
\fBsudo\fP はステータス 1 で終了することになる。
.TP  12n
\fB\-n\fP, \fB\-\-non\-interactive\fP
プロンプトを出してユーザに入力を求めることを一切しない。
コマンドを実行するのにパスワードが必要な場合、
\fBsudo\fP はエラーメッセージを出して、終了することになる。
.TP  12n
\fB\-P\fP, \fB\-\-preserve\-groups\fP
\fBsudo\fP を実行するユーザの所属グループのリストを、変更せずにそのまま使用する。
デフォルトでは、\fIsudoers\fP ポリシーの場合、所属グループは初期化されて、
変身対象ユーザが所属しているグループのリストが使われることになっているのである。
とは言え、実グループ ID と実効グループ ID が、
変身対象ユーザと同一になるようにセットされる点には変わりがない。
.TP  12n
\fB\-p\fP \fIprompt\fP, \fB\-\-prompt\fP=\fIprompt\fP
パスワードプロンプトに好みの文字列を使用する。文字列には、
エスケープシーケンスが使用できる。\fIsudoers\fP では、
以下のパーセント ('%') エスケープシーケンスをサポートしている。
.PP
.RS 12n
.PD 0
.TP  4n
%H
ドメイン名を含むホスト名に展開される (マシンのホスト名が完全修飾名であるか、
sudoers(5) で \fIfqdn\fP オプションがセットされている場合に有効)
.PD
.TP  4n
%h
ドメイン名なしのローカルホスト名に展開
.TP  4n
%p
パスワードを要求されているユーザ名に展開 (sudoers(5) の \fIrootpw\fP,
\fItargetpw\fP, \fIrunaspw\fP フラグを尊重する)
.TP  4n
\&%U
変身対象になるユーザ (\fB\-u\fP オプションが同時に指定されていないときは、root
がデフォルト) のログイン名に展開される
.TP  4n
%u
\fBsudo\fP を起動するユーザのログイン名に展開される
.TP  4n
%%
連続する二つの '%' 文字は、1 個の '%' 文字そのものを意味する。
.PP
自家特製のプロンプトが、
PAM をサポートしているシステムでシステムのパスワードプロンプトに置き替わるのは、
\fIsudoers\fP で \fIpassprompt_override\fP フラグが無効になっていない場合である
(訳注: sudoers(5) の passprompt_override の項も参照していただきたい)。
.RE
.TP  12n
\fB\-r\fP \fIrole\fP, \fB\-\-role\fP=\fIrole\fP
指定された \fIrole\fP を含む
SELinux のセキュリティ・コンテキストでコマンドを実行する。
.TP  12n
\fB\-S\fP, \fB\-\-stdin\fP
プロンプトを標準エラーに表示するが、パスワードの読み込みは、
ターミナルデバイスを使わずに、標準入力から行う。パスワードは、
末尾に改行を付けなければならない。
.TP  12n
\fB\-s\fP, \fB\-\-shell\fP
環境変数 SHELL が設定されていれば、そのシェルを、
設定されていなければ、パスワード・データベースで
\fBsudo\fP を起動するユーザのシェルとして指定されているシェルを実行する。
コマンドが指定されている場合は、それをシェルに渡し、シェルの
\fB\-c\fP オプションを使って実行する。コマンドが指定されていない場合は、
対話的シェルを開く。
.TP  12n
\fB\-t\fP \fItype\fP, \fB\-\-type\fP=\fItype\fP
指定された \fItype\fP を含む
SELinux のセキュリティ・コンテキストでコマンドを実行する。
\fItype\fP が指定されていない場合は、ロールからデフォルトのタイプを推測する。
.TP  12n
\fB\-U\fP \fIuser\fP, \fB\-\-other\-user\fP=\fIuser\fP
\fBsudo\fP を実行しているユーザではなく、
\fIuser\fP というユーザの権限の一覧を表示するために、
\fB\-l\fP オプションと組み合わせて使用する。自分以外のユーザの権限の表示は、
セキュリティポリシーによって禁止されているかもしれない。
\fIsudoers\fP ポリシーでこのオプションの使用が認められているのは、
root ユーザを別にすれば、現在使用中のホストで許可するコマンドに
ALL が指定してあるユーザだけである。
.TP  12n
\fB\-u\fP \fIuser\fP, \fB\-\-user\fP=\fIuser\fP
コマンドをデフォルトの変身対象ユーザ (通常は \fIroot\fP)
以外のユーザとして実行する。\fIuser\fP に指定するのは、ユーザ名でもよく、
\&'#' 記号を頭に付けたユーザ ID 番号 (UID) でもよい
(たとえば、UID が 0 なら、#0 と指定する)。多くのシェルでは、
UID の資格でコマンドを実行するには、
\&'#' をバックスラッシュ ('\e') でエスケープしなければならない。
セキュリティポリシーによっては、使用できる UID
をパスワード・データベースに登録されているものに限定していることもある。
\fIsudoers\fP ポリシーでは、\fItargetpw\fP オプションが設定されていないかぎり、
パスワード・データベースに存在しない UID も認めている。
他のセキュリティポリシーでは、それは許されないかもしれない。
.TP  12n
\fB\-V\fP, \fB\-\-version\fP
\fBsudo\fP のバージョン文字列を、セキュリティポリシー・プラグインや
入出力プラグインのバージョン文字列とともに表示する。
\fBsudo\fP を実行するユーザがあらかじめ root になっている場合は、
\fBsudo\fP がビルドされたときに configure スクリプトに渡された引き数が表示される。
プラグインについては、
デフォルト・オプションのようなより詳細な情報が表示されるかもしれない。
.TP  12n
\fB\-v\fP, \fB\-\-validate\fP
ユーザの保存された認証情報を更新する。このとき、必要ならば、
ユーザの認証を行う。\fIsudoers\fP プラグインでは、このオプションによって
\fBsudo\fP のタイムアウト時間がもう 5 分間 (これがデフォルトのタイムアウト時間)
伸びるが、このオプションがコマンドを実行することはない。
すべてのセキュリティポリシーが認証情報の一時保存に対応しているわけではない。
.TP  12n
\fB\-\-\fP
\fB\-\-\fP オプションがあると、
\fBsudo\fP はそこでコマンドライン引き数の処理をやめる。
.PP
さらに、コマンドのために設定したい環境変数も、\fIVAR\fP=\fIvalue\fP、たとえば
LD_LIBRARY_PATH=\fI/usr/local/pkg/lib\fP
といった形でコマンドラインで渡すことができる。コマンドラインで渡す環境変数は、
セキュリティポリシー・プラグインによって課される制限の対象になる。
\fIsudoers\fP ポリシーの場合、コマンドラインで渡される環境変数は、
通常の環境変数と同じ制限の対象になるが、一つだけ重要な相違がある。
\fIsudoers\fP で \fIsetenv\fP オプションが設定されているか、実行するコマンドに
SETENV タグが付いているか、あるいは、マッチするコマンドが ALL である場合は、
ユーザは他の状況なら禁じられているような環境変数を設定することができるのだ。
詳細については、sudoers(5) のマニュアルを参照していただきたい。
.SH コマンドの実行
\fBsudo\fP がコマンドを実行するとき、
セキュリティポリシーによってコマンドの実行環境が設定される。たいていの場合、
実ユーザ、実効ユーザ、実グループ、実効グループ、及びその ID 番号が、変身対象ユーザの、
パスワード・データベースに記載されているものと同一になるようにセットされる。
所属グループのリストも、(\fB\-P\fP オプションが指定されていないかぎり)
グループ・データベースに基づいて、初期化される。
.PP
セキュリティポリシーは、以下のパラメータを設定することができる。
.TP  4n
\fB\(bu\fP
実ユーザ ID と実効ユーザ ID
.TP  4n
\fB\(bu\fP
実グループ ID と実効グループ ID
.TP  4n
\fB\(bu\fP
補助グループ ID
.TP  4n
\fB\(bu\fP
環境のリスト
.TP  4n
\fB\(bu\fP
カレント・ワーキング・ディレクトリ
.TP  4n
\fB\(bu\fP
ファイル作成時のモード・マスク (umask)
.TP  4n
\fB\(bu\fP
SELinux の role と type
.TP  4n
\fB\(bu\fP
Solaris の project
.TP  4n
\fB\(bu\fP
Solaris の privilege
.TP  4n
\fB\(bu\fP
BSD のログインクラス (login class)
.TP  4n
\fB\(bu\fP
スケジューリング優先度 (nice value とも言う)
.SS プロセス・モデル
\fBsudo\fP は、コマンドを実行するとき、まず fork(2) を呼び、
実行環境を上記のように設定してから、子プロセスで execve システムコールを呼び出す。
メインの \fBsudo\fP プロセスは、コマンドが完了するまで wait し、完了したら、
コマンドの終了ステータスをセキュリティポリシーの close 関数に渡してから、
終了する。入出力ロギング・プラグインが設定されている場合や、
セキュリティポリシーが明示的にそれを要求している場合は、
擬似端末 ("pty") が新規に作成され、二つ目の \fBsudo\fP プロセスが、
既に存在しているユーザの pty と、コマンドがそこで実行されている新しい pty との間で、
ジョブ制御シグナルを中継するために使用される。
この二つ目の \fBsudo\fP プロセスによって、たとえば、
コマンドのサスペンドやレジュームといったことが可能になるのである。
この仕組みがなければ、コマンドは、POSIX で "orphaned process group"
と言われる状態に陥り、どんなジョブ制御シグナルも受け取れないことになってしまうだろう。
なお、特殊ケースとして次のことがある。ポリシー・プラグインが
close 関数を定義していず、しかも、pty が要求されていない場合は、
\fBsudo\fP は fork(2) を最初に呼ぶことをせず、直接コマンドを実行する。
\fIsudoers\fP ポリシー・プラグインで close 関数が定義されることになるのは、
入出力ロギングが有効か、pty が要求されているか、\fIpam_session\fP または
\fIpam_setcred\fP が有効な場合だけである。PAM を使用しているシステムでは、
デフォルトで \fIpam_session\fP と \fIpam_setcred\fP
が有効になることに注意していただきたい。
(訳注: 上記の「特殊ケースとして」以下についてだが、最近の \fBsudo\fP では、
\fIsudoers\fP ポリシーにおける \fIpam_session\fP や \fIpam_setcred\fP
の有効/無効に関係なく、pty が要求されていない場合は、
fork せずに直接コマンドを実行するようである。)
.SS シグナルの処理
コマンドが \fBsudo\fP プロセスの子プロセスとして実行されているとき、
\fBsudo\fP は自分が受け取ったシグナルをそのコマンドに中継する。
ただし、SIGINT や SIGQUIT シグナルが中継されるのは、
そのコマンドが新たに開いた pty で実行されているときか、
シグナルがカーネルではなく、ユーザ・プロセスによって送出されたときだけである。
そうなっていることで、ユーザが control\-C を入力するたびに、
コマンドが SIGINT シグナルを二重に受け取らないようにしているのだ。
SIGSTOP や SIGKILL のようないくつかのシグナルは、
捕獲できないので、コマンドに中継されることもない。
だから、\fBsudo\fP によって実行されているコマンドをサスペンドしたかったら、
原則として、SIGSTOP ではなく、SIGTSTP コマンドを使用するべきである。
.PP
\fBsudo\fP は原則として、自分が受け取ったシグナルを子プロセスに中継するわけだが、
自分が実行しているコマンドから来たシグナルは、中継しないという例外がある。
コマンドが意図に反して自分自身を殺してしまわないようにしているのだ。
システムによっては、reboot(8) コマンドが、システムをリブートする前に、
自分自身を除くすべてのノン・システム・プロセスに SIGTERM を送るものがある。
そうした場合も、中継の抑制があるため、\fBsudo\fP は自分が受け取った
SIGTERM シグナルを reboot(8) に送り返さない。もし送り返すようになっていたら、
システムが実際にリブートする前に reboot(8) が終了して、
システムがシングルユーザ・モードによく似た半分死んだ状態 (half\-dead state)
に陥ってしまうだろう。とは言え、注意していただきたいが、
この中継の抑制が行われるのは、\fBsudo\fP によって直接実行されるコマンドに対してのみであり、
そのコマンドが生成するかもしれない他のどんなプロセスに対しても当てはまらない。
それ故、reboot(8) や shutdown(8) を呼び出すスクリプトを
\fBsudo\fP 経由で実行すると、システムがそうしたわけのわからない状態に陥ることがある。
reboot(8) や shutdown(8) の実行に \fBexec\fP() ファミリーの関数ではなく、
\fBsystem\fP() 関数を使用していると、
(\fBsystem\fP() は、呼び出しプロセスとコマンドの間にシェルを挟むため)
そうしたことが起こりかねないのだ。
.PP
入出力ロギング・プラグインがロードされていない場合に、
ポリシー・プラグインが \fBclose\fP() 関数を定義してもいず、
コマンドのタイムアウトを設定していることもなく、コマンドを新たに開いた pty
で実行することを要求してもいなかったならば、\fBsudo\fP は、
コマンドを子プロセスとしてではなく、直接実行するかもしれない。
.SS プラグイン
プラグインは、sudo.conf(5) ファイルの Plugin 命令 (directive)
で指定することができる。プラグインは、(システムがサポートしていれば)
動的な共有オブジェクト (dynamic shared object) としてロードすることもできるし、
また、\fBsudo\fP のバイナリに直接組み込むこともできる。sudo.conf(5)
ファイルが存在しない場合や、sudo.conf(5) ファイルに Plugin の行がない場合は、
\fBsudo\fP は従来どおり、\fIsudoers\fP のセキュリティポリシーと入出力ロギングを使用することになる。
\fI/etc/sudo.conf\fP ファイルの詳細については、
sudo.conf(5) のマニュアルを参照していただきたい。
\fBsudo\fP プラグインの設計についての詳しい情報は、
sudo_plugin(5) のマニュアルにある。
.SH 終了ステータス
コマンドの実行に成功した場合、\fBsudo\fP が返す終了ステータスは、
実行したプログラムの終了ステータスである。
コマンドがシグナルを受け取ることによって終了した場合は、
\fBsudo\fP はコマンドを終了させたシグナルを自分自身に送るようになっている。
.PP
それ以外の場合、設定やパーミッションに問題があったり、
\fBsudo\fP が指定されたコマンドを実行できなかったりしたときは、
\fBsudo\fP は終了ステータス 1 で終了する。後者の場合は、
エラーメッセージが標準エラーに表示される。\fBsudo\fP がユーザの
PATH にある一つ以上のエントリを stat(2) できなかったときも、
エラーが標準エラーに表示される (ただし、PATH
中のディレクトリが存在しなかったときや、実際にはディレクトリでなかったときは、
そのエントリは無視され、エラーは表示されない)。そういったことは、
通常の状態では起きるはずがないことである。stat(2) が "permission denied"
を返す理由で一番よくあるのは、ユーザがオートマウンターを使用していて、
PATH 中のディレクトリの一つが目下到達不可能なマシンにある場合だ。
.SH セキュリティに関するメモ
\fBsudo\fP は、外部のコマンドをできるだけ安全に実行しようとする。
.PP
偽コマンドの実行 (command spoofing) を防止するため、\fBsudo\fP
はコマンドを捜してユーザの PATH を検索する際に、"." や ""
(どちらもカレント・ディレクトリを意味する) を最後に調べる (そのどちらか、
あるいは両方が、PATH 中に存在すればだが)。とは言え、環境変数 PATH そのものは変更されずに、
そのまま \fBsudo\fP が実行するプログラムに渡されることに注意していただきたい。
.PP
次のようなファイルを実行する \fBsudo\fP 権限を、絶対にユーザに許可してはいけない。
すなわち、そのユーザに書き込みできるファイルや、
そのユーザに書き込みできるディレクトリにあるファイルを実行する権限である。
もし、ユーザがコマンドを書き換えたり、別のコマンドと置き換えたりできるならば、
そのユーザは自分が実行できるコマンドに何でも追加できるわけで、
それを制限する方法はまったくないのだ。
.PP
\fBsudo\fP は通常、自分が明示的に実行するコマンドしかログに記録しないことに注意していただきたい。
ユーザが sudo su や sudo sh といったコマンドを実行した場合、
そのシェルからさらに実行されるコマンドは、
\fBsudo\fP のセキュリティポリシーの対象にはならないのだ。
同じことが、シェル・エスケープを提供するコマンド (たいていのエディターが、
それに含まれる) についても言える。確かに、入出力ロギングが有効になっている場合は、
シェルからさらに実行されるコマンドも、その入力や出力を記録されることになるが、
従来からあるログファイルに記録されるわけではないのである。従って、
ユーザに \fBsudo\fP 経由で、あるコマンドを実行する権限を与えるときは、
そのコマンドが事実上ルート・シェルをユーザにうっかり与えていないことを、
念には念を入れて確認しなければならない。もっと詳しいことをお知りになりたかったら、
sudoers(5) のマニュアルの「シェル・エスケープを防止する」というセクションをご覧になるとよい。
.PP
セキュリティ上問題になりかねない情報を漏洩しないように、
\fBsudo\fP はデフォルトでは、自己を実行中のコアダンプを抑止している
(指定されたコマンドを実行するときに、コアダンプを有効にし直すのだ)。
この動作は昔からのものであり、たいていのオペレーティングシステムが
setuid プロセスにデフォルトではコアダンプを許していた時代からそうなっていた。
\fBsudo\fP 自体のクラッシュをデバッグするためにコアダンプを有効に戻したいならば、
以下のように、sudo.conf(5) ファイルで "disable_coredump" を
false にすればよい。
.nf
.sp
.RS 6n
Set disable_coredump false
.RE
.fi
.PP
詳細については、sudo.conf(5) のマニュアルを参照していただきたい。
.SH 環境変数
\fBsudo\fP は以下の環境変数を利用する。
実行するコマンドの環境が実際にどうなるかは、セキュリティポリシー次第である。
.TP  17n
EDITOR
環境変数 SUDO_EDITOR や VISUAL が設定されていないとき、
\fB\-e\fP (sudoedit) モードで使用するデフォルトのエディタ。
.TP  17n
MAIL
\fB\-i\fP オプションが指定された場合や、\fIsudoers\fP で \fIenv_reset\fP
が有効になっている場合には (\fIenv_keep\fP のリストに
MAIL が存在しないかぎり)、変身対象ユーザのメールスプールにセットされる。
.TP  17n
HOME
次の場合には、変身対象ユーザのホームディレクトリにセットされる。
\fB\-i\fP や \fB\-H\fP オプションが指定された場合、
\fB\-s\fP オプションが指定され、かつ \fIsudoers\fP で \fIset_home\fP が設定されている場合、
\fIalways_set_home\fP が \fIsudoers\fP で有効になっている場合、
あるいは、\fIenv_reset\fP が \fIsudoers\fP で有効になっていて、
しかも \fIHOME\fP が \fIenv_keep\fP のリストに存在しない場合。
.TP  17n
LOGNAME
次の場合には、変身対象ユーザのログイン名にセットされる。
\fB\-i\fP オプションが指定された場合、
\fIset_logname\fP オプションが \fIsudoers\fP で有効になっている場合、
あるいは、\fIenv_reset\fP オプションが \fIsudoers\fP で有効になっていて、
LOGNAME が \fIenv_keep\fP のリストに存在しない場合。
.TP  17n
PATH
セキュリティポリシーによって上書きされるかもしれない。
.TP  17n
SHELL
\fB\-s\fP オプションで起動するシェルを決めるのに使用する。
.TP  17n
SUDO_ASKPASS
ターミナルが利用できない場合や、\fB\-A\fP オプションが指定された場合に、
パスワードを読み込むのに使用するヘルパー・プログラムのパスを指定する。
.TP  17n
SUDO_COMMAND
sudo が実行するコマンドにセットされる。
.TP  17n
SUDO_EDITOR
\fB\-e\fP (sudoedit) モードで使用するデフォルトのエディタ。
.TP  17n
SUDO_GID
sudo を起動したユーザのグループ ID にセットされる。
.TP  17n
SUDO_PROMPT
デフォルトのパスワード・プロンプトとして使用する。
.TP  17n
SUDO_PS1
設定すると、実行されるプログラムの PS1 がこの変数の値にセットされる。
.TP  17n
SUDO_UID
sudo を起動したユーザのユーザ ID にセットされる。
.TP  17n
SUDO_USER
sudo を起動したユーザのログイン名にセットされる。
.TP  17n
USER
上で述べた LOGNAME と同じ値にセットされる。
.TP  17n
USERNAME
USER と同じ。
.TP  17n
VISUAL
SUDO_EDITOR が設定されていない場合に、\fB\-e\fP (sudoedit)
モードで使用するデフォルトのエディタ。
.SH ファイル
.TP  26n
\fI/etc/sudo.conf\fP
\fBsudo\fP フロントエンドの設定ファイル
.SH 用例
注意: 以下の例は、セキュリティポリシーが適切に設定されていることを前提にしている。
.PP
読み取り不可のディレクトリのファイル一覧を取得する。
.nf
.sp
.RS 6n
$ sudo ls /usr/local/protected
.RE
.fi
.PP
ユーザ yaz のホームディレクトリのファイル一覧を取得する。
ただし、~yaz を含むファイルシステムが、別のマシンにあって、
root でアクセスできるようにエクスポートされていない場合。
.nf
.sp
.RS 6n
$ sudo \-u yaz ls ~yaz
.RE
.fi
.PP
ユーザ www として \fIindex.html\fP ファイルを編集する。
.nf
.sp
.RS 6n
$ sudo \-u www vi ~www/htdocs/index.html
.RE
.fi
.PP
root と adm グループのユーザだけがアクセスできるシステムログを閲覧する。
.nf
.sp
.RS 6n
$ sudo \-g adm view /var/log/syslog
.RE
.fi
.PP
jim に変身してエディタを実行する。プライマリグループには別のグループを指定する。
.nf
.sp
.RS 6n
$ sudo \-u jim \-g audio vi ~jim/sound.txt
.RE
.fi
.PP
マシンをリブートする。
.nf
.sp
.RS 6n
$ sudo shutdown \-r +15 "quick reboot"
.RE
.fi
.PP
/home パーティションに存在するディレクトリのディスク使用量リストを作成する。
cd やファイル・リダイレクションがきちんと動作するように、
コマンドをサブシェルで実行している点に注目していただきたい。
.nf
.sp
.RS 6n
$ sudo sh \-c "cd /home ; du \-s * | sort \-rn > USAGE"
.RE
.fi
.SH 参照項目
su(1), stat(2), passwd(5), sudo.conf(5), sudoers(5), sudo_plugin(5),
sudoreplay(8), visudo(8)
.SH 履歴
sudo の簡単な履歴については、\fBsudo\fP の配布に含まれている
HISTORY ファイルをご覧いただきたい。
(https://www.sudo.ws/history.html)
.SH 作者
多数の人々が長年に渡って \fBsudo\fP の開発に携わってきた。
当バージョンは主として次の者が書いたコードからできている。
.sp
.RS 6n
Todd C. Miller
.RE
.PP
\fBsudo\fP の開発に貢献してくださった方々の詳細なリストについては、
配布物中の CONTRIBUTORS ファイルをご覧になっていただきたい。
(https://www.sudo.ws/contributors.html)
.SH 警告
もし、ユーザが \fBsudo\fP 経由で任意のコマンドを実行することを許可されているなら、
そのユーザがルート・シェルを手に入れるのを防止する簡単な方法は存在しない。
また、(エディタをはじめとする) 多くのプログラムが、
シェル・エスケープを通してユーザがコマンドを実行できるようにしており、
この方法でユーザは \fBsudo\fP によるチェックをすり抜けることができる。
とは言え、たいていのシステムでは、sudoers(5) プラグインの \fInoexec\fP
機能を使用することでシェル・エスケープを抑止することが可能だ。
.PP
下記のように \fBsudo\fP 中で直に \fBcd\fP コマンドを実行しても意味がない。
.nf
.sp
.RS 6n
$ sudo cd /usr/local/protected
.RE
.fi
.PP
なぜなら、このコマンドが終了したとき、その親プロセス (すなわち、\fBsudo\fP
を実行したシェル) は、\fBsudo\fP を実行する前と同じ状態に戻るからだ。
\fBcd\fP については、「用例」セクションもご覧になっていただきたい。
.PP
\fBsudo\fP を介してシェルスクリプトを実行すると、ある種のオペレーティング・システムで
setuid シェルスクリプトを危険なものにしているのと同一の、
カーネルのバグが表面化するおそれがある (使用している OS に /dev/fd/
ディレクトリがあれば、setuid シェルスクリプトはたいてい安全である)。
.SH バグ
\fBsudo\fP にバグを発見したと思ったら、https://bugzilla.sudo.ws/
にアクセスして、バグレポートを提出していただきたい。
.SH サポート
ある程度の無料サポートが sudo\-users メーリングリストを通して利用できる。
購読やアーカイブの検索には、次の URL を御覧になるとよい。
https://www.sudo.ws/mailman/listinfo/sudo\-users
.SH 免責
\fBsudo\fP は「現状のまま」提供される。 明示的な、あるいは黙示的ないかなる保証も、
商品性や特定目的への適合性についての黙示的な保証を含め、
またそれのみに止まらず、これを否認する。詳細な全文については、
\fBsudo\fP と一緒に配布されている LICENSE ファイルや、
次の Web ページをご覧いただきたい。
https://www.sudo.ws/license.html
