.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"
.\" Translated Thu Apr  8 00:11:03 JST 1999
.\"    by FUJIWARA Teruyoshi <fujiwara@linux.or.jp>
.\" Corrected by
.\"       NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\" Updated Fri Oct 20 03:54:55 JST 2000
.\"       Yuichi SATO <sato@complex.eng.hokudai.ac.jp>
.\" translated for 4.3, 2022-05-02
.\"
.TH MAKE 1 2016/02/28 GNU ユーザーコマンド
.SH 名前
make \- プログラム群を管理するための GNU make ユーティリティ
.SH 書式
\fBmake\fP [\fIOPTION\fP]... [\fITARGET\fP]...
.SH 説明
.LP
\fImake\fP
ユーティリティの目的は、大きなプログラムの中の再コンパイルする必要がある部分を自動的に決定し、再コンパイルのためのコマンドを実行することです。
このマニュアルでは、GNU が実装した \fBmake\fP の説明を行っています。 これは Richard Stallman と Roland
McGrath が書いたもので、 現在は Paul Smith により維持されています。 例として C 言語のプログラムを用いていますが、これは C
言語が最も一般的だからです。 \fBmake\fP は、シェルコマンドからコンパイラーを起動できるどんなプログラミング言語とでも組み合わせて使用できます。
実際、 \fBmake\fP の利用対象はプログラムだけに限りません。 \fBmake\fP は、 あるファイルを書き換えたら、 その書き換えたファイルを元にして、
別のファイルも自動的に更新しなければならないような任意の作業で利用できます。
.LP
\fBmake\fP を使う準備として、 まず \fImakefile\fP と呼ばれるファイルを書かねばなりません。 このファイルは、
プログラムを構成するファイル間の関係と、 各ファイルを更新するためのプログラムを記述したものです。 プログラムに関して言えば、 普通、
実行ファイルはオブジェクトファイルから更新され、 このオブジェクトファイルは、 ソースファイルのコンパイルによって生成されます。
.LP
適切な makefile さえあれば、 ソースファイルを一部変更するたびに
.sp 1
.RS
\fBmake\fP
.RE
.sp 1
という簡単なシェルコマンドを実行するだけで、 必要な再コンパイルはすべて行われます。 \fBmake\fP プログラムは、 makefile
記述とファイルの最終更新時刻を用いて、 更新する必要があるファイルを見つけます。 そのファイルに対して、 \fImake\fP は makefile
に書かれているコマンドを実行します。
.LP
\fBmake\fP は \fImakefile\fP 内のコマンドを実行して、 1 つ以上のターゲット \fIname\fP を更新します。 この \fIname\fP
は普通はプログラムです。 \fB\-f\fP が無い場合、 \fBmake\fP は makefile として、 \fIGNUmakefile\fP,
\fImakefile\fP, \fIMakefile\fP をこの順に参照します。
.LP
通常、ユーザーが makefile として使うべきなのは、 \fImakefile\fP または \fIMakefile\fP です。 (推奨するのは
\fIMakefile\fP です。 なぜなら、 この名前であれば、 常にディレクトリ表示の先頭近くに現われ、 \fIREADME\fP
のような他の重要ファイルのすぐ近くに来るからです。)  最初にチェックされる名前である \fIGNUmakefile\fP
は、たいていの場合は好ましくありません。 この名前を使うのは、GNU \fBmake\fP に特化していて、他のバージョンの \fBmake\fP では処理できない
makefile を使う場合です。 \fImakefile\fP が `\-' ならば、標準入力が読み込まれます。
.LP
\fBmake\fP がターゲットを更新するのは、ターゲットが依存している必要ファイルがターゲットより後に変更された場合と、ターゲットが存在しない場合です。
.SH オプション
.sp 1
.TP  0.5i
\fB\-b\fP, \fB\-m\fP
このオプションは無視されます。 これは他のバージョンの \fBmake\fP との互換性のためのものです。
.TP  0.5i
\fB\-B\fP, \fB\-\-always\-make\fP
無条件にすべてのターゲットを make します。
.TP  0.5i
\fB\-C\fP \fIdir\fP, \fB\-\-directory\fP=\fIdir\fP
makefile を読み込むなどの動作の前に、ディレクトリ \fIdir\fP に移動します。 複数の \fB\-C\fP
オプションが指定されている場合、それぞれは、 前の指定に対する相対パスとして解釈されます。 たとえば、 \fB\-C \fP/ \fB\-C \fPetc は \fB\-C
\fP/etc と同じ意味です。 このオプションは通常 \fBmake\fP を再帰的に呼び出す時に使われます。
.TP  0.5i
\fB\-d\fP
通常の処理情報に加えて、 デバッグ情報を出力します。 デバッグ情報に含まれるのは、再構築の対象となっているファイル、 比較されるファイル時間とその結果、
実際に再構築する必要があるファイル、 候補になっていたり、 実際に適用される暗黙のルールなど、 \fBmake\fP
が動作を決めるために必要なものすべてです。
.TP  0.5i
\fB\-\-debug\fP\fI[=FLAGS]\fP
通常の処理内容に加えてデバッグ情報を表示します。
\fIFLAGS\fP が省略された場合、 \fB\-d\fP が指定された場合と同じ動作となります。
\fIFLAGS\fP には次の値を指定することができます。
\fIa\fP は全てのデバッグ情報を出力します (\fB\-d\fP と同じ)。
\fIb\fP は基本的なデバッグ情報を出力します。
\fIv\fP は基本的なデバッグ情報をより詳細に出力します。
\fIi\fP は暗黙のルールを表示します。
\fIj\fP はコマンドの起動の詳細を出力します。
\fIm\fP は makefile の再 make 時にデバッグ情報を出力します。
\fIn\fP はそれまでのデバッグフラグをすべて無効化します。
.TP  0.5i
\fB\-e\fP, \fB\-\-environment\-overrides\fP
環境変数から与える変数を指定します。 これは makefile の変数よりも優先されます。
.TP  0.5i
\fB\-E\fP \fIstring\fP, \fB\-\-eval\fP \fIstring\fP
\fBeval\fP 関数を用いて \fIstring\fP を解釈します。これはどの makefile の解析よりも先に行われます。
.TP  0.5i
\fB\-f\fP \fIfile\fP, \fB\-\-file\fP=\fIfile\fP, \fB\-\-makefile\fP=\fIFILE\fP
\fIfile\fP を makefile として使用します。
.TP  0.5i
\fB\-i\fP, \fB\-\-ignore\-errors\fP
ファイルの再構築時に、 実行したコマンドで起きたエラーをすべて無視します。
.TP  0.5i
\fB\-I\fP \fIdir\fP, \fB\-\-include\-dir\fP=\fIdir\fP
インクルードする makefile を検索するディレクトリ \fIdir\fP を指定します。 複数の \fB\-I\fP
オプションを使って複数のディレクトリを指定した場合、 ディレクトリの検索 は指定した順で行われます。 \fBmake\fP の他のフラグに対する引数と異なり、
\fB\-I\fP に与える引数は、フラグの直後に記述できます。 つまり、 \fB\-I\fP\fIdir\fP という記述も \fB\-I \fP\fIdir\fP と共に許されます。
この記法を許すのは、C プリプロセッサの \fB\-I\fP フラグとの互換性のためです。
.TP  0.5i
\fB\-j\fP [\fIjobs\fP], \fB\-\-jobs\fP[=\fIjobs\fP]
同時に実行できる \fIjobs\fP (コマンド) の数を指定します。 \fB\-j\fP オプションが複数指定された場合は、 最後の指定が有効になります。
引数無しで \fB\-j\fP オプションが与えられた場合、 \fBmake\fP は同時に実行できるジョブの数を制限しません。
.TP  0.5i
\fB\-k\fP, \fB\-\-keep\-going\fP
エラーが起きても、 できる限り実行を継続しようとします。 失敗したターゲットとそのターゲットに依存しているファイルは、
再生成されないものの、そのターゲットに関する他の依存関係は処理することができます。
.TP  0.5i
\fB\-l\fP [\fIload\fP], \fB\-\-load\-average\fP[=\fIload\fP]
他のジョブが動作していて、 ロードアベレージが少なくとも \fIload\fP (浮動小数)なら、 新しいジョブ (コマンド) を実行しないことを指定します。
引数無しの場合には、以前に指定した負荷の制限が取り除かれます。
.TP  0.5i
\fB\-L\fP, \fB\-\-check\-symlink\-times\fP
シンボリックリンクとターゲットのうち、 最新の mtime を使用します。
.TP  0.5i
\fB\-n\fP, \fB\-\-just\-print\fP, \fB\-\-dry\-run\fP, \fB\-\-recon\fP
実行するコマンドの表示だけを行ない、 (特定の状況を除いては) 実際の実行を行ないません。
.TP  0.5i
\fB\-o\fP \fIfile\fP, \fB\-\-old\-file\fP=\fIfile\fP, \fB\-\-assume\-old\fP=\fIfile\fP
\fIfile\fP が依存先のファイルより古い場合であっても、 再構築を行わず、 \fIfile\fP が変更されても、 他のファイルの再構築を一切行ないません。
実質的にそのファイルは非常に古いファイルとして扱われ、 規則が無視されます。
.TP  0.5i
\fB\-O\fP[\fItype\fP], \fB\-\-output\-sync\fP[=\fItype\fP]
\fB\-j\fP
を使って複数ジョブを並行で実行する場合、それぞれのジョブからの出力をばらばらに行うのではなく、個々のジョブ出力を取りまとめるようにします。\fItype\fP
が未指定か \fBtarget\fP に指定されている場合、各ターゲットごとにレシピ全体の出力結果がまとめられます。\fItype\fP が \fBline\fP
の場合、レシピ内の各コマンドラインの出力結果がまとめられます。\fItype\fP が \fBrecurse\fP である場合、再帰呼び出しされた make
全体の出力結果がまとめられます。\fItype\fP が \fBnone\fP の場合、同期をとった出力は無効化されます。
.TP  0.5i
\fB\-p\fP, \fB\-\-print\-data\-base\fP
makefile を読み込んで得られたデータベース (規則と変数の値) を出力します。 特に指定しない限り、 その後の動作は通常通りです。 また、
\fB\-v\fP オプションで得られるバージョン情報も出力します。 ファイルを全く再構築することなく、データベースの表示だけを行うには \fImake \-p
\-f/dev/null\fP を使ってください。
.TP  0.5i
\fB\-q\fP, \fB\-\-question\fP
「問い合わせモード」で動作します。 コマンドを全く実行せず、何も表示しません。 ただ、指定されたターゲットが既に最新ならば終了ステータス 0 を返し、
そうでなければ 0 でないステータスを返します。
.TP  0.5i
\fB\-r\fP, \fB\-\-no\-builtin\-rules\fP
組み込みの暗黙的ルールを使用しません。 また、接尾辞規則で使うデフォルトの接尾辞のリストもすべて消去する。
.TP  0.5i
\fB\-R\fP, \fB\-\-no\-builtin\-variables\fP
組み込みの変数を一切定義しません。
.TP  0.5i
\fB\-s\fP, \fB\-\-silent\fP, \fB\-\-quiet\fP
静かに動作します。 コマンドを実行する際に、コマンドの表示を行ないません。
.TP  0.5i
\fB\-\-no\-silent\fP
\fB\-s\fP オプションの機能をキャンセルします。
.TP  0.5i
\fB\-S\fP, \fB\-\-no\-keep\-going\fP, \fB\-\-stop\fP
\fB\-k\fP オプションの機能をキャンセルします。
.TP  0.5i
\fB\-t\fP, \fB\-\-touch\fP
コマンドを実行せずにファイルにタッチします (実際にはファイルを変更せず、 最新の印を付けます)。 このオプションを使うと見かけ上、
コマンドが実行されたことになり、 後で起動する \fBmake\fP をだますことができます。
.TP  0.5i
\fB\-\-trace\fP
各ターゲットの処理に関する情報が出力されます (ターゲット再ビルドの理由や、 再ビルドにあたって実行したコマンドが示されます)。
.TP  0.5i
\fB\-v\fP, \fB\-\-version\fP
\fBmake\fP プログラムのバージョンおよび著作権表示、作者のリスト、無保証であることの宣言を出力します。
.TP  0.5i
\fB\-w\fP, \fB\-\-print\-directory\fP
他の処理を行う前後に、作業ディレクトリを表示します。 再帰的な \fBmake\fP コマンドが複雑な入れ子になっている状況で、
エラーを追跡する際に便利です。
.TP  0.5i
\fB\-\-no\-print\-directory\fP
\fB\-w\fP をオフにします。 \fB\-w\fP が暗黙で指定される場合でもオフになります。
.TP  0.5i
\fB\-W\fP \fIfile\fP, \fB\-\-what\-if\fP=\fIfile\fP, \fB\-\-new\-file\fP=\fIfile\fP, \fB\-\-assume\-new\fP=\fIfile\fP
ターゲット \fIfile\fP が変更されたばかりのものとして動作します。 \fB\-n\fP フラグを指定している場合、
そのファイルを変更するとどうなるかが表示されます。 \fB\-n\fP が指定されていない場合の動作は、 \fBmake\fP の実行前に、
指定されたファイルに対して \fItouch\fP を行った時とほぼ同じです。 ただし、修正時刻が変更されるのは \fBmake\fP
の内部だけである点が異なります。
.TP  0.5i
\fB\-\-warn\-undefined\-variables\fP
未定義の変数が参照された際に警告を出します。
.SH 終了ステータス
すべての makefile が正常に読み込まれ、ビルド対象のどのターゲットも失敗しなかった場合、 GNU \fBmake\fP はステータス 0
で終了します。 \fB\-q\fP フラグが使用され、 \fBmake\fP がターゲットの再ビルドが必要と判断した場合には、 ステータス 1 が返されます。
何かエラーが発生した場合は、 ステータス 2 が返されます。
.SH 関連項目
\fBmake\fP の完全なドキュメントは Texinfo マニュアルとしてメンテナンスされています。\fBinfo\fP と \fBmake\fP
の両プログラムが適切にインストールされていれば、以下のコマンド
.IP
\fBinfo make\fP
.PP
を実行して完全なマニュアルを参照できます。
.SH バグ
\fIThe GNU Make Manual\fP の「問題点とバグ (Problems and Bugs)」の章を参照してください。
.SH 著者
このオンラインマニュアルはスタンフォード大学の Dennis Morse 氏が寄付したものです。 さらなる改訂が Mike Frysinger
から提供されました。 その後 Roland McGrath が改訂しました。 現在は Paul Smith が保守を行っています。
.SH 著作権
Copyright \(co 1992\-1993, 1996\-2020 Free Software Foundation, Inc.  This
file is part of \fIGNU make\fP.
.LP
GNU Make is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option)
any later version.
.LP
GNU Make is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
details.
.LP
You should have received a copy of the GNU General Public License along with
this program.  If not, see \fIhttp://www.gnu.org/licenses/\fP.
