.\" You may copy, distribute and modify under the terms of the LDP General
.\" Public License as specified in the LICENSE file that comes with the
.\" gnumaniak distribution
.\"
.\" The author kindly requests that no comments regarding the "better"
.\" suitability or up-to-date notices of any info documentation alternative
.\" is added without contacting him first.
.\"
.\" (C) 2000 Ragnar Hojland Espinosa <ragnar@ragnar-hojland.com>
.\"
.\"	gasp man page
.\"	man pages are NOT obsolete!
.\"	<ragnar@ragnar-hojland.com>
.\"
.\" Japanese Version Copyright (c) 2000 Omo Kazuki
.\"         all rights reserved.
.\" Translated Wed Aug 30 17:42:39 JST 2000
.\"         by Omo Kazuki
.\" Updated & Modified Fri Dec 24 06:00:11 JST 2004
.\"         by Yuichi SATO <ysato444@yahoo.co.jp>
.\"
.TH GASP 1 "November 2000" "gasp 1.2"
.\"O .SH NAME
.SH 名前
.\"O \fBgasp\fR \- GNU Assembler Preprocessor
\fBgasp\fR \- GNU アセンブラプリプロセッサ
.\"O .SH SYNOPSIS
.SH 書式
.B gasp
.RB [ \-adpsuM ]
.RB [ "\-c \fICHAR" ]
.RB [ "\-o \fIOUTFILE" ]
.RB [ "\-D\fINAME\fB=\fIVALUE" ]
.RB [ "\-I\fIPATH" ]
.RB [ \-\-alternate ]
.RB [ "\-\-commentchar \fICHAR" ]
.RB [ \-\-copysource ]
.RB [ \-\-debug ]
.RB [ \-\-mri ]
.RB [ "\-output \fIOUTFILE" ]
.RB [ \-\-print ]
.RB [ \-\-unreasonable ]
.I INFILE...

.B gasp
.RB [ \-hv ]
.RB [ \-\-help ]
.RB [ \-\-version ]
.\"O .SH DESCRIPTION
.SH 説明
.\"O .B gasp
.\"O preprocesses each \fIINFILE\fR argument and concatenates the results to
.\"O standard output, for direct consumption by \fBas\fR(1).
.B gasp
は、\fIINFILE\fR 引数を処理して、\fBas\fR(1) に直接入力させるために
連結して標準出力に出力する。

.\"O Since \fBas\fR is targeted to assemble the output generated by other
.\"O programs, it doesn't have common facilities such as macros or conditionals
.\"O that are generally useful when writing assembler by hand.  \fBgasp\fR
.\"O provides this missing functionality.
\fBas\fR は、他のプログラムによって生成された出力をアセンブルすることを
目的としているので、アセンブラを手で書くときに便利なマクロや条件文といった
一般的な機能を持っていない。
\fBgasp\fR は、これらの (as にはない) 機能を提供する。
.\"O .SH OPTIONS
.SH オプション
.TP
.B \-a, \-\-alternate
.\"O Use alternative macro syntax.
別のマクロ文法を使用する。
.TP
.B \-c \fICHAR\fB, \-\-commentchar \fICHAR
.\"O Use \fICHAR\fR as the comment character.  The default comment character
.\"O is `\fB!\fR'.
\fICHAR\fR をコメント文字として使う。デフォルトのコメント文字は
`\fB!\fR' である。
.TP
.B \-d, \-\-debug
.\"O Show debugging statistics about the string buffers that \fBgasp\fR allocates
.\"O internally. For each defined buffersize \fIS\fR, it shows the number of
.\"O strings \fIN\fR that it allocated, in the format
\fBgasp\fR が内部的に割り当てる
文字列バッファについてのデバッグ統計情報を表示する。
それぞれ定められたバッファサイズ \fIS\fR について、
割り当てられた文字列 \fIN\fR を
.sp
.nf
    strings size \fIS\fR : \fIN\fR
.fi
.sp
.\"O These statistics are written to stderr, when done preprocessing.
という形式で表す。
これらの統計量はデータを前処理する時に標準エラー出力に書き出される。
.TP
.B \-o \fIOUTFILE\fB, \-\-output \fIOUTFILE
.\"O Write the output generated by \fBgasp\fR to \fIOUTFILE\fR.  The default is
.\"O to write to standard output.
\fBgasp\fR によって生成された出力を \fIOUTFILE\fR に書き出す。
デフォルトでは標準出力に書き出される。
.TP
.B \-p, \-\-print
.\"O Print commented line numbers.  Ignored unless \fB\-s\fR is specified.
コメントとして行番号を出力する。
\fB\-s\fR が指定されない限り、無視される。
.TP
.B \-s, \-\-copysource
.\"O Print commented source lines.
コメントとしてソースの行を出力する。
.TP
.B \-u, \-\-unreasonable
.\"O Allow unlimited ("unreasonable") nested expansions.  Since you can define
.\"O \fBgasp\fR macros inside other macro definitions, the preprocessor normally
.\"O includes a sanity check.  If you require more than 1000 nested expansions,
.\"O \fBgasp\fR normally exits with an error message.  Use this option to turn
.\"O off this check, allowing unlimited nested expansions.
無制限の (「非現実的な」) ネスト展開を許可する。
他のマクロの定義の中に \fBgasp\fR のマクロを定義できる時、
プリプロセッサは通常、sanity チェックを含める。
プログラムが 1000 回以上のネストされた展開を必要とする時には、
\fBgasp\fR は通常、エラーメッセージを出して終了する。
このチェックをオフにして無制限のネストされた展開を許したい時には、
このオプションを使用せよ。
.TP
.B \-M, \-\-mri
.\"O Enter MRI compatibility mode, required to use the Microtec Research ASM68K
.\"O assembler syntax and pseudo ops.
MRI 互換モードに入る。
Microtec Research ASM68K アセンブラ文法と
疑似オペレーションを使うために必要である。
.TP
.B \-D\fINAME\fB=\fIVALUE
.\"O Define the preprocessor constant \fINAME\fR, with value \fIVALUE\fR.
プリプロセッサ定数 \fINAME\fR を値 \fIVALUE\fR で定義する。
.TP
.B \-I\fIPATH
.\"O Add \fIPATH\fR to the include path list.
\fIPATH\fR をインクルードパスのリストに追加する。
.TP
.B "\-h, \-\-help"
.\"O Print a usage message on standard output and exit successfully.
標準出力に使用方法を出力し、正常終了する。
.TP
.B "\-v, \-\-version"
.\"O Print version information on standard output then exit successfully.
バージョン情報を標準出力に出力し，正常終了する。
.\"O .SH PREPROCESSOR COMMANDS
.SH プリプロセッサコマンド
.\"O Commands are case-insensitive, and each extends for a line divided in three
.\"O fields:  an optional label, the command itself, and optional argument(s) to
.\"O the command.
コマンドは大文字と小文字を区別せず、1 行は 3 つの部分に分けられる:
(任意の) ラベル、コマンド自身、コマンドの引数である。
.\"O .SS Conditionals
.SS 条件文
.\"O These directives allow you to include or exclude portions of assembly
.\"O depending on how a pair of strings or absolute expressions compare.  Max
.\"O conditional nesting is 100.
これらの指示子により、文字列や絶対式の組の比較方法に依存してアセンブリコードの
一部を含めたり除外したりすることが出来る。
条件文の最大ネスト数は 100 である。
.TP
.B .AIF \fIARG1 CMP ARG2
.PD 0
.TP
.B .AIF \fB"\fIARG1\fB"\fI CMP \fB"\fIARG2\fB"
.sp
.\"O Available \fICMP\fR comparision operators available with strings and absolute expressions:
有効な \fICMP\fR 比較演算子で、文字列と絶対式で表されるものは、
以下の通りである:
.sp
.RS
.TP
.B EQ
.\"O Are \fIARG1\fR and \fIARG2\fR equal?
\fIARG1\fR と \fIARG2\fR は等しいか?
.TP
.B NE
.\"O Are \fIARG1\fR and \fIARG2\fR different?
\fIARG1\fR と \fIARG2\fR は異なっているか?
.PP
.sp
.\"O Available \fICMP\fR comparision operators available with absolute
.\"O expressions only:
有効な \fICMP\fR 比較演算子で、絶対式のみで表されるものは、
以下の通りである:
.sp
.TP
.B LT
.\"O Is \fIARG1\fR less than \fIARG2?\fR
\fIARG1\fR は \fIARG2\fR より小さいか?
.TP
.B LE
.\"O Is \fIARG1\fR less than or equal to \fIARG2\fR
\fIARG1\fR は \fIARG2\fR と等しいか、それより小さいか?
.TP
.B GT
.\"O Is \fIARG1\fR greater than \fIARG2\fR?
\fIARG1\fR は \fIARG2\fR より大きいか?
.TP
.B GE
.\"O Is \fIARG1\fR greater than or equal to \fIARG2\fR?
\fIARG1\fR は \fIARG2\fR と等しいか、それより大きいか?
.RE
.PD 1
.TP
.B .AELSE
.\"O Marks the start of assembly code to be included if the condition
.\"O fails.  Optional, and only allowed within a conditional (between
.\"O \fB.AIF\fR and \fB.AENDI\fR)
条件文が失敗したときに実行されるアセンブリコードの最初の部分に含まれる印。
必須ではなく、(\fB.AIF\fR と \fB.AENDI\fR の間の) 条件ブロックの中でのみ
与えられる。
.TP
.B .AENDI
.\"O Marks the end of an \fB.AIF\fR conditional block.
\/\fB.AIF\fR 条件ブロックの終りを示す。
.PP
.\"O .SS Loops
.SS ループ
これらの指示子はコードの部分を繰り返すことを許可する。
.\"O These directives allow you repeat portions of code.
.TP
.B .AREPEAT \fIEXPR
.PD 0
.TP
.B .AENDR
.PD 1
.br
.\"O Repeats the assemby code between the \fB.AREPEAT\fR and \fB.AENDR\fR macros
.\"O as many times as specified by the absolute expression \fIEXPR\fR.
\/\fB.AREPEAT\fR と \fB.AENDR\fR の間のアセンブリコードを
絶対式 \fIEXPR\fR で指定された回数だけ繰り返す。
.TP
.B .AWHILE \fIARG1 CMP ARG2
.PD 0
.TP
.B .AENDW
.PD 1
.br
.\"O Repeats the assembly code between the \fB.AWHILE\fR and \fB.AENDW\fR macros
.\"O as long as the \fICMP\fR conditional comparision holds true.  The format for
.\"O \fICMP\fR is the same as for \fB.AIF\fR.
\/\fB.AWHILE\fR と \fB.AENDW\fR の間のアセンブリコードを
\fICMP\fR 比較演算子の結果が true である限り繰り返す。
\fICMP\fR のフォーマットは\fB.AIF\fR のものと同じである。
.TP
.B .EXITM
.\"O Break out of the loop.
ループから抜け出す。
.\"O .SS Variables
.SS 変数
.\"O Variables can represent strings, registers or the results of expressions.
.\"O There are two kinds of variables:
変数には文字列、レジスタ、式の結果が入る。
2 種類の変数がある。

.\"O \fB\(bu\fR\ Variables defined with \fB.EQU\fR or \fB.ASSIGN\fR.  To evaluate
.\"O this kind of variable in your assembly output, simply mention its name.
.\"O These variabes are only evaluated when writing the assembly output, so they
.\"O shouldn't be used in conditional expressions or \fB.AWHILE\fR loops.     
\fB\(bu\fR\ \fB.EQU\fR か \fB.ASSIGN\fR により定義される変数。
アセンブラコードの出力においてこの種の変数の値を求めるには、
単に変数名を書けばよい。
これらの変数はアセンブラコードの出力をしているときにのみ計算されるので、
条件式や \fB.AWHILE\fR ループの中に使うべきではない。
.sp
.nf
   foo  .EQU   FLIP-64
   bar: .EQU   FLIP-64
   mov.l  foo, r0
.fi
.sp
.\"O \fB\(bu\fR\ Variables for use during preprocessing, defined with
.\"O .BR ".ASSIGNC" " or " ".ASSIGNA" .
.\"O To evaluate this kind of variable, use the prefix `\fB\e&\fR'.
\fB\(bu\fR\ 前処理をしている間に使われる変数で、
\fB.ASSIGNC\fR か \fB.ASSIGNA\fR によって定義される。
この種の変数の値を求めるには、`\fB\e&\fR' を前に付ける。
.sp
.nf		      
   opcit  .ASSIGNA  47
   .AWHILE \e&opcit GT 0
   .AENDW
.fi
.sp
.\"O Macro arguments are treated almost the same way, but to evaluate them you
.\"O use the prefix `\fB\e\fR' instead.
マクロ変数はほとんど同じ方法で扱われるが、
それらの値を求めるには、代わりに `\fB\e\fR' を前に付ける。
.TP
.B \fIPVAR\fB .EQU \fIEXPR
.\"O Assign preprocessor variable PVAR the value of the expression
.\"O EXPR.  No restrictions on redefinition.
プリプロセッサ変数 PVAR に式 EXPR の値を割り当てる。再定義には、制限はない。
.TP
.B \fIPVAR\fB .ASSIGN \fIEXPR
.\"O Like \fB.EQU\fR, but you may not redefine \fIPVAR\fB.
\/\fB.EQU\fR と似ているが、\fIPVAR\fR は再定義できない。
.TP
.B \fIPVAR\fB .ASSIGNA \fIAEXPR
.\"O Define a variable with a numeric value, for use during
.\"O preprocessing.  \fIAEXPR\fR must be an absolute
.\"O expression.  No restrictions on redefinition.
前処理の間使用され、数値を定義する。
\fIAEXPR\fR は絶対式でなくてはならない。再定義には、制限は無い。
.TP
.B \fIPVAR\fB .ASSIGNC "\fISTR\fR"
.\"O Define a variable with a string value, for use during
.\"O preprocessing.  No restrictions on redefinition.
前処理の間使用され、文字列の値を定義する。再定義には、制限はない。
.TP
.B \fIPVAR\fB .REG (\fIREGISTER\fB)
.\"O Define a variable that represents a register.  In particular, \fIREGISTER\fR
.\"O is \fBnot evaluated\fR as an expression. No restrictions on redefinition.
レジスタと同じ働きをする変数を定義する。
特に、\fIREGISTER\fR は式としては計算されない。
再定義には、制限はない。
.PP
.\"O position, that is at the left margin.  You may specify a colon after
.\"O the variable name if you wish, as in `bar' above.
これら全ての指定は、変数名として左端にある "ラベル" を受け入れる。
必要なら、上の `bar' のように、変数名の後ろにコロンを付けてもよい。
.\"O All these directives accept the variable name in the "label"
.\"O .SS Macro Definition
.SS マクロ定義
.\"O The directives \fB.MACRO\fR and \fB.ENDM\fR allow you to define your own
.\"O macros that generate assembly output.
\fB.MACRO\fR と \fB.ENDM\fR の指示子により、
アセンブラコードの出力を生成する独自のマクロを定義出来る。
.TP
.B .MACRO \fINAME
.PD 0
.TP
.B .MACRO \fINAME \fR[\fBARG\fR[\fB=\fIDEFAULT_VALUE\fR]\fB, ...\fR]
.PD 1
.\"O Begin the definition of a macro called \fINAME\fR.  If your macro
.\"O definition requires arguments, specify their names after the macro
.\"O name, separated by commas or spaces.
\fINAME\fR というマクロの定義を開始する。もしマクロの定義で引数が必要なら、
コンマかスペースで区切ってマクロの名前のあとにそれらの名前を書く。
マクロ引数のデフォルトの値は、
\/\fIARG\fB=\fIVALUE\fR というフォーマットで指定する。

.\"O When you call a macro, you can specify the argument
.\"O values either by position, or by keyword.  For example, `SUM 9, 17' is
.\"O equivalent to `SUM TO=17, FROM=9'.  Macro arguments are preprocessor
.\"O variables similar to the variables you define with
.\"O .BR .ASSIGNA " or " .ASSIGNC ", "
.\"O so you can use them in conditionals or loop control.  The only
.\"O difference is the prefix you write to evaluate
.\"O the variable: for a macro argument use `\fB\eARG\fR', but for a
.\"O preprocessor variable use `\fB\e&VAR\fR'.
マクロを呼び出すとき、引数の値をポジションかキーワードで指定できる。
たとえば、`SUM 9, 17' は `SUM TO=17, FROM=9' と同じである。
マクロ引数は
.B .ASSIGNA
や
.B .ASSIGNC
で定義した値と同等なので、
それらをループのコントロールや条件式として使える。
異なっているのは、変数の値を求めるときに接頭語として付ける記号だけである :
マクロ引数には `\fB\eARG\fR' を使い、
プリプロセッサ変数には `\fB\e&VAR\fR' を使う。
.TP
.B \fINAME\fB .MACRO
.PD 0
.TP
.B \fINAME\fB .MACRO ( \fR[\fBARG\fR[\fB=\fIDEFAULT_VALUE\fR]\fB, ...\fR]\fB )
.PD 1
.\"O An alternative form of introducing a macro definition: specify the
.\"O macro name in the label position, and any arguments
.\"O between parentheses after the name.
マクロを定義する別の形式 : ラベル位置にマクロの名前を、
名前の後のかっこ内にすべての引数を指定する。
.TP
.B .ENDM
.\"O Mark the end of a macro definition.
マクロ定義の終りの印。
.TP
.B .EXITM
.\"O Exit early from the current macro definition, or macro loop.
現在のマクロ定義や、マクロループから抜け出す。
.TP
.B \e@
.\"O This pseudo-variable represents the number of macros \fBgasp\fR  has
.\"O executed.  You may use this variable only within a macro definition.
この疑似変数は、\fBgasp\fR がマクロをいくつ実行したかを表す。
この変数はマクロ定義の中でのみ使うことができる。
.TP
.B LOCAL \fINAME\fR[\fB, \fINAME...\fR]
.\"O Generate an unique string for each \fINAME\fR argument, and replace any
.\"O instances of \fINAME\fR in macro expansions.
\fINAME\fR 毎に固有の文字列を生成し、
マクロ展開において \fINAME\fR のインスタンスを置き換える。

.\"O This allows you to write macros that define symbols without fear of conflict
.\"O between macro expansions, since the strings are different for each expansion.
文字列はマクロ展開毎に異なったものになるので、
マクロ展開の間で衝突する恐れなしに、
シンボルを定義するマクロを書くことができる。

.\"O Only available if you specify \fB\-\-alternate\fB.
これは \fB\-\-alternate\fR を指定している時のみ有効である。
.\"O .SS Data
.SS データ
.\"O These directives allow you to specify working areas of memory.
.\"O The directives that initialize memory are:
これらの指示子は、メモリのワーキングエリアを指定する。
メモリを初期化する指示子は、以下の通りである:
.TP
.B .DATA \fIEXPR\fR[\fB, \fIEXPR...\fR]
.PD 0
.TP
.B .DATA.B \fIEXPR\fR[\fB, \fIEXPR...\fR]
.TP
.B .DATA.W \fIEXPR\fR[\fB, \fIEXPR...\fR]
.TP
.B .DATA.L \fIEXPR\fR[\fB, \fIEXPR...\fR]
.PD 1
.\"O Evaluate arithmetic \fIEXPR\fR expressions, and emit the corresponding
.\"O \fBas\fR directive (labelled with \fBLAB\fR).  The unqualified \fB.DATA\fR
.\"O emits \fB.long\fR; \fB.DATA.B\fR emits \fB.byte\fR; \fB.DATA.W\fR emits
.\"O \fB.short\fR; and \fB.DATA.L\fR emits \fB.long\fR.
\fIEXPR\fR 式の数値を計算し、一致する \fBas\fR 指示子
(\fBLAB\fR でラベルされている) を発行する。
無指定の \fB.DATA\fR は\fB.long\fRを発行し、\fB.DATA.B\fR は \fB.byte\fR を、
\/\fB.DATA.W\fR は \fB.short\fR を、\fB.DATA.L\fR は \fB.long\fR を発行する。

.\"O For example, `foo .DATA 1,2,3' emits `foo: .long 1,2,3'.
例えば、`foo .DATA 1,2,3' は `foo: .long 1,2,3' を発行する。
.TP
.B .DATAB \fIREPEAT\fB, \fIEXPR
.PD 0
.TP
.B .DATAB.B \fIREPEAT\fB, \fIEXPR
.TP
.B .DATAB.W \fIREPEAT\fB, \fIEXPR
.TP
.B .DATAB.L \fIREPEAT\fB, \fIEXPR
.PD 1
.\"O Emit \fIREPEAT\fR copies of the value of the expression \fIEXPR\fR
.\"O (using the \fBas\fR directive \fB.fill\fR), being \fIREPEAT\fR an absolute
.\"O expression with an absolute value.  \fB.DATAB.B\fR repeats one-byte
.\"O values; \fB.DATAB.W\fR repeats two-byte values; and \fB.DATAB.L\fR repeats
.\"O four-byte values.  \fB.DATAB\fR without a suffix repeats four-byte
.\"O values, just like \fB.DATAB.L\fR.
(\fBas\fR 指示子 \fB.fill\fR を使って) 式 \fIEXPR\fR の値を
\/\fIREPEAT\fR 個作る。\fIREPEAT\fR は絶対値の絶対式である。
\/\fB.DATAB.B\fR は 1 byte の値を作り、
\/\fB.DATAB.W\fR は 2 byte の値を、\fB.DATAB.L\fR は 4 byte の値を作る。
サフィックス無しの \fB.DATAB\fR は、
ちょうど \fB.DATAB.L\fR と同じように 4 byte の値を作る。
.TP
.B .SDATA\ "\fISTR\fB"\fI...
.\"O String data.  Emits a concatenation of bytes (no end of string marks are
.\"O added, unlike in \fB.SDATAZ\fR) of each \fISTR\fR argument given, and
.\"O optionally separated by commas.
文字列のデータ。
(\fB.SDATAZ\fR と違い、文字列終わりの印はない) 
コンマ区切りのそれぞれの \fISTR\fR 引数の連続するバイトを発行する。
.TP
.B .SDATAB \fIREPEAT\fB,\ "\fISTR\fB"\fI...
.\"O Repeated string data.  \fIREPEAT\fR specifies how many
.\"O copies of the concatenation of every \fISTR\fR argument are emitted.
繰り返された文字列のデータ。
いくつ発行されるかを特徴付ける。
\fISTR\fR 引数を何回発行するかを、\fIREPEAT\fR で指定する。
.TP
.B .SDATAZ\ "\fISTR\fR"\fI...
.\"O Zero-terminated string data.  Like \fB.SDATA\fR, except that
.\"O a zero byte is written at the end of the string.
NUL 文字で終端された文字列のデータ。\fB.SDATA\fR と同様だが、
最後に NUL 文字一つが書かれている点が異なる。
.TP
.B .SDATAC\ "\fISTR\fR"\fI...
.\"O Count-prefixed string data.  Like \fB.SDATA\fR, but precede the string with
.\"O a leading one-byte count.  For example, `.SDATAC "HI"' generates `.byte
.\"O 2,72,73'.  Since the count field is only one byte, you can only use
.\"O \fB.SDATAC\fR for strings less than 256 bytes in length.
長さの数値が前に付いた文字列データ。
\fB.SDATA\fR と同様だが、文字列の前に 1 byte の数値がある。
例えば、`.SDATAC "HI"' は `.byte 2,72,73' を生成する。数値フィールドが
1 byte だけなので、\fB.SDATAC\fR は 256 byte 以下の長さの
文字列に対してのみ使える。
.PP
.BR .RES ", " .SRES ", " .SRESC ", " .SRESZ
.\"O Use the
.\"O .BR .RES ", " .SRES ", " .SRESC ", and " .SRESZ
.\"O directives to reserve memory and leave it uninitialized.  \fBgasp\fR
.\"O resolves these directives to appropriate calls of the GNU \fBas .space\fR
.\"O directive.
指示子はメモリを初期化せず予約しておくために使う。
\fBgasp\fR はこれらの指示子を、GNU \fBas .space\fR
指示子の適切なコールとして解決する。
.TP
.B .RES \fICOUNT
.PD 0
.TP
.B .RES.B \fICOUNT
.TP
.B .RES.W \fICOUNT
.TP
.B .RES.L \fICOUNT
.PD 1
.\"O Reserve room for \fICOUNT\fR uninitialized elements of data.  The suffix 
.\"O specifies the size of each element: \fB.RES.B\fR reserves \fICOUNT\fR bytes,
.\"O .B .RES.W
.\"O reserves \fBCOUNT\fR pairs of bytes, and
.\"O .B .RES.L
.\"O reserves
.\"O \fICOUNT\fR quartets.
\/\fICOUNT\fR 用の初期化されていないデータ要素のためのメモリを予約する。
サフィックスはそれぞれの要素の大きさを指定している :
\/\fB.RES.B\fR は \fICOUNT\fR byte を予約し、
.B .RES.W
は \fICOUNT\fR byte のペアを予約し、そして
.B .RES.L
は \fICOUNT\fR の 4 つ組を予約する。
.\"O .B .RES
.\"O without a suffix is equivalent to
.\"O .B .RES.L
サフィックス無しの
.B .RES
は
.B .RES.L
に等しい。
.TP
.B .SRES \fICOUNT
.PD 0
.TP
.B .SRES.B \fICOUNT
.TP
.B .SRES.W \fICOUNT
.TP
.B .SRES.L \fICOUNT
.PD 1
.\"O .B .SRES
.\"O is a synonym for
.\"O .BR .RES .
.B .SRES
は
.B .RES
と同義である。
.TP
.B .SRESC \fICOUNT
.PD 0
.TP
.B .SRESC.B \fICOUNT
.TP
.B .SRESC.W \fICOUNT
.TP
.B .SRESC.L \fICOUNT
.PD 1
.\"O Like \fB.SRES\fR, but reserves space for `\fICOUNT\fR+1' elements.
\/\fB.SRES\fR と同じようなものだが、`\fICOUNT\fR+1' 要素のメモリを予約する。
.TP
.B .SRESZ \fICOUNT
.PD 0
.TP
.B .SRESZ.B \fICOUNT
.TP
.B .SRESZ.W \fICOUNT
.TP
.B .SRESZ.L \fICOUNT
.PD 1
.\"O .B .SRESZ
.\"O is a synonym for
.\"O .BR .SRESC .
.B .SRESZ
は
.B .SRESC
と同義である。
.\"O .SS Listings
.SS リスト
.\"O These directives control \fBas\fR listing directives.
これらの指示子は \fBas\fR の list 指示子をコントロールする。
.TP
.B .PRINT LIST
.PD 0
.TP
.B .PRINT NOLIST
.PD 1
.\"O Emits \fB.list\fR or \fB.nolist\fR, according to its argument.
\fB.list\fR か \fB.nolist\fR をその引数に従って発行する。
.TP
.B .FORM LIN=\fILN
.PD 0
.TP
.B .FORM COL=\fICOLS
.TP
.B .FORM LIN=\fILN\fB COL=\fICOLS\fR
.PD 1
.\"O Specify the page size for assembly listings, of \fILN\fR lines and
.\"O \fICOLS\fR columns (default: 60x132).  You may specify either, or both.
.\"O Any values you may have specified in previous instances of \fB.FORM\fR do
.\"O not carry over as defaults.  Emits the 
.\"O .B .psizef
.\"O GNU \fBas\fR directive.
アセンブルリストのためのページサイズ、
\fILN\fR 行 \fICOLS\fR 桁 (デフォルトは 60x132) を指定する。
行と列の一方または両方を指定できる。
\/\fB.FORM\fR の前の例で示されたどんな値でも、デフォルトとはならない。
.B .psizef
は GNU \fBas\fR 指示子を発行する。
.TP
.B .HEADING \fISTRING
.\"O Specify \fISTRING\fR as the title of your assembly listings.  Emits
.\"O `\fB.title "\fISTRING\fB"\fR'.
\fISTRING\fR は、アセンブリリストのタイトルになる。
`\fB.title "\fISTRING\fB"\fR' を発行する。
.TP
.B .PAGE
.\"O Force a new page in the listing.  Emits \fB.eject\fR.
アセンブリリストで新しいページに強制する。\fB.eject\fR を発行する。
.\"O .SH MISCELLANEOUS COMMANDS
.SH その他のコマンド
.TP
.B .ALTERNATE
.\"O Use the alternate macro syntax henceforth in the assembly. 
アセンブリの中で別のマクロ文法をこれ以降は使用する。
.TP
.B .ORG
.\"O This command is recognized, but not yet implemented.  \fBgasp\fR
.\"O generates an error message for programs that use \fB.ORG\fR.
このコマンドは認識されるが、まだ実装されていない。\fBgasp\fR は
\/\fB.ORG\fR を使用しているプログラムに対してエラーメッセージを出す。
.TP
.B .RADIX \fIS\fR
.\"O Specify the default radix for numbers without an explicitly encoded base
.\"O (default: \fBD\fR). \fIS\fR is a case-insensitive letter:
明示的に符号化の進数が指定されていない数値について、
デフォルトの基数 (radix) を指定する (デフォルトは \fBD\fR である)。
\fIS\fR は大文字小文字を区別しない。
.RS
.TP
.B .RADIX B
.\"O Base 2.
2 進数。
.TP
.B .RADIX Q
.\"O Base 8.
8 進数。
.TP
.B .RADIX D
.\"O Base 10. 
10 進数。
.TP
.B .RADIX H
.\"O Base 16.
16 進数。
.RE
.TP
.B .EXPORT \fINAME
.PD 0
.TP
.B .GLOBAL \fINAME
.PD 1
.\"O Declare \fINAME\fR global (emits \fB.global \fINAME\fR).
\fINAME\fR をグローバルに宣言する (\fB.global \fINAME\fR を発行する)。
.TP
.B .PROGRAM
.\"O Ignored.
無視される。
.TP
.B .END
.\"O Mark end of each preprocessor file.  A warning is issued if the end of file
.\"O is reached without seeing this command.
それぞれのプリプロセッサファイルの最後の印。
ファイルの最後がこのコマンドなしで終っていた場合は、ワーニングが出る。
.TP
.B .INCLUDE "\fISTR\fB"
.\"O Preprocess the filename \fISTR\fR as if its contents appeared
.\"O where the \fB.INCLUDE\fR directive does.  Maximum include depth is 30.
ファイル名 \fISTR\fR を
\/\fB.INCLUDE\fR 指示子で指定されている項目として処理する。
インクルードの最大の深さは 30 である。
.TP
.B .ALIGN \fISIZE
.\"O Evaluate the absolute expression \fISIZE\fR, and emit
.\"O \fB.align \fIevaluated_expression\fR.
絶対式 \fISIZE\fR を計算し、
\fB.align \fIevaluated_expression\fR を発行する。
.\"O .SH GASP SYNTAX
.SH GASP の文法
.\"O Whitespace (blanks or tabs; not newlines) is partially significant, in that
.\"O it delimits up to three fields in a line.  The amount of whitespace does
.\"O not matter.
(スペースかタブで、改行ではない) 空白で、
1 行が 3 つの部分に分かれている時は特に重要である。
空白はいくつあってもよい。

.\"O \fB\(bu\fR\ First field, an optional "label", must be flush left in a line
.\"O (with no leading whitespace) if it appears at all, with an optional colon
.\"O after the label name.
\fB\(bu\fR\ 最初の部分には、
必須ではない "ラベル" が必ず左寄せ (行頭には空白がない) で書かれる。
ラベルの後ろには、必須ではないコロンが付いている。

.\"O \fB\(bu\fR\ Second field, which must appear after some whitespace,
.\"O contains a \fBgasp\fR or \fBas\fR directive.
\fB\(bu\fR\ いくつかの空白の後に 2 番目の部分があって、
そこには \fBgasp\fR か \fBas\fR 指示子を含む。

.\"O \fB\(bu\fR\ Further fields on a line are arguments to the directive,
.\"O separated by either commas or whitespace.
\fB\(bu\fR\ 行中のそれ以降の部分は指示子の引数であり、
コンマか空白で区切られている。
.\"O .SS Special syntactic markers
.SS 特別な文法の印
.\"O \fBgasp\fR recognizes a few special markers: to delimit comments, to
.\"O continue a statement on the next line, to separate symbols from other
.\"O characters, and to copy text to the output literally  (One other
.\"O special marker, `\fB\@f\fR', works only within macro definitions)
\fBgasp\fR はいくつかの特別な印を認識する: コメントの境界を定めるもの、
次の行にステートメントを続けるもの、記号をその他のキャラクタと区別するもの、
テキストを出力に直接コピーするもの (一つの特別な印としては、`\fB\@f\fR'
はマクロの定義の中のみで使われる)。

.\"O The trailing part of any source line may be a comment.  A
.\"O comment begins with the first unquoted comment character (`\fB!\fR' by
.\"O default), or an escaped or doubled comment character (`\fB\e!\fR' or
.\"O `\fB!!\fR' by default), and extends to the end of a line.  The two kinds of
.\"O comment markers lead to slightly different treatment:
どんなソースの行でも、その後ろに付いているものはコメントかもしれない。
コメントはクォートされないコメント文字 (デフォルトでは `\fB!\fR')
から始まるか、エスケープされたコメント文字や 2 文字のコメント文字
(デフォルトでは、`\fB\e!\fR' か `\fB!!\fR') で始まり、行末まで続く。
この 2 種類のコメント印は、取り扱いがわずかに違う :
.RS
.TP
.B !
.\"O A single, un-escaped comment character generates an assembly
.\"O comment in the \fBgasp\fR output.  \fBgasp\fR evaluates any preprocessor
.\"O variables (macro arguments, or variables defined with
.\"O .BR .ASSIGNA " or " .ASSIGNC )
.\"O present.  For example, a macro that begins like this
1 文字のエスケープされてないコメント文字は 
\fBgasp\fR の出力の中にアセンブラコードのコメントを生成する。
\fBgasp\fR はどの様なプリプロセッサの変数
(マクロ引数や、その前に
.B .ASSIGNA
か
.B .ASSIGNC
で定義された変数) でも計算する。
例えば、次のように始まるマクロ
.sp
.nf
   .MACRO  SUM FROM=0, TO=9
   ! \eFROM \eTO
.fi					 
.sp
.\"O issues as the first line of output a comment that records the values you
.\"O used to call the macro.
は、第 1 行で呼んだマクロの値の出力を記録して、コメントとして吐き出す。
.TP
.B \e!
.PD 0
.TP
.B !!
.PD 1
.\"O Either an escaped comment character, or a double comment character,
.\"O marks a \fBgasp\fR source comment.  \fBgasp\fR does not copy such comments to
.\"O the assembly output.
エスケープされたコメント文字か、2 文字のコメント文字は、
\fBgasp\fR のソースコメントの印である。
\fBgasp\fR はアセンブラコードの出力にこのようなコメントをコピーしない。
.RE
 
.\"O To continue a statement on the next line of the file, begin the
.\"O second line with the character `\fB+\fR'.
ファイルの次の行に記述を続けるには、2 行目の先頭に `\fB+\fR' を付ける。
.\"O Occasionally you may want to prevent \fBgasp\fR from preprocessing some
.\"O particular bit of text.  To \fBcopy literally\fR from the \fBgasp\fR source to
.\"O its output, place `\fB\e(\fR' before the string to copy, and `\fB)\fR' at the end.
時々、ある特定の文字列を \fBgasp\fR に処理させたくないことがある。
\fBgasp\fR のソースから、その出力に
\fB文字通りにコピーする\fRには、`\fB\e(\fR' をコピーしたい文字列の前に置き、
`\fB)\fR' を後ろに置く。
.\"O For example, write `\e(\e!)' if you need the characters `\fB\e!\fR' in your
.\"O assembly output.
例えば、アセンブラコードの出力に `\fB\e!\fR' 文字が欲しい時は、
`\e(\e!)' と書く。

.\"O To separate a preprocessor variable from text to appear
.\"O immediately after its value, write a single quote ('\fB'\fR').  
プリプロセッサ変数と、その直後に続く数値の文字を分離するには、
シングルクォート ('\fB'\fR') を書く。
.\"O For example, `.SDATA "\P'1"' writes a string built by concatenating the value of `P'
.\"O and the digit `1'  (You cannot achieve this by writing just `\eP1',
.\"O since `P1' is itself a valid name for a preprocessor variable)
例えば、`.SDATA "\P'1"' は変数 P の値と数値の 1 とを連結した文字列になる。
(`P1' 自身がプリプロセッサ変数の有効な名前なので、
`\eP1' と書いただけではこの結果は得られないだろう)
.\"O .SS String and numeric constants
.SS 文字列定数と数値定数
.\"O There are two ways of writing string constants: as literal
.\"O text, and by numeric byte value.  Specify a string literal between
.\"O double quotes (\fB"\fISTR\fB"\fR).  Specify an individual numeric byte value as
.\"O an absolute expression between angle brackets (\fB<\fIEXPR\fB>\fR).  Directives
.\"O that output strings allow you to specify any number of either kind of
.\"O value, in whatever order is convenient, and concatenate the result.
文字列定数を書くには、2 通りの方法がある: 
全くのテキストと数で示されたバイトの値である。
二重引用符 (\fB"\fISTR\fB"\fR) の間で完全な文字列は指定される。
不等号記号 (\fB<\fIEXPR\fB>\fR) の間で絶対式として、
個々の NumericByte 値が指定される。
文字列を出力する指示子は、どんな種類のどんな命令でも、
結果を連結するのを許可する。

.\"O You can write numeric constants either in a specific base, or in
.\"O whatever base is currently selected by the last \fB.RADIX\fR directive.
特定の進数での、あるいは最後の \fB.RADIX\fR 指示子によって現在選ばれる
どんな進数の定数でも書ける。

.\"O To write a number in a specific base, use the pattern `\fIS\fB'\fIDDD\fR': a
.\"O base specifier character \fIS\fR, followed by a single quote followed by
.\"O digits \fIDDD\fR.  The base specifier character matches those you can specify
.\"O with \fB.RADIX\fR.
特定の進数で数を書くためには、パターン `\fIS\fB'\fIDDD\fR' を使う:
進数指定文字 \fIS\fR の次にシングルクォートがあり、数字 \fIDDD\fR が続く。
進数指定文字は、\fB.RADIX\fRで指定できるものと一致する。
.\"O .SS Symbols
.SS シンボル
\fBgasp\fR は英字または、`\fB_\fR' 、`\fB$\fR' から始まり、
同様に文字または数字が続いているようなシンボルやラベル名を認識できる。

.\"O Valid symbols start with any alphabetic character, `\fB_\fR' or `\fB$\fR',
.\"O and continue with any of them or with digits.
有効なシンボルは、アルファベット・`\fB_\fR'・`\fB$\fR' から始まり、
これらの文字または数字が続く。
.\"O .SS Arithmetic Expressions
.SS 算術式
.\"O There are two kinds of expressions, depending on their result:
.\"O absolute expressions, which resolve to a constant (that is, they do
.\"O not involve any values unknown to \fBgasp\fR), and relocatable expressions,
.\"O which must reduce to the form
結果に依存した 2 つの式がある: 
結果が定数 (つまり、それらは \fBgasp\fR が知らない値を含まない) となる
絶対式と、以下の形
.sp
.nf
   \fIADDSYM\fB+\fICONST\fB-\fISUBSYM
.fi       
.sp	
.\"O where \fIADDSYM\fR and \fISUBSYM\fR are assembly symbols of unknown value, and
.\"O \fICONST\fR is a constant.
に変換できなければならない再配置可能式がある。
ここで \fIADDSYM\fR と \fISUBSYM\fR は、不明な値のアセンブラシンボルであり 
\fICONST\fR は定数である。

.\"O Arithmetic for \fBgasp\fR expressions follows very similar rules to C.
\fBgasp\fR の数値式は、C のルールにとても良く似ている。
.\"O You can use parentheses to change precedence; otherwise, arithmetic
.\"O primitives have decreasing precedence in the order of the following
.\"O list.
優先順位を変える時に括弧を使える;
そうでなければ、数値的な基本としては、次に記すような優先順位になる:

.\"O \fB\(bu\fR\ 1. Single-argument `+' (identity), `-' (arithmetic opposite), or `~'
.\"O (bitwise negation).  The argument must be an absolute expression.
\fB\(bu\fR\ 1. 一つの引数 `+' (同一の場合), `-' (算術的に反対の場合), 
あるいは `~' (ビット否定)

.\"O \fB\(bu\fR\ 2. `*' (multiplication) and `/' (division).  Both
.\"O arguments must be absolute expressions.
\fB\(bu\fR\ 2. `*' (乗算) と `/' (除算)。
引数は、絶対式でなくてはならない。

.\"O \fB\(bu\fR\ 3. `+' (addition) and `-' (subtraction).  At least one argument must
.\"O be absolute.
\fB\(bu\fR\ 3. `+' (加算) と `-' (減算)。
少なくとも一つの項は絶対式でなくてはならない。

.\"O \fB\(bu\fR\ 4. `&' (bitwise and).  Both arguments must be absolute.
\fB\(bu\fR\ 4. `&' (ビットの AND)。両方の項は、絶対式でなくてはならない。

.\"O \fB\(bu\fR\ 5. `|' (bitwise or) and `~' (bitwise exclusive or; `^' in C).
.\"O Both arguments must be absolute.
\fB\(bu\fR\ 5. `|' (ビットの OR) と、`~' (ビットの XOR。C における `^')。
両方の引数は、絶対式でなくてはならない。
.\"O .SS String Primitives
.SS 文字列の基本
.\"O You can use these primitives to manipulate strings (in the argument
.\"O field of \fBgasp\fR statements):
これらの関数を使って、
文字列 (\fBgasp\fR ステートメントの項にある) を計算できる:
.TP
.B .LEN("\fISTR\fB")
.\"O Calculate the length of string \fB"\fISTR\fB"\fR, as an absolute expression.
.\"O For example, `.RES.B .LEN("sample")' reserves six bytes of memory.
文字列 \fB"\fISTR\fB"\fR の長さを絶対式として計算する。
例えば、`.RES.B .LEN("sample")' は、
メモリの 6 byte を予約する。
.TP
.B .INSTR("\fISTR\fB", "\fISEG\fB", \fIIX\fB)
.\"O Search for the first occurrence of \fISEG\fR after position \fIIX\fR of
.\"O \fISTR\fR.  The result is -1 if \fISEG\fR does not occur in \fISTR\fR after
.\"O position \fIIX\fR.
\fISTR\fR の中で、位置 \fIIX\fR より後ろの最初に出現する \fISEG\fR を探す。
もし、\fISEG\fR が \fISTR\fR 中で、位置 \fIIX\fR より後ろになければ、
結果は -1 になる。
.TP
.\"O The substring of \fISTR\fR beginning at byte number \fISTART\fR and
.\"O extending for \fILEN\fR bytes.
.B .SUBSTR("\fISTR\fB", \fISTART\fB, \fILEN\fB)
\fISTR\fR の \fISTART\fR から始まって \fILEN\fR byte まで伸びている部分文字列。
.\"O .SH ALTERNATE MACRO SYNTAX
.SH 別のマクロ文法
.\"O When the \fB\-\-alternate\fR option is specified, an alternate macro sytax
.\"O is used by \fBgasp\fR.  This syntax reminiscent of the syntax of Phar Lap
.\"O macro assembler, but it is not meant to be a full emulation of Phar Lap or
.\"O similar assemblers.  In particular, \fBgasp\fR does not support directives
.\"O such as DB and IRP.
\fB\-\-alternate\fR オプションが指定されている時、
別のマクロ文法が \fBgasp\fR によって使われる。
この文法は、Phar Lap マクロアセンブラを想い出させるが、
これは、Phar Lap マクロのエミュレーションや、
それと似ているアセンブラであるという事を意味してはいない。
特に、\fBgasp\fR は DB や IRP のような指示子をサポートしていない。

.\"O \fB\(bu\fR\ You can use preprocessor directives without a leading `\fB.\fR'
.\"O dot.  For example, you can write `SDATA' with the same effect as .SDATA'.
\fB\(bu\fR\ プリプロセッサ指示子を `\fB.\fR' ドットを前に置かずに使える。
例えば、`SDATA' と .SDATA' を同じ効果のものとして書ける。

.\"O \fB\(bu\fR\ LOCAL is available.
\fB\(bu\fR\ LOCAL が有効になっている。

.\"O \fB\(bu\fR\ You can write strings delimited like "STRING", 'STRING', or <STRING>
\fB\(bu\fR\ 文字列の境界を、
"STRING", 'STRING', <STRING> のように書ける。

.\"O \fB\(bu\fR\ To include any single character literally in a string (even if the
.\"O character would otherwise have some special meaning), you can
.\"O prefix the character with `\fB!\fR'.  For example, `"hello !"world!"".
\fB\(bu\fR\ 文字列の中のどんな文字も文字通りに取り込むために、
(たとえその文字が他に特別な意味を持っていたとしても)
`\fB!\fR' を文字の前につけられる。例えば、`"hello !"world!""

.\"O \fB\(bu\fR\ You can write \fB%\fIEXPR\fR to evaluate the expression
.\"O \fIEXPR\fR and use the result as a string.
\fB\(bu\fR\ \fB%\fIEXPR\fR を \fIEXPR\fR 式の数値を求めるために書くことが出来、
その結果は文字列として使用できる。

.\"O .SH EXAMPLES
.SH 例
.\"O If we feed \fBgasp\fR with this
\fBgasp\fR に
.sp
.nf
           .MACRO  saveregs from=8 to=14
   count   .ASSIGNA \efrom
           ! save r\efrom..r\eto
	   .AWHILE  \e&count LE \eto
	   mov     r\e&count,@-sp
   count   .ASSIGNA  \e&count + 1
           .AENDW
	   .ENDM

           saveregs from=12

   bar:    mov     #H'dead+10,r0
   foo     .SDATAC "hello"<10>
           .END
.fi
.sp
.\"O it generates this GNU \fBas\fR code:
を与えると、下の GNU \fBas\fR のコードを生成する:

.sp
.nf
           ! save r12..r14
	   mov     r12,@-sp
	   mov     r13,@-sp
	   mov     r14,@-sp

   bar:    mov     #57005+10,r0
   foo:    .byte   6,104,101,108,108,111,10
.fi
.\"O .SH SEE ALSO
.SH 関連項目
 \fBas\fR(1)
.\"O .SH NOTES
.SH 注意
.\"O Report bugs to <bug-gnu-utils@gnu.org> and <hjl@lucon.org>
バグは <bug-gnu-utils@gnu.org> と <hjl@lucon.org> にレポートして欲しい。
.br
.\"O Man page by Ragnar Hojland Espinosa <ragnar@ragnar-hojland.com>
man ページは Ragnar Hojland Espinosa
<ragnar@ragnar-hojland.com> によって書かれた。
