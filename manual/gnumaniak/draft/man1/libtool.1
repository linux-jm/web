.\" You may copy, distribute and modify under the terms of the LDP General
.\" Public License as specified in the LICENSE file that comes with the
.\" gnumaniak distribution
.\"
.\" The author kindly requests that no comments regarding the "better"
.\" suitability or up-to-date notices of any info documentation alternative
.\" is added without contacting him first.
.\"
.\" (C) 1999-2002 Ragnar Hojland Espinosa <ragnar@ragnar-hojland.com>
.\"
.\"	libtool man page
.\"	man pages are NOT obsolete!
.\"	<ragnar@ragnar-hojland.com>
.\"
.\" Japanese Version Copyright (c) 2000-2003 Yuichi SATO
.\"         all rights reserved.                                               
.\" Translated Mon Jun  5 02:20:58 JST 2000
.\"         by Yuichi SATO <sato@complex.eng.hokudai.ac.jp>
.\" Updated & Modified Sat Mar  1 23:41:22 JST 2003
.\"         by Yuichi SATO <ysato444@yahoo.co.jp>
.\"
.\"WORD:	build			ビルド
.\"WORD:	compiler		コンパイラー
.\"WORD:	canonical		標準
.\"WORD:	executable		実行ファイル
.\"WORD:	design			設計
.\"WORD:	dlopen			ダイナミックロード
.\"WORD:	dlopening support	ダイナミックロード機能
.\"WORD:	global			大域
.\"WORD:	library			ライブラリ
.\"WORD:	shared			共有
.\"WORD:	static			静的
.\"WORD:	partial linking		部分リンク
.\"
.TH LIBTOOL 301 "June 2002" "libtool 1.4.2"
.\"O .SH NAME
.\"O \fBlibtool\fR \- compile, build, install and uninstall libraries
.SH 名前
\fBlibtool\fR \- ライブラリのコンパイル・ビルド・
インストール・アンインストールをする
.\"O .SH SYNOPSIS
.SH 書式
.B libtool
.RB [ \-n ]
.RB [ \-\-config ]
.RB [ \-\-debug ]
.RB [ \-\-dry\-run ]
.RB [ \-\-features ]
.RB [ \-\-finish ]
.RB [ \-\-mode=\fIMODE ]
.RB [ \-\-quiet ] 
.RB [ \-\-silent ]
.RI [ MODE\-ARGS... ]

.\"O Link Mode: [\fB\-l\fINAME\fR] [\fB\-o \fI OUTPUT\-FILE\fR] [\fB\-L\fILIBDIR\fR]
リンクモード: [\fB\-l\fINAME\fR] [\fB\-o \fI OUTPUT\-FILE\fR] [\fB\-L\fILIBDIR\fR]
[\fB\-R \fILIBDIR\fR]
.RB [ \-all\-static ]
.RB [ \-avoid\-version ]
.RB [ "\-dlopen \fIFILE" ]
.RB [ "\-dlpreopen \fIFILE" ]
.RB [ \-export\-dynamic ]
.RB [ "\-\-export\-symbols \fIFILE" ]
.RB [ "\-\-export\-symbols \fIREGEX" ]
.RB [ \-\-module ]
.RB [ \-no\-undefined ]
.RB [ "\-release \fIRELEASE" ]
.RB [ "\-rpath \fILIBDIR" ]
.RB [ \-static ]
.RB [ "\-version\-info \fICURRENT\fR[\fB:\fIREVISION\fR[\fB:\fIAGE" ]]

.\"O Execute Mode: [\fB\-dlopen \fIFILE\fR]
実行モード: [\fB\-dlopen \fIFILE\fR]

.BR libtool " [" \-\-features "] [" \-\-help "] [" \-\-version ]
.\"O .SH DESCRIPTION
.SH 説明
.\"O .B libtool
.\"O simplifies the complexity of compiling, linking, installing and unistalling
.\"O both static and shared libraries so that the complete functionality of
.\"O different platforms is available via a generic interface but nasty quirks
.\"O are hidden from the programmer.
.B libtool
は静的ライブラリや共有ライブラリの
コンパイル・リンク・インストール・アンインストールの複雑さを簡略化する。
異なるプラットフォームそれぞれで、完全な機能を
統一的なインターフェースを介して使用することができ、
プラットフォーム固有の厄介な癖はプログラマーから隠蔽される。

.\"O .B libtool
.\"O can operate in six modes: compile, execute, link, finish, install, uninstall.
.B libtool
はコンパイル・実行・リンク・フィニッシュ・インストール・アンインストール
という 6 つのモードで動作できる。
.\"O .SS Compile Mode
.SS コンパイルモード
.\"O For \fBcompile\fR mode, \fIMODE\-ARGS\fR is a compiler command to be used in
.\"O creating a standard object file.  These arguments should begin with
.\"O the name of the C compiler, and contain the \fB\-c\fR compiler flag so that
.\"O only an object file is created.
\fBコンパイル\fRモードの場合、\fIMODE\-ARGS\fR は
標準的なオブジェクトファイルを作成するために使われる
コンパイラコマンドである。
これらの引き数は C コンパイラの名前で始まり、
オブジェクトファイルのみを作成するよう、
\fB\-c\fR コンパイラフラグを含んでいなければならない。

.\"O \fBlibtool\fR determines the name of the output file by removing the
.\"O directory component from the source file name, then substituting the C
.\"O source code suffix `.c' with the library object suffix, `.lo'.
\fBlibtool\fR は出力ファイルの名前を決定するとき、
ソースファイル名からディレクトリ構成要素を取り除き、
それから C 言語のソースコードの拡張子 `.c' をライブラリオブジェクトの
拡張子 `.lo' に置き換えるという方法を用いる。

.\"O If shared libraries are being built, any necessary PIC generation
.\"O flags are substituted into the compilation command.  The \fB\-static\fR
.\"O option will cause \fBlibtool\fR to generate `.o' files even if it was
.\"O configured with \fB\-\-disable\-static\fR
共有ライブラリがビルドされる場合、必要な PIC 作成フラグすべてが
コンパイルコマンドに挿入される。
\fB\-static\fR オプションを指定すると、たとえ \fB\-\-disable\-static\fR が
設定されていたとしても、\fBlibtool\fR は `.o' ファイルを作成する。
 
.\"O The \fB\-o\fR option is emulated on platforms that don't support it directly
.\"O (by locking and moving the object files generated by the compiler) so you
.\"O can use the usual syntax:
\fB\-o\fR オプションが直接サポートされていないプラットフォーム上では
(コンパイラによって作成されたオブジェクトファイルのロックと移動により)
エミュレートを行う。
したがって、以下のような通常の構文を使うことができる。
.sp
.RS
.nf
lightside:% libtool cc -c foo/x.c -o foo/x.lo
.fi
.RE
.sp
.\"O If the platform doesn't support \fB\-c\fR and \fB\-o\fR then it is
.\"O impossible to build `foo/x.lo' without overwriting an old `foo/x.o', and
.\"O that in this case you must make sure `foo/x.o' is (re)built after `foo/x.lo'
プラットフォームが \fB\-c\fR と \fB\-o\fR オプションをサポートしていない場合、
古い `foo/x.o' を上書きせずに `foo/x.lo' をビルドすることはできない。
この場合、`foo/x.o' が `foo/x.lo' の後に (再) ビルドされることを
確かめておかなければならない。

.\"O .SS Link Mode
.SS リンクモード
.\"O \fBlink\fR mode links together object files (including library objects)
.\"O to form another library or to create an executable program.
\fBリンク\fRモードはライブラリや実行可能プログラムを作成するために、
オブジェクトファイル (ライブラリオブジェクトも含む) をリンクする。

.\"O \fIMODE\-ARGS\fR consist of a command using the C compiler to create an
.\"O output file \fIOUTPUT\-FILE\fR (with the \fB\-o\fR flag) from several object
.\"O files.  The type of file depends on the extension of \fIOUTPUT\-FILE\fR:
\fIMODE\-ARGS\fR は、C コンパイラがオブジェクトファイルから
(\fB\-o\fR フラグにより) 出力ファイル \fIOUTPUT\-FILE\fR を作成する
ときに使用するコマンドで構成される。
以下のように、ファイルの形式は \fIOUTPUT\-FILE\fR の拡張子に依存する。
.TP
.B .la
.\"O A libtool library is created, which must be built only from library objects
.\"O (`.lo' files).  The \fB\-rpath\fR option is required.  In the current
.\"O implementation, libtool libraries may not depend on other uninstalled
.\"O libtool libraries.
libtool ライブラリを作成する。
このライブラリはライブラリオブジェクト (`.lo' ファイル) 
のみからビルドされなければならない。
\fB\-rpath\fR オプションが必要である。
現在の実装では、libtool ライブラリはアンインストールされた他の
libtool ライブラリに依存できない。
.TP
.B .a
.\"O A standard library is created using \fBar\fR(1) and possibly \fBranlib\fR(1).
\fBar\fR(1) と (あるいは) \fBranlib\fR(1) を使って
標準ライブラリが作成される。
.TP
.B .o .lo
.\"O A reloadable object file is created from the input files (generally using
.\"O `ld \-r').  This method is often called ``partial linking''.
(一般には `ld \-r' を使うことで) 入力ファイルから
再ロード可能なオブジェクトファイルが作成される。
この手法は ``部分リンク'' と呼ばれることが多い。
.TP
.B other
.\"O An executable program is created.
実行可能なプログラムが作成される。
.\"O .SS Execute Mode
.SS 実行モード
.\"O For \fBexecute\fR mode, the library path environment variable is
.\"O automatically set (and modified according \fB\-dlopen\fR), then a program
.\"O is executed.
\fB実行\fRモードでは、ライブラリパスの環境変数が自動的にセットされ
(そして \fB\-dlopen\fR によって修正されて)、プログラムが実行される。

.\"O The first of the \fIMODE-ARGS\fR is treated as a program name, with the
.\"O rest as arguments to that program.
一番目の \fIMODE-ARGS\fR はプログラム名として扱われ、
残りはプログラムの引数として扱われる。

.\"O If any of the arguments are libtool executable wrappers, then they are
.\"O translated into the name of their corresponding uninstalled binary, and
.\"O any of their required library directories are added to the library path.
引数の中のどれかが libtool 実行ファイルのラッパーであった場合、
その引数はそれぞれ対応するアンインストール済みバイナリの名前に変換される。
このとき、必要とされるライブラリディレクトリがライブラリパスに加えられる。
.\"O .SS Install Mode
.SS インストールモード
.\"O In \fBinstall\fR mode, libtool interprets \fIMODE\-ARGS\fR as an installation
.\"O command beginning with \fBcp\fR(1), or a BSD-compatible \fBinstall\fR(1)
.\"O program.
\fBインストール\fRモードでは、\fIMODE\-ARGS\fR を
\fBcp\fR(1) もしくは BSD-互換の \fBinstall\fR(1) から始まる
インストールコマンドとして解釈する。

.\"O The rest of the \fBMODE\-ARGS\fR are interpreted as arguments to that
.\"O command.
残りの \fBMODE\-ARGS\fR は、インストールコマンドの
引数として解釈される。

.\"O The command is run, and any necessary unprivileged post-installation
.\"O commands are also completed.
このコマンドは実行され、
インストール後の処理に必要な非特権コマンドもすべて完了する。
.\"O .SS Finish Mode
.SS フィニッシュモード
.\"O \fBfinish\fR mode helps system administrators install libtool libraries
.\"O so that they can be located and linked into user programs.
\fBフィニッシュ\fRモードは、システム管理者の libtool ライブラリ
インストール作業を補助し、 libtool ライブラリの探索およびユーザー
プログラムへのリンクができるようにする。

.\"O Each \fIMODE\-ARG\fR is interpreted as the name of a library directory.
.\"O Running this command may require superuser privileges, so the
.\"O \fB\-\-dry\-run\fR option may be useful.
\fIMODE\-ARG\fR はライブラリディレクトリ名として解釈される。
このコマンドを実行するのにはスーパーユーザー特権が必要なため、
\fB\-\-dry\-run\fR オプションを使うと便利だろう。
.\"O .SS Uninstall Mode
.SS アンインストールモード
.\"O This mode deletes installed libraries (and other files).
このモードではインストールされたライブラリ (もしくはファイル) を削除する。

.\"O The first \fIMODE\-ARG\fR is the name of the program to use to delete files
.\"O (typically `/bin/rm').
一番目の  \fIMODE\-ARG\fR はファイルを削除するためのプログラム名
(一般には `/bin/rm') である。

.\"O The remaining \fIMODE\-ARGS\fR are either flags for the deletion program
.\"O (beginning with a `\-'), or the names of files to delete.
残りの \fIMODE\-ARGS\fR は削除プログラムの (`\-' で始まる) フラグもしくは、
削除するファイルの名前である。
.\"O .SH OPTIONS
.SH オプション
.\"O .SS Global Options
.SS グローバルオプション
.TP
.B \-\-config
.\"O Display libtool's configuration variables and exit.
libtool の設定変数を表示して終了する。
.TP
.B \-\-debug
.\"O Enables shell script trace mode, writing to standard output.
シェルスクリプトのトレースモードを有効にして、標準出力に書き出す。
.TP
.B \-n, \-\-dry\-run
.\"O Don't create, modify, or delete any files, just show what commands
.\"O would be executed by \fBlibtool\fR.
ファイルの作成・修正・削除を行わず、\fBlibtool\fR によってどのような
コマンドが実行されるかを表示する。
.TP
.B \-\-features
.\"O Displays basic features regarding libtool and whether static and shared
.\"O library support is enabled.
.\"O sato:
.\"O sato: この後にも features オプションの説明があったりする...
.\"O sato:
libtool の基本的な特徴を表示する。
また静的ライブラリと共有ライブラリが有効になっているかを表示する。
.TP
.B \-\-finish
.\"O Same as \fB\-\-mode=finish\fR.
\fB\-\-mode=finish\fR と同じ。
.TP
.B \-\-mode=\fIMODE
.\"O Use \fIMODE\fR as the operation mode.  By default, the
.\"O operation mode is inferred from the contents of \fIMODE\-ARGS\fR.
.\"O If \fIMODE\fR is specified, it must be one of the following:
\fIMODE\fR をオペレーションモードとする。
デフォルトでは、オペレーションモードは \fIMODE\-ARGS\fR の内容から推論される。
\fIMODE\fR を指定する場合、次のうちの一つでなければならない。
.RS
.TP
.B compile
.\"O Compile a source file into a libtool object.
ソースファイルを libtool オブジェクトにコンパイルする。
.TP
.B execute
.\"O Automatically set the library path so that another program
.\"O can use uninstalled libtool-generated programs or libraries.
他のプログラムがアンインストールされたプログラムやライブラリ
(libtool により作成されたもの) を使うことができるように、
ライブラリパスを自動的に設定する。
.TP
.B finish
.\"O Complete the installation of libtool libraries on the system.
システムへの libtool ライブラリのインストールを完了する。
.TP
.B install
.\"O Install libraries or executables.
ライブラリや実行ファイルをインストールする。
.TP
.B link
.\"O Create a library or an executable.
ライブラリや実行ファイルを作成する。
.TP
.B uninstall
.\"O Delete installed libraries or executables.
ライブラリや実行ファイルを削除する。
.RE
.TP
.B \-\-features
.\"O Display libtool configuration information and exit.  This provides
.\"O a way for packages to determine whether shared or static libraries will be
.\"O built.
libtool の設定情報を表示して終了する。
このオプションを使うと、パッケージは共有ライブラリと静的ライブラリの
どちらを作るか決定できる。
.TP
.B "\-\-help"
.\"O Print a usage message on standard output and exit successfully.  If
.\"O \fB\-\-mode=\fIMODE\fR is specified, help on selected mode is printed.
使用法のメッセージを標準出力に表示して、正常終了する。
\fB\-\-mode=\fIMODE\fR が指定されている場合は、
指定されたモードについてのヘルプが表示される。
.TP
.B "\-\-version"
.\"O Print version information on standard output then exit successfully.
バージョン情報を標準出力に表示して、正常終了する。
.\"O .SS Link Mode Options
.SS リンクモードオプション
.TP
.B -l\fINAME
.\"O \fIOUTPUT\-FILE\fR requires the installed library \fBlib\fINAME\fR.  This
.\"O option is required even when \fIOUTPUT\-FILE\fR is not an executable.
\fIOUTPUT\-FILE\fR はインストール済みの
ライブラリ \fBlib\fINAME\fR を必要とする。
このオプションは \fIOUTPUT\-FILE\fR が実行ファイルでなくても必要とされる。
.TP
.B \-o \fIOUTPUT\-FILE
.\"O Create \fIOUTPUT\-FILE\fR from the specified objects and libraries.
指定したオブジェクトとライブラリから \fIOUTPUT\-FILE\fR を作成する。
.TP
.B \-L\fILIBDIR
.\"O Search \fILIBDIR\fR for required libraries that have already been installed.
必要なインストール済みライブラリを \fILIBDIR\fR から検索する。
.TP
.B \-R \fILIBDIR
.\"O If \fIOUTPUT\-FILE\fR is an executable, add \fILIBDIR\fR to its run-time
.\"O path.  If \fIOUTPUT-FILE\fR is a library, add `-RLIBDIR' to its
.\"O \fBDEPENDENCY_LIBS\fR so that, whenever the library is linked into an
.\"O executable, \fILIBDIR\fR will be added to its run-time path.
\fIOUTPUT\-FILE\fR が実行ファイルの場合は \fILIBDIR\fR を実行時パスに加える。
\fIOUTPUT\-FILE\fR がライブラリの場合は 
`-RLIBDIR' を \fBDEPENDENCY_LIBS\fR に加える。
これは、そのライブラリが実行ファイルにリンクされるときに必ず
\fILIBDIR\fR を実行ファイルの実行時パスに加えるためである。
.TP
.B \-all\-static
.\"O If \fIOUTPUT\-FILE\fR is a program, then do not link it against any
.\"O shared libraries at all.  If \fIOUTPUT-FILE\fR is a library, then only
.\"O create a static library.
\fIOUTPUT\-FILE\fR がプログラムの場合は、
そのプログラムをどの共有ライブラリともリンクさせない。
\fIOUTPUT\-FILE\fR がライブラリの場合は静的ライブラリを作成するのみである。
.TP
.B \-avoid\-version
.\"O Tries to avoid using any kind of versioning (no version info is stored and
.\"O no symbolic links are created).  This option has no effect on platforms which
.\"O require versioning.
どのような種類のバージョニングも行わない
(バージョン情報は組み込まれず、シンボリックリンクも作られない)。
このオプションはバージョニングを必要とするプラットホーム上では働かない。
.TP
.B \-dlopen \fIFILE
.\"O Same as \fB\-dlpreopen \fIFILE\fR, if native dlopening is not
.\"O supported on the host platform or if the executable is linked using
.\"O \fB\-static\fR or \fB\-all\-static\fR.  Otherwise, no effect.
ホストプラットホーム上でネイティブな
ダイナミックロードがサポートされていない場合や、
実行ファイルが \fB\-static\fR や \fB\-all\-static\fR を
使ってリンクされる場合は、\fB\-dlpreopen \fIFILE\fR と同じ。
それ以外の場合は何も影響を及ぼさない。

.\"O If \fIFILE\fR is `self', then libtool will make sure that the executable can
.\"O \fBdlopen\fR(3) itself by using \fB\-export\-dynamic\fR or \fB\-dlpreopen\fR.
\fIFILE\fR が `実行ファイル自身' であった場合、
libtool は実行ファイルが \fB\-export\-dynamic\fR や
\fB\-dlpreopen\fR を使って自らを \fBdlopen\fR(3) できるかを確かめる。
.TP
.B \-dlpreopen \fIFILE
.\"O Link \fIFILE\fR into the output program, and add its symbols to
.\"O \fBLT_PRELOADED_SYMBOLS\fR.
\fIFILE\fR を出力プログラムにリンクし、そのシンボルを
\fBLT_PRELOADED_SYMBOLS\fR に加える。

.\"O If \fIFILE\fR is `self', then the symbols of the output program itself will
.\"O be added to \fBLT_PRELOADED_SYMBOLS\fR.
\fIFILE\fR が `出力プログラム自身' であった場合、
出力プログラム自身のシンボルが \fBLT_PRELOADED_SYMBOLS\fR に加えられる。
.TP
.B \-export\-dynamic
.\"O Allow symbols from \fIOUTPUT\-FILE\fR to be resolved with \fBdlsym\fR(3).
\fIOUTPUT\-FILE\fR のシンボルを \fBdlsym\fR(3) を使って解決できるようにする。
.TP
.B \-export\-symbols \fIFILE
.\"O On platforms which support it, the linker will only export symbols listed in
.\"O \fIFILE\fR.  The name of \fIFILE\fR must end in `.sym' and contain on symbol
.\"O per line.  By default all symbols are exported.
これをサポートしているプラットホーム上では、
リンカは \fIFILE\fR にリストされているシンボルのみをエクスポートする。
\fIFILE\fR の名前は `.sym' で終っていなければならず、
1 行に 1 つのシンボルを含んでいなければならない。
デフォルトではすべてのシンボルがエクスポートされる。
.TP
.B \-export\-symbols\-regex \fIREGEX
.\"O As \fB\-export\-symbols\fR, except that only symbols that match the
.\"O \fIREGEX\fR \fBregex\fR(7) are exported.
\fIREGEX\fR \fBregex\fR(7) にマッチするシンボルのみがエクスポートされる以外は
\fB\-export\-symbols\fR と同じ。
.TP
.B \-module
.\"O Creates a library that can be dlopened.  Module names don't need to be
.\"O prefixed with `lib', however in order to prevent name clashes `libname' and
.\"O `name' must not be used at the same time in your package.
ダイナミックロードできるライブラリを作成する。
モジュール名は `lib' で始まる必要はないが、
名前の衝突を避けるため `libname' と `name' はパッケージの中で
同時に使用すべきではない。
.TP
.B \-no\-undefined
.\"O Declare that \fIOUTPUT\-FILE\fR does not depend on any other libraries.
.\"O Some platforms cannot create shared libraries that depend on other
.\"O libraries.
\fIOUTPUT\-FILE\fR が他のライブラリに依存していないことを宣言する。
他のライブラリに依存する共有ライブラリを作れないプラットホームもある。
.TP
.B \-release \fIRELEASE
.\"O Specify that the library was generated by release \fIRELEASE\fR of your
.\"O package, so that users can easily tell which versions are newer
.\"O than others.  Be warned that no two releases of your package will
.\"O be binary compatible if you use this flag.  If you want binary
.\"O compatibility, use the \fB\-version\-info\fR flag.
ライブラリがパッケージのリリース \fIRELEASE\fR で作られたことを指定する。
これによって、ユーザーはどのバージョンが他のものより新しいかを
簡単に判断できる。
このフラグを使うと、パッケージの各リリースのいかなるペアの間にも
バイナリ互換はなくなることに注意せよ。
バイナリ互換にしたい場合は、\fB\-version\-info\fR フラグを使うこと。
.TP
.B \-rpath \fILIBDIR
.\"O If \fIOUTPUT\-FILE\fR is a library, it will eventually be installed in
.\"O \fILIBDIR\fR.
\fIOUTPUT\-FILE\fR がライブラリの場合、
最終的に \fILIBDIR\fR にインストールされる。
.TP
.B \-static
.\"O If \fIOUTPUT\-FILE\fR is a program, then do not link it against any
.\"O uninstalled shared libtool libraries.  If \fIOUTPUT\-FILE\fR is a
.\"O library, then only create a static library.
\fIOUTPUT\-FILE\fR がプログラムの場合、
アンインストールされた共有 libtool ライブラリはリンクしない。
\fIOUTPUT\-FILE\fR がライブラリの場合、
静的ライブラリを作成するのみである。
.TP
.B \-version\-info \fICURRENT\fR[\fB:\fIREVISION\fR[\fB:\fIAGE\fR]]
.\"O If \fIOUTPUT\-FILE\fR is a libtool library, use interface version
.\"O information \fICURRENT\fR, \fIREVISION\fR, and \fIAGE\fR to build it
.\"O Do \fBnot\fR use this flag to specify package release information, rather
.\"O see the \fR\-release\fB flag.
\fIOUTPUT\-FILE\fR が libtool ライブラリであるとき、
ライブラリをビルドするためにインターフェースバージョン情報
\fICURRENT\fR, \fIREVISION\fR, \fIAGE\fR を使う。
パッケージのリリース情報を指定するために、
このオプションを使っては\fBいけない\fR。
むしろ \fB\-release\fR フラグを参照すべきである。
.\"O .SS Execute Mode Options
.SS 実行モードオプション
.TP
.B \-dlopen \fIFILE
.\"O Add the directory containing \fIFILE\fR to the library path.
\fIFILE\fR を含んでいるディレクトリをライブラリパスに加える。
.\"O .SH VERSIONING
.SH バージョニング
.\"O .B libtool
.\"O has it's own versioning system for shared libraries. If you want to use this
.\"O system, you must use the \fB\-version\-info\fR option.  This option accepts
.\"O an argument of the form \fICURRENT\fR[\fB:\fIREVISION\fR[\fB:\fIAGE\fR]]
.B libtool
は共有ライブラリ用に独自のバージョニングシステムを持っている。
このシステムを使いたい場合は、\fB\-version\-info\fR オプションを
使わなければならない。
このオプションは
\fICURRENT\fR[\fB:\fIREVISION\fR[\fB:\fIAGE\fR]]
という形式の引数を受け付ける。
.TP
.I CURRENT
.\"O Interface version, understanding interface as anything visible to the
.\"O "outside" world: variables, function prototypes, output format, etc.
インターフェースのバージョン。インターフェースとは
"外側" の世界に見えるすべてのもので、
変数・関数プロトタイプ・出力形式などである。
.TP
.I REVISION
.\"O Implementation version, relative to \fICURRENT\fR version.
\fICURRENT\fR からの相対値で与える実装のバージョン。
.TP
.I AGE
.\"O The difference between the newest and oldest interfaces that this
.\"O library implements.  In other words, the library implements all the
.\"O interface numbers in the range from `\fICURRENT \- \fIAGE\fR' to
.\"O \fICURRENT\fR, and any executable can use the library if it has been linked
.\"O against a library in this range.
このライブラリが実装している最新のインターフェースと
最古のインターフェースとの違い。
言い替えると、このライブラリは `\fICURRENT \- \fIAGE\fR' から
\fICURRENT\fR までの範囲のすべてのインターフェース番号を実装していて、
このバージョンの範囲にあるライブラリに対して過去にリンクされた
すべての実行ファイルは、このライブラリを使うことができる、
ということである。
.PP
.\"O If either \fIREVISION\fR or \fIAGE\fR are omitted, they default to 0.  Also
.\"O note that \fIAGE\fR must be less than or equal to the \fICURRENT\fR
.\"O interface number.  If two libraries have identical \fICURRENT\fR and \fIAGE\fR
.\"O numbers, then the dynamic linker chooses the library with the greater
.\"O \fIREVISION\fR.
\fIREVISION\fR と \fIAGE\fR が省略された場合のデフォルトは 0 である。
\fIAGE\fR は \fICURRENT\fR インターフェース番号より小さいか
等しくなければならないことにも注意すること。
2 つのライブラリが同一の \fICURRENT\fR 番号と \fIAGE\fR 番号であるとき、
ダイナミックリンカは大きい \fIREVISION\fR 番号のライブラリを選択する。

.\"O Some versioning guidelines:
バージョニングのガイドライン：

.\"O \fB\(bu\ 1.\fR Start with version information of `0:0:0' for each libtool
.\"O library.
\fB\(bu\ 1.\fR それぞれの libtool ライブラリについて
`0:0:0' というバージョン情報から始めなさい。

.\"O \fB\(bu\ 2.\fR Update the version information only immediately before a public
.\"O release of your software.  More frequent updates are unnecessary,
.\"O and only guarantee that the current interface number gets larger
.\"O faster.
\fB\(bu\ 2. \fR バージョン情報を更新するのは
ソフトウェアの公開リリースの直前だけにしなさい。
頻繁な更新は不必要であり、現在のインターフェース番号が大きくなるのを
早くするだけである。

.\"O \fB\(bu\ 3.\fR If the library source code has changed at all since
.\"O the last update, then increment \fIREVISION\fR (\fIC\fB:\fIR\fB:\fIA\fR
.\"O becomes \fIC\fB:\fIR+1\fB:A\fR). 
\fB\(bu\ 3.\fR 前回の更新からライブラリのソースコードが
すっかり変更されたなら、\fIREVISION\fR を増加させなさい
(\fIC\fB:\fIR\fB:\fIA\fR が \fIC\fB:\fIR+1\fB:\fIA\fR になる)。

.\"O \fB\(bu\ 4.\fR If any interfaces have been added, removed, or changed since the
.\"O last update, increment \fICURRENT\fR, and set \fIREVISION\fR to 0.
\fB\(bu\ 4.\fR 前回の更新からインターフェースが
追加・削除・変更されたなら、\fICURRENT\fR を増加させ、\fIREVISION\fR を
0 にしなさい。

.\"O \fB\(bu\ 5.\fR If any interfaces have been added since the last public release,
.\"O then increment \fIAGE\fR.
\fB\(bu\ 5.\fR 前回の公開リリースからインターフェースが
追加されたなら、\fIAGE\fR を増加させなさい。

.\"O \fB\(bu\ 6.\fR If any interfaces have been removed since the last
.\"O public release, then set \fIAGE\fR to 0.
\fB\(bu\ 6.\fR 前回の公開リリースからインターフェースが
削除されたなら、\fIAGE\fR を 0 にしなさい。

.\"O If you want to encode the package version in the library name, or use
.\"O another versioning system without conflicting with \fBlibtool\fR's
.\"O versioning, use \fB\-release\fR.  `libbfd.so.2.7.0.2' for example, comes with
.\"O binutils\-2.7.0.2 and clearly conflicts with \fBlibtool\fR's versioning.  We
.\"O can use `\-release 2.7.0' and end up with `libbfd\-2.7.0.so.0.0.0' which is ok.
パッケージバージョンをライブラリ名にエンコードしたい場合や、
\fBlibtool\fR のバージョニングと衝突せずに
他のバージョニングシステムを使いたい場合は、\fB\-release\fR を使うこと。
たとえば binutils\-2.7.0.2 に付属する `libbfd.so.2.7.0.2' は
\fBlibtool\fR のバージョニングと明らかに衝突する。
`\-release 2.7.0' を使えば `libbfd\-2.7.0.so.0.0.0' で終ることができる。

.\"O Note that libraries with different \fICURRENT\fR version, and libraries with
.\"O different \fB\-release\fR, will be binary incompatible.
異なる \fICURRENT\fR バージョンのライブラリや
異なる \fB\-release\fR のライブラリはバイナリ非互換であろう。
.\"O .SH INTERFACE DESIGN
.SH インターフェースの設計
.\"O Writing a good library interface takes practice and thorough understanding
.\"O of the problem that the library is intended to solve.  If you design a good
.\"O interface, it won't have to change often, you won't have to keep updating
.\"O documentation, and clients won't have to keep relearning how to use the
.\"O library. 
良いライブラリインターフェースを書くには、
練習とライブラリが解決しようとしている問題に対する徹底的な理解が必要である。
良いインターフェースを設計すれば、
頻繁に変更する必要はなく、ドキュメントを更新し続ける必要もなく、
クライアントがライブラリの使い方を再び勉強し続ける必要もないだろう。

.\"O Some design guidelines:
設計に対するガイドラインをいくつか示す：

.\"O \fB\(bu\fR Plan ahead
.\"O .br
.\"O Try to make every interface minimal, so that you won't need to delete entry
.\"O points very often.
\fB\(bu\fR 前もって計画を立てる
.br
エントリーポイントを頻繁に削除する必要がないように、
それぞれのインターフェースを最小にするようにしなさい。

.\"O \fB\(bu\fR Avoid interface changes
.\"O .br
.\"O If you must redesign an interface, try to leave compatibility functions
.\"O behind so that clients don't need to rewrite their existing code.
\fB\(bu\fR インターフェースの変更を避ける
.br
もしインターフェースを再設計する必要があるならば、
クライアントが既に存在するコードを書き直す必要がないように、
互換性のある関数も残しておくようにしなさい。

.\"O \fB\(bu\fR Use opaque data types
.\"O .br
.\"O The fewer data type definitions a client has access to, the
.\"O better.  If possible, design your functions to accept a generic
.\"O pointer (which you can cast to an internal data type), and provide
.\"O access functions rather than allowing the client to directly
.\"O manipulate the data.  That way, you have the freedom to change the
.\"O data structures without changing the interface. 
\fB\(bu\fR 見えないデータタイプを使う
.br
クライアントがアクセスする必要のあるデータタイプの定義は少ない程良い。
可能ならば、関数がジェネリックポインタ
(内部データタイプにキャストすることが可能) を
受け付けるように設計しなさい。
クライアントに直接データを操作させるよりは、
アクセス関数を提供しなさい。
このようするとインターフェースを変更することなく
データ構造を自由に変更できる。

.\"O \fB\(bu\fR Use header files
.\"O .br
.\"O If you write each of your library's global functions and variables in
.\"O header files, and include them in your library source files, then the
.\"O compiler will let you know if you make any interface changes by
.\"O accident.
\fB\(bu\fR ヘッダファイルを使う
.br
それぞれのライブラリについて大域関数・大域変数をヘッダファイルに書いて
ライブラリのソースファイルにインクルードしておけば、
気づかずにインターフェースの変更をしてしまっても
コンパイラが知らせてくれるだろう。

.\"O \fB\(bu\fR Use \fBstatic\fRs (or equivalent) whenever possible
.\"O .br
.\"O The fewer global functions your library has, the more flexibility
.\"O you will have in changing them.  \fBstatic\fR functions and variables may
.\"O change as often as you like, since clients cannot access them and therefore
.\"O they aren't considered interface changes.
\fB\(bu\fR 可能なときはいつでも\fB静的\fR (もしくは等価なもの) を使う
.br
ライブラリに大域関数が少ないほど、ライブラリは柔軟に変更できる。
\fB静的な\fR関数・変数は、クライアントがアクセスできないから
インターフェースの変更とはならないので、好きなだけ変更することができる。
.\"O .SH WRITING AUTOMAKE RULES
.SH AUTOMAKE ルールの書き方
.\"O \fBlibtool\fR library support is implemented under the \fBLTLIBRARIES\fR
.\"O primary.
\fBlibtool\fR ライブラリのサポートは、
\fBLTLIBRARIES\fR プライマリのもとに実装されている。

.\"O To link a program against a \fBlibtool\fR library, just use the
.\"O \fIprogram\fB_LDADD\fR variable to specify the library name.  You may use
.\"O \fIprogram\fB_LDFLAGS\fR to pass any options to libtool, such as
.\"O \fB\-static\fR. 
プログラムを \fBlibtool\fR ライブラリにリンクするためには、
ライブラリ名を指定する \fIprogram\fB_LDADD\fR 変数を使うこと。
libtool に \fB\-static\fR といったオプションを渡すためには
\fIprogram\fB_LDFLAGS\fR を使うと良い。

.\"O To build a \fBlibtool\fR library, use \fIlib\fB_LTLIBRARIES\fR to specify the
.\"O library name and \fB, and, for example, \fIlib\fB_LDFLAGS\fR to pass the
.\"O \fB\-version\-info\fR option to \fBlibtool\fR.  You will find an example in
.\"O the next section.
\fBlibtool\fR ライブラリをビルドするには、
ライブラリ名を指定する \fIlib\fB_LTLIBRARIES\fR を使うこと。
\fBそして、たとえば、\fR\fBlibtool\fR に \fB\-version\-info\fR オプションを
渡すには \fIlib\fB_LDFLAGS\fR を使うこと。
次のセクションに例がある。

.\"O You will also have to include some basic files in your package, or use 
.\"O \fBlibtoolize\fR to do the work for you.  Do not include the \fBlibtool\fR
.\"O script directly.
作業をするためには、パッケージにいくつかの基本的なファイルを入れたり、
\fBlibtoolize\fR を使う必要があるだろう。
\fBlibtool\fR スクリプトを直接インクルードしてはならない。
.TP
.B config.guess
.\"O Attempt to guess a canonical system name.
標準システム名を推測しようとする。
.TP
.B config.sub
.\"O Canonical system name validation subroutine script.
標準システム名を確認するサブルーチンスクリプト。
.TP
.B ltconfig
.\"O Generate a libtool script for a given system.
指示されたシステムについて libtool スクリプトを作成する。
.TP
.B ltmain.sh
.\"O A generic script implementing basic libtool functionality.
基本的な libtool の機能を実装した一般的なスクリプト。
.\"O .SH DLOPENING MODULES
.SH モジュールのダイナミックロード
.\"O To use \fBlibtool\fR's dlopening support, you must use the macro
.\"O \fBAC_LIBTOOL_DLOPEN\fR in your \fBconfigure.in\fR, before
.\"O \fBAM_PROG_LIBTOOL\fR. Otherwise \fBlibtool\fR will assume there's no
.\"O dlopening mechanism available on the platform and will simulate it.
.\"O In order to use this simulation feature you must declare the objects you
.\"O want to dlopen by using the \fB\-dlopen\fR and \fB\-dlreopen\fR flags when
.\"O linking your executable. \fBlibtool\fR will link the object files and create
.\"O data structures holding the executable's symbol table:
\fBlibtool\fR のダイナミックロード機能を使うためには、
\fBconfigure.in\fR のなかで \fBAM_PROG_LIBTOOL\fR より前に
マクロ \fBAC_LIBTOOL_DLOPEN\fR を使わなければならない。
さもなければ、\fBlibtool\fR はそのプラットホームには
ダイナミックロードのメカニズムがないと仮定して、
これをシミュレートしようとする。
このシミュレーション機能を使うためには、
実行ファイルをリンクするときに
\fB\-dlopen\fR と \fB\-dlreopen\fR フラグを使い、
ダイナミックロードするオブジェクトを宣言しなければならない。
\fBlibtool\fR はオブジェクトファイルをリンクし、
以下のような実行ファイルのシンボルテーブルを保持した
データ構造を作成する。
.sp
.RS
.nf
struct lt_dlsymlist { const char *NAME; lt_ptr_t ADDRESS; }
.fi
.RE
.sp
.\"O \fINAME\fR holds an asciiz string with the symbol name, such as "fprintf".
.\"O \fIADDRESS\fR is a generic pointer to the appropriate object, such as
.\"O &fprintf.
\fINAME\fR には、"fprintf" のような、シンボル名のアスキー文字列が保持される。
\fIADDRESS\fR は、&fprintf のような、
適切なオブジェクトへのジェネリックポインタである。
.sp
.RS
.nf
const lt_dlsymlist * lt_preloaded_symbols;
.fi
.RE
.sp
.\"O This array represents all the preloaded symbols linked into the executable.
.\"O For each \fB\-dlpreloaded\fR file there is an element with the \fINAME\fR of
.\"O the file and a \fIADDRESS\fR of `\fB0\fR', followed by all symbols exported from
.\"O this file.  For the executable itself the special name \fB@PROGRAM@\fR is used.
.\"O The last element has a \fINAME\fR and \fIADDRESS\fR of `\fB0\fR'.
この配列は実行ファイルにリンクされている
プリロードされたシンボルを表す。
\fB\-dlpreloaded\fR されたファイルのそれぞれについて要素が存在し、
ファイル名 \fINAME\fR と `\fB0\fR' というアドレス \fIADDRESS\fR、
およびこのファイルからエクスポートされたすべてのシンボルを保持する。
実行ファイル自身については、特別な名前 \fB@PROGRAM@\fR が使われる。
最後のエレメントは \fINAME\fR と `\fB0\fR' という \fIADDRESS\fR を持つ。

.\"O When linking either a library that is going to be dlopened or an executable
.\"O that is going to dlopen a module, remember to specify the \fB\-module\fR
.\"O flag.
ダイナミックロードされるライブラリもしくは、
モジュールをダイナミックロードしようとする実行ファイルをリンクするときは、
\fB\-module\fR フラグを指定するのを忘れないこと。

.\"O If an executable needs to reference an external symbol of a library that you
.\"O are going to dlopen, use \fB\-export\-dynamic\fR when linking the executable.
ダイナミックロードしようとしているライブラリの外部シンボルを、
実行ファイルが参照する必要がある場合は、実行ファイルをリンクするときに
\fB\-export\-dynamic\fR を使用すること。

.\"O Due variations in library names, your program needs to determine which is
.\"O the correct file to dlopen.  A straightforward approach is to examine the
.\"O `\fB.la\fR' files, looking for the \fBdlname='\fIDLNAME\fB'\fR line, where
.\"O \fBDLNAME\fR is either empty if the library can't be dlopened, or holds the
.\"O dlname of the library.
ライブラリ名にバリエーションがあるので、
プログラムはどれがダイナミックロードするための
正しいファイルであるのかを決定する必要がある。
直接的な方法は `\fB.la\fR' ファイルを調べて、
 \fBdlname='\fIDLNAME\fB'\fR という行を探すことである。
この行はライブラリをダイナミックロードできない場合は空で、
そうでない場合はライブラリの名前が入っている。

.\"O .SH EXAMPLES
.SH 例
.\"O We are about to create a library called `libbaz' from the source files
.\"O `foo.c', `bar.c', and then link `a.c' with `libbaz' to create an executable
.\"O named `a'
ソースファイル `foo.c', `bar.c' から `libbaz' とよばれるライブラリを作成し、
次に `a' という名前の実行ファイルを作成するために `a.c' を `libbaz' と
リンクしようといる。
.\"O .SS Creating The Library
.SS ライブラリの作成
.\"O \fB\(bu\fR Compile mode: since Linux supports shared libraries, \fBlibtool\fR
.\"O will generate two object files: one for the static library (`foo.lo') and
.\"O one for the shared library (`foo.o').  The \fB\-c\fR option is mandatory,
.\"O since we don't want the compiler to do the linking on its own.
\fB\(bu\fR コンパイルモード：Linux は共有ライブラリをサポートしているので、
\fBlibtool\fR は 2 つのオブジェクトファイル、
一つは静的ライブラリ (`foo.lo')、
もう一つは共有ライブラリ (`foo.o') を作成する。
ソースファイル自身へのリンクをコンパイラにやらせたくないので、
\fB\-c\fR オプションは必須である。
.sp
.RS
.nf
lightside:~% libtool cc \-c foo.c
cc \-c \-fPIC \-DPIC foo.c -o .libs/foo.lo
cc \-c foo.c >/dev/null 2>&1
lightside:~% libtool cc -c bar.c
cc \-c \-fPIC \-DPIC bar.c -o .libs/bar.lo
cc \-c bar.c >/dev/null 2>&1
.fi
.RE	     
.sp
.\"O \fB\(bu\fR Link mode, build only a static library: We specify the `.o'
.\"O object files generated previously.  The \fB\-o\fR option is mandatory.
\fB\(bu\fR リンクモード、静的ライブラリのみをビルドする：
以前に作成された `.o' というオブジェクトファイルを指定している。
\fB\-o\fR オプションは必須である。
.sp
.RS
.nf
lightside:~% libtool cc -o libbaz.a foo.o bar.o
ar cru libbaz.a foo.o bar.o
ranlib libbaz.a
.fi
.RE	     
.sp
.\"O \fB\(bu\fR Link mode, build static and shared libraries: We specify the
.\"O `.lo' object files.  Mandatory options are \fB\-o\fR like before, and
.\"O \fB\-rpath\fR to indicate which will be the installation directory for our
.\"O library.  The library will be created in the `.libs' directory.
\fB\(bu\fR リンクモード、静的ライブラリと共有ライブラリをビルドする：
`.lo' というオブジェクトファイルを指定する。
必須オプションは、前と同じ \fB\-o\fR と
ライブラリのインストールされるディレクトリを指示する \fB\-rpath\fR である。
ライブラリは `.libs' ディレクトリに作成される。
.sp
.RS
.nf
lightside:~% libtool cc \-o libbaz.la foo.lo bar.lo \e
    \-rpath /usr/local/lib
cc \-shared \-Wl,\-soname \-Wl,libbaz.so.0 \e
    \-o .libs/libbaz.so.0.0.0 foo.lo bar.lo
(cd .libs && ln \-s libbaz.so.0.0.0 libbaz.so.0)
(cd .libs && ln \-s libbaz.so.0.0.0 libbaz.so)
ar cru .libs/libbaz.a foo.o bar.o
ranlib .libs/libbaz.a
creating libbaz.la
(cd .libs && ln \-s ../libbaz.la libbaz.la)
.fi
.RE	     
.sp
.\"O \fB\(bu\fR Install mode: This will run the necessary commands to install the
.\"O library in the specified path (in our case, `/usr/local/lib').  It will
.\"O install the shared (`.so') and static (`.a') libraries, as well as the
.\"O libtool file (`.la'), for unistallation and informational purposes.
\fB\(bu\fR インストールモード：ライブラリを指定したパス
(この場合は `/usr/local/lib') にインストールするために
必要なコマンドを実行する。
このモードでは共有ライブラリ (`.so') と静的ライブラリ (`.a') を
インストールするとともに、アンインストールと情報提供の目的で
libtool ファイル (`.la') がインストールされる。

.\"O Since this is often done as a privileged user, it's useful to specify the
.\"O \fB\-n\fR or \fB\-\-dry\-run\fR option to check the results.
このモードはふつう特権ユーザーとして実行されるので、
\fB\-n\fR または \fB\-\-dry\-run\fR オプションを
指定して結果をチェックしておくとよい。
.sp
.RS
.nf
lightside:/tmp% libtool \-n install libbaz.la /usr/local/lib
install .libs/libbaz.so.0.0.0 /usr/local/lib/libbaz.so.0.0.0
(cd /usr/local/lib && ln \-s libbaz.so.0.0.0 libbaz.so.0)
(cd /usr/local/lib && ln \-s libbaz.so.0.0.0 libbaz.so)
install libbaz.la /usr/local/lib/libbaz.la
install .libs/libbaz.a /usr/local/lib/libbaz.a
ranlib /usr/local/lib/libbaz.a
chmod 644 /usr/local/lib/libbaz.a
.fi
.RE	     
.sp
.\"O .SS Creating the Executable
.SS 実行ファイルの作成
.\"O First we compile `a.c'
最初に `a.c' をコンパイルする
.sp
.RS
.nf
cc \-c a.c
.fi
.RE	     
.sp
.\"O If the library has already been installed you can proceed as usual
ライブラリが既にインストールされている場合には、
普段のように続行することができる
.sp
.RS
.nf
cc a.c \-lbaz \-L/usr/local/lib
.fi
.RE	     
.sp
.\"O If the library hasn't been installed yet, \fBlibtool\fR must be used to 
.\"O do the linking, debugging and installation of the executable (this last thing,
.\"O once the library has been installed).  Note that the real executable will be
.\"O in `.libs' until it is installed, and the the executable on the work
.\"O directory is merely a wrapper.
ライブラリがまだインストールされていない場合は、
実行ファイルのリンク・デバッグ・インストールに
\fBlibtool\fR を使用しなければならない
(一度ライブラリがインストールされるまで、これはつづく)。
実際の実行ファイルはインストールされるまで `.libs' 内にあり、
作業ディレクトリにある実行ファイルは単なるラッパーであることに注意すること。

.\"O In order to avoid ambiguities, never use \fB\-l\fR or \fB\-L\fR to link
.\"O against an uninstalled shared library.  Just specify the path to the `.la'
.\"O file.  Installed libraries aren't a problem, as we see below (`\-lm').
曖昧さを避けるため、絶対に
\fB\-l\fR と \fB\-L\fR を使ってアンインストールされた
共有ライブラリにリンクしてはならない。
`.la' ファイルへのパスだけを指定すること。
以下の (`\-lm') でわかるように、インストール済みのライブラリは問題ではない。
.sp
.RS
.nf
lightside:~% libtool cc a.o libbaz.la \-o a -lm
cc a.o \-Wl,\-\-rpath \-Wl,/usr/local/lib \e
    .libs/libbaz.so \-o .libs/a -lm
lightside:~% libtool gdb a
.\"O [snipped hairy debugging session]
[複雑なデバッグのセッションは省略]
lightside:~% libtool install \-c a /usr/local/bin/a
install \-c .libs/a /usr/local/bin/a
.fi
.RE	     
.sp
.\"O .SS Creating Makefile.am
.SS Makefile.am の作成
.\"O \fB\(bu\fR\ First create a brief \fBconfigure.in\fR, remembering to add the
.\"O macros for \fBautomake\fR and \fBlibtool\fR.
\fB\(bu\fR\ 最初に簡単な \fBconfigure.in\fR を作成し、
\fBautomake\fR と \fBlibtool\fR のためのマクロを忘れずに追加する。
.sp
.RS
.nf
AC_DEFUN(AM_INIT_AUTOMAKE)
AC_INIT(a.c)
AM_INIT_AUTOMAKE(a, 1.0)
AC_PROG_CC
AM_PROG_LIBTOOL
AC_OUTPUT(Makefile)
.fi
.RE
.sp
.\"O \fB\(bu\fR\ Then the corresponding \fBMakefile.am\fR
\fB\(bu\fR\ 対応する \fBMakefile.am\fR
.sp
.RS
.nf
.\"O # Build the library
# ライブラリのビルド
lib_LTLIBRARIES=libbaz.la
libbaz_la_SOURCES = foo.c bar.c
libbaz_la_LDFLAGS = -version-info 0:0:0

bin_PROGRAMS = a a.debug

.\"O # Build a from a.c and libbaz.la
# a.c と libbaz.la から a をビルド
a_SOURCES = a.c
a_LDADD = libbaz.la

.\"O # Create a static debugging version
# 静的デバッグバージョンを作成
a_debug_SOURCES = a.c
a_debug_LDADD = libbaz.la
a_debug_LDFLAGS = \-static
.fi
.RE
.sp
.\"O \fB\(bu\fR\ And finally give it a try
\fB\(bu\fR\ そして最後に実行する
.sp
.RS
.nf
lightside:~% aclocal; libtoolize; automake \-\-add\-missing; autoconf
lightside:~% ./configure; make
.fi
.RE
.sp
.\"O .SH SEE ALSO
.SH 関連項目
 \fBlibtoolize\fR(1), \fBlibltdl\fR(3)
.\"O .SH NOTES
.SH 注意
.\"O Report bugs to <bug-libtool@gnu.org>.
.\"O .br
.\"O Man page by Ragnar Hojland Espinosa <ragnar@ragnar-hojland.com>
プログラムのバグについては <bug-libtool@gnu.org> へ報告してください。
.br
この man ページは Ragnar Hojland Espinosa
<ragnar@ragnar-hojland.com> が作成しました。
