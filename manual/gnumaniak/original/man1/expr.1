.\" You may copy, distribute and modify under the terms of the LDP General
.\" Public License as specified in the LICENSE file that comes with the
.\" gnumaniak distribution
.\"
.\" The author kindly requests that no comments regarding the "better"
.\" suitability or up-to-date notices of any info documentation alternative
.\" is added without contacting him first.
.\"
.\" (C) 1999-2002 Ragnar Hojland Espinosa <ragnar@ragnar-hojland.com>
.\"
.\"     GNU expr man page
.\"     man pages are NOT obsolete!
.\"     <ragnar@ragnar-hojland.com>
.TH expr 1 "18 June 2002" "GNU Shell Utilities 2.1"
.SH NAME
expr \- evaluate expressions
.SH SYNOPSIS
.BI "expr " expression...
.sp
.B expr [\-\-help] [\-\-version]
.br
.SH DESCRIPTION
.B expr
evaluates an expression and writes the result on its standard output.
Each token of the expression must be a separate argument.
.P
Operands are either numbers or strings. \fBexpr\fP converts anything
appearing in an operand position to an integer or a string depending on
the operation being applied to it. Strings are not quoted for
\fBexpr\fP itself, though you may need to quote them to protect
characters with special meaning to the shell (e.g, spaces) 
.P
Operators may given as infix symbols or prefix keywords.  Parentheses
may be used for grouping in the usual manner (you must quote parentheses
to avoid the shell evaluating them, however).
.P
.B expr
returns the following exit status:
.br
0 if the expression is neither null nor 0,
.br
1 if the expression is null or 0,
.br
2 for invalid expressions.
.SH OPERATORS (in order of increasing precedence)
.SS Connectives
.IP "\fB|\fP"
Yields its first argument if it is neither null nor 0, otherwise its
second argument.  This is the usual `or' operation.
.IP "\fB&\fP"
Yields its first argument if neither argument is null or 0,
otherwise 0.
.IP "\fB<\fP\0 \fB<=\fP\0 \fB=\fP\0 \fB==\fP\0 \fB!=\fP\0 \fB>=\fP\0 \fB>\fP"
Compare their arguments and return 1 if the relation is true, 0
otherwise.  (\fB==\fP is a synonym for \fB=\fP.)
\fBexpr\fP tries to convert both arguments to numbers and
do a numeric comparison; if it fails when trying to convert either
argument it then does a lexicographic comparison.
.SS Numeric expressions
.IP "\fB+\fP\0 \fB-\fP"
Arithmetic addition and substraction.  Both arguments are converted to numbers;
an error occurs if this cannot be done.
.IP "\fB*\fP\0 \fB/\fP\0 \fB%\fP"
Arithmetic multiplication, division and remainder (`%' is the remainder
operation, as in C).  Both arguments are converted to numbers; an error
occurs if this cannot be done.
.SS String expressions
.IP "\fIstring\fP \fB:\fP \fIregex\fP"
Perform pattern matching.  The arguments are converted to strings and the
second one is considered to be a (basic, a la \fBgrep\fP(1) regular
expression, with a `^'implicitly added at the beginning.  The first
argument is then matched against this regular expression.

If the match succeeds and .\fIregex\fP uses `\e(' and
`\e)', the \fB:\fP expression returns the part of \fIstring\fP that
matched the subexpression; otherwise returns an integer whose value is
the number of characters matched. 

If the match fails, the \fB:\fP operator returns the null string if `\e('
and `\e)' are used, otherwise 0.

Only the first `\e(' and `\e)' pair is relevant to the return value;
additional pairs are meaningful only for grouping the regular expression
operators.

Unlike other \fBexpr\fR'ss, `\+' (one or more), `\?' (zero or one), and `\|'
(or connective) are recognized as matching operators.
.TP
In addition, the following keywords are recognized:
.TP
.BI index " string charset"
Return the first position in \fIstring\fP where the first character in
\fIcharset\fP was found.  If no character in
\fIcharset\fP is found in \fIstring\fP, return 0.
.TP
.BI length " string"
Return the length of \fIstring\fP.
.TP
.BI match " string regex"
An alternative way to do pattern matching.  This is the same as
``\fIstring\fP \fB:\fP \fIregex\fP''.
.TP
.BI quote " string"
Interpret \fIstring\fR as a regular string, no matter if it is an operator or
a keyword.  Disabled when the environment variable \fBPOSIXLY_CORRECT\fR is
set.
.TP
.BI substr " string position length"
Return the substring of \fIstring\fP beginning at \fIposition\fP with
length at most \fIlength\fP.  If either \fIposition\fP or \fIlength\fP
isn't positive or numeric, return a null string.
.PP
Parentheses are used for grouping in the usual manner.  The keywords
(match, substr, index, length) cannot be used as strings.
.SH OPTIONS
When GNU
.B expr
is invoked with exactly one argument, the following options are recognized:
.TP
.B "\-\-help"
Print a usage message on standard output and exit successfully.
.TP
.B "\-\-version"
Print version information on standard output then exit successfully.
.SH EXAMPLES
.PP
To add 1 to the shell variable
.IR foo :
.IP
foo=\`expr $a + 1\`
.PP
To print the non-directory part of the file name stored in variable
.IR bar
(the value in
.IR bar
need not contain `/'):
.IP
expr $bar : \'.*/\e(\^.*\e)\' \'\^|\' $a
.PP
Matching character `b' in the string `abc'
.IP
expr abc : 'a\e(.\e)c'
.PP
Finding out the index for any occurences of `c' and `z' in the string
`abcdef'
.IP
expr index abcdef cz
.PP
Erroneuosly using a keyword (index) as a string
.IP
expr index index a
.PP
Correctly using a keyword (index) as a string
.IP
expr index quote index d
.SH NOTES
Report bugs to bug-sh-utils@gnu.org.
Page updated by Ragnar Hojland Espinosa <ragnar@ragnar-hojland.com>
