.\" Japanese Version Copyright (c) 2000 Asakawa Satoshi
.\"         all rights reserved.
.\" Translated Wed Dec 20 16:25:58 JST 2000
.\"         by Asakawa Satoshi <rod@i.am>
.\"
.TH AUTOEXPECT 1 "30 June 1995"
.\"O .SH NAME
.SH 名前
.\"O autoexpect \- generate an Expect script from watching a session
autoexpect \- セッションを監視することによりExpectスクリプトを生成する

.\"O .SH SYNOPSIS
.SH 書式
.B autoexpect
[
.I args
]
[
.I program args...
]
.br
.\"O .SH INTRODUCTION
.SH イントロダクション

.\"O autoexpect watches you interacting with another program and creates an
.\"O Expect script that reproduces your interactions.  For straightline
.\"O scripts, autoexpect saves substantial time over writing scripts by
.\"O hand.  Even if you are an Expect expert, you will find it convenient
.\"O to use autoexpect to automate the more mindless parts of interactions.
.\"O It is much easier to cut/paste hunks of autoexpect scripts together
.\"O than to write them from scratch.  And if you are a beginner, you may
.\"O be able to get away with learning nothing more about Expect than how
.\"O to call autoexpect.
autoexpectは、あなたとプログラムとの対話を監視し、
その対話を再現するExpectスクリプトを生成する。
直線的なスクリプトなので、
スクリプトを手作業で書くのに比べ相当な時間を節約できる。
たとえあなたがExpectのエキスパートだとしても、対話のより機械的な部分を
自動化するためにautoexpectを使うと便利であることが分かるだろう。
autoexpectの生成したスクリプトの一部をカットアンドペーストした方が
ゼロから書き始めるよりとても簡単である。
そしてもしあなたが初心者だとしたら、Expectについて何も知らなくても
autoexpectの起動方法を習うだけで用が足りるかもしれない。

.\"O The simplest way to use autoexpect is to call it from the command line
.\"O with no arguments.  For example:
autoexpectを使う最も簡単な方法は、
コマンドラインから引数なしで呼び出すことである。
デフォルトでシェルを起動する。
.br
例:
.br
	% autoexpect

.\"O By default, autoexpect spawns a shell for you.  Given a program name
.\"O and arguments, autoexpect spawns that program.  For example:
プログラム名と引数が与えられるとautoexpectはそのプログラムを起動する。
.br
例:
.br
	% autoexpect ftp ftp.cme.nist.gov

.\"O Once your spawned program is running, interact normally.  When you
.\"O have exited the shell (or program that you specified), autoexpect will
.\"O create a new script for you.  By default, autoexpect writes the new
.\"O script to "script.exp".  You can override this with the \-f flag
.\"O followed by a new script name.
一旦プログラムが起動されれば、対話は通常と変わらない。
あなたが起動したシェル(または、指定したプログラム)を終了すると
autoexpectは新しいスクリプトを生成する。
デフォルトでは"script.exp"ファイルに書き込まれる。 
\-fフラグを使うとファイル名を指定することができる。

.\"O The following example runs "ftp ftp.cme.nist.gov" and stores the
.\"O resulting Expect script in the file "nist".
次は"ftp ftp.cme.nist.gov"を実行し、結果のExpectスクリプトを
"nist"ファイルへ格納する例である。
.nf

	% autoexpect \-f nist ftp ftp.cme.nist.gov

.fi
.\"O It is important to understand that
.\"O autoexpect does not guarantee a working script because it necessarily
.\"O has to guess about certain things \- and occasionally it guesses wrong.
.\"O However, it is usually very easy to identify and fix these problems.
.\"O The typical problems are:
autoexpectが生成するスクリプトは動作が保証されている訳ではないという点を
理解しておくことが重要である。
なぜならば、確かな事柄や時々間違うことを推測しなければならないのだから。
しかしながら、通常はこれらの問題を特定し解決することはとても簡単である。
.br
典型的な問題点は:
.RS
.TP 4
\(bu
.\"O Timing.  A surprisingly large number of programs (rn, ksh, zsh,
.\"O telnet, etc.) and devices (e.g., modems) ignore keystrokes that arrive
.\"O "too quickly" after prompts.  If you find your new script hanging up
.\"O at one spot, try adding a short sleep just before the previous send.
タイミングの問題。
驚くほど多くのプログラム(rn, ksh, zsh, telnet, 等)やデバイス(例えばモデム)
は、プロンプトの後の早すぎるキー入力を無視する。
もし特定の場所でスクリプトが切れてしまう場合は、先の送信の直前に
短いスリープの追加を試みよ。

.\"O You can force this behavior throughout by overriding the variable
.\"O "force_conservative" near the beginning of the generated script.  This
.\"O "conservative" mode makes autoexpect automatically pause briefly (one
.\"O tenth of a second) before sending each character.  This pacifies every
.\"O program I know of.
生成されたスクリプトの先頭近くにある"force_conservative"変数を有効にする
ことにより、この働きを全体にわたって強制的に行うことができる。
この"conservative"モードでは、各々の文字送信の前に自動的に
短いポーズ(0.1秒)を入れる。
全てのプログラムに対してこの方法は有効である。

.\"O This conservative mode is useful if you just want to quickly reassure
.\"O yourself that the problem is a timing one (or if you really don't care
.\"O about how fast the script runs).  This same mode can be forced before
.\"O script generation by using the \-c flag.
このconservativeモードは、スクリプトの実行がどれほど早いのかは気にせず、
ただタイミングの問題か否かを手っ取り早く確かめたいのなら便利である。
\-cフラグを付けて実行すると同等のモードを強制することができる。

.\"O Fortunately, these timing spots are rare.  For example, telnet ignores
.\"O characters only after entering its escape sequence.  Modems only
.\"O ignore characters immediately after connecting to them for the first
.\"O time.  A few programs exhibit this behavior all the time but typically
.\"O have a switch to disable it.  For example, rn's \-T flag disables this
.\"O behavior.
幸運にも、このようなタイミングの場所は稀である。
例えば、telnetはエスケープシーケンスを入力した後のみ文字列を無視する。
モデムは初回接続直後に文字列を無視するだけである。
また少数だがこの働きを無効にするスイッチを持つプログラムもある。
例えば、rnの\-Tフラグはこの働きを無効にする。

.\"O The following example starts autoexpect in conservative
.\"O mode.
次は、conservativeモードで実行する例である。
.nf

	autoexpect \-c

.fi
.\"O The \-C flag defines a key to toggle conservative mode.  
.\"O The following example starts autoexpect (in non-conservative
.\"O mode) with ^L as the toggle.  (Note that the ^L is
.\"O entered literally - i.e., enter a real control-L).
\-Cフラグはconservativeモードを切り換えるためのキーを定義する。
次は、^Lを切り換えキーと定義し(non-conservativeモードで)実行する例である。
(注: ^Lはコントロール+Lを示す)
.nf

	autoexpect \-C ^L

.fi
.\"O The following example starts autoexpect in conservative
.\"O mode with ^L as the toggle.
次は、^Lを切り換えキーと定義しconservativeモードで実行する例である。
.nf

	autoexpect \-c \-C ^L

.fi
.TP
\(bu
.\"O Echoing.  Many program echo characters.  For example, if you type
.\"O "more" to a shell, what autoexpect actually sees is:
エコーの問題。
多くのプログラムが文字をエコーする。例えば、シェルに対して
"more"とタイプすると、autoexpectには以下のように見える:
.nf

	you typed 'm',
	computer typed 'm',
	you typed 'o',
	computer typed 'o',
	you typed 'r',
	computer typed 'r',
	...
.fi

.\"O Without specific knowledge of the program, it is impossible to know if
.\"O you are waiting to see each character echoed before typing the next.
.\"O If autoexpect sees characters being echoed, it assumes that it can
.\"O send them all as a group rather than interleaving them the way they
.\"O originally appeared.  This makes the script more pleasant to read.
.\"O However, it could conceivably be incorrect if you really had to wait
.\"O to see each character echoed.
そのプログラムに対する特有の知識が無いと、
エコーされた文字を待ってから、次の文字をタイプしているのかどうかを
知ることは困難である。
autoexpectは、文字列がエコーされていると見なすと、元々の対話手順のように
細切れに対話するのではなく、グループとして全てを一度に送信できると判断する。
このためスクリプトが読み易くなる。
しかし、本当にエコーを待ってから入力しなければならない場合には、
間違った動作となることが考えられる。

.TP
\(bu
.\"O Change.  Autoexpect records every character from the interaction in
.\"O the script.  This is desirable because it gives you the ability to
.\"O make judgements about what is important and what can be replaced with
.\"O a pattern match.
変化の問題。
autoexpectは対話で生じたすべての文字をスクリプト内に記録する。
この事は、どの文字が重要でどの文字は置き換えられるかを判断できるため、
好ましいことである。

.\"O On the other hand, if you use commands whose output differs from run
.\"O to run, the generated scripts are not going to be correct.  For
.\"O example, the "date" command always produces different output.  So
.\"O using the date command while running autoexpect is a sure way to
.\"O produce a script that will require editing in order for it to work.
しかし一方では、実行する度に異なる出力を生じるコマンドを使う場合、
生成されたスクリプトは正しく動作しないかもしれない。
例えば、dateコマンドは常に異なる出力を生成する。
そのため、autoexpect実行中にdateコマンドを使うと、生成したスクリプトを
働かせるためには間違い無く修正が必要になるだろう。

.\"O The \-p flag puts autoexpect into "prompt mode".  In this mode,
.\"O autoexpect will only look for the the last line of program output \-
.\"O which is usually the prompt.  This handles the date problem (see
.\"O above) and most others.
\-pフラグは、autoexpectをpromptモードにする。
このモードでは、autoexpectはプログラムの出力する最終行(普通はプロンプト)
だけを記録する。
このモードは、上述のdateコマンドの問題や他のほとんどの変化の問題を扱う
ことができる。

.\"O The following example starts autoexpect in prompt mode.
次は、promptモードで実行する例である。
.nf

	autoexpect \-p

.fi
.\"O The \-P flag defines a key to toggle prompt mode.  The following
.\"O example starts autoexpect (in non-prompt mode) with ^P as the toggle.
.\"O Note that the ^P is entered literally - i.e., enter a real control-P.
\-Pフラグはpromptモードを切り換えるためのキーを定義する。
次は、^Pを切り換えキーと定義し(non-promptモードで)実行する例である。
(注: ^Pはコントロール+Pを示す)
.nf

	autoexpect \-P ^P

.fi
.\"O The following example starts autoexpect in prompt mode with ^P as the toggle.
次は、^Pを切り換えキーと定義しpromptモードで実行する例である。
.nf

	autoexpect \-p \-P ^P

.fi
.\"O .SH OTHER FLAGS
.SH 他のフラグ
.\"O The
.\"O .B \-quiet
.\"O flag disables informational messages produced by autoexpect.
.B \-quiet
フラグは、autoexpectのメッセージ出力を非表示にする。

.\"O The
.\"O .B \-Q
.\"O flag names a quote character which can be used to enter characters
.\"O that autoexpect would otherwise consume because they are used as toggles.
.B \-Q
フラグは、引用文字を定義する。
引用文字は、切り替えキーとして使われるためautoexpectが別の意味に取って
しまう文字を入力するために使うことができる。

.\"O The following example shows a number of flags with quote used to
.\"O provide a way of entering the toggles literally.
次は、引用文字と一緒に複数のフラグを定義する例である。
引用文字は、切り替えキーを文字通り入力する方法として提供される。
.nf

	autoexpect \-P ^P \-C ^L \-Q ^Q

.fi
.\"O .SH STYLE
.SH 様式(STYLE)

.\"O I don't know if there is a "style" for Expect programs but autoexpect
.\"O should definitely not be held up as any model of style.  For example,
.\"O autoexpect uses features of Expect that are intended specifically for
.\"O computer-generated scripting.  So don't try to faithfully write
.\"O scripts that appear as if they were generated by autoexpect.  This is
.\"O not useful.
Expectプログラムのための様式があるか否か分からないが、
明らかにautoexpectはどのような様式のモデルにも縛られるべきではない。
例えば、コンピュータ生成スクリプト用に意図された Expectプログラムの特徴を
autoexpectは利用している。
だから、autoexpectによって生成されたかのようなスクリプトを
忠実に記述してみてはならない。

.\"O On the other hand, autoexpect scripts do show some worthwhile things.
.\"O For example, you can see how any string must be quoted in order to use
.\"O it in a Tcl script simply by running the strings through autoexpect.
しかし一方では、autoexpectのスクリプトは価値のある事を示している。
例えば、autoexpectを通して実行することにより、
Tclスクリプトの中で使用する目的では、どのように文字列は引用されなければ
ならないかを簡単に知ることができる。

.\"O .SH SEE ALSO
.SH 関連項目
.I
"Exploring Expect: A Tcl-Based Toolkit for Automating Interactive Programs"
\fRby Don Libes,
O'Reilly and Associates, January 1995.
.\"O .SH AUTHOR
.SH 著者
Don Libes, National Institute of Standards and Technology

.\"O .B expect
.\"O and
.\"0 .B autoexpect
.\"O are in the public domain.
.\"O NIST and I would
.\"O appreciate credit if these programs or parts of them are used.
.B expect
と
.B autoexpect
は、パブリックドメインである。
これらのプログラムあるいは一部が使われたなら、
NISTと著者への謝辞を述べてもらいたい。



