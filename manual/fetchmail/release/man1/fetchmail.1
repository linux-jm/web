'\" t
.\" ** The above line should force tbl to be used as a preprocessor **
.\"
.\" Man page for fetchmail
.\"
.\" For license terms, see the file COPYING in this directory.
.\" 
.\"WORD: message terminator	メッセージ終端子
.\"WORD: preauthentication	予備認証
.\"WORD: poll name	poll 名
.\"WORD: via name	via 名
.\"WORD: server greeting time サーバのグリーティング回数
.\"WORD: public SSL certificate	公開 SSL 証明書
.\"WORD: negotiation	調停
.\"WORD: validation	身元確認
.\"WORD: well known port	既知のポート
.\"WORD: originator	差出人
.\" 
.\" Translated Wed Aug 18 22:35:36 JST 1999
.\"         by FUJIWARA Teruyoshi <fujiwara@linux.or.jp>
.\" Updated Sun Jan 16 04:43:32 JST 2000 to match fetchmail-5.2.3
.\"         by FUJIWARA Teruyoshi <fujiwara@linux.or.jp>
.\" Updated Tue Dec 26 05:47:25 JST 2000
.\"         by Yuichi SATO <sato@complex.eng.hokudai.ac.jp>
.\" Updated Sat Jul 14 09:59:59 JST 2001
.\"         by Yuichi SATO <ysato@h4.dion.ne.jp>
.\" Updated Sun Oct 14 01:24:38 JST 2001 by Yuichi SATO
.\" Updated Fri Nov  9 20:17:22 JST 2001 by Yuichi SATO
.\" Updated & Modified Sat Jan 19 14:57:52 JST 2002 by Yuichi SATO
.\" 
.TH fetchmail 1
.SH 名前
fetchmail \- POP, IMAP, ETRN, ODMR 機能を持つサーバからメールを取得する

.SH 書式
\fBfetchmail\fR [\fIoption...\fR] [\fImailserver...\fR]
.br
\fBfetchmailconf\fR

.SH 説明
.I fetchmail
はメールを取得・転送するためのユーティリティです。
.I fetchmail
はリモートのメールサーバからメールを取得し、
これをローカル (クライアント) マシンの配送システムに転送します。
受け取ったメールは、その後 \fImutt\fR(1), \fIelm\fR(1), \fIMail\fR(1) など、
普通のメールユーザエージェントで扱うことができます。
\fIfetchmail\fR ユーティリティはデーモンモードで実行し、
指定した時間間隔で 1 つあるいは複数のシステムを
繰り返しポーリングすることができます。
.PP
.I fetchmail
プログラムは一般的なメール取得プロトコル
(POP2, POP3, IMAP2bis, IMAP4, IMAPrev1) の
いずれかをサポートしているサーバからメールを集めてくることができます。
また、ESMTP の ETRN 拡張と ODMR を使うこともできます。
(これらのプロトコルを説明している RFC 全ては、
このオンラインマニュアルの最後に列挙します。)
.PP
.I fetchmail
は基本的に (SLIP や PPP 等の)
オンデマンド TCP/IP 接続上で使うためのものですが、
sendmail を使った (送信者開始の) SMTP トランザクションを
セキュリティ上の理由から認めないサイトでは、
メッセージ転送エージェントとしても役立つかもしれません。
.PP
それぞれのメッセージを取得すると、
通常 \fIfetchmail\fR は自身が動作しているマシン (localhost) の
25 番ポートに SMTP 経由でこのメッセージを配送します。
この動作は、ちょうど通常の TCP/IP 接続上で
メッセージが渡されたかのように行われます。
次に、メールはシステムの MDA (Mail Delivery Agent (メール配送エージェント)、
普通は \fIsendmail\fR(8) ですが、システムによっては
\fIsmail\fR, \fImmdf\fR, \fIexim\fR, \fIqmail\fR 等が
使われているかもしれません) 経由でローカルに配送されます。
したがって、配送制御機構 (\fI.forward\fR ファイル等) は、
システムの MDA とローカル配送エージェントを通じて
全て通常通り使うことができます。
.PP
25 番ポートのリスナはないが、fetchmail のコンパイル時に
信頼できるローカル MDA を検知または指定された場合、
代わりとしてローカル配信にその MDA を使います。
通常、ビルド時に fetchmail は
実行可能プログラム
.IR procmail (1)
と
.IR sendmail (1)
のバイナリを探します。
.PP
プログラム
.I fetchmailconf
が使用可能であれば、このプログラムを使って
fetchmailrc の設定ファイルを楽に設定・編集することができます。
このプログラムは X 上で動作し、
またシステム上に Python 言語と Tk ツールキットがあることが必要です。
単独ユーザモード用に初めて fetchmail を設定する場合には、
初心者モード (Novice mode) を使うことをお勧めします。
上級者モード (Expert mode) を使うと、
マルチドロップ機能を含む fetchmail の設定を完全に制御することができます。
どちらの場合でも、`Autoprobe (自動検出)' ボタンを押すと、
指定されたメールサーバが最もうまくサポートしているプロトコルを教えてくれ、
そのサーバで起こる可能性がある問題も指摘してくれます。

.SH 一般的な操作
.I fetchmail
の動作はコマンドラインオプションと実行制御ファイル
.IR ~/.fetchmailrc\fR
で制御することができます。
実行制御ファイルの文法は後のセクションで説明します
(このファイルは \fIfetchmailconf\fR プログラムが編集します)。
コマンドラインオプションは、
.I ~/.fetchmailrc
での宣言を上書き指定します。
.PP
問い合わせは、コマンドラインのオプションの後に指定した
全てのサーバに対して行われます。
コマンド行でサーバを指定していない場合には、
.I ~/.fetchmailrc
ファイルの `poll' エントリそれぞれに対して問い合わせが行われます。
.PP
.I fetchmail
は、スクリプトやパイプラインで使いやすいように、
終了時に適切な終了コードを返すようになっています。
後述の「終了コード」セクションをご覧ください。
.PP
以下のオプションで \fIfetchmail\fR の動作が変わります。
一度うまく動作する \fI.fetchmailrc\fR ファイルが設定できれば、その後は
これらのオプションを指定する必要はほとんどないでしょう。
.PP
ほとんど全てのオプションには対応するキーワードがあり、これらは
.I fetchmailrc
ファイルで宣言することができます。
.PP
ここでは一部の特殊なオプションは説明しておらず、
代わりに後述の「認証」と「デーモンモード」に関するセクションで説明しています。
.SS 一般設定のオプション
.TP
.B \-V, --version
お使いの
.I fetchmail
のバージョン情報を表示します。メールの取得は行いません。その代わり、
.I fetchmail
が実際にサーバに接続した場合に使われるはずのオプション情報全てが、
指定されているそれぞれのサーバについて表示されます。
パスワードやその他の名称文字列に含まれる表示不可能な文字は、
C 言語と同様にバックスラッシュを使った
エスケープシーケンスとして表示されます。
このオプションは、
オプションが希望通りに設定されていることを確かめる際に便利です。
.TP
.B \-c, --check
実際にはメールの取得や削除を行わず、
取得待ちのメールがあるかどうかを示すステータスコードだけを返します
(後述の「終了コード」を参照)。
このオプションはデーモンモードを無効にします (無意味になるため)。
複数サイトへの問い合わせはうまく動作しませんし、
ETRN や ODMR でも動作しません。
既読であるが削除されていないメールがサーバのメールボックスに残っており、
かつメール取得のプロトコルが保存されているメッセージと
新しいメッセージを区別できない場合には、偽を表す正の値が返されます。
つまり、このオプションは IMAP では動作し、POP3 では動作しません。
また、POP3 では時々失敗することがあります。
.TP
.B \-s, --silent
静粛モード。通常はメール取得の途中に標準エラー出力に出力される、
進行状況/ステータスメッセージを全て止めます
(しかし、実際のエラーメッセージは止めません)。
--verbose オプションはこのオプションを上書きします。
.TP
.B \-v, --verbose
詳細表示モード。
.I fetchmail
とメールサーバの間でやりとりされた制御メッセージを
全て標準出力に出力します。
--silent オプションを上書きします。
このオプションを 2 つ付けると (-v -v)、追加の診断情報が出力されます。
.SS メールの扱いに関するオプション
.TP
.B \-a, --all
(キーワード: fetchall)
古い (既読) メッセージと新しいメッセージを
両方ともメールサーバから取得します。
デフォルトでは、サーバが既読の印を付けていないメッセージだけを取得します。
POP3 を使う場合、このオプションを指定すると
TOP ではなく必ず RETR が使われます。
POP2 のメール取得は、--all が常に有効であるかのように動作します
(後述の「取得失敗モード」を参照)。
このオプションは ETRN と ODMR では動作しません。
.TP
.B \-k, --keep
(キーワード: keep)
取得したメッセージをリモートのメールサーバに残します。
通常は、メールを取得した後に
メールサーバのフォルダからメッセージが削除されます。
.B keep 
オプションを指定すると、
取得したメッセージはメールサーバのユーザのフォルダに残ります。
このオプションは ETRN と ODMR では動作しません。
.TP
.B \-K, --nokeep
(キーワード: nokeep)
取得したメッセージをリモートのメールサーバから削除します。
このオプションを指定すると、取得したメールは削除されます。
\&\fI.fetchmailrc\fR 内 で \fBkeep\fR をデフォルト設定にしている場合には、
このオプションが役に立つかもしれません。
ETRN や ODMR を使う場合には、このオプションは必ず有効にされます。
.TP
.B \-F, --flush
POP3/IMAP 専用のオプションです。
新しいメッセージを取得する前に、古い (以前に取得した)
メッセージをメールサーバから削除します。
このオプションは ETRN と ODMR では動作しません。
注意: ローカルの MTA がハングし、fetchmail が異常終了した場合、
次回に fetchmail を起動したときに配送されていないメールが消されてしまいます。
あなたが良いと思うのはたぶんデフォルトの設定です: `-k' を指定しなければ、
fetchmail は配送が成功した後に自動的にメッセージを削除します。
.SS プロトコルと問い合わせのオプション
.TP
.B \-p, \--protocol <proto>
(キーワード: proto[col])
リモートのメールサーバと通信するときに使うプロトコルを指定します。
プロトコルが指定されなければ、デフォルト値は AUTO です。
.I proto 
には以下のどれかを指定することができます:
.RS
.IP AUTO
IMAP, POP3, POP2 に試します
(サポートが組み込まれていないプロトコルは飛ばします)。
.IP POP2
Post Office Protocol 2
.IP POP3
Post Office Protocol 3
.IP APOP
古い形式の MD5 チャレンジ認証付きの POP3 を使います。
.IP RPOP
RPOP 認証付きの POP3 を使います。
.IP KPOP
ポート 1109 番で Kerberos V4 認証付きの POP3 を使います。
.IP SDPS
Demon Internet の SDPS 拡張付きの POP3 を使います。
.IP IMAP
IMAP2bis, IMAP4, IMAP4rev1 のいずれか
(\fIfetchmail\fR はこれらの機能を自動的に検出します)。
.IP ETRN
ESMTP の ETRN オプションを使います。
.IP ODMR
On-Demand Mail Relay の ESMTP プロファイルを使います。
.RE
.P
ETRN と ODMR を除き、これらの選択オプションは基本的に全て同じ動作です
(標準のサーバデーモンと通信し、
サーバのメールボックスに配送されているメールを取得します)。
ETRN モードを使うと、ESMTP 準拠のサーバ
(BSD sendmail のリリース 8.8.0 以降など) に、
クラアイントマシンへの送信 SMTP 接続を即座に開かせ、
サーバの未配達メールのキューに入っている、
宛先がユーザのクライアントマシンになっている
全てのメールの転送を開始させることができます。
ODMR モードでは ODMR が可能なサーバが必要で ETRN と同様に動作します。
ただし、ODMR モードではクライアントマシンに静的 DNS が必要ありません。
.TP
.B \-U, --uidl
(キーワード: uidl)
必ず UIDL を使うようにします (POP3 の場合のみ有効です)。
メッセージの「新しさ」の確認が必ずクライアント側で行われるようになります
(UIDL は「unique ID listing (ユニークな ID の列挙)」を表します)。
`keep' と一緒に用い、メールボックスを、
あるユーザグループ用の新しいニュースを入れておく場所として使ってください。
.TP
.B \-P, --port <ポート番号>
(キーワード: port)
port オプションを使うと、接続する TCP/IP の
ポート番号を指定することができます。
このオプションが必要となることはほとんどないでしょう。
というのも、サポートされている全てプロトコルにはよく知られているデフォルトの
ポート番号があるからです。
.TP
.B \--principal <principal>
(キーワード: principal)
principal オプションを使うと、
相互認証のための principal を指定することができます。
Kerberos 認証付きの POP3 と IMAP の場合に使用できます。
.TP 
.B \-t, --timeout <秒数>
(キーワード: timeout)
timeout オプションを使うと、
サーバが応答しない際のタイムアウト時間を秒単位で設定することができます。
指定された秒数の間メールサーバがグリーティングメッセージを送ってこないか
コマンドに応答しない場合、
\fIfetchmail\fR はサーバとの接続を切ります。
このようなタイムアウトを使わなければ、
\fIfetchmail\fR は落ちているホストから
いつまでもメールを取得しようとしてハングアップしてしまうかもしれません。
これは \fIfetchmail\fR がバックグラウンドで動作している時には
特にうっとうしいでしょう。
デフォルトのタイムアウト時間があり、fetchmail -V で表示することができます。
与えられた接続で何度も連続してタイムアウトを受けた場合、
fetchmail は接続が止められているものと考え、リトライを止めます。
これが起こった場合、接続を止められたユーザはメールで通知を受けます。
.TP
.B \--plugin <コマンド>
(キーワード: plugin)
plugin オプションを使うと、TCP 接続を確立するための
外部プログラムを使うことができます。
これは SOCKS, SSL, ssh を使う場合や
ファイアウォール用の特殊な設定が必要なときに便利です。
プログラムは $PATH 環境変数内で検索されます。
オプションとして、"%h" と "%p" を使って、
それぞれホスト名とポート名を引き数として渡すこともできます
(補間ロジックは少し原始的で、受け取られる引き数は空白で囲まれているか、
文字列の先頭または末尾になければいけないことに注意して下さい)。
fetchmail はプラグインの標準入力に書き込みを行い、
プラグインの標準出力から読み込みを行います。
.TP
.B \--plugout <コマンド>
(キーワード: plugout)
前の項の plugin オプションと同じですが、
このオプションは SMTP 接続に対してのみ使われます
(SMTP 接続ではたぶんプラグインは不要なので、
plugin オプションから分離されています)。
.TP
.B \-r <フォルダ名>, --folder <フォルダ名>
(キーワード: folder[s])
メールサーバ上で、デフォルト以外の指定されたメールフォルダ
(またはコンマで区切ったフォルダのリスト) からメールを取得します。
フォルダ名の記法はサーバに依存します。
このオプションは POP3, ETRN, ODMR では使えません。
.TP
.B \--tracepolls
(キーワード: tracepolls)
fetchmail が生成する Received 行に、
`polling %s account %s' という形式でトレース情報を入れるようにさせます。
%s の部分はユーザのリモート名とポーリングレベルに置き換えられます
(通常、Received ヘッダにはサーバの本当の名前も含まれます)。
これは、受信したアカウントに基づいたメールフィルタリングを
容易にするために使うことができます。
.TP
.B \--ssl
(キーワード: ssl)
メールサーバへの接続を SSL を使って暗号化します。サーバへの接続は、SSL 
によって守られた接続上で指定した基本プロトコルを使って行われます。
ポートが指定されていない場合は、
接続は基本プロトコルの SSL 版の既知のポートで試みられます。
これは一般的には、基本プロトコルで使われるポートとは異なります。
IMAP の場合、基本プロトコルはポート 143 であり、
SSL で守られたプロトコルの場合はポート 993 です。
.TP
.B \--sslcert <名前>
(キーワード: sslcert)
クライアント側の公開 SSL 証明書のファイル名を指定します。SSL による
暗号化を行うサーバの一部には、認証のためにクライアント側の鍵と証明書を
必要とするものもあります。ほとんどの場合はこれは省略してもかまいません。
このオプションは SSL セッションを確立する時にサーバに示す公開鍵証明書
の位置を指定します。サーバが必要としなければ、これを指定する必要はあり
ません (指定してもかまいません)。これを必要とするサーバもありますし、
要求するけれど必要とはしないサーバもありますし、全く要求しないサーバも
あります。これは秘密鍵 (鍵と証明書を一緒にしたファイル) と同じファイルの
こともありますが、これはお勧めできません。
.TP
.B \--sslkey <ファイル名>
(キーワード: sslkey)
クライアント側の秘密 SSL 鍵のファイル名を指定します。SSL による
暗号化を行うサーバの一部には、認証のためにクライアント側の鍵と証明書を
必要とするものもあります。ほとんどの場合はこれは省略してもかまいません。
このオプションは SSL セッションを確立する時にサーバとの署名トランザクション
で用いる秘密鍵の位置を指定します。サーバが必要としなければ、これを指定
する必要はありません (指定してもかまいません)。これを必要とするサーバも
ありますし、要求するけれど必要とはしないサーバもありますし、全く要求し
ないサーバもあります。これは公開鍵 (鍵と証明書を一緒にしたファイル) と同
じファイルのこともありますが、これはお勧めできません。鍵を外すために
パスワードが必要な場合には、サーバとのセッションを確立する直前に
パスワードを聞かれます。そのため、デーモンモードで使うのは困難です。
.TP
.B \--sslproto <名前>
(キーワード: sslproto)
ssl プロトコルを強制的に使用します。
指定可能な値は \&`\fBssl2\fR', `\fBssl3\fR', `\fBtls1\fR' です。
サーバとのデフォルトの接続がうまく行かなかった場合に試して下さい。
.TP
.B \--sslcertck
(キーワード: sslcertck)
fetchmail がローカルの信用できる証明書に対してサーバ証明書を
厳密にチェックするようにします
(\fBsslcertpath\fR オプションを見てください)。
サーバ証明書が信頼できる署名で (直接的または間接的に)
サインされていない場合、SSL 接続は失敗します。
このチェックにより、SSL 接続に対して
経路の途中にいる人間が行う攻撃を阻止できます。
OpenSSL による証明書確認では、
CRL は現在サポートされていないかもしれない点に注意してください。
このオプションを使うと、システムクロックがいくらか進みます。
.TP
.B \--sslcertpath <ディレクトリ名>
(キーワード: sslcertpath)
fetchmail がローカルの証明書を探すディレクトリを設定します。
デフォルトは OpenSSL のデフォルトのディレクトリです。
ディレクトリは OpenSSL が期待するようにハッシュされなければなりません。
ディレクトリ内の証明書を追加・修正した場合は、
(OpenSSL の tools/ サブディレクトリに入っている)
\fBc_rehash\fR ツールを使う必要があります。
.TP
.B \--sslfingerprint
(キーワード: sslfingerprint)
コロンで区切られた 16 進数表記の 2 組の数字で書かれた
サーバ・キーの署名 (キーの MD5 ハッシュ) を指定します。
16 進数の数字は大文字でなければなりません。
これは OpenSSL が使うデフォルトの形式で、
SSL 接続が確立されると fetchmail はこの形式で署名を表示します。
このオプションが指定されると、
サーバ・キーの署名を与えられた署名と比較します。
一致しなかった場合、接続は失敗します。
これは経路の途中にいる人間が行う攻撃を阻止できます。
.SS 配送制御オプション
.TP
.B \-S <hosts>, --smtphost <ホスト>
(キーワード: smtp[host])
メールを転送するホストのリスト (1 つ以上のホスト名で、コンマで区切ります)
を指定します。
ホストはリストの順に接続が試みられます。
最初の動作しているホストが、
今回の動作における転送先対象となります。
通常は `localhost' がリストの末尾に暗黙のデフォルト値として追加されています。
しかし、Kerberos 認証を使う場合には、
fetchmail を実行しているマシンの FQDN がリストの末尾に
暗黙のデフォルト値として追加されます。
それぞれのホスト名には、ホストの名前の次にポート番号が付いています。
ポート番号とホスト名はスラッシュで区切られます。
デフォルトのポート番号は 25 (IPv6 では ``smtp'') です。
(/ で始まる) 絶対パス名を指定した場合、
LMTP 接続を受け付ける UNIX ソケットの名前として解釈されます
(これは Cyrus IMAP デーモンでサポートされます)。
例:

	--smtphost server1,server2/2525,server3,/var/imap/socket/lmtp

このオプションは ODMR モードで使用することができ、
fetchmail に ODMR サーバと SMTP, LMTP レシーバの間の
リレーをさせます。
.TP 
.B --fetchdomains <ホスト>
(キーワード: fetchdomains)
ETRN と ODMR モードにおいて、このオプションは
接続が行われた場合にサーバがメールを配送するドメインの一覧を指定します。
デフォルトは fetchmail が稼働しているマシンの FQDN です。
.TP
.B \-D <ドメイン>, --smtpaddress <ドメイン>
(キーワード: smtpaddress) 
アドレスに追加されるドメインを指定します。
このアドレスは SMTP で送られる RCPT TO 行に入ります。
これが指定されなかったときは、SMTP サーバの名前
(--smtphost で指定するか、デフォルトの "localhost") が使われます。
.TP
.B --smtpname <ユーザ@ドメイン>
(キーワード: smtpname) 
SMTP で送られる RCPT TO 行に入れられるドメインとユーザを指定します。
デフォルトのユーザは現在のユーザです。
.TP
.B \-Z <nnn>, --antispam <nnn[, nnn]...>
(キーワード: antispam) 
SMTP 受信プログラムからのスパム防止の応答と解釈される、
数値形式の SMTPエラーのリストを指定します。
値が -1 であれば、このオプションは無効にされます。
コマンドラインオプションの場合、
リストの値はコンマで区切らなければなりません。
.TP
.B \-m <コマンド>, \--mda <コマンド>
(キーワード: mda)
-mda あるいは -m オプションを使って、(25 番ポートに転送するのではなく)
メールを直接 MDA に渡すようにできます。
メールを失うのを避けるために、
このオプションは、
ディスクが溢れている場合やリソース消費エラーなどの場合に
0 以外のステータスを返す procmail や sendmail といった
MDA とともに使って下さい。
0 以外のステータスは fetchmail に配送が失敗したことを知らせ、
メッセージがサーバから削除されるのを防止します。
\fIfetchmail\fR を root で実行すると、
ユーザ ID は MDA 経由でメールを配送する間に対象ユーザのものに設定されます。
これが利用できる MDA には
"/usr/sbin/sendmail -oem -f %F %T", "/usr/bin/deliver",
"/usr/bin/procmail -d %T" があります (しかし、通常は後のものは冗長です。
なぜならこれは通常、SMTP リスナが転送を行う先だからです)。
%T を置いた場所には、MDA コマンドに対してローカル配送アドレスが挿入されます。
メールのメッセージの From アドレスは、%F を置いた場所に挿入されます。
"sendmail -oem -t" のような、To/Cc/Bcc の内容宛に
メールを発送する MDA の呼び出しを用いては\fIいけません\fR。
これをするとメールのループが発生し、
あなたが大勢の postmaster から大目玉を食らうことになります。
.TP 
.B \--lmtp
(キーワード: lmtp)
LMTP (Local Mail Transfer Protocol) 経由の配送を行います。
このオプションを選択した場合には、
smtphost で対象リストに指定した各ホストに対して、
サービスのポートを (スラッシュのサフィックスを用いて)
明示的に指定しなければ\fIなりません\fR。
デフォルトポートの 25 は (RFC 2033 によって) 認められていません。
.TP
.B \--bsmtp <ファイル名>
(キーワード: bsmtp)
取得したメールを BSMTP ファイルに追加します。
これは単に、メールを SMTP受信デーモンに渡すときに
fetchmail が通常生成するであろう SMTP コマンドを含んでいます。
引き数に `-' を指定すると、メールは標準出力に書き込まれます。
fetchmail が付け直した MAIL FROM と RCPT TO 行が正しいことの
保証はない点に注意してください。
後述の「マルチドロップメールボックスの利用と不正使用」の
議論における注意事項が適用されます。
.SS リソースの制限・制御のためのオプション
.TP
.B \-l <最大バイト数>, --limit <最大バイト数>
(キーワード: limit)
サイズの最大値を 10 進数で引き数に取ります。
このサイズより大きいメッセージは取得されず、サーバ上に残されます
(フォアグラウンドのセッションでは、
進行状況メッセージで "oversized (サイズ超過)" であると知らされます)。
メールの取得に使われるプロトコル
(特に fetchall オプションを指定しない IMAP または POP3) によって
未読の印を付けることができる場合、
明示的に --limit に 0 を指定すると、
実行制御ファイルで設定した上限値を全て上書きします。
このオプションは、電話料金が高くて変化もするという理由から、
メール取得の時間を厳しく制御する必要がある人のためのものです。
デーモンモードでは、サイズ超過の通知は
呼び出しを行ったユーザに対してメールで行われます
(--warning オプションを参照)。
このオプションは ETRN と ODMR では使えません。
.TP
.B \-w <間隔>, --warnings <間隔>
(キーワード: warnings)
時間間隔を秒数で引き数に取ります。
デーモンモードで `limit' オプションを付けて
.I fetchmail
を呼び出すと、このオプションはサイズを超過しているメッセージに関する警告が
呼び出したユーザ (または `postmaster' オプションで指定したユーザ) に
メールで送られる時間間隔を制御します。
このような通知は常に、サイズを超過しているメッセージが見つかった
最初のポーリングの終了時にメールで送られます。
その後は、警告時間間隔が経過するまで再通知は止められます
(これは、後に続く最初のポーリングの終了時に行われます)。
.TP
.B -b <最大数>, --batchlimit <最大数>
(キーワード: batchlimit)
接続をわざと止めてから再接続するまでに
SMTP 受信プログラムに送信するメッセージの最大数を指定します
(デフォルト値は 0 で、これは無制限を表します)。
明示的に --batchlimit に 0 を指定すると、
実行制御ファイルで設定されている上限値は全て上書きされます。
\fBsendmail\fR(8) は通常、
メッセージ終端子を受信した直後にメッセージの配送を始めますが、
そんなに素早く応答しない SMTP 受信プログラムもあります。
\fIqmail\fR(8) や \fIsmail\fR(8) 等の MTA は、
配送ソケットが閉じられるまで配送を待つことがあります。
\fIfetchmail\fR が巨大なバッチ処理を行っている時には、
これはうっとうしい遅れを引き起こすかもしれません。
バッチの上限値にゼロでない値を何か設定しておくと、
このような遅れを防ぐことができます。
このオプションは ETRN と ODMR では動作しません。
.TP
.B -B <上限値>, --fetchlimit <上限値>
(キーワード: fetchlimit)
指定されたサーバ 1 つからの 1 度のポーリングで取得できる
メッセージ数を制限します。
デフォルトでは制限はありません。
明示的に --fetchlimit に 0 を設定すると、
実行制御ファイルで設定した上限値を全て上書きします。
このオプションは ETRN と ODMR では動作しません。
.TP
.B -e <メッセージ数>, --expunge <メッセージ数>
(キーワード: expunge)
指定された数のメッセージの後に削除が行われるようにします。
POP2 や POP3 の場合には、fetchmail は QUIT を送って
セッションを終わらなければ削除を行うことができません。
したがってこのオプションを on にすると、
fetchmail は長いメール取得セッションを複数のサブセッションに分割し、
各サブセッションの後に QUIT を送ります。
これは、回線が切れた時に QUIT と同等の処理を行わない
POP3 サーバで起こる行落ちに対する良い対策になります。
IMAP の場合には、
.I fetchmail
は削除を即座に行わせるために、
削除を行うたびに EXPUNGE コマンドを発行するのが普通です。
これはサーバとの通信が不安定な時や高価な時には非常に安全な方法です。
というのも、接続が切れてしまった後に
同じメールを再び受け取らなくて済むからです。
しかしメールボックスが大きい場合には、
メッセージを消すたびごとにインデックスを付け直す時のオーバーヘッドで、
サーバがかなり大変な目に遭うかもしれません。
ですから、接続の信頼性が高い場合には、
削除を行う間隔は長くしたほうが良いでしょう。
このオプションに整数 N を指定すると、
.I fetchmail
は N 回目の削除の時だけ実際の削除を行います。
引き数に 0 を指定すると、削除は全く行われなくなります
(したがって、実行終了時まで削除は全く行われません)。
このオプションは ETRN と ODMR では動作しません。
.SS 認証に関するオプション
.TP
.B \-u <ユーザ名>, --username <ユーザ名>
(キーワード: user[name])
メールサーバにログインするときに使うユーザ識別情報を指定します。
適切なユーザ識別情報はメールサーバとユーザの両方に依存します。
デフォルト値は
.I fetchmail
を実行したクライアントマシン上でのログイン名です。
.TP
.B \-I <インタフェース指定>, --interface <インタフェース指定>
(キーワード: interface)
ポーリングを行う前に、特定のインタフェースデバイスが動作していることと、
特定のローカルまたはリモートの IP アドレス
(またはアドレス範囲) を持つことを要求します。
.I fetchmail
は
SLIP や PPP 経由でメールサーバに対して直接確立された point-to-point の
TCP/IP リンク上で使われることがよくあります。
これは比較的安全なチャネルです。
しかし、メールサーバへの他の TCP/IP 経路が存在するとき
(例: リンクが別の ISP に接続されているとき)、
あなたのユーザ名とパスワードは盗聴に対して脆弱です
(特にデーモンモードが自動的にメールをポーリングし、
平文のパスワードを予測可能な間隔でネットワーク上に流している場合)。
--interface オプションを使うと、これを防ぐことができます。
指定されたリンクが上がっていないときや、
マッチする IP アドレスに接続されていないときには、
ポーリングは飛ばされます。
フォーマットは以下です:
.sp
	interface/iii.iii.iii.iii/mmm.mmm.mmm.mmm
.sp
最初のスラッシュの前のフィールドはインタフェース名です
(つまり、sl0, ppp0 等)。
2 番目のスラッシュの前のフィールドは許可される IP アドレスです。
2 番目のスラッシュの後のフィールドは、許可する IP アドレスの範囲を
指定するマスク値です。
マスクがない場合には、255.255.255.255 (つまり、完全なマッチ) 
が指定されたものとして扱われます。
このオプションを現在サポートしているのは Linux と FreeBSD だけです。
FreeBSD 固有の情報については、後述の
.B monitor 
セクションをご覧ください。
.TP
.B \-M <インタフェース>, --monitor <インタフェース>
(キーワード: monitor)
デーモンモードでは、アクティブでない状態が一定時間続くと、
自動的に切断される一時的なリンク (例: PPP 接続) が
いつまでも接続したままになる可能性があります。
このオプションはアクティブ状態を監視する
システムの TCP/IP インタフェースを指定します。
毎回のポーリング間隔の後、リンクが確立しているけれど
そのリンク上で他の通信がされていなければ、ポーリングは飛ばされます。
しかし、fetchmail がシグナルで起動された場合は、
監視のチェックは飛ばされ、無条件にポーリングが行われます。
このオプションは現在 Linux と FreeBSD でのみサポートされています。
FreeBSD の場合、
.B monitor 
オプションと
.B interface
オプションを root 以外のユーザで動作させるには、SGID kmem して
fetchmail のバイナリをインストールしなければなりません。
これはセキュリティホールになるかもしれませんが、
fetchmail はインタフェースのデータを集めるとき
.I だけ
実効 GID を kmem グループに設定して動作します。
.TP
.B --auth <タイプ>
(キーワード: auth[enticate])
このオプションを使うと認証のタイプを指定することができます
(詳しくは「ユーザ認証」の項をご覧ください)。
指定可能な値は、\fBany\fR, \&`\fBpassword\fR', `\fBkerberos_v5\fR', 
`\fBkerberos\fR' (非常に正確に言うと `\fBkerberos_v4\fR'), \fRgssapi\fR, 
\fIcram-md5\fR, \fIotp\fR, \fIntlm\fR, \fBssh\fR です。
(デフォルトの) \fBany\fR を指定すると、
fetchmail は、まず最初にパスワードを必要としない方法
(GSSAPI, KERBEROS_IV) を試します。
次にパスワードを隠す方法 (CRAM-MD5, X-OTP, NTLM) を探します。
そして、サーバがこれらの方法のどれもサポートしていない場合にのみ、
パスワードを平文で渡します。
それ以外の値は、いろいろな認証方法を強制するために使われます
(\fBssh\fR は認証をさせないようにします)。
\fIpassword\fR, \fIcram-md5\fR, \fIntlm\fR, \fIotp\fR 以外の値では、
fetchmail による通常のパスワード問い合わせをさせないようにします。
ssh トンネルのような end-to-end の安全な接続を使っている場合に、
\fIssh\fR を指定して下さい。
GSSAPI または K4 を使ったプロトコルを使っている場合は、
\fRgssapi\fR または \fBkerberos_v4\fR を指定して下さい。
KPOP プロトコルを選択すると自動的に Kerberos 認証が選択されます。
このオプションは ETRN では動作しません。
.SS その他のオプション
.TP
.B \-f <パス名>, --fetchmailrc <パス名>
.I ~/.fetchmailrc
実行制御ファイルとしてデフォルトでない名前を指定します。
<パス名> 引き数は "-"
(ダッシュ 1 つ、標準入力から設定を読み込むことを意味します)
またはファイル名でなければなりません。
同時に --version オプションも有効にしていない場合、
指定されたファイル引き数は
0600 (u=rw,g=,o=) 以外のパーミッションを持っているか、
そうでなければ /dev/null でなければなりません。
.TP
.B \-i <パス名>, --idfile <パス名>
(キーワード: idfile)
POP3 の UID を保存するために使う .fetchids ファイルに別の名前を指定します。
.TP
.B \-n, --norewrite
(キーワード: no rewrite)
通常、
.I fetchmail
は取得したメール中の RFC-822 のアドレスヘッダ
(To, From, Cc, Bcc, Reply-To) を編集し、
サーバに対してローカルなメールの ID が完全なアドレスに展開されます
(@ とメールサーバのホスト名が追加されます)。
これにより、クライアントにおけるリプライで
宛先を正しくすることが可能になります
(このようにしない場合、メーラはクライアントマシンの
ローカルユーザに送るべきだと考えるかもしれません!)。
このオプションはこの書き換えを無効にします。
(このオプションは、MTA がメールのヘッダを編集することに対して神経質で、
これを止められることを知りたい人々をなだめるために用意しています。
しかし一般的には、実際に書き換えを止めるのは良い考えではありません。)
ETRN や ODMR を使うときには、書き換えオプションは無効です。
.TP
.B -E <envelope 行>, --envelope <envelope 行>
(キーワード: envelope)
このオプションは、
.I fetchmail
がメールの envelope アドレスのコピーを運ぶと想定するヘッダを変更します。
通常これは `X-Envelope-To' ですが、これは標準ヘッダではないので、
実際には別のものになることがあります。
後述のマルチドロップアドレス処理に関する議論を参照してください。
特殊な場合として、`envelope "Received"' を設定すると
sendmail 形式の Received 行を処理することが可能になります。
このオプションはデフォルトですが、\fI.fetchmailrc\fR ファイルで
`no envelope' を使って Received の処理を動作全体で無効にしていなければ、
必ずしも必要はないはずです。
.TP
.B -Q <プレフィックス>, --qvirtual <プレフィックス>
(キーワード: qvirtual)
このオプションに割り当てられた文字列プレフィックスは、
\fIenvelope\fR オプションで指定されたヘッダ内で見つかった
ユーザ名から削除されます
(マルチドロップの名前マッチングか
ローカルドメインのチェックのどちらかが利用できる場合、
これらを行う\fI前\fRに削除が行われます)。
このオプションは
.I fetchmail
を使ってドメイン全体のメールを集めている場合と、
お使いの ISP (またはメール転送プロバイダ) が
qmail を使っている場合に便利です。
qmail の基本機能の 1 つに
.sp
\&`Delivered-To:'
.sp
があります。
qmail はローカルのメールボックスにメッセージを配達するときには必ず、
ユーザ名と envelope recipient のホスト名をこの行に書きます。
これは主にメールのループを防ぐために行います。
接続されていないサイトに一括でメールを送る qmail の設定を行うため、
ISP のメールホストはそのサイトを
`Virtualhosts' 制御ファイルに書いておくのが普通であり、
これによりそのサイト宛のメールアドレス全てにプレフィックスが追加されます。
.\" \&@\& は HTML コンバータが mailto URL をここに作らないようにします。
その結果、'username\&@\&userhost.userdom.dom.com' 宛に送られたメールの
\&`Delivered-To:' 行は以下のような形になります:
.sp
Delivered-To: mbox-userstr-username\&@\&userhost.userdom.dom.com
.sp
ISP は 'mbox-userstr-' プレフィックスを自由に決められますが、
よく選ばれるのはユーザのホスト名にマッチする文字列です。
オプション `envelope Delivered-To:' を使うことにより、
fetchmail に元の envelope recipient を識別させることが安全に行えますが、
正しいユーザにメールを配達するには `mbox-userstr-' プレフィックスを
取り除かなければなりません。
これがこのオプションの目的です。
.TP
.B --configdump
.I ~/.fetchmailrc
を処理し、指定されたコマンドラインオプションを全て解釈し、
標準出力に設定情報を出力します。
設定情報は Python 言語のデータ構造配置になっています。
このオプションは
.I fetchmailconf
のような Python で書かれた対話的な
.I ~/.fetchmailrc
エディタと一緒に使うためのものです。

.SH ユーザ認証と暗号化
ETRN を除く全てのモードではクライアントの認証が必要です。
.I fetchmail
における通常のユーザ認証は、
.IR ftp (1)
の認証機構によく似ています。
正しいユーザ ID とパスワードは、
メールサーバの内部的なセキュリティシステムに依存します。
.PP
メールサーバが、あなたが通常のユーザアカウントを持っている Unix マシンならば、
あなたがいつも使っているログイン名とパスワードを
.I fetchmail
でも使ってください。
サーバとクライアントの両方で同じログイン名を使っている場合、
.B \-u
オプションでわざわざユーザ ID を指定する必要はありません。
というのも、デフォルトの動作ではクライアントマシン上での
ログイン名をサーバマシンのユーザ ID として使うからです。
サーバマシンでは別のログイン名を使っている場合には、
.B \-u
オプションでログイン名を指定してください。
例えば、'mailgrunt' という名前のマシンでのログイン名が 'jsmith' である場合、
以下のようにして
.I fetchmail 
を起動することになるでしょう:
.IP
fetchmail -u jsmith mailgrunt
.PP
.I fetchmail
のデフォルトの動作では、接続が確立される前に
ユーザにメールサーバのパスワードを問い合わせます。
これは最も安全に
.I fetchmail
を使う方法であり、パスワードも盗まれにくなります。
パスワードは
.I ~/.fetchmailrc
ファイルで指定することもできます。
これはデーモンモードやスクリプトで
.I fetchmail
を使う場合に便利です。
.PP
パスワードを指定されておらず、
.I fetchmail
が
.I ~/.fetchmailrc
ファイルからパスワードを展開できなかった場合、
.I fetchmail
は対話的にパスワードを聞く前にユーザのホームディレクトリの
.I ~/.netrc
ファイルを探します。
このファイル中に、ユーザのメールサーバにマッチするエントリがあった場合、
そのパスワードが使われます。
fetchmail は poll 名にマッチするものを最初に探します。
これが見つからなければ、via 名にマッチするものをチェックします。
.I ~/.netrc
ファイルの詳しい文法については、オンラインマニュアルの
.IR ftp (1)
を参照してください。
(この機能を使うと、複数のファイルにパスワード情報が
分かれることを避けることができます。)
.PP
通常のユーザアカウントを与えないメールサーバでは普通、
ユーザ ID とパスワードはサーバにメールボックスを与えるときに
サーバの管理者が割り当てます。
メールボックスのアカウント用の正しいユーザ ID とパスワードが分からなければ、
サーバの管理者に連絡しましょう。
.PP
古いバージョンの POP3 (RFC1081, RFC1225) は
メールサーバ側で
.I rhosts
を用いる大雑把な形式の独自の認証をサポートしていました。
この RPOP の変種では、パスワードと同等であるユーザごとの固定 ID は、
予約ポートとの接続上で平文のまま送信されていました。
このとき、PASS コマンドでなく RPOPコマンドを使って、
特殊なチェックが必要なことをサーバに知らせていました。
.I fetchmail
は RPOP をサポートしています
(`protocol RPOP' を指定すると、
fetchmail に `PASS' ではなく `RPOP' を送らせることができます) が、
これは使わないことを強くお勧めします。
この機能は盗聴に弱いため、RFC1460 において削除されました。
.PP
RFC1460 で APOP 認証が導入されました。
この POP3 の変種では、APOP パスワードをサーバホストに登録します
(サーバ上でこれを行うプログラムは、
たぶん \fIpopauth\fR(8) と呼ばれるものです)。
.I ~/.fetchmailrc
ファイルには、これと同じパスワードを書いてください。
.I fetchmail
がログインするたびに、パスワードとサーバにおけるグリーティング時刻の
暗号学的に安全なハッシュ値がサーバに送られます。
これは、認証データベースのチェックによって検査できます。
.PP
お使いの \fIfetchmail\fR が Kerberos のサポート付きで構築されており、
かつ Kerberos 認証を指定 (--auth か \fI.fetchmailrc\fR での
\fBauthenticate kerberos_v4\fR オプションを用います) した場合、
\fIfetchmail\fR は問い合わせ開始時に
毎回 Kerberos チケットを取得しようとします。
注意: poll 名か via 名のどちらかが `hesiod' ならば、
fetchmail はメールサーバの検索に Hesiod を使おうとします。
.PP
GSSAPI 認証による POP3 や IMAP を使う場合、
\fIfetchmail\fR はサーバが RFC1731 または RFC1734 に準拠する
GSSAPI 機能を備えていると仮定して使用します。
現在、この機能は Kerberos V 上でしかテストされていないので、
既に tiket-granting チケットを持っていることを仮定します。
標準の \fB--user\fR コマンドや \fI.fetchmailrc\fR の \fBuser\fR オプションを
使って、主に使っている名前とは別のユーザ名を渡すことができます。
.PP
お使いの IMAP デーモンがグリーティング行で
PREAUTH レスポンスを返した場合には、
fetchmail はこれを通知して、通常の認証手順を飛ばします。
これは例えば ssh を明示的に用いて imapd を起動している場合などに便利です。
この場合、\fIfetchmail\fR が起動したときに
パスワードを問い合わせるのを止めさせるために、
そのサイトでの認証の値 `ssh' を宣言できます。
.PP
POP3 を使う場合には、サーバは RFC1938 準拠の
使い捨てパスワードのチャレンジ文字列を発行し、
\fIfetchmail\fR はユーザのパスワードをパスフレーズとして使って、
必要とされるレスポンス文字列を生成します。
これにより、ネットワーク上に
暗号化されていない機密情報を流すことを避けることができます。
.PP
Compuserve の RPA 認証 (APOP に似ています) がサポートされています。
このサポートを組み込んでいる場合、
ホスト名の中に "@compuserve.com" が見つかると、
\fIfetchmail\fR はパスワードを平文で送らず、
RPA パスフレーズを用いた認証を実行しようとします。
.PP
IMAP を使っている場合、
(Microsoft Exchange が使う) Microsoft の NTLM 認証 がサポートされます。
このサポートを組み込んでいる場合、サーバが機能を示す応答で
「AUTH=NTLM」を返すと、\fIfetchmail\fR は (パスワードを平文で送らないで)
NTLM 認証を実行しようとします。
「ユーザ名@ドメイン名」の形で user オプションを指定してください:
「@」の左の部分はユーザ名として渡され、
「@」の右の部分は NTLM ドメインとして渡されます。
.PP
IPsec を使っている場合には、-T (--netsec) オプションを使うと、
外向きの IP 接続が初期化されるときに使われる
IP セキュリティリクエストを渡すことができます。
これは .fetchmailrc ファイルで `netsec' サーバオプションを
使って行うこともできます。
どちらの場合でも、オプションの値は
inet6_apps ライブラリの net_security_strtorequest() 関数が受け付ける
フォーマットの文字列です。
.PP
--ssl オプションを使うと SSL で暗号化されたサービスにアクセスできます。
これは .fetchmailrc ファイルで "ssl" サーバオプションを使っても行えます。
SSL による暗号化を有効にすると、
SSL セッションの調停の後に SSL 接続上で問い合わせが行われます。
POP3 や IMAP といった一部のサービスでは、
SSL による暗号化サービスのために標準プロトコルとは別に
既知のポートが定義されています。
SSL が有効にされており、かつ明示的にポートが指定されていなければ、
暗号化通信のポートは自動的に選択されます。
.PP
SSL による暗号化を行うサーバに接続するとき、
サーバは身元確認のためにクライアントに証明書を示します。
証明書はチェックされ、接続しようとしているサーバの名前が
証明書の中の標準名と一致することと、
証明書に書かれている有効期限によると
現在証明書が有効であることが確かめられます。
どちらかのチェックが失敗すると警告メッセージが表示されますが、
接続は継続されます。
サーバの証明書は特定の認証機関 (CA, Certification Authority) によって
署名されている必要はありませんし、
「自分で署名した」証明書であってもかまいません。
.PP
SSL による暗号化を行うサーバによっては、
クライアント側の証明書を要求することがあります。
クライアント側の公開 SSL 証明書と秘密 SSL 鍵を指定できます。
サーバが証明書を要求したら、クライアントの証明書は
身元確認のためにサーバに送られます。
サーバによっては正当なクライアントの証明書を要求し、
証明書が送られないか正当でなければ接続を拒否するものがあります。
サーバによっては、認められている認証機関よる署名が
クライアント側の証明書になされていることが必要なものもあります。
鍵ファイルと証明書ファイルのフォーマットは、
内部的に動作している SSL ライブラリが必要とする形式
(一般的には OpenSSL) です。
.PP
最後に、SSL の使用について注意書きをします :
ネットワーク越しに自分で署名したサーバの証明書を取得するという
上で述べたような設定では、
消極的な盗み聞きをする相手からは守れますが、
積極的に攻撃してくる相手から守るための助けにはなりません。
パスワードを平文で送るのに比べれば、かなり改善されますが、
中継点にいる相手からの攻撃は
(http://www.monkey.org/~dugsong/dsniff/ にある
dsniff のようなツールを使うと特に)
簡単に可能であることを知っておかなければなりません。
自分のメールボックスのセキュリティを真剣に考えるなら、
ssh トンネル (下記の例を参照) をお勧めします。

.SH デーモンモード
.B --daemon <間隔>
または
.B -d <間隔>
を使うと
.I fetchmail
をデーモンモードで実行できます。
引き数として、ポーリングの時間間隔を秒数で指定しなければなりません。
.PP
デーモンモードでは、
.I fetchmail
は自分自身をバックグラウンドでずっと動作させます。
つまり、指定された各ホストへの問い合わせと、
指定された時間のスリープを繰り返します。
.PP
したがって、単に
.IP
fetchmail -d 900
.PP
を実行すると、
.I ~/.fetchmailrc
に記述された全てのホスト
(キーワード `skip' で明示的に除外されたホストは除きます) に対して
15 分ごとに 1 回ポーリングを行います。
.PP
`set daemon <interval>' を
.I ~/.fetchmailrc
ファイルに書くことでポーリング間隔を設定することが可能です。
ここで、<interval> は秒数を表す整数値です。
これを行うと、コマンドラインオプションの
--daemon 0 または -d0 で上書きしない限り、
fetchmail は必ずデーモンモードで起動します。
.PP
ユーザあたり 1 つのデーモンプロセスしか許されません。
デーモンモードでは、
.I fetchmail
はユーザ単位のロックファイルを作成してこれを保証します。
.PP
通常は、バックグラウンドでデーモンを動作している時に fetchmail を呼び出すと、
デーモンに対して起動のシグナルを送信し、
即座にメールサーバにポーリングさせることができます。
(fatchmali を root で実行していれば起動シグナルは SIGHUP で、
それ以外のユーザであれば SIGUSR1 です。)
起動の動作では、認証の失敗や複数回のタイムアウトによって
接続が「刺さっている」ことを示すフラグが全てクリアされます。
.PP
オプション
.B --quit
は、デーモンを起動させるのではなく、動作しているデーモンを殺します
(そのようなプロセスが無ければ
.I fetchmail
が知らせてくれます)。
--quit オプションが唯一のコマンドラインオプションならば、
この動作だけを行います。
.PP
quit オプションは他のコマンドラインオプションと一緒に使うこともできます。
この場合の動作としては、他のオプションと実行制御ファイルを組み合わせて
指定されていることを行う前に、動作しているデーモンを全て殺します。
.PP
.B -L <ファイル名>
または
.B --logfile <ファイル名>
オプション (キーワード: set logfile) を使うと、
端末と切り離されている間に発生した状態メッセージを、
指定されたログファイル (オプションの後にログファイル名を続けてください) に
リダイレクトすることができます。
ログファイルは追加モードでオープンされるので、
以前のメッセージは削除されません。
このオプションは主にデバッグ用の設定の場合に役に立ちます。
.PP
.B --syslog
オプション (キーワード: set syslog) を使うと、
可能であれば、発生した状態メッセージとエラーメッセージを
.IR syslog (3)
システムデーモンに送ります。
メッセージは \fBfetchmail\fR の ID, \fBLOG_MAIL\fR の機能、
\fBLOG_ERR\fR, \fBLOG_ALERT\fR, \fBLOG_INFO\fR
いずれかの優先度と一緒に記録されます。
このオプションは、サーバからメールを取得している間のデーモンの状態と
結果を示す状態メッセージとエラーメッセージを記録するためのものです。
この場合でも、コマンドラインオプションと \fI.fetchmailrc\fR の処理に対する
エラーメッセージは標準エラー出力か指定されたログファイルに書かれます。
.B --nosyslog
オプションは、これが
.I ~/.fetchmailrc 
内で有効にされているか、
.B -L <ファイル名>
または
.B --logfile <ファイル名>
オプションが使われているものとして
.IR syslog (3)
の使用を無効にします。
.PP
.B \-N
または
--nodetach
オプションは、デーモンプロセスの制御端末からの
バックグラウンド化や切り離しを止めます。
これは主にデバッグ時に有効です。
このオプションは logfile オプションも無効にしてしまう点に注意してください
(たぶんこれではいけないのですが)。
.PP
デーモンモードで動作して POP2 や IMAP2bis サーバに対して
ポーリングしている時には、
一時的エラー (DNS 参照失敗や sendmail の配送拒否など) が起こると
次のポーリング周期の間には fetchall オプションが有効となります。
これは頑健さを実現する機能です。
つまり、メッセージを取得できた
(そしてメールサーバでは既読の印が付けられた) けれど、
一時的エラーのためにローカルでは配送されなかった場合、
そのメールは次のポーリング周期のときに再び取得されます。
(IMAP の仕組みではメッセージは配達されるまで消去されません。
したがって、このような問題は起こりません。)
.PP
fetchmail がデーモンモードで動作している時に
.I ~/.fetchmailrc 
ファイルを touch したり変更すると、これは次回のポーリングが始まる時に
検出されます。
.I ~/.fetchmailrc 
の変更が検出されると、fetchmail はこのファイルを読み込み直し、
自分自身を最初から起動し直します
(exec(2) を使います。
新しく動作する fetchmail には、状態に関するそれまでの情報は一切残りません)。
.I ~/.fetchmailrc 
ファイルの文法に違反していると、
新しい fetchmail は起動時に黙って静かに消えてしまうでしょう。

.SH 管理用オプション
.PP
.B --postmaster <ユーザ名>
オプション (キーワード: set postmaster) は、
ローカルでメールを受け取る適切なユーザが見つからなかった場合に、
マルチドロップメールが転送される最終地点になるユーザ名を指定します。
通常、これは単に fetchmail を起動したユーザです。
起動したユーザが root であれば、
このオプションのデフォルト値はユーザ `postmaster' になります。
postmaster のユーザ名を空の文字列に設定すると、このようなメールは破棄されます。
.PP
.B --nobounce
オプションは、RFC1894 準拠のエラーメッセージのうち、
送信者に戻される差戻しエラー (bouncing error) の通常の動作を止めます。
nobounce が有効な場合、メッセージは送信者ではなく postmaster に送られます。
.PP
.B --invisible
オプション (キーワード: set invisible) は fetchmail を見えなくしようとします。
通常、fetchmail は他の MTA と同じように振舞います。
つまり、送信の経路が記述されている Received ヘッダをメッセージ全てに書き込み、
転送先の MTA に、fetchmail そのものが実行されているマシンから
メールが来たことを知らせます。
invisible オプションが有効である場合は、
Received ヘッダは付けられず、fetchmail は転送先の MTA をだまして、
メールがメールサーバのホストから直接届いたと思わせようとします。
.PP
.B --showdots
オプション (キーワード: set showdots) は、
たとえ現在の端末 (tty) が標準出力でない場合
(例えばログファイルの場合) でも、進捗状況を表すドットを表示する。
fetchmail バージョン 5.3.0 を起動した場合、
デフォルトでは進捗状況を表すドットは標準出力にしか表示されません。
.PP
.B --tracepolls
オプションを指定することにより、fetchmail に対して
"polling {label} account {user}" という形式の情報を
Received ヘッダに加えるように指示することができます。
ここで、{label} は (指定された設定ファイル、
通常は ~/.fetchmailrc での) アカウントラベルです。
また、{user} はメールサーバにログオンするためのユーザ名です。
このヘッダは、役立つヘッダ情報のない E メールをフィルタリングしたり、
アカウント毎のメールを別々のメールボックスに
ソートして入れるのに使うことができます
(例えば、メーリングリストが運営されているサーバにアカウントがあり、
そのアカウントを使ってメーリングリストを購読している場合に
使うことができます)。
デフォルトでは、このようなヘッダは追加されません。
これは
.I .fetchmailrc
では `tracepolls' というキーワードになります。

.SH 取得失敗モード
\fIfetchmail\fR がメールサーバと対話する際に使うプロトコルは、かなり安全です。
25 番ポートへの転送を行う通常の操作では、
クライアント上の SMTP 受信プログラムが \fIfetchmail\fR に対して
配送するメッセージを受け取ったことを知らせたり、
スパム防御のために拒否したりするまでは、
(削除の印が付いていたとしても) ホスト上のいかなるメッセージも消されません。
.PP
しかし、MDA に転送する時には、エラーの可能性はずっと高くなります
MDA のなかには「安全」なものもあり、
配送エラーの場合や一時的なリソース資源を使い果たした場合にも、
0 以外のステータスを必ず返してくれます。
有名な
.IR procmail (1)
プログラムは、このような動作をします。
.IR sendmail (1)
や
.IR exim (1)
のようなメール転送エージェントとしてデザインされた大部分のプログラムも、
このような動作をします。
これらのプログラムは信頼できる積極的な返答を返してくれるので、
メールを失うリスクを負うことなく、
mda オプションをつけて使うことができます。
しかし安全でない MDA では、配送が失敗した場合でも 0 を返します。
このような事が起これば、メールがなくなるでしょう。
.PP
\fIfetchmail\fR の通常モードは、
「新しい」メッセージだけをダウンロードしようとし、
サーバから既に直接読み出した
(あるいは、以前に \fIfetchmail --keep\fR を使って受け取った)
メールには関与しません (削除もしません)。
しかし、--all を指定していない場合でさえ、サーバ上にある
既読のメールが取得される (そして削除される) ことがあることに
お気づきになるでしょう。
このようなことが起こる理由はいくつかあります。
.PP
まず POP2 を使っている場合が考えられます。
POP2 プロトコルには、メッセージの「新規」や「既読」の状態を
表現する方法がありません。
したがって、\fIfetchmail\fR は必ず全てのメッセージを
新しいものとして扱わなければなりません。
しかし、POP2 は古くて使われなくなっているので、
これが原因のことはあまりないでしょう。
.PP
POP3 の場合には、RFC1725 を恨んでください。
このバージョンの POP3 プロトコルの仕様では
LAST コマンドが無くなっているのですが、
一部の POP サーバがこれに準拠しているのです
(これを調べるには、メールサーバに対して \fIfetchmail -v\fR を実行して、
問い合わせの最初の方で行われる LAST コマンドへの応答を見てください)。
\fIfetchmail\fR のコードでは
POP3 の UID 機能を使って埋め合わせをしようとしています。
これは、それぞれのセッションで見たメッセージの識別子を、
次のセッションまで \fI.fetchids\fR に保存しておくという方法です。
しかしこの方法では、他のクライアントで見たメッセージや、
ホスト上のメーラで直接読まれたけれど
その後で消されていないメッセージまでは追いかけられません。
IMAP に乗り換える方がいいでしょう。
.PP
他に起こる可能性がある POP3 の問題として、
メールボックスの途中にメッセージを挿入するサーバが考えられます
(VMS のメールの実装の一部に、このようなものがあると言われています)。
\fIfetchmail\fR のコードでは、
新しいメールはメールボックスの最後に追加されることを想定しています。
これが成り立っていなければ、
古いメッセージの一部が新しいものとして扱われることがありますし、
その逆も起こります。
この問題を真っ当に解決する唯一の方法は、IMAP に乗り換えることです。
.PP
POP3 の別の問題として、
ユーザのホームディレクトリに一時ファイルが作成できない場合に、
一部の POP3 サーバは文書化されていない応答を返すため、
fetchmail が間違って「No mail」と報告してしまうことがあります。
.PP
IMAP のコードでは、サーバ上の \eSeen の有無を使って
メッセージが新しいかどうかを決めています。
Unix の場合、fetchmail は IMAP サーバがメールユーザエージェントが設定した
BSD 形式の Status フラグに注目し、
適当な時にこれらを使って \eSeen フラグを設定することを期待します。
これは IMAP の RFC の仕様にはありませんが、
我々が知る限りの Unix 用 IMAP サーバは全てこれを行います。
これを行わないサーバでつまずいたときには、
ホスト上の既読のメッセージが
サーバには新しく見えると言った症状が現われるでしょう。
この場合 (あまり起こりませんが) には、\fIfetchmail --keep\fR で
取得したメッセージだけが消されず、かつ既読の印が付けられます。
.PP
ETRN と ODMR モードでは、\fIfetchmail\fR は実際にはメールを取得しません。
その代わりに、サーバの SMTP リスナに対して、
クライアントに SMTP 経由のキューのフラッシュを開始するように指示します。
したがって、未配送のメッセージしか送りません。

.SH スパムフィルタリング
SMTP リスナの多くでは、指定したドメインから送られてくる不要なメールを
ブロックする「スパムフィルタ (spam filter)」を管理者が設定できます。
この機能を呼び出す MAIL FROM あるいは DATA 行は、
(残念なことに) リスナによって異なる SMTP の応答を引き出します。
.PP
最近のバージョンの
.I sendmail
はエラーコード 571 を返します。
この返し値は RFC1893 によって "Delivery not authorized, message refused"
として与えられています。
.PP
RFC821 から置き換えられた現在のドラフトによると、
このような状況で返すべき正しい値は、
550 "Requested action not taken: mailbox unavailable" 
とされています
(このドラフトでは "[E.g., mailbox not found, no access, or
command rejected for policy reasons]." を追加しています)。
.PP
.I exim
という MTA は 501 "Syntax error in parameters or arguments" を返しますが、
これはもうすぐ 550 に変更されます。
.PP
.I postfix
という MTA はスパム拒否の応答として 554 を返します。
.PP
fetchmail のコードは応答のリストのいずれかに該当するメッセージを
認識・破棄します。
このリストはデフォルトでは [571, 550, 501, 554] ですが、
`antispam' オプションを使って設定することができます。
fetchmail がメールを破棄してしまう状況は
.I 3 つしか
ありませんが、これはそのうちの 1 つです
(残りは後述の 552, 553 エラーの場合と、
マルチドロップされたメッセージで
既に処理されているメッセージ ID を持つものを破棄する場合です)。
.PP
.I fetchmail
が IMAP サーバからメールを取得する場合に antispam の応答が検出されると、
antispam ヘッダを取得した後、メッセージ本体を読むことなく
即座にメッセージを拒否します。
したがって、spam メッセージの本体をダウンロードする分の
課金を支払うことはありません。
.PP
\fIspambounce\fR オプションが有効になっている場合に、
メールがスパム防御を受けると、差出人にメールを受け取らなかったことを知らせる
RFC1892 の差戻しメッセージが送られます。

.SH SMTP/ESMTP のエラー処理
先程説明したスパム防御以外にも、
fetchmail は以下の SMTP/ESMTP のエラー応答に対して特殊な動作を行います:
.TP 5
452 (システムのディスクが不十分です)
後で取得できるようにサーバのメールボックスにメッセージを残します。
.TP 5
552 (メッセージが固定の最大メッセージサイズを越えました)
サーバからメッセージを削除します。差出人に差戻しメールを送ります。
.TP 5
553 (送信ドメインが不正です)
サーバからメッセージを削除します。差出人に差戻しメールを送ります。
.PP
他のエラーでは、差出人に差戻しメールが送られます。

.SH 実行制御ファイル
fetchmail を設定する好ましい方法は、
\&\fI.fetchmailrc\fR をホームディレクトリに作成することです
(これはテキストエディタで直接行なうこともできますし、
\fIfetchmailconf\fR を使って対話的に行なうこともできます)。
コマンドライン引き数と、このファイル中の引き数が重なっている場合には、
コマンドライン引き数の方が優先されます。
.PP
パスワードの機密を守るため、--version オプションが有効でない場合には、
\fI~/.fetchmailrc\fR のパーミッションは
600 (u=rw,g=,o=) でなければなりません。
600 以外の場合には、
.I fetchmail
は、エラー出力を行って終了します。
.PP
.I fetchmail
が引き数なしで実行される場合、\fI.fetchmailrc\fR ファイルは実行される
コマンドのリストとして読むことができます。
.SS 実行制御の記法
.PP
コメントは '#' で始まり、その行の最後まで続きます。
そうでない場合、このファイルは
フリーフォーマットかつトークン指向の文法で書かれた、
一連のサーバエントリか動作全体のオプションの記述で構成されます。
.PP
トークンには 4 種類あります: 
すなわち、文法キーワード、数字 (つまり10進数を並べたもの)、
クォートされていない文字列、クォートされた文字列です。
クォートされた文字列はダブルクォートで囲まれ、空白文字を含むことができます
(クォートされた数値は文字列として扱われます)。
クォートされていない文字列は、空白で区切られる任意のトークンであり、
数値やクォートされた文字列でなく、
特殊文字 `,', `;', `:', `=' も含まないものです。
.PP
任意の数の空白文字はサーバエントリ中のトークンを区切りますが、
それ以外には無視されます。
標準の C 言語形式のエスケープ文字 (\en, \et, \eb, 8進数, 16進数) を用いて
表示不可能な文字列や文字列の区切り文字を文字列中に埋め込むことができます。
.PP
各サーバエントリは、キーワード `poll' または `skip'、
これに続くサーバ名、その後に続くサーバオプション、
さらにその後に続く任意の数のユーザ記述から構成されます。
注意: 一番起こしやすい文法エラーの原因は、
ユーザオプションとサーバオプションを混ぜてしまうことです。
.PP
後方互換性のため、キーワード `server' は `poll' と同義になります。
.PP 
英語に似せるため、ノイズワード `and', `with', `has', `wants', `options' を
エントリ中の任意の場所で使うことができます。
これらは無視されますが、エントリがずっと読みやすくなります。
区切り文字 ':', ';', ',' も同じく無視されます。
.PP
.SS poll 対 skip
`poll' を指定すると、fetchmail が引き数なしで実行した時、
このホストへの問い合わせが行われます。
`skip' を指定すると、コマンドラインで明示的に指定しない限り
.I fetchmail 
はこのホストにポーリングを行いません。
(`skip' を使うと、テスト用エントリで安全に実験を行なうことや、
一時的に落ちているホスト用のエントリを簡単に無効にすることができます。)
.PP
.SS キーワード/オプションのまとめ
以下は正式なオプションです。
大括弧 ([]) で括られているキーワードサフィックスは省略可能です。
コマンドラインオプションに対応するものの後には、
`-' と適切なオプション文字があります。

正式な動作全体のオプションを以下に示します:

.TS
l l lw34.
キーワード  	オプション	機能
_
set daemon  	\&	T{
バックグラウンドでのポーリング間隔を秒数で設定します。
T}
set postmaster  	\&	T{
最終的なメール受取人の名前を指定します。
T}
set no bouncemail	\&	T{
送信者ではなく、postmaster にエラーメールを送ります。
T}
set no spambounce	\&	T{
スパム防御を受けたときに差戻しメールを送ります。
T}
set logfile  	\&	T{
エラーメッセージと状態メッセージを書き込むファイル名
T}
set idfile  	\&	T{
UID リストを格納するファイル名。
T}
set syslog  	\&	T{
syslog(3) を使ったエラーのログ取得を行います。
T}
set nosyslog  	\&	T{
syslog(3) を使ったエラーのログ取得を止めます。
T}
set properties 	\&	T{
fetchmail が無視する文字列の値 (拡張スクリプトが使うことがあります)。
T}
.TE

以下の正式なサーバオプションを示します:

.TS
l l lw34.
キーワード  	オプション	機能
_
via      	\&	T{
メールサーバの DNS 名を指定します。
これは poll 名を上書きします。
T}
proto[col]	-p	T{
プロトコルを指定します (大文字・小文字は関係ありません):
POP2, POP3, IMAP, APOP, KPOP。
T}
local[domains]	\&	T{
ローカルとして扱うドメインを指定します。
T}
port    	-P	T{
TCP/IP のサービスポートを指定します。
T}
auth[enticate]	\&	T{
認証のタイプを設定します (デフォルト値は `password')。
T}
timeout  	-t	T{
サーバが動作していない時のタイムアウト値を秒数で指定します
(デフォルト値は 300)。
T}
envelope	-E	T{
エンベロープアドレスのヘッダ名を指定します。
T}
no envelope	\&	T{
エンベロープアドレスの検索を無効にします。
T}
qvirtual	-Q	T{
ユーザ名から取り除く、qmail のバーチャルドメインのプレフィックス。
T}
aka      	\&	T{
メールサーバの別の DNS 名
T}
interface	-I	T{
サーバへのポーリングを行うためには立ち上がっていなければならない
IP インタフェースを指定します。
T}
monitor   	-M	T{
動作を監視する IP アドレスを指定します。
T}
plugin   	\&	T{
サーバ接続を確立するためのコマンドを指定します。
T}
plugout   	\&	T{
リスナ接続を確立するためのコマンドを指定します。
T}
dns     	\&	T{
マルチドロップ用の DNS 参照を有効にします (デフォルト)。
T}
no dns   	\&	T{
マルチドロップ用の DNS 参照を無効にします。
T}
checkalias	\&	T{
マルチドロップのために IP アドレスによる比較を行います。
T}
no checkalias	\&	T{
マルチドロップのために名前による比較を行います (デフォルト)。
T}
uidl    	-U	T{
POP3 で必ずクライアント側で UIDL を使うようにします。
T}
no uidl   	\&	T{
POP3 での UIDL の使用を止めます (デフォルト)。
T}
interval   	\&	T{
このサイトだけを N ポーリングサイクル毎にチェックします。
N は数値の引き数です。
T}
netsec   	\&	T{
IPsec セキュリティオプション要求を渡します。
T}
principal   	\&	T{
Kerberos 認証の principal を設定します
(imap と kerberos の場合にのみ有効です)。
T}
.TE

正式なユーザオプションを以下に示します:

.TS
l l lw34.
キーワード  	オプション	機能
_
user[name]	-u	T{
リモートのユーザ名を設定します
(name の後に `here' があると、ローカルのユーザ名です)。
T}
is      	\&	T{
ローカルとリモートのユーザ名を繋ぎます。
T}
to      	\&	T{
ローカルとリモートのユーザ名を繋ぎます。
T}
pass[word]	\&	T{
リモートアカウントのパスワードを指定します。
T}
ssl    		T{
SSL による暗号化を使い、
指定された基本プロトコルを使ってサーバと接続します。
T}
sslcert    		T{
クライアント側の公開 SSL 証明書を指定します。
T}
sslkey    		T{
クライアント側の秘密 SSL 鍵を指定します。
T}
sslproto   		T{
接続のために ssl プロトコルを使わせます。
T}
folder  	-r	T{
問い合わせをするリモートのフォルダを指定します。
T}
smtphost	-S	T{
転送先の SMTP ホスト (群) を指定します。
T}
fetchdomains	\&	T{
メールを取得するドメインを指定します。
T}
smtpaddress	-D	T{
RCPT TO 行に書くドメインを指定します。
T}
smtpname		T{
RCPT TO 行に書くユーザとドメインを指定します。
T}
antispam	-Z	T{
スパム防御と解釈される SMTP の返し値を指定します。
T}
mda     	-m	T{
ローカルの配送に使う MDA を指定します。
T}
bsmtp   	-o	T{
追加する BSMTP バッチファイルを指定します。
T}
preconnect	\&	T{
それぞれの接続の前に実行するコマンド。
T}
postconnect	\&	T{
それぞれの接続の後に実行するコマンド。
T}
keep     	-k	T{
既読のメッセージをサーバから削除しません。
T}
flush   	-F	T{
問い合わせの前に既読のメッセージを全てフラッシュします。
T}
fetchall	-a	T{
既読・未読にかかわらず全てのメッセージを取得します。
T}
rewrite    	\&	T{
リプライのために目的アドレスを書き換えます (デフォルト)。
T}
stripcr  	\&	T{
行末からキャリッジリターン文字を取り除きます。
T}
forcecr  	\&	T{
行末にキャリッジリターン文字を強制します。
T}
pass8bits	\&	T{
ESMTP リスナに対し、BODY=8BITMIME を強制します。
T}
dropstatus	\&	T{
やってくるメールから Status 行と X-Mozilla-Status 行を取り除きます。
T}
dropdelivered	\&	T{
やってくるメールから Delivered-To 行を取り除きます。
T}
mimedecode	\&	T{
quoted-printable を 8ビットの MIME 形式のメッセージに変換します。
T}
idle     	\&	T{
各ポーリングの後、新しいメッセージを待つアイドル時間 (IMAP 専用)。
T}
no keep  	-K	T{
既読のメッセージをサーバから削除します (デフォルト)。
T}
no flush	\&	T{
問い合わせの前に既読メッセージ全てはフラッシュしません (デフォルト)。
T}
no fetchall	\&	T{
新規メッセージだけを取得します (デフォルト)。
T}
no rewrite	\&	T{
ヘッダを書き換えません。
T}
no stripcr	\&	T{
キャリッジリターン文字を取り除きません (デフォルト)。
T}
no forcecr	\&	T{
行末にはキャリッジリターン文字を強制しません (デフォルト)。
T}
no pass8bits	\&	T{
ESMTP リスナに BODY=8BITMIME を強制しません (デフォルト)。
T}
no dropstatus	\&	T{
Status ヘッダを捨てません (デフォルト)。
T}
no mimedecode	\&	T{
quoted-printable を 8 ビット MIME 形式の
メッセージには変換しません (デフォルト)。
T}
limit   	-l	T{
メッセージのサイズの上限を設定します。
T}
warnings   	-w	T{
メッセージサイズに関する警告の時間間隔を設定します。
T}
batchlimit	-b	T{
1 回の接続で転送するする最大メッセージ数。
T}
fetchlimit	-B	T{
1 回の接続で取得する最大メッセージ数。
T}
expunge 	-e	T{
何回目のメッセージごとに削除を実行するかを指定します (IMAP と POP3 専用)。
T}
tracepolls	\&	T{
ポーリングトレース情報を Received ヘッダに追加します。
T}
properties  	\&	T{
fetchmail が無視する文字列値 (拡張スクリプトで使うことができます)。
T}
.TE
.PP
ユーザオプションは全てサーバオプションより\fI後でなければいけません\fR。
.PP
 .fetchmailrc においては、`envelope' 文字列引き数の前に、
(空白で区切って) 数値を置くことができます。
この数字が指定された場合、この値はこのようなヘッダを飛ばす数です
(つまり、この引き数に 1 を指定すると、
与えられたタイプの 2 番目のヘッダが選択されます)。
これは、ISP のローカルの配送エージェントが付けた
偽の Received ヘッダを無視する時に便利です。
.SS オプションスイッチに対応しないキーワード
.PP
`folder' と `smtphost' オプションには
(同等のコマンドラインオプションとは異なり)、
空白区切りまたはコンマ区切りの名前のリストを続けることができます。
.PP
全てのオプションは、見た通りのコマンドライン引き数に対応しますが、
以下のものはこれに該当しません: 
`via', `interval', `aka', `is', `to', `dns'/`no dns',
`checkalias'/`no checkalias', `password', `preconnect', `postconnect',
`localdomains', `stripcr'/`no stripcr', `forcecr'/`no forcecr',
`pass8bits'/`no pass8bits' `dropstatus/no dropstatus',
`dropdelivered/no dropdelivered', `mimedecode/no mimedecode',
`idle/no idle', `no envelope'.
.PP
`via' オプションは
同じサイトを指す複数の設定を使うためのものです。
これがある場合、文字列引き数は問い合わせ先の
メールサーバの実際の DNS 名として扱われます。
これは poll 引き数を上書きし、これを設定を区別する単なるラベル
(例えば、このホストを明示的に指定する時にコマンドラインで指定するもの)
にすることができます。
.PP
`interval' オプション (数値の引き数を取ります) を使うと、
基本的なポーリング間隔より少ない頻度で
サーバにポーリングを行わせることができます。
\&`interval N' を指定すると、このオプションが割り当てられた
サーバに対する問い合わせは N 回ごとのポーリング間隔でしか行われません。
.PP
`is' または `to' キーワードは、その後に続くローカル (クライアント) 名
(または、= で区切られるサーバ名からクライアント名へのマッピング) を
エントリ中のメールサーバのユーザ名と関連付けます。
is/to のリストの最後の名前に `*' があれば、認識されない名前もそのまま通します。
.PP
1 つのローカル名を使って、クライアントマシンでのユーザ名が
メールサーバ上の名前と異なる時に、
メールのリダイレクトをサポートすることができます。
ローカル名が一つしかないときは、
メッセージの Received, To, Cc, Bcc ヘッダに関らず、
メールはローカルのユーザ名宛に転送されます。
この場合には、
.I fetchmail
は DNS の参照を行いません。
.PP
ローカル名 (または名前マッピング) が複数ある時には、
\fIfetchmail\fR のコードは取得したメールの
Received, To, Cc, Bcc ヘッダを参照します
(これが「マルチドロップモード (multidrop mode)」です)。
\fIfetchmail\fR は poll 名、`via', `aka', `localdomains' オプションの
いずれかにマッチする、ホスト部分を持つアドレスを探し、
また DNS で調べるとメールサーバのエイリアスであるホスト名部分も通常は探します。
アドレスのマッチングの処理方法の詳しい内容については、
`dns', `checkalias', `localdomains', `aka' の説明を参照してください。
.PP
\fIfetchmail\fR がメールサーバのユーザ名にも
ローカルドメインにもマッチさせられない場合には、メールは差し戻されます。
このメールは通常、差出人に戻されますが、
`nobounce' オプションが有効ならば、これは postmaster に送られます
(次に、これはデフォルトで \fIfetchmail\fR を呼び出したユーザになります)。
.PP
`dns' オプション (通常は有効) は、マルチドロップメールボックスから取り出した
アドレスをチェックする方法を制御します。
このオプションが有効の時には、DNS を使った参照を行なうことにより、
`aka' または `localdomains' の宣言にマッチしないホストそれぞれのアドレスを
チェックするロジックが有効になります。
メールサーバのユーザ名が、
マッチするホスト名部分に割り当てられていることが認識された時、
そのローカルマッピングがローカルの受信者のリストに追加されます。
.PP
`checkalias' オプション (通常は無効) は、
マルチドロップモードの `dns' キーワードが実行した検出結果を拡張し、
エイリアスを使ってポーリングされるものの、
自分自身を識別するにはカノニカルな名前 (canonical name) を用いる
リモートの MTA をうまく扱う方法を提供します。
このようなサーバがポーリングされたときは、
envelope アドレスが展開されたことのチェックは失敗し、
.IR fetchmail 
は To/Cc/Bcc ヘッダを使った配送に戻ります
(後述の「ヘッダ対 envelope アドレス」を参照してください)。
このオプションを指定すると、
.IR fetchmail 
に対する、
poll 名とリモートの MTA が使う名前の両方に関係する全ての IP アドレスを取得し、
これらの IP アドレスの比較を行うことの指示になります。
これは、リモートサーバのカノニカルな名前が頻繁に変わる状況で役に立ちます。
これを使わなければ、実行制御ファイルを変更する必要があります。
実行制御ファイルで `no dns' が指定された場合は、`checkalias' は無効です。
.PP
`aka' オプションはマルチドロップメールボックスと一緒に使うためのものです。
このオプションを使うと、サーバの DNS 的な別名のリストを
予め宣言しておくことができます。
これは、速度と容量のトレードオフを可能にする、最適化のためのハックです。
マルチドロップメールボックスを処理している間に、
.IR fetchmail
がメッセージのヘッダを使ったメールサーバの名前の検索をあきらめた時、
予め宣言してある共通の名前を使うと、DNS を参照するはめにならないで済みます。
`aka' の引き数として与えた名前は、
拡張子としてマッチされる点に注意してください --
例えば `aka netaxs.com' を指定した場合、
単に netaxs.com という名前のホストにはマッチしませんが、
pop3.netaxs.com や mail.netaxs.com といった
`.netaxs.com' で終る任意のホスト名にマッチします。
.PP
`localdomains' オプションを使うと、ローカルであると fetchmail が判断する
ドメインのリストを宣言することができます。
fetchmail がマルチドロップモードでアドレス行を展開し、
かつ後に続くホスト名の部分が宣言されたローカルドメインにマッチする時、
そのアドレスは変更されずにリスナまたは MDA に渡されます
(ローカル名マッピングは適用\fIされません\fR)。
.PP
`localdomains' を使っている場合には、
\&`no envelope' も指定する必要があるかもしれません。
このオプションは、\fIfetchmail\fR の通常の、
Received 行や X-Envelope-To ヘッダ、
あるいは以前に `envelope' で設定されたヘッダの
いずれかから envelope アドレスを推定しようとする動作を無効にします。
デフォルトのエントリ中で `no envelope' を設定した場合、
`envelope <string>' を用いて個別エントリ中でこれを取り消すことが可能です。
特別な場合として、\&`envelope "Received"' で Received 行の展開の
デフォルトの動作が復元されます。
.PP
\fBpassword\fR オプションは文字列の引き数を必要とします。
この文字列はエントリのサーバで使うパスワードです。
.PP
`preconnect' キーワードを使うと、
.I fetchmail
がメールサーバへの接続を確立する直前に毎回実行する
シェルコマンドを指定することができます。
これは、
.IR ssh (1)
に補助させて安全な POP 接続の設定をしようとする時に役に立つかもしれません。
コマンドがゼロでないステータスを返した場合、
そのメールサーバへのポーリングは異常終了します。
.PP
同様に、`postconnect' キーワードを使うと、メールサーバへの接続が切れた
直後に毎回実行するシェルコマンドを指定することができます。
.PP
`forcecr' オプションは、LF だけで終わる行を転送の前に
CRLF で終わるようにするかどうかを制御します。
厳密に言うと RFC821 はこれを要求しているのですが、
これを必須としている MTA はほとんどないので、
このオプションは通常は無効になっています 
(このような MTA で特に使われているのは qmail だけで、
書き込み時にこれを行います)。
.PP
`stripcr' オプションは、取得したメールを転送する前に
キャリッジリターン文字を取り除くかどうかを制御します。
通常はこれをセットする必要はありません。
なぜなら、MDA が宣言されているときには、
これはデフォルトで「オン」(CR 削除が有効) となり、
SMTP 経由で転送されるときには「オフ」(CR 削除が無効) となるからです。
`stripcr' と `forcecr' が両方ともオンならば、`stripcr' が優先されます。
.PP

`pass8bits' は、何にでも "Content-Transfer-Encoding: 7bit" を付けてくる
馬鹿な Microsoft のメーラをうまく扱うために存在します。
このオプションが無効 (デフォルト) で、かつこのヘッダが存在すると、
.I fetchmail
は ESMTP 機能を持つリスナに対して BODY=7BIT を宣言します。
実際には
8-bit ISO や KOI-8 の文字集合を使っているメッセージの場合、
これは問題を起こします。
これらの文字は上位ビットが全て落とされてしまうため、
文字化けしてしまいます。
\&`pass8bits' がオンであれば、
.I fetchmail
は ESMTP 機能を持つリスナ全てに対して必ず BODY=8BITMIME を宣言します。
リスナが 8 ビットクリーンであれば (最近のめぼしいものは全部そうです)、
たぶんうまくいくでしょう。
.PP
`dropstatus' オプションは、取得したメール中の空でない Status 行と
X-Mozilla-Status 行を残す (デフォルト) か破棄するかを制御します。
これらを残すと、お使いの MUA で (もしあれば)
どのメッセージがサーバ上で既読の印が付けられているかを知ることができます。
一方、この動作は新着メール通知プログラムの一部を混乱させることがあります。
これらのプログラムは、
Status 行が付いているものは全て既読と想定するのです。
(注意: 一部のバグっぽい POP サーバが付ける
空の Status 行は無条件に削除されます。)
.PP
`dropdelivered' オプションは、取得したメール中の
Delivered-To ヘッダを残す (デフォルト) か破棄するかを制御します。
このヘッダは、メールサーバ Qmail と Postfix が
ループを防止するために使用していますが、
同じドメイン内でメールサーバを「ミラー」しようとする場合は邪魔になります。
このオプションは、注意して使用して下さい。
.PP
`mimedecode' オプションは、quoted-printable エンコーディングを用いている
MIME メッセージを純粋な 8 ビットデータに自動的に変換するかどうかを制御します。
ESMTP 機能を持ち、8 ビットクリーンなリスナ
(これには sendmail などの有名な MTA の大部分が含まれます) に
メールを配送する場合には、
このオプションを使うと quoted-printable で書かれた
メッセージヘッダとデータは自動的に 8 ビットデータに変換され、
メールを読むときに理解しやすくなります。
お使いの電子メールプログラムが MIME メッセージを扱えるならば、
このオプションは必要ありません。
mimedecode オプションはデフォルトで無効になっています。
なぜなら、ヘッダに対して RFC2047 の変換を行うと文字集合の情報が消えてしまい、
ヘッダのエンコーディングが本文のエンコーディングと異なる場合に
好ましくない結果になるからです。
.PP
`idle' オプションは IMAP サーバが RFC2177 IDLE コマンド拡張を
サポートしている場合にのみ使用できます。
このオプションが設定されていて、
かつ IDLE コマンドをサポートしていることを fetchmail が検知した場合、
ポーリングの終了毎に IDLE コマンドが発行されます。
このコマンドを使うことで、
IMAP サーバに接続をオープンに保持させ、
新しいメールが来たことをクライアントに通知させます。
頻繁にポーリングを行う必要がある場合、
IDLE コマンドは、TCP/IP 接続とログイン/ログアウトシーケンスをなくすことで、
バンド幅を押えることができます。
一方で、IDLE 接続は fetchmail のほとんどの時間を占めてしまいます。
なぜなら、IDLE コマンドは接続を切らず、
サーバが IDLE をタイムアウトしない限り
別のプールが起こることを許可してしまうためです。
複数のフォルダがある場合も動作せず、
最初のフォルダのみがポーリングされます。
.PP
`properties' オプションは拡張のための機構です。
これは文字列の引き数を取りますが、fetchmail 自身はこれを無視します。
この文字列引き数を使って、
設定情報を必要とするスクリプトのための情報を保持することができます。
特に、`--configdump'  オプションの出力は、
そのまま Python スクリプトとして利用できる、
ユーザエントリに関連するプロパティとなります。
.PP
.SS その他の実行制御オプション
`here' と `there' は、英語と同じような意味で使える便利な単語です。
通常 `user eric is esr' は、リモートユーザ `eric' 宛のメールが
`esr' 宛に配達されるという意味です。
しかし、`user eric there is esr here' と書くことでもっと分かりやすくしたり、
`user esr here is eric there' と書いて意味を反対にすることができます。
.PP
`protocol' キーワードで使用できる有効なプロトコル識別子を以下に示します:

    auto (または AUTO)
    pop2 (または POP2)
    pop3 (または POP3)
    sdps (または SDPS)
    imap (または IMAP)
    apop (または APOP)
    kpop (または KPOP)

.PP
有効な認証のタイプは `any', `password', `kerberos', 'kerberos_v5', 
`gssapi', `cram-md5', `otp', `ntlm', `ssh` です。
`password' タイプは普通のパスワード送信による認証を指定します
(パスワードはプレーンテキストのこともあれば、
APOP のようにプロトコル固有の暗号化がされていることもあります)。
`kerberos' を指定するとパスワード認証は行われず、
\fIfetchmail\fR はそれぞれの問い合わせの開始時に Kerberos のチケットを取得し、
パスワードとして任意の文字列を送信しようとします。
`gssapi' を指定すると fetchmail は GSSAPI 認証を使います。
さらに詳しい情報については `auth' キーワードの説明を参照してください。
.PP
`kpop' を指定すると、1109 番ポート上で
Kerberos V4 認証を使う POP3 プロトコルが設定されます。
これらのデフォルト値は、後に現われるオプションによって上書きされます。
.PP
グローバルオプションを指定する文は現在 4 つあります。
`set logfile' の後に文字列を記述したものは、
--logfile オプションの指定と同じグローバルな設定を行います。
コマンドラインの --logfile はこれを上書きします。
また `set daemon' は、--daemon オプションと同じように
ポーリング間隔を設定します。
これはコマンドラインの --daemon オプションで上書きすることができます。
特例として、--daemon 0 を使って、
強制的にフォアグラウンド動作をさせることができます。
`set postmater' 文は、ローカルで一致するものがない場合に
マルチドロップメールがデフォルトで送られるアドレスを設定します。
最後に、`set syslog' を指定するとログメッセージが syslogd(8) に
送られるようになります。

.SH RFC 822 との相互作用
メッセージの送信アドレスを決めようとするとき、
fetchmail は以下の順でヘッダを参照して行きます:

        Return-Path:
        Resent-Sender: (@ または ! を含んでいない場合は無視される)
        Sender: (@ または ! を含んでいない場合は無視される)
        Resent-From:
        From:
        Reply-To:
        Apparently-From:

送信アドレスはログの記録と、
SMTP に転送する時の MAIL FROM アドレスの設定のために使われます。
この順序はマルチドロップモードでメーリングリストの受信を
うまく処理するためのものです。
その目的は、ローカルアドレスが存在しない場合に、
差し戻しメッセージがメールを出した人やメーリングリスト本体にむやみに返されず、
メーリングリストの管理者に届くようにすることです
(こちらの方がまだマシです)。

マルチドロップモードでは、宛先のヘッダは以下のように処理されます: 
最初に、fetchmail は Received: ヘッダ
(あるいは、`envelope' で指定した任意のヘッダ) を探し、
ローカルの受信者アドレスを決めます。
もしメールが複数の受信者に宛てたものであれば、
Received は受信者のアドレスという点では全く情報を持っていないでしょう。

次に、fetchmail は Resent-To:, Resent-Cc:, Resent-Bcc: 行を探します。
これらのヘッダが存在する場合、これらには最終的な受信者が書かれており、
対になっている To:/Cc:/Bcc: よりも優先されます。
もし Resent-* 行が存在しなければ、
To:, Cc:, Bcc:, Apparently-To: 行が探されます。
(Resent-To: があると、To: アドレスが指している人物は
既にそのメールのコピーを受け取っているものと考えられます。)

.SH 設定例
以下の多くの例では、password 宣言があるが、
これは主に例示のためのものです。
アカウント/パスワードのペアを $HOME/.netrc ファイルに
隠しておくことをお勧めします。
このファイルは fetchmail だけでなく ftp(1) やその他のプログラムでも
使うことができます。

基本フォーマットを以下に示します:

.nf
  poll SERVERNAME protocol PROTOCOL username NAME password PASSWORD 
.fi
.PP
例:

.nf
  poll pop.provider.net protocol pop3 username "jsmith" password "secret1"
.fi
.PP
省略形を使えるものもあります:

.nf
  poll pop.provider.net proto pop3 user "jsmith" password "secret1"
.fi
.PP
複数のサーバを並べることができます:

.nf
  poll pop.provider.net proto pop3 user "jsmith" pass "secret1"
  poll other.provider.net proto pop2 user "John.Smith" pass "My^Hat"
.fi

上記の 2 つの例について、空白文字とノイズワードをいくつか増やしたもの
を示します:

.nf
  poll pop.provider.net proto pop3
      user "jsmith", with password secret1, is "jsmith" here;
  poll other.provider.net proto pop2:
      user "John.Smith", with password "My^Hat", is "John.Smith" here;
.fi

こう書いた方がずっと読みやすいですが、処理の手間はそんなにかかりません
(起動時に一度行われるだけです)。

.PP
パラメータ文字列に空白文字を含める必要がある場合には、
文字列をダブルクォートで囲みましょう。
以下のような形です:

.nf
  poll mail.provider.net with proto pop3:
        user "jsmith" there has password "u can't krak this"
                    is jws here and wants mda "/bin/mail"
.fi

最初のサーバ記述では、名前の前にキーワード `poll' ではなく、
キーワード`defaults' を置くことができます。
このようなレコードは、
全ての問い合わせで使われるデフォルト値として解釈されます。
これは個別のサーバ記述で上書きすることができます。
つまり、以下のように書くことができます:

.nf
  defaults proto pop3
        user "jsmith"
  poll pop.provider.net
        pass "secret1"
  poll mail.provider.net
        user "jjsmith" there has password "secret2"
.fi

サーバごとに複数のユーザを指定することもできます
(これが役に立つのは多分、
root がデーモンモードで fetchmail を実行するときだけでしょう)。
1 人のユーザ記述は `user' キーワードで始まり、
ユーザエントリが複数ある場合には、
このキーワードがユーザ指定それぞれに含まれていなければなりません。
以下に例を示します:

.nf
  poll pop.provider.net proto pop3 port 3111
        user "jsmith" with pass "secret1" is "smith" here
        user jones with pass "secret2" is "jjones" here keep
.fi

これは、ローカルのユーザ名 `smith' を
the pop.provider.net のユーザ名 `jsmith' に対応させ、
ローカルのユーザ名 `jjones' を
pop.provider.net のユーザ名 `jones' に対応させます。
`jones' のメールはダウンロード後もサーバーに残されます。
.PP
マルチドロップメールボックス用の取得を行う簡単な設定がどんな感じかを
以下に示します:

.nf
  poll pop.provider.net:
        user maildrop with pass secret1 to golux 'hurkle'='happy' snark here
.fi

これは、サーバ上のアカウント `maildrop' がマルチドロップボックスであり、
その中のメッセージはサーバのユーザ名 `golux', `hurkle', `snark' に対して
展開するという指定です。
これはさらに、`golux' と `snark' はクライアントでも
サーバと同じ名前を持つけれど、
サーバのユーザ `hurkle' 宛のメールは
クライアントのユーザ `happy' に配送することも指定します。
.PP
別の種類のマルチドロップ接続の例を示します:

.nf
  poll pop.provider.net localdomains loonytoons.org toons.org:
        user maildrop with pass secret1 to * here
.fi

これも、サーバ上のアカウント `maildrop' が
マルチドロップボックスであることを指定します。
これは fetchmail に対し、
loonytoons.org や toons.org ドメイン内のアドレス全て
(`joe@daffy.loonytoons.org' のようなサブドメインのアドレスも含みます) は
変更せずにローカルの SMTP リスナへ渡すことを指示します。
これを行うときにはメールのループには注意してください!
.PP
ssh と plugin オプションを用いた一つの設定例を示します。
問い合わせは、ssh を経由して、imapd の標準入力と標準出力で直接行われます。
この設定では IMAP 認証が飛ばされることに注意して下さい。

.nf
poll mailhost.net with proto imap:
        plugin "ssh %h /usr/sbin/imapd" auth ssh;
	user esr is esr here
.fi

.SH マルチドロップメールボックスの良い使い方と良くない使い方
ローカルの受信者を複数持つ機能は注意して使ってください。
痛い目を見るかもしれません。
ETRN と ODMR モードではマルチドロップ機能は全く使えない点に注意してください。

また、マルチドロップモードでは複製されたメールは
消される点にも注意してください。
あるメールが複製されていると判断されるのは、
直前のメッセージと同じメッセージ ID が付いていて、
複数のアドレスが指定されている場合です。
このようにメッセージが連続することは、
複数のユーザ宛の 1 通のメールのコピーが
1 つのマルチドロップメールボックスに配送された時に起こります。

.SS ヘッダ対 envelope アドレス
基本的な問題は、メールサーバに複数のユーザのメールを
1 つのメールドロップへ投げさせることにより、
それぞれのメールが実際に届けられていたユーザに関する、
もしかすると非常に重要かもしれない情報
(`envelope アドレス', RFC822 の To/Cc/Bcc ヘッダとは対立するものです) を
捨ててしまう可能性があることです。
この `envelope アドレス' は、
メールを適切に振り分けるために必要なアドレスです。
.PP
.I fetchmail
が envelope アドレスを推定できることも時々あります。
メールサーバの MTA が
.I sendmail
であり、メールの受信者が 1 人しかいない場合、MTA は envelope アドレスを
Received ヘッダに与える `by/for' の項を書いているでしょう。
しかし、これは他の MTA でも確実に動作するとは言えませんし、
複数の受信者がいる場合にも動作しません。
デフォルトでは、\fIfetchmail\fR はこれらの行で envelope アドレスを探します。
-E "Received" または \&`envelope Received' を指定すると
動作をこのデフォルトに戻すことができます。
.PP
これを行う代わりに、一部の SMTP リスナやメールサーバは、
envelope アドレスのコピーを持つヘッダを各メッセージに挿入します。
このヘッダは (存在するならば) `X-Envelope-To' のことがよくあります。
-E オプションまたは `envelope' オプションを用いると、
fetchmail が想定するヘッダを変更することができます。
この種類の envelope ヘッダを書くと、(ブラインドコピーの受信者も含めた)
全ての受信者の名前がメッセージ受信者に明らかになってしまいます。
したがって、これをセキュリティ/プライバシーの問題であると
考えるシステム管理者もいます。
.PP
`X-Envelope-To' を少し変えたものが、
qmail がメールのループを避けるために追加する `Delivered-To' ヘッダです。
これは、通常はユーザのドメインに
マッチする文字列の前に、ユーザ名を置いたものであることが多いです。
このプレフィックスを取り除くには、
-Q または `qvirtual' オプションを使います。
.PP
残念ながら、これらが両方ともうまく動作しないこともあります。
これらが全て失敗した場合、fetchmail は To/Cc/Bcc ヘッダから出直して、
受信者のアドレスを決めなければなりませんが、これらのヘッダは信頼できません。
特に、メーリングリストのソフトウェアが
リスト全体のアドレスしか To ヘッダに付けないでメールを送ることがよくあります。
.PP
.I fetchmail
がローカルの受信者アドレスを推定できず、
かつ本来の受信者のアドレスが fetchmail を実行したユーザ以外である場合、
メールは無くなってしまうでしょう。
これがマルチドロップ機能を危険にしている要因です。
.PP
これに関連する問題は、メールのメッセージをブラインドコピーするとき、
Bcc 情報は envelope アドレスとして\fIのみ\fR伝えられるということです
(X-Envelope ヘッダがなければ、fetchmail が読めるヘッダには書かれません)。
したがって、メールサーバのホストが常に X-Envelope ヘッダあるいはこれと
同等のヘッダをメールドロップに入れるメッセージに書くようになっていなければ、
fetchmail 経由でメールを取得するユーザ宛のブラインドコピーは失敗します。

.SS マルチドロップメールボックスの良い使い方
ローカル名を複数使うことにより、\fIfetchmail\fR のクライアント側から
メーリングリストを管理することができます。
あなたのユーザ名が \&`esr' であり、自分宛のメールを受け取ることと
(例えば) "fetchmail-friends" という
名前のメーリングリストの管理を両方やりたいとします。
それから、あなたのクライアントマシンで
エイリアスのリストも管理したいものとします。
.PP
サーバでは、\&`fetchmail-friends' を `esr' に
エイリアス設定することができます。
それから、\fI.fetchmailrc\fR では
\&`to esr fetchmail-friends here'を宣言します。
すると、`fetchmail-friends' をローカルアドレスとして含んでいる
メールが取得されたとき、
メーリングリストの名前が SMTP リスナが見ている受信者のリストに追加されます。
したがって、エイリアスの展開はローカルで行われます。
必ず、`esr' を fetchmail-friends のローカルのエイリアス展開に含めてください。
さもないと、このメーリングリストだけが宛先になっている
メールを絶対に見ることができません。
また、リスナの「自分にも」というオプションを必ずセットして
(sendmail では -oXm コマンドラインオプションか、OXm 宣言です)、
あなたが送ったメッセージのエイリアス展開から
あなたの名前が削除されないようにしてください。
.PP
しかし、このトリックに問題がないわけではありません。
あなたがローカル名として宣言して
\fIいない\fRメーリングリストだけが宛先になっているメールが来ると、
その問題が明らかになるでしょう。
このようなメッセージのそれぞれには、
`X-Fetchmail-Warning' ヘッダが付いています。
このヘッダは、fetchmail が受信者アドレス中で
有効なローカル名を見つけられなかったために生成されるものです。
このようなメッセージは、デフォルトで (既に述べたように)
.IR fetchmail
を実行しているローカルユーザに送られますが、
それが本当に正しい処置なのかをプログラム側から知る方法はありません。

.SS マルチドロップメールボックスの良くない使い方
マルチドロップメールボックスと、デーモンモードで複数のユーザにサービスを行う
.I fetchmail
を同時に使ってはいけません。
繰り返しますが、メーリングリストからのメールで問題が起こります。
このようなメールには通常、受信者個人のアドレスが書かれていないのです。
.I fetchmail
が envelope アドレスを推定できなければ、このようなメールは fetchmail
を実行したユーザ (root であることが多いでしょう) にしか届きません。
また、ブラインドコピーの宛先になっているユーザはきっと、
このようなメールが全く読めないでしょう。
.PP
もし、
.I fetchmail 
を使って 1 つのメールドロップから POP や IMAP 経由で
複数ユーザ宛のメールを取得しようと考えているならば、考え直してください
(そして、前述のヘッダと envelope アドレスに関する
セクションを読み直してください)。
メールは単にメールサーバのキューに入れておき、
fetchmail の ETRN や ODMR モードを使って定期的に
SMTP での送信を行わせる方が賢いやりかたでしょう
(この場合はもちろん、メールサーバでのメールの有効期限よりも短い間隔で
ポーリングをしなければならないことになります)。
このような設定ができないのならば、UUCP による配送を設定してみてください。
.PP
どうしてもこの目的でマルチドロップを\fI使わなければならない\fRのであれば、
fetchmail が参照できる envelope アドレスヘッダを
メールサーバが書き込むように必ずしてください。
さもなくば、メールはきっと無くなってしまい、
あなたを呪うために帰ってくることになるでしょう。

.SS マルチドロップのチェックの高速化
通常は、複数のユーザが宣言されているとき、
.I fetchmail
は受信者アドレスを先程説明したように展開し、
それぞれのホスト部分を DNSでチェックし、
これがメールサーバのエイリアスかどうかを調べます。
そうであれば、「to ... here」宣言で記述された名前のマッピングが実行され、
メールがローカルに配送されます。
.PP
これはとても安全ですが、非常に遅い方法です。
これを高速化するためには、
`aka' を使ってメールサーバのエイリアスを予め宣言してください。
これらは DNS の参照を行う前にチェックされます。
aka のリストがメールサーバの DNS エイリアス
(および、これを指す全ての MX 名) を
.B 全て
含んでいることが確かであれば、`no dns' を宣言して DNS 参照を完全に止め、
aka リストに対して\fIのみ\fRマッチングを行わせることができます。

.SH 終了コード
シェルスクリプト内で
.I fetchmail
をうまく使えるように、与えられた接続の間に起きたことを伝えるための
終了コードが返されるようになっています。
.PP
.I fetchmail
が返す終了コードを以下に示します:
.IP 0
1 つ以上のメッセージがうまく取得できた場合
(-c オプションを指定している時は、
取得待ちのメールを見つけ、取得を行わなかった場合)。
.IP 1
取得待ちのメールが無かった場合。
(サーバ上に古いメールがまだあるけれど、
取得されるものとして選ばれていなかった場合もあります。)
.IP 2
メール取得のためにソケットをオープンしようとしたときにエラーに出会った場合。
ソケットが何かを知らなくても、心配には及びません。
これは単に「どうしようもないエラー」として扱ってください。
このエラーは fetchmail が使おうとしたプロトコルが
/etc/services にリストされていない場合にも起こります。
.IP 3
ユーザ認証のステップで失敗した場合。
これは通常、ユーザ ID、パスワード、
APOP ID の指定が間違っていることを意味します。
これ以外の場合では、標準入力が端末に接続されていない状況で
fetchmail を実行しようとしていて、
入力できなかったパスワードを入力するためのプロンプトが
出せないことを意味しています。
.IP 4
何らかの種類の致命的なプロトコルエラーが検出された場合。
.IP 5
.I fetchmail
に与えた引き数に文法エラーがある場合。
.IP 6
実行制御ファイルのパーミッションが正しくない場合。
.IP 7
サーバからエラー状態が報告された場合。
サーバへの接続待ちで
.I fetchmail
がタイムアウトを起こした時にもこうなります。
.IP 8
クライアント側の排他エラーの場合。これは
.I fetchmail
が既に動作している別の
.I fetchmail
を検出したか、検出に失敗したため
.I fetchmail
が動作しているかどうかはっきりしないことを意味します。
.IP 9
サーバが応答で "lock busy" を返したために、
ユーザ認証ステップが失敗した場合。
ちょっと待ってから再挑戦してください!
このエラーはプロトコル全てに実装されているわけではないですし、
サーバ全てに実装されているわけでもありません。
このエラーがサーバに実装されていない場合には、
このコードではなく "2" が返されます (前の項目を参照してください)。
"lock busy" やこれに似たテキストで "lock" という語を含むものを応答として返す、
qpopper や他のサーバと通信したときにこのコードが返されることがあります。
.IP 10
SMTP ポートのオープンやトランザクションを行おうとしている時に
.I fetchmail
の動作が失敗した場合。
.IP 11
致命的な DNS のエラー。fetchmail が起動時に DNS の参照に失敗し、
その先を実行できなかったときに起こります。
.IP 12
BSMTP のバッチファイルをオープンできなかった場合。
.IP 13
取得の制限によりポーリングが終了した (--fetchlimit オプションを参照)。
.IP 14
サーバがビジーであることを示します。
.IP 23
内部エラーの場合。標準エラー出力に出るメッセージを詳しく見てください。
.PP
.I fetchmail
が複数のホストに問い合わせを行う場合、
\fIいずれか\fRの問い合わせでメールをうまく取得できれば、
ステータス 0 が返されます。
そうでないに返されるエラーステータスは、
最後に問い合わせを行ったホストのステータスとなります。

.SH ファイル
.TP 5
~/.fetchmailrc
デフォルトの実行制御ファイル
.TP 5
~/.fetchids
ホストと前回の読んだメールのメッセージ ID を対応づける
ファイルのデフォルトの位置
(UIDL コマンドをサポートしている、
RFC1725 準拠の最近の POP3 サーバでしか使うことができません)。
.TP 5
~/.fetchmail.pid
多重実行を防ぐためのロックファイル (非 root モードの場合)。
.TP 5
~/.netrc 
FTP の実行制御ファイル。(もしあるならば) 対話的にパスワードを求める前に、
最終的にパスワードが検索されるファイルです。
.TP 5
/var/run/fetchmail.pid
多重実行を防ぐためのロックファイル (root モード、Linux の場合)。
.TP 5
/etc/fetchmail.pid
多重実行を防ぐためのロックファイル
(root モード、/var/run が無いシステムの場合)。

.SH 環境変数
環境変数 FETCHMAILUSER が設定されている場合、
エラー通知をメールで知らせるためのユーザ名として使われます
(デフォルトではローカル名が使われます)。
この環境変数が設定されていない場合、
環境変数 LOGNAME か USER の値が正しく設定されていれば 
(例えば、この値に対応する UID がセッションのユーザ ID に一致する)、
その名前がデフォルトのローカル名として使われます。
これらの環境変数も設定されていない場合、
\fBgetpwuid\fR(3) がセッション ID に対する
パスワードエントリを取得できなければいけません
(このような手の込んだロジックは、
1 つのユーザ ID に複数のユーザ名が対応する場合を
うまく扱うために用意されています)。

環境変数 FETCHMAILHOME が
実際に存在する正しいディレクトリ名に設定されている場合、
ファイル .fetchmailrc, .fetchids, .fetchmail.pid は、
起動したユーザのホームディレクトリではなく、
この環境変数で指定したディレクトリに置かれます
(ファイル名の先頭にあるドットは取り除かれます)。
\&.netrc ファイルは、FETCHMAILHOME の設定に関係なく、
起動したユーザのホームディレクトリでロックされます。

.SH シグナル
.I fetchmail
デーモンが root 権限で動作している場合には、
SIGHUP によりスリープ状態から覚め、
skip 指定でないサーバ全てに対してポーリングを行います
(これはシステムデーモンの普通の伝統に従うものです)。
.PP
デーモンモード
.I fetchmail
が root 権限以外で動作している場合、
デーモンを起こすには SIGUSR1 を使います
(logout による SIGHUP がデフォルトの動作をそのまま持ち、
fetchmail を kill するかもしれないためです)。
.PP
バックグラウンドで
.I fetchmail
が動作しているときに、フォアグラウンドで
.I fetchmail
を実行すると、上記のうち適切なデーモンが起こされます。

.SH バグと既知の問題
mda オプションと plugin オプションは相性が良くありません。
MDA からエラー状態を取得するためには、
fetchmail は通常のシグナル処理を変更する必要があります。
このようにすると、ポーリングサイクルが終るまで
死んだプラグインプロセスが破棄されません。
そして、ゾンビプロセスが非常にたくさんできた場合は
リソースの枯渇が起こってしまいます。
プラグインを使った MDA への配送を行わないか、
大量のゾンビプロセスで溢れるかもしれないリスクを負うかのどちらかになります。
.PP
マルチドロップモードで使われている RFC822 アドレスのパーザは、
技術的には正しいけれどおかしな @-アドレスで詰まってしまうことがあります。
また、クォートと埋め込みコメントの使い方がおかしいと、
パーザの動作がおかしくなりやすいです。
.PP
メッセージに複数の envelope ヘッダがある場合、
fetchmail には最後に処理されたヘッダしか見えません。
これを回避するには、
envelope ヘッダの内容全てを 1 つのヘッダにまとめるフィルタ
(procmail, mailagent, maildrop に手順を指示すれば、
これはかなり簡単に行えます) をメールサーバ側で使ってください。
.PP
プロトコルのうちのいくつかを使う場合には、
プログラムが暗号化されていないパスワードを
メールサーバまで TCP/IP 接続上で送る必要があります。
これは、パケットスニファ (packet sniffer) や
もっと高機能な監視ソフトウェアによって
名前とパスワードの組を盗まれる危険性の元となります。
Linux と FreeBSD の場合、--interface オプションを使うと、
特定のローカルまたはリモートの IP アドレスを持つ
特定のインタフェースデバイスに対してのみ
ポーリングが可能であるように制限できますが、
その場合でも (a) どちらかのホストが
無差別モード (promiscuous mode) でオープンできる
ネットワークデバイスを持っているか、
(b) 間にあるネットワーク接続が盗聴可能であれば盗聴は可能です。
パスワードを暗号化するだけでなく、全ての通信を暗号化するためにも、
.IR ssh (1)
トンネリングの使用をお勧めします。
.PP
mda オプションで %F, %T エスケープを使うとセキュリティホールができます。
なぜなら、これらのエスケープは攻撃者が操作できるテキストを
シェルコマンドに渡すからです。
シェル文字になる可能性があるものは、実行の前に `_' に置換されます。
fetchmail は MDA を実行している間、
SUID により得ることができた権限を一時的に全て破棄するので、
このセキュリティホールはかなり小さくなっています。
しかし、できるだけ安全にするために、
fetchmail をroot のアカウントから実行するときには、
%F, %T を含むmda コマンドを使ってはいけません。
.PP
fetchmail における bouncemail と spambounce の出し方では、
ローカルホストの 25 番ポートで SMTP 経由のメールが送れなければなりません。
.PP
このプロセスをバックグラウンドで実行している時に
.I ~/.fetchmailrc
を修正し、文法を間違ってしまうと、
バックグラウンドのプロセスは何も言わずに終了してしまいます。
悪いことに、このプログラムは何かを書き出して終了することができません。
なぜなら、syslog を有効にすべき否かが、まだ分からないからです。
.PP
(設定を標準入力から読み込む) -f - オプションは、
プラグインオプションとは互換性がありません。
.PP
UIDL コードは一般的にあまり当てにならないもので、
行を飛ばした場合やエラーの場合に、コードの状態を失いやすい傾向があります
(そのため、古いメッセージが再度閲覧されてしまいます)。
このような場合は、IMAP4 に乗り換えて下さい。
.PP
`principal' オプションは Kerberos IV しか扱わず、
Kerberos V は扱いません。
.PP
コメント、バグ報告、苦情の類は、fetchmail-friends メーリングリスト
<fetchmail-friends@lists.ccil.org> に送ってください。
HTML 版の FAQ が fetchmail のホームページにあります。
http://www.tuxedo.org/~esr/fetchmail へ行くか、
`fetchmail' 関連のページを WWW で検索してください。

.SH 著者
Eric S. Raymond <esr@snark.thyrsus.com>。
ここでは挙げられないほど多くの方々がコードやパッチを提供してくださいました。
このプログラムは Carl Harris <ceharris@mal.com> さん作の
.IR popclient
を基にしており、これを置き換えるものです。
内部的にはまったく異なるものになりましたが、
インタフェース設計の一部については、
このご先祖様のものをそのまま引き継いでいます。

.SH 関連項目
mutt(1), elm(1), mail(1), sendmail(8), popd(8), imapd(8), netrc(5)
.SH 準拠している標準規約
.TP 5
SMTP/ESMTP:
RFC 821, RFC2821, RFC 1869, RFC 1652, RFC 1870, RFC1983, RFC 1985
.TP 5
mail:
RFC 822, RFC2822, RFC 1123, RFC 1892, RFC 1894
.TP 5
POP2:
RFC 937
.TP 5
POP3:
RFC 1081, RFC 1225, RFC 1460, RFC 1725, RFC1734, RFC 1939, RFC 1957,
RFC2195, RFC 2449
.TP 5
APOP:
RFC 1460, RFC 1725, RFC 1939
.TP 5
RPOP:
RFC 1081, RFC 1225
.TP 5
IMAP2/IMAP2BIS:
RFC 1176, RFC 1732
.TP 5
IMAP4/IMAP4rev1:
RFC 1730, RFC 1731, RFC 1732, RFC 2060, RFC 2061, RFC 2195, RFC 2177,
RFC 2683
.TP 5
ETRN:
RFC 1985
.TP 5
ODMR/ATRN:
RFC 2645
.TP 5
OTP:
RFC 1938
.TP 5
LMTP:
RFC 2033
.TP 5
GSSAPI:
RFC 1508
