.\" Copyright (c) 2000 Keith Owens <kaos@ocs.com.au>
.\" This program is distributed according to the Gnu General Public License.
.\" See the file COPYING in the kernel source directory.
.\"
.\" Japanese Version Copyright (c) 2000 NAKANO Takeo all rights reserved.
.\" Translated Thu 12 Oct 2000 by NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\" Updated Sat 16 Mar 2002 by Kentaro Shirakata <argrath@ub32.org>
.\" 
.TH KALLSYMS 8 "January 31, 2002" Linux "Linux Module Support"
.\"O .SH NAME
.\"O kallsyms \- Extract all kernel symbols for debugging
.SH 名前
kallsyms \- デバッグ用に全てのカーネルシンボルを抽出する
.\"O .SH SYNOPSIS
.SH 書式
.B kallsyms
[\-Vh] kernel_filename
.\"O .SH DESCRIPTION
.SH 説明
.hy 0
.\"O .B Kallsyms
.\"O extracts all the non-stack symbols from a kernel and builds a data blob
.\"O that can be linked into that kernel for use by debuggers.
.B kallsyms
はカーネルからスタック以外のシンボルをすべて抽出し、
オブジェクトデータをビルドする。このデータは
そのカーネルからリンクすることができ、デバッガから利用できる。
.PP
.\"O A normal kernel only exports symbols that are used by modules.
.\"O For debugging you may want a list of all the non-stack symbols, not
.\"O just the exported ones.
.\"O .B kallsyms
.\"O extracts all sections and symbols from a kernel, constructs a list of
.\"O the sections, symbols and their addresses and writes a relocatable
.\"O object containing just the __kallsyms section.
.\"O After the __kallsyms section is linked into the kernel and the kernel
.\"O has been booted, any debugger can use the data in the __kallsyms
.\"O section to get better symbol resolution.
通常のカーネルはモジュールから利用されるシンボルしかエクスポートしない。
デバッグするときには、このエクスポートされたリストだけでなく、
スタックシンボル以外の全てのリストがほしい場合があるかもしれない。
.B kallsyms
はカーネルから全てのセクションとシンボルを抽出し、
セクション・シンボル及びそれらのアドレスのリストを構築し、
__kallsyms セクションのみからなるリロケータブルなオブジェクトを書きだす。
__kallsyms セクションをカーネルにリンクし、
そのカーネルをブートすると、
デバッガは __kallsyms セクションのデータを利用して
より多くのシンボルを解決できるようになる。
.PP
.\"O For example, a debugger can use the __kallsyms data to resolve a kernel
.\"O address to:
例えば、デバッガは __kallsyms データを用いて、
以下のようなもののカーネルアドレスを求めることができる:
.PD 0
.IP * 3
.\"O The owning kernel or module.
__kallsyms セクションが所属するカーネルまたはモジュール
.IP * 3
.\"O The section within the owning code.
__kallsyms セクションの所属するコード内部のセクション
.IP * 3
.\"O The nearest symbol.
一番近いシンボル
.\"O .SH OPTIONS
.SH オプション
.TP
.BR \-h ", " \-\-help
.\"O Display a summary of options and exit.
オプションの一覧を表示して終了する。
.TP
.BR \-V ", " \-\-version
.\"O Display the version of \fBkallsyms\fR and exit.
\fBkallsyms\fR のバージョンを表示する。
.\"O .SH LINKER PASSES
.SH リンク作業
.\"O .PP
.\"O To create a kernel containing an accurate __kallsyms section, you have
.\"O to make four linker passes instead of the normal single link step.
.\"O kallsyms and the linker are fast, the three extra steps take a few
.\"O seconds on a P200.
正しく __kallsyms セクションを含んだカーネルを作成するには、
4 段階のリンク作業を行わなければならない (通常は 1 段階のみ)。
kallsyms とリンカは高速だから、P200 なら余分の 3 段階には数秒しかかからない。
.IP 1 3
.\"O The initial build of the kernel, without any __kallsyms data.
.\"O Run \fBkallsyms\fR against the output of this link, creating a relocatable
.\"O object which contains all the sections and symbols in the raw kernel.
__kallsyms データがない状態での、カーネルの最初のビルド。
\fBkallsyms\fR をこのリンクの出力に対して実行し、
生カーネルの全てのセクションと全てのシンボルを含む、
リロケータブルなオブジェクトを作成する。
.IP 2 3
.\"O Link the kernel again, this time including the \fBkallsyms\fR output from
.\"O step (1).
.\"O Adding the __kallsyms section changes the number of sections and many
.\"O of the kernel symbol offsets so run \fBkallsyms\fR again against the second
.\"O link, again saving the relocatable output.
再びカーネルをリンクする。今回は (1) での \fBkallsyms\fR の出力も含める。
__kallsyms セクションを追加すると、セクション数や多くのカーネルシンボルの
オフセットが変更されるので、もう一度 \fBkallsyms\fR をこの二番目のリンクに実行し、
再びリロケータブルな出力をセーブする。
.IP 3 3
.\"O Link the kernel again, this time including the \fBkallsyms\fR output from
.\"O step (2).
.\"O Run \fBkallsyms\fR against the latest version of the kernel.
.\"O The size and position of the __kallsyms section on this run is now
.\"O stable, none of the kernel sections or symbols will change after this
.\"O run.
.\"O The \fBkallsyms\fR output contains the final values of the kernel symbols.
再びカーネルをリンクする。今回は (2) での \fBkallsyms\fR の出力を含める。
\fBkallsyms\fR を一番新しいカーネルに対して実行する。
この段階で __kallsyms セクションのサイズと位置は安定し、
これ以降はカーネルの各セクション・シンボルは変わらない。
\fBkallsyms\fR の出力にはカーネルシンボルの最終値が含まれる。
.IP 4 3
.\"O Link the final kernel, including the \fBkallsyms\fR output from step (3).
(3) での \fBkallsyms\fR の出力を含め、最終的なカーネルをリンクする。
.\"O .SH DATA FORMAT
.SH データフォーマット
.\"O .PP
.\"O The __kallsyms section is a bit unusual.
.\"O It deliberately has no relocatable data, all "pointers" are represented
.\"O as byte offsets into the section or as absolute numbers.
.\"O This means it can be stored anywhere without relocation problems.
.\"O In particular it can be stored within a kernel image, it can be stored
.\"O separately from the kernel image, it can be appended to a module just
.\"O before loading, it can be stored in a separate area, etc.
__kallsyms セクションは通常と少々異なる。
これはリロケータブルなデータを故意に持たず、
全ての「ポインタ」はセクションへのバイトオフセットか、
あるいは絶対値として表される。
すなわちこのセクションはどこにでも置くことができ、
リロケーションの問題を気にしなくてよい。
これはカーネルイメージの内部に置くことができ、
カーネルイメージの外部にも置くことができ、
ロード直前のモジュールに追加することもでき、
別の領域に置くこともできる、などなど。
.PP
.\"O \fI/usr/include/sys/kallsyms.h\fR contains the mappings for the __kallsyms
.\"O data.
\fI/usr/include/sys/kallsyms.h\fR には
__kallsyms データのマッピングが記述されている。
.\"O .SS Header
.SS ヘッダ
.PD 0
.IP * 3
.\"O Size of header.
ヘッダのサイズ。
.IP * 3
.\"O Total size of the __kallsyms data, including strings.
__kallsyms データ全体のサイズ。文字列も含む。
.IP * 3
.\"O Number of sections.
.\"O This only included sections which are loaded into memory.
セクション数。メモリにロードされたセクションのみ。
.IP * 3
.\"O Offset to the first section entry from start of the __kallsyms header.
__kallsyms ヘッダのスタートから、最初のセクションエントリまでのオフセット。
.IP * 3
.\"O Size of each section entry, excluding the name string.
各セクションエントリのサイズ。名前文字列は除く。
.IP * 3
.\"O Number of symbols.
シンボルの数。
.IP * 3
.\"O Offset to the first symbol entry from the start of the __kallsyms
.\"O header.
__kallsyms ヘッダのスタートから先頭のシンボルエントリまでのオフセット。
.IP * 3
.\"O Size of each symbol entry, excluding the name string.
各シンボルエントリのサイズ。名前文字列は除く。
.IP * 3
.\"O Offset to the first string from the start of the __kallsyms header.
__kallsyms ヘッダのスタートから先頭の文字列までのオフセット。
.IP * 3
.\"O Start address of the first section[1].
最初のセクションの開始アドレス(注[1])。
.IP * 3
.\"O End address of the last section[1].
最後のセクションの終了アドレス(注[1])。
.PD 1
.\"O .SS Section entry
.SS セクションエントリ
.\"O .PP
.\"O One entry per loaded section.
.\"O Since __kallsyms is a loaded section, if the input file contains a
.\"O __kallsyms section then it is included in this list.
ロードされたセクションごとにひとつ。
_kallsyms はロードされるセクションなので、
入力ファイルに __kallsyms セクションが含まれていれば、
このリストに含まれる。
.PD 0
.IP * 3
.\"O Start of the section within the kernel[1].
カーネル内部でのそのセクションのスタート(注[1])。
.IP * 3
.\"O Size of section.
セクションのサイズ。
.IP * 3
.\"O Offset to the name of section, from the start of the __kallsyms
.\"O strings.
セクションの名前への、 __kallsyms 文字列のスタートからのオフセット。
.IP * 3
.\"O Section flags, from the original Elf section.
オリジナルの Elf セクションからのセクションフラグ。
.PD 1
.\"O .SS Symbol entry
.SS シンボルエントリ
.\"O .PP
.\"O One per symbol in the input file.
.\"O Only symbols that fall within loaded sections are stored.
入力ファイルでのシンボルごとにひとつ。
ロードされたセクションにあったシンボルだけが保存される。
.PD 0
.IP * 3
.\"O Offset to the __kallsyms section entry that this symbol falls within.
.\"O The offset is from the start of the __kallsyms section entries.
このシンボルが属する __kallsyms のセクションエントリに対するオフセット。
オフセットは __kallsyms のセクションエントリのスタートからとる。
.IP * 3
.\"O Address of the symbol within the kernel[1].
.\"O The symbols are sorted in ascending order on this field.
カーネル内部のシンボルのアドレス(注[1])。
シンボルはこのフィールドの昇順で保存される。
.IP * 3
.\"O Offset to the name of symbol, from the start of the __kallsyms strings.
シンボル名への、 __kallsyms 文字列のスタートからのオフセット。
.PD 1
.\"O .SS Strings
.SS 文字列
.\"O .PP
.\"O A set of NUL terminated strings.
.\"O Each name is referenced using an offset from the start of the
.\"O __kallsyms string area.
NUL 終端文字列のセット。
各名前は __kallsyms の文字列領域のスタートからのオフセットで参照される。
.\"O .SS Note [1]
.SS 注[1]
.\"O .PP
.\"O These fields are exceptions to the "everything is an offset" rule.
.\"O They contain absolute addresses within the kernel.
これらのフィールドは「全てはオフセット」ルールからは除外されている。
これらはカーネル内部での絶対アドレスである。
.\"O .SH SEE ALSO
.SH 関連項目
.\"O \fBinsmod\fR(8).
.BR insmod (8)
.\"O .SH HISTORY
.SH 履歴
.\"O Initial version by Keith Owens <kaos@ocs.com.au>, April 2000
最初のバージョンは 2000 年に Keith Owens <kaos@ocs.com.au> によって
作成された。
