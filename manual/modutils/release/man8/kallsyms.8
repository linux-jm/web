.\" Copyright (c) 2000 Keith Owens <kaos@ocs.com.au>
.\" This program is distributed according to the Gnu General Public License.
.\" See the file COPYING in the kernel source directory.
.\"
.\" Japanese Version Copyright (c) 2000 NAKANO Takeo all rights reserved.
.\" Translated Thu 12 Oct 2000 by NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\" Updated Sat 16 Mar 2002 by Kentaro Shirakata <argrath@ub32.org>
.\" 
.TH KALLSYMS 8 "January 31, 2002" Linux "Linux Module Support"
.SH 名前
kallsyms \- デバッグ用に全てのカーネルシンボルを抽出する
.SH 書式
.B kallsyms
[\-Vh] kernel_filename
.SH このマニュアルについて
これは、Linux Kernel 2.4 の時代に使われていた modutils
パッケージ所収の古いユーティリティのマニュアルです。(2022/12/02,
Linux JM Project)
.SH 説明
.hy 0
.B kallsyms
はカーネルからスタック以外のシンボルをすべて抽出し、
オブジェクトデータをビルドする。このデータは
そのカーネルからリンクすることができ、デバッガから利用できる。
.PP
通常のカーネルはモジュールから利用されるシンボルしかエクスポートしない。
デバッグするときには、このエクスポートされたリストだけでなく、
スタックシンボル以外の全てのリストがほしい場合があるかもしれない。
.B kallsyms
はカーネルから全てのセクションとシンボルを抽出し、
セクション・シンボル及びそれらのアドレスのリストを構築し、
__kallsyms セクションのみからなるリロケータブルなオブジェクトを書きだす。
__kallsyms セクションをカーネルにリンクし、
そのカーネルをブートすると、
デバッガは __kallsyms セクションのデータを利用して
より多くのシンボルを解決できるようになる。
.PP
例えば、デバッガは __kallsyms データを用いて、
以下のようなもののカーネルアドレスを求めることができる:
.PD 0
.IP * 3
__kallsyms セクションが所属するカーネルまたはモジュール
.IP * 3
__kallsyms セクションの所属するコード内部のセクション
.IP * 3
一番近いシンボル
.SH オプション
.TP
.BR \-h ", " \-\-help
オプションの一覧を表示して終了する。
.TP
.BR \-V ", " \-\-version
\fBkallsyms\fR のバージョンを表示する。
.SH リンク作業
正しく __kallsyms セクションを含んだカーネルを作成するには、
4 段階のリンク作業を行わなければならない (通常は 1 段階のみ)。
kallsyms とリンカは高速だから、P200 なら余分の 3 段階には数秒しかかからない。
.IP 1 3
__kallsyms データがない状態での、カーネルの最初のビルド。
\fBkallsyms\fR をこのリンクの出力に対して実行し、
生カーネルの全てのセクションと全てのシンボルを含む、
リロケータブルなオブジェクトを作成する。
.IP 2 3
再びカーネルをリンクする。今回は (1) での \fBkallsyms\fR の出力も含める。
__kallsyms セクションを追加すると、セクション数や多くのカーネルシンボルの
オフセットが変更されるので、もう一度 \fBkallsyms\fR をこの二番目のリンクに実行し、
再びリロケータブルな出力をセーブする。
.IP 3 3
再びカーネルをリンクする。今回は (2) での \fBkallsyms\fR の出力を含める。
\fBkallsyms\fR を一番新しいカーネルに対して実行する。
この段階で __kallsyms セクションのサイズと位置は安定し、
これ以降はカーネルの各セクション・シンボルは変わらない。
\fBkallsyms\fR の出力にはカーネルシンボルの最終値が含まれる。
.IP 4 3
(3) での \fBkallsyms\fR の出力を含め、最終的なカーネルをリンクする。
.SH データフォーマット
__kallsyms セクションは通常と少々異なる。
これはリロケータブルなデータを故意に持たず、
全ての「ポインタ」はセクションへのバイトオフセットか、
あるいは絶対値として表される。
すなわちこのセクションはどこにでも置くことができ、
リロケーションの問題を気にしなくてよい。
これはカーネルイメージの内部に置くことができ、
カーネルイメージの外部にも置くことができ、
ロード直前のモジュールに追加することもでき、
別の領域に置くこともできる、などなど。
.PP
\fI/usr/include/sys/kallsyms.h\fR には
__kallsyms データのマッピングが記述されている。
.SS ヘッダ
.PD 0
.IP * 3
ヘッダのサイズ。
.IP * 3
__kallsyms データ全体のサイズ。文字列も含む。
.IP * 3
セクション数。メモリにロードされたセクションのみ。
.IP * 3
__kallsyms ヘッダのスタートから、最初のセクションエントリまでのオフセット。
.IP * 3
各セクションエントリのサイズ。名前文字列は除く。
.IP * 3
シンボルの数。
.IP * 3
__kallsyms ヘッダのスタートから先頭のシンボルエントリまでのオフセット。
.IP * 3
各シンボルエントリのサイズ。名前文字列は除く。
.IP * 3
__kallsyms ヘッダのスタートから先頭の文字列までのオフセット。
.IP * 3
最初のセクションの開始アドレス(注[1])。
.IP * 3
最後のセクションの終了アドレス(注[1])。
.PD 1
.SS セクションエントリ
ロードされたセクションごとにひとつ。
_kallsyms はロードされるセクションなので、
入力ファイルに __kallsyms セクションが含まれていれば、
このリストに含まれる。
.PD 0
.IP * 3
カーネル内部でのそのセクションのスタート(注[1])。
.IP * 3
セクションのサイズ。
.IP * 3
セクションの名前への、 __kallsyms 文字列のスタートからのオフセット。
.IP * 3
オリジナルの Elf セクションからのセクションフラグ。
.PD 1
.SS シンボルエントリ
入力ファイルでのシンボルごとにひとつ。
ロードされたセクションにあったシンボルだけが保存される。
.PD 0
.IP * 3
このシンボルが属する __kallsyms のセクションエントリに対するオフセット。
オフセットは __kallsyms のセクションエントリのスタートからとる。
.IP * 3
カーネル内部のシンボルのアドレス(注[1])。
シンボルはこのフィールドの昇順で保存される。
.IP * 3
シンボル名への、 __kallsyms 文字列のスタートからのオフセット。
.PD 1
.SS 文字列
NUL 終端文字列のセット。
各名前は __kallsyms の文字列領域のスタートからのオフセットで参照される。
.SS 注[1]
これらのフィールドは「全てはオフセット」ルールからは除外されている。
これらはカーネル内部での絶対アドレスである。
.SH 関連項目
.BR insmod (8)
.SH 履歴
最初のバージョンは 2000 年に Keith Owens <kaos@ocs.com.au> によって
作成された。
