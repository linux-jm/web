.ig
Copyright (C) 1989-2000, 2001 Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be included in
translations approved by the Free Software Foundation instead of in
the original English.
..
.\" $FreeBSD: doc/ja_JP.eucJP/man/man1/eqn.1,v 1.8 2001/07/29 05:14:50 horikawa Exp $
.ie \n(.V<\n(.v .ds tx T\h'-.1667m'\v'.224m'E\v'-.224m'\h'-.125m'X
.el .ds tx TeX
.\" Like TP, but if specified indent is more than half
.\" the current line-length - indent, use the default indent.
.de Tp
.ie \\n(.$=0:((0\\$1)*2u>(\\n(.lu-\\n(.iu)) .TP
.el .TP "\\$1"
..
.\" The BSD man macros can't handle " in arguments to font change macros,
.\" so use \(ts instead of ".
.tr \(ts"
.TH EQN 1 "6 August 2001" "Groff Version 1.17.2"
.SH 名称
eqn \- troff 用の数式フォーマッタ
.SH 書式
.nr a \n(.j
.ad l
.nr i \n(.i
.in +\w'\fBeqn 'u
.ti \niu
.B eqn
.de OP
.ie \\n(.$-1 .RI "[\ \fB\\$1\fP" "\\$2" "\ ]"
.el .RB "[\ " "\\$1" "\ ]"
..
.OP \-rvCNR
.OP \-d cc
.OP \-T name
.OP \-M dir
.OP \-f F
.OP \-s n
.OP \-p n
.OP \-m n
.RI "[\ " files\|.\|.\|. "\ ]"
.br
.ad \na
.PP
コマンドラインオプションとパラメータの間に、空白を置くことが可能です。
.SH 解説
本マニュアルでは、groff ドキュメントフォーマットシステムの一部である
GNU バージョンの
.B eqn
について記述します。
.B eqn
は、
.B troff
への入力ファイルに埋め込まれている数式に関する記述をコンパイルし、
.B troff
が解釈できる命令列に変換します。通常、
.B groff
に
.B \-e
オプ
ションを指定することで、本プログラムは実行されます。文法は UNIX の eqn
ととても似かよっています。GNU eqn の出力は UNIX の troff で処理できないので、
GNU troff を用いる必要があります。コマンドラインに
ファイル名が指定されなかった場合は、標準入力から読み込みます。
ファイル名として
.B \-
を指定した場合も標準入力から読み込みます。
.LP
.B eqn
は、まず
.B \-M
オプションで指定されたディレクトリを、次に
.BR /usr/share/tmac ,
.BR /usr/share/tmac
を、最後に標準マクロディレクトリ
.B /usr/share/tmac
(訳注: 重複していますが原文通りです) から
.B eqnrc
を検索し、もし存在すれば入力ファイルの処理に先がけて読み込みを行います。
.B \-R
オプションを使うことにより、この動作を禁止できます。
.LP
GNU eqn は neqn の機能のすべてを提供するものではありません。低解像度の
タイプライタのような機器を (単純な入力に対しては十分であるのですが)
サポートしません。
.SH オプション
.TP
.B \-C
直後に空白文字や改行ではない文字が続く
.B .EQ
と
.B .EN
を解釈します。
.TP
.B \-N
区切り文字から次の区切り文字までの間に改行がくることを禁止します。誤って
閉じる方の
区切り文字をつけ忘れた場合も、以降の処理が正しく行われる可能性が高くなります。
.TP
.B \-v
バージョン番号を表示します。
.TP
.B \-r
サイズを 1 つだけ縮小します。
.TP
.BI \-m n
最低のポイントサイズを
.I n
とします。
.B eqn
は下付き、上付き文字を
.I n
より小さなサイズにしません。
.TP
.BI \-T name
.I name
で指定された機器用の出力を行います。実際は、
.I name
と
いう値 1 のマクロが定義されるだけです。普通は
.B eqnrc
でこの定義されたマクロによって出力機器にふさわしい設定がなされます。
デフォルトの出力機器は
.B ps
です。
.TP
.BI \-M dir
デフォルトのディレクトリ
.B /usr/share/tmac
よりも先に指定したディレクトリ
.I dir
の eqnrc を探します。
.TP
.B \-R
.B eqnrc
ファイルを読み込みません。
.TP
.BI \-f F
.BI gfont\  F
コマンドと等価です。
.TP
.BI \-s n
.BI gsize\  n
コマンドと等価です。このオプションは使うべきではありません。
eqn は、通常、数式が登場した位置のポイントサイズに数式のサイズをあわせます。
.TP
.BI \-p n
上付き、下付き文字が隣接するテキストより
.I n
ポイント小さくなるようにし
ます。このオプションは使うべきではありません。通常
eqn
は隣接するテキストの 70% のサイズになるように調節します。
.SH 使用法
ここでは、GNU eqn と Unix eqn の違いのみを解説します。
.LP
GNU eqn の新しい特徴のほとんどは、\*(tx に基づいています。
以下には、いくつかの \*(tx と GNU eqn の違いを記述してあります。
もし、あなたが \*(tx を知らないならば、無視した方が安全でしょう。
.SS 自動スペーシング
.LP
.B eqn
は、数式の中の部分それぞれに対して型を与えて、その型を用いて数式
の中の部分の間の間隔をそろえます。
利用できる型には以下のものがあります。
.TP \w'punctuation'u+2n
ordinary
1や
.IR x
のような通常の文字
.TP
operator
.ds Su \s+5\(*S\s0
.if \n(.g .if !c\(*S .ds Su 積算記号
\*(Su
のような大きな演算記号
.TP
binary
+ のような、2 項演算子
.TP
relation
= のような関係記号
.TP
opening
( のような括弧開始記号
.TP
closing
)のような括弧終了記号
.TP
punctuation
, のような句読点記号
.TP
inner
括弧内部に含まれた部分式
.TP
suppress
オートマチックスペーシングによる位置補正を抑制する
.LP
式の中の項の型は、以下に示す 2 つの方法のどちらかで指定されます。
.TP
.BI type\  t\ e
式の中の項で
.I e
を含むものを、型
.IR t
であると指定します。
.I t
は、上述の型の中から指定します。
たとえば、
.B times
は
.RS
.IP
.B
type "binary" \e(mu
.RE
.IP
と定義されます。
マクロ展開を防ぐためにクォーティングする以外は、
型の名前はクォートする必要はありません。
.TP
.BI chartype\  t\ text
クォートされていない文字のグループは、個々の文字に分割され、
それぞれの文字の型が検索されます。
この変更で、各文字について、それぞれ格納されている文字の型が変更されます。
この指定方法では、
.I text
にある文字は、型
.IR t
を持つようになります。例えば
.RS
.IP
.B
chartype "punctuation" .,;:
.RE
.IP
という指定は、
.B .,;:
という文字が、それぞれに句読点記号型を持つことを指定
します。
以後、式の中にこれらの文字が出現した場合は、句読点記号として処理されます。
型
.I t
は、
.B letter
や
.BR digit
という指定も可能です。この場合
.B chartype
は、文字のフォントの型を変更します。
詳細は、フォントサブセクションを見て下さい。
.SS 新しいプリミティブ
.TP
.IB e1\  smallover\  e2
これは
.BR over
と似ています;
.B smallover
は
.I e1
および
.IR e2
のサイズを小さくします;
また
.I e1
および
.I e2
と分数の線との間の垂直幅も小さくなります。
.B over
プリミティブは \*(tx
のディスプレイスタイルの
.B \eover
プリミティブに対応します;
.B smallover
は非ディスプレイスタイルの
.B \eover
に対応します。
.TP
.BI vcenter\  e
.I e
を数式軸 (math axis) にあわせて垂直方向にセンタリングします。
数式軸は垂直位置であり、
これにあわせて + や - といった文字はセンタリングされます;
また分数の線の垂直位置にもなります。
例えば、
.B sum
はこのように定義されています。
.RS
.IP
.B
{ type "operator" vcenter size +5 \e(*S }
.RE
.TP
.IB e1\  accent\  e2
.I e2
を
.IR e1
上のアクセントとします。
.I e2
は小文字のレターに対して適正な高さにあると仮定します;
.I e2
は、
.I e1
が小文字のレターよりも文字の高さが高かったり低かったりする場合には、
必要に応じて下方に移動されます。
例えば
.B hat
はこのように定義されています。
.RS
.IP
.B
accent { "^" }
.RE
.IP
.BR dotdot ,
.BR dot ,
.BR tilde ,
.BR vec ,
.B dyad
も
.B accent
プリミティブを用いて定義されています。
.TP
.IB e1\  uaccent\  e2
.I e2
を
.IR e1
下のアクセントとします。
.I e2
は下に突き出ていない小文字に対して適正な高さにあると仮定します;
.I e2
は、
.I e1
が下に突き出している場合、下方に移動されます。
.B utilde
は
.B uaccent
を使用して定義されており、
ベースライン下の tilde アクセントとなります。
.TP
.BI split\ \(ts text \(ts
単なる
.RS
.IP
.I text
.RE
.IP
と同じ効果ですが、
.I text
はクォートされているためマクロ展開の対象となりません;
.I text
は個々の文字に分割され、それぞれの文字の間に空白が調整されます。
.TP
.BI nosplit\  text
.RS
.IP
.BI \(ts text \(ts
.RE
.IP
と同じですが、
.I text
はクォートされていないためマクロ展開の対象となります;
.I text
は個々の文字に分割されず、それぞれの文字の間の空白も調整されません。
.TP
.IB e\  opprime
.B prime
の変形であり、
.IR e
のオペレータとして作用します。
.BR A\ opprime\ sub\ 1
のような場合、
opprinme は
.B prime
とは異なる結果となります:
.B opprime
では
.B 1
は prime 文字の真下に挿入され、
.B A
の下付き文字となります
(数式版組の形式のように)。
一方、
.B prime
では
.B 1
は prime 文字の下付き文字となります。
.B opprime
が前に付くという事は、
.B bar
と
.BR under
が前に付くのと同じ事ですが、
後者は
.BR accent ,
.BR uaccent
以外の他の全ての文字よりも高くなります。
クォートされていないテキスト中では、最初の文字ではない
.B '
は
.BR opprime
として扱われます。
.TP
.BI special\  text\ e
.BR troff  (1)
マクロ
.IR text
を使用して、
.I e
から新しいオブジェクトを生成します。
マクロが呼び出されると、文字列
.B 0s
は
.IR e
の出力を保持します。
また数字レジスタ
.BR 0w ,
.BR 0h ,
.BR 0d ,
.BR 0skern ,
.BR 0skew
はそれぞれ
.IR e
の幅、高さ、深さ、下付き文字のカーニング、スキューを保持します
(オブジェクトの
.I "subscript kern"
とは、オブジェクト中の下付き文字がどの程度挿入されるかを表します;
オブジェクトの
.I skew
とは、オブジェクト上のアクセントが
オブジェクトの中央から右側に向けてどの程度離れて配置されるかを表します)。
マクロは
.B 0s
を修正することにより、
現在位置における望ましい結果を出力し、
このオブジェクトの幅の分だけ現在の水平位置を増加させます。
数字レジスタは、結果に対応するように修正されている必要があります。
.RS
.LP
例えば、数式を `打ち消す' 構造を、斜め線を数式上に描く事によって
実現する場合を考えて見ましょう。
.IP
.nf
.ft B
.ne 6+\n(.Vu
\&.EQ
define cancel 'special Ca'
\&.EN
\&.de Ca
\&.ds 0s \eZ'\e\e*(0s'\ev'\e\en(0du'\eD'l \e\en(0wu -\e\en(0hu-\e\en(0du'\ev'\e\en(0hu'
\&..
.ft
.fi
.LP
以上の結果から、式
.I e
を
.BI cancel\ {\  e\  }
によって打ち消すことができます。
.LP
次はより複雑な構造により、式の周りに箱を描きます:
.IP
.nf
.ft B
.ne 11+\n(.Vu
\&.EQ
define box 'special Bx'
\&.EN
\&.de Bx
\&.ds 0s \eZ'\eh'1n'\e\e*(0s'\e
\eZ'\ev'\e\en(0du+1n'\eD'l \e\en(0wu+2n 0'\eD'l 0 -\e\en(0hu-\e\en(0du-2n'\e
\eD'l -\e\en(0wu-2n 0'\eD'l 0 \e\en(0hu+\e\en(0du+2n''\eh'\e\en(0wu+2n'
\&.nr 0w +2n
\&.nr 0d +1n
\&.nr 0h +1n
\&..
.ft
.fi
.RE
.SS カスタマイズ
数式の外見は多くのパラメータにより制御します。
これらのパラメータは
.B set
コマンドで設定します。
.TP
.BI set\  p\ n
パラメータ
.I p
を値
.I n
に設定します;
.I n
は整数です。
例えば、
.RS
.IP
.B
set x_height 45
.RE
.IP
は、
.B eqn
に対して x の高さは 0.45 em であると指示します。
.RS
.LP
パラメータを以下に示します。
特に記述が無い場合は、値は em の 100 分の 1 を意味します。
以下の記述は定義的ではなく説明的になるように意図しています。
.TP \w'\fBdefault_rule_thickness'u+2n
.B minimum_size
.B eqn
はこれよりも小さいポイントサイズのセッティングを行いません。
値はポイントで指定します。
.TP
.B fat_offset
.B fat
プリミティブは数式をボールドにするために、
数式のコピーを 2 回重ね打ちします。
重ね打ちする時にずらす水平幅がこの値です。
.TP
.B over_hang
分数の線の長さは、
分子もしくは分母の広い方の幅にこの値を 2 倍した長さを加えた長さとなります;
言い替えると、分子と分母は少なくともこの値だけオーバハングします。
.TP
.B accent_width
.B bar
か
.B under
が単一文字に対して適用された場合、
線の長さはこの値となります。
通常、
.B bar
および
.B under
は適用対象のオブジェクトの幅に等しい長さの線を生成します;
しかし単一文字の場合、
これでは大抵の場合線が長すぎるように見えてしまいます。
.TP
.B delimiter_factor
.B left
および
.B right
プリミティブにより生成される伸長性のあるデリミタは高さと深さを持ちます。
デリミタが括っている部分式が軸に対して最大限伸長する長さの
2000 分の 1 を単位とするこのパラメータで表した値は、
デリミタの高さと深さの最低値を与えます。
.TP
.B delimiter_shortfall
.B left
および
.B right
プリミティブにより生成される伸長性のあるデリミタは高さと深さを持ちます。
デリミタが括っている部分式が軸に対して最大限伸長する長さの
2000 分の 1 を単位とするこのパラメータで表した値は、
デリミタの高さと深さの差の最低値となります。
.TP
.B null_delimiter_space
分数の前後にこれだけの水平空白が挿入されます。
.TP
.B script_space
下付き文字、上付き文字の幅がこれだけ増やされます。
.TP
.B thin_space
句読点記号の後にこれだけの空白が自動的に挿入されます。
.TP
.B medium_space
2 項演算子の前後にこれだけの空白が自動的に挿入されます。
.TP
.B thick_space
関係演算子の前後にこれだけの空白が自動的に挿入されます。
.TP
.B x_height
x のように上に突き出た部分の無いレターの高さ。
.TP
.B axis_height
\(pl や \(mi といった
文字のセンタ位置がベースラインに対してどれくらい高いかを表します。
使用しているフォントに対して適切な値を使用する事が重要です。
.TP
.B default_rule_thickness
.B \e(ru
文字の太さ、
.B \eD
エスケープシーケンスにより生成される水平線の太さを指定します。
.TP
.B num1
.B over
コマンドは分子を最低この値だけ上に移動します。
.TP
.B num2
.B smallover
コマンドは分子を最低この値だけ上に移動します。
.TP
.B denom1
.B over
コマンドは分母を最低この値だけ下に移動します。
.TP
.B denom2
.B smallover
コマンドは分母を最低この値だけ下に移動します。
.TP
.B sup1
通常上付き文字は最低この値だけ上に移動します。
.TP
.B sup2
上付き文字中もしくは上限中の上付き文字、もしくは
.B smallover
における分子は、
最低この値だけ上に移動します。
この値は通常 sup1 より小さいです。
.TP
.B sup3
分母中もしくは平方根中の上付き文字、もしくは下付き文字もしくは下限は、
最低この値だけ上に移動します。
通常 sup2 より小さいです。
.TP
.B sub1
通常下付き文字は最低この値だけ下に移動します。
.TP
.B sub2
下付き文字と上付き文字の両方がある場合、
下付き文字は最低この値だけ下に移動します。
.TP
.B sup_drop
上付き文字のベースラインは、上付き文字がセットされるオブジェクトの上部
に対して、この値よりも下になることはありません。
.TP
.B sub_drop
下付き文字のベースラインは、下付き文字がセットされるオブジェクトの下部
に対して、少なくともこの値よりも下になります。
.TP
.B big_op_spacing1
上限のベースラインは、上限がセットされるオブジェクトの上部
に対して少なくともこの値よりも上になります。
.TP
.B big_op_spacing2
下限のベースラインは、下限がセットされるオブジェクトの下部
に対して少なくともこの値よりも下になります。
.TP
.B big_op_spacing3
上限の下部は、上限がセットされるオブジェクトの上部
に対して少なくともこの値よりも上になります。
.TP
.B big_op_spacing4
下限の上部は、下限がセットされるオブジェクトの下部
に対して少なくともこの値よりも下になります。
.TP
.B big_op_spacing5
これで指定される空白が上限上および下限下に付加されます。
.TP
.B baseline_sep
列ベクトルまたは行列の各行のベースラインがどれだけ離れているかを指定します。
大抵の場合、この値は
.B num1
と
.BR denom1
の和に等しいです。
.TP
.B shift_down
列ベクトルまたは行列の
一番上のベースラインおよび一番下のベースラインの中間点が、
軸からどれだけ下がっているかを指定します。
大抵の場合、この値は
.BR axis_height
に等しいです。
.TP
.B column_sep
行列の列間に加えられる空白の長さを指定します。
.TP
.B matrix_side_sep
行列の両端に加えられる空白の長さを指定します。
.TP
.B draw_lines
この値が非0の場合、線を引く場合に
.B \eD
エスケープシーケンスを使用し、
.B \el
エスケープシーケンスと
.B \e(ru
文字は使用しなくなります。
.TP
.B body_height
この値を式の高さが越えた分だけ、
当該式を含む行の前の空白に加えられます
(
.BR \ex を使用します)。
デフォルト値は 85 です。
.TP
.B body_depth
この値を式の深さが越えた分だけ、
当該式を含む行の後の空白に加えられます
(
.BR \ex を使用します)。
デフォルト値は 35 です。
.TP
.B nroff
この値が非 0 の場合には、
.B ndefine
は
.B define
のように振舞い、
.B tdefine
は無視されます。
この値が 0 の場合は
.B tdefine
は
.B define
のように振舞い、
.B ndefine
は無視されます。
デフォルト値は 0 です
(典型的には
.B eqnrc
ファイルによって、
.BR ascii ,
.BR latin1 ,
.BR utf8 ,
.B cp1047
デバイスの場合、この値は 1 に変更されます)。
.LP
これらのパラメータの役割に関するより正確な記述は
.IR The\ \*(txbook
の Appendix H に記載されています。
.RE
.SS マクロ
マクロは引数を取ることができます。
マクロが引数付きで呼ばれた場合、マクロボディでは、
.BI $ n
ただし
.I n
は 1 から 9 は、
.IR n 番目の
引数に置き換えられます;
引数が
.I n
より少ない場合、無と置き換えられます。
左括弧を含む語で、左括弧より前の語の部分が
.B define
コマンドで定義されている語は、
引数付きのマクロ呼び出しとして認識されます;
左括弧に続く複数の文字は、対応する右括弧の範囲まで、
コンマで区切られた引数として扱われます;
ネストした括弧内のコンマでは引数は区切られません。
.TP
.BI sdefine\  name\ X\ anything\ X
.B define
コマンドに似ていますが、
引数付きで呼ばれた場合
.I name
は認識されません。
.TP
.BI include\ \(ts file \(ts
.IR file
の内容を組み込みます。
.I file
中の行で、
.B .EQ
もしくは
.B .EN
で始まる行は無視されます。
.TP
.BI ifdef\  name\ X\ anything\ X
.I name
が
.B define
で定義されている場合
(または
.I name
が出力デバイスであるために自動的に定義されている場合)、
.IR anything
を処理します;
そうでない場合は
.IR anything
を無視します。
.I X
は
.IR anything
に含まれない文字であれば何でも構いません。
.SS フォント
.B eqn
は通常少なくとも 2 つのフォントを式のセットに使用します:
すなわち、レターにはイタリックを、
その他にはローマンを使用します。
既存の
.B gfont
コマンドは、
イタリックフォントとして使用されるフォントを変更します。
デフォルト値は
.BR I
です。
ローマンフォントとして使用されるフォントは
新しい
.B grfont
コマンドで変更します。
.TP
.BI grfont\  f
ローマンフォントを
.IR f
に設定します。
.LP
.B italic
プリミティブは
.BR gfont
によってセットされた現在のイタリックフォントを使用します;
.B roman
プリミティブは
.BR grfont
によってセットされた現在のローマンフォントを使用します。
また
.B gbfont
コマンドという新しいコマンドもあり、
.B bold
プリミティブで使用されるフォントを変更します。
式中でフォントを変更するのに
.BR roman ,
.BR italic ,
.B bold
プリミティブしか使用しない場合、
全ての式中のフォントを変更するのには
.BR gfont ,
.BR grfont ,
.B gbfont
コマンドを使用するだけで済みます。
.LP
どの文字をレター (イタリックでセットされるもの) として扱うのかを、
既に示した
.B chartype
コマンドで指定できます。
.B letter
タイプは文字をイタリックタイプでセットされるようにします。
.B digit
タイプは文字をローマンタイプでセットされるようにします、
.SH 関連ファイル
.Tp \w'\fB/usr/share/tmac/eqnrc'u+2n
.B /usr/share/tmac/eqnrc
初期化ファイル
.SH バグ
文中に出現する式は、行の先頭での文字サイズに設定されます。
.SH 関連項目
.BR groff (1),
.BR troff (1),
.BR groff_font (5),
.I The\ \*(txbook
.
.\" Local Variables:
.\" mode: nroff
.\" End:
