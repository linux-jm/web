'\"t
.\"nakano: もともと書いてないですが、これが必要な man system が多いので。
.\" st                        -*- nroff -*-
.ig
groff.7

This file is part of groff, the GNU roff type-setting system.

Copyright (C) 2000 Free Software Foundation, Inc.
written by Bernd Warken <bwarken@mayn.de>

Last update: 17 May 2000

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with the
Invariant Sections being this .ig-section and AUTHOR, with no
Front-Cover Texts, and with no Back-Cover Texts.

A copy of the Free Documentation License is included as a file called
FDL in the main directory of the groff source package.
..
.\" Japanese Version Copyright (c) 2001 UCHIDA Norihiro all rights reserved.
.\" Translated Thu Feb 15 2001 by UCHIDA Norihiro <KY4N-UCD@asahi-net.or.jp>
.
.\" --------------------------------------------------------------------
.\" Setup
.\" --------------------------------------------------------------------
.
.if n \{\
.  mso tmac.tty-char
.  ftr CR R
.  ftr CI I
.  ftr CB B
.\}
.
.if '\*[.T]'dvi' \{\
.  ftr CB CW
.\}
.
.\" a comment macro which does nothing
.de c
..
.
.\" a tab string
.ds t "\t
.
.eo
.
.c text lines in macro definitions or bracketed sections \{...\}
.de text
.  if 1 \&\$*\&
..
.
.de option
.  ds @tmp@ \f(CB\$1\fP
.  shift 1
.  text \*[@tmp@]\$*
.  rm @tmp@
..
.
.als shellcommand option
.
.c --------- characters ---------
.
.de character
.  ds @tmp@ \f(CB\$1\fP
.  shift
.  text \*[@tmp@]\$*
.  rm @tmp@
..
.
.\"O .de 'char
.\"O .  ds @tmp@ \(oq\f(CB\$1\fP\(cq
.\"O .  shift
.\"O .  text \*[@tmp@]\$*
.\"O .  rm @tmp@
.\"O ..
.de 'char
.  ds @tmp@ `\f(CB\$1\fP'
.  shift
.  text \*[@tmp@]\$*
.  rm @tmp@
..
.
.de ''char
.  ds @tmp@ \(lq\f(CB\$1\fP\(rq
.  shift
.  text \*[@tmp@]\$*
.  rm @tmp@
..
.
.c --------- requests ---------
.
.c request synopsis
.de REQ
.  ds @tmp@ \&\$1
.  shift 1
.  IP "\f(CB\&\*[@tmp@] \fP\f(CI\&\$*\fP" 10n
.  rm @tmp@
..
.
.de request
.  ds @tmp@ \f(CB\$1\fP
.  shift 1
.  text \*[@tmp@]\$*
.  rm @tmp@
..
.
.c --------- macro or function arguments ---------
.
.de argument
.  ds @tmp@ \f(CI\$1\fP
.  shift 1
.  while (\n[.$] >= 2) \{\
.    as @tmp@ \/\f(CR\$1\fP\f(CI\,\$2\fP
.    shift 2
.  \}
.  if \n[.$] .as @tmp@ \/\f(CR\$1\fP
.  text \*[@tmp@]
.  rm @tmp@
..
.
.c argument followed by a numerical expression
.de argterm
.  ds @tmp@ \f(CI\$1\fP\|\f(CR\$2\fP
.  shift 2
.  text \*[@tmp@]\$*
.  rm @tmp@
..
.
.c --------- numerical elements ---------
.
.de number
.  ds @tmp@ \f(CR\$1\fP
.  shift 1
.  text \*[@tmp@]\$*
.  rm @tmp@
..
.
.de prefixednumber
.  ds @tmp@ \&\$1\ \f(CR\$2\fP
.  shift 2
.  text \*[@tmp@]\$*
.  rm @tmp@
..
.
.als scaleindicator request
.
.de scalednumber
.  ds @tmp@ \f(CR\$1\fP\f(CB\$2\fP
.  shift 2
.  text \*[@tmp@]\$*
.  rm @tmp@
..
.
.\"O .de operator
.\"O .  ds @tmp@ \(oq\f(CB\$1\fP\(cq
.\"O .  shift
.\"O .  text \*[@tmp@]\$*
.\"O .  rm @tmp@
.\"O ..
.de operator
.  ds @tmp@ `\f(CB\$1\fP'
.  shift
.  text \*[@tmp@]\$*
.  rm @tmp@
..
.
.c --------- escape sequences ---------
.
.de esc[arg]
.  ds @tmp@ \f(CB\(rs\$1[\fP\f(CI\$2\fP\f(CB]\fP
.  shift 2
.  text \*[@tmp@]\$*
.  rm @tmp@
..
.
.de esc(arg
.  ds @tmp@ \f(CB\(rs\$1(\fP\f(CI\$2\fP
.  shift 2
.  text \*[@tmp@]\$*
.  rm @tmp@
..
.
.de escarg
.  ds @tmp@ \f(CB\(rs\$1\fP\f(CI\$2\fP
.  shift 2
.  text \*[@tmp@]\$*
.  rm @tmp@
..
.
.de esc[]
.  ds @tmp@ \f(CB\(rs[\fP\f(CI\$1\fP\f(CB]\fP
.  shift
.  text \*[@tmp@]\$*
.  rm @tmp@
..
.
.de esc(
.  ds @tmp@ \f(CB\(rs(\fP\f(CI\$1\fP
.  shift
.  text \*[@tmp@]\$*
.  rm @tmp@
..
.
.de esc
.  ds @tmp@ \f(CB\(rs\$1\fP
.  shift
.  text \*[@tmp@]\$*
.  rm @tmp@
..
.
.de (esc
.  ds @tmp@ \f(CB\(rs(\$1\fP
.  shift
.  text \*[@tmp@]\$*
.  rm @tmp@
..
.
.de [esc]
.  ds @tmp@ \f(CB\(rs[\$1]\fP
.  shift
.  text \*[@tmp@]\$*
.  rm @tmp@
..
.
.c escape sequence synopsis
.de ESC
.  ds @tmp@ \&\$1
.  shift 1
.  IP "\f(CB\(rs\&\*[@tmp@]\fP\f(CI\&\$*\fP"
.  rm @tmp@
..
.
.c synopsis for escape sequences with a long name
.de ESC[]
.  ds @arg1@ \&\$1
.  ds @arg2@ \&\$2
.  shift 2
.  IP "\f(CB\(rs\&\*[@arg1@][\fP\f(CI\&\*[@arg2@]\fP\f(CB]\&\$*\fP"
.  rm @arg1@
.  rm @arg2@
..
.
.c synopsis escape sequence with quoted argument
.  de ESCq
.  ds @tmp@ \&\$1
.  shift 1
.\"O .  IP "\f(CB\(rs\&\*[@tmp@]\(cq\fP\f(CI\h'-0.2m'\$*\/\fP\f(CB\(cq\fP"
.  IP "\f(CB\(rs\&\*[@tmp@]'\fP\f(CI\h'-0.2m'\$*\/\fP\f(CB'\fP"
.  rm @tmp@
..
.
.c synopsis for 2-escapes (special characters)
.de ESc
.  ds @tmp@ \$1
.  TP 14n
.  text \f(CB\(rs(\&\*[@tmp@]\ \ \ \fP\fR\(\*[@tmp@]\fP
.  shift 1
.\"O .  text \$*.
.  text \$*
.  rm @tmp@
..
.
.c --------- registers ---------
.
.c synopsis for registers
.de REG
.  TP 10n
.  text \&\f(CR\(rsn[\fP\f(CB\$1\fP\f(CR]\fP
.  shift 1
.if \n[.$] \&\$*
..
.
.als register request
.
.c --------- warnings ---------
.
.als warning request
.
.c description of warnings
.de Warning
.  ne (2v + 1)
.  TP 12n
.  text \f(CB\$1\fP
.  text \f(CI\$2\fP
.  br
..
.
.ec
.
.\" --------------------------------------------------------------------
.\" Title
.\" --------------------------------------------------------------------
.
.TH GROFF 7 "24 May 2000" "Groff Version 1.16.1"
.\"O .SH NAME
.SH 名前
.\"O groff \- a short reference for the GNU roff language
groff \- GNU groff 言語の簡易リファレンス
.
.\" --------------------------------------------------------------------
.\"O .SH DESCRIPTION
.SH 説明
.\" --------------------------------------------------------------------
.\"O .I groff
.\"O stands for
.\"O .I GNU roff
.\"O and is the free implementation of the roff type-setting system.
.\"O See
.\"O .BR roff (7)
.\"O for a survey and the background of the groff system.
.I groff
とは
.I GNU roff
の事であり、roff 組版システムのフリーな実装である。
groff システムの概観と背景については
.BR roff (7)
を参照のこと。
.LP
.\"O This document gives only short descriptions of the predefined roff
.\"O language elements as used in groff.
.\"O Both the classical features and the groff extensions are provided.
このドキュメントでは、groff で使われる定義済みの roff 言語要素を
簡潔に説明する。
伝統的な機能と groff の拡張との双方を取り扱う。
.LP
.\"O Historically, the
.\"O .I roff language
.\"O was called
.\"O .IR troff .
.\"O .I groff
.\"O is compatible with the classical system and provides proper extensions.
.\"O So in GNU, the terms
.\"O .IR roff ,
.\"O .IR troff ,
.\"O and
.\"O .I groff language
.\"O could be used as synonyms.
.\"O However
.\"O .I troff
.\"O slightly tends to refer more to the classical aspects, whereas
.\"O .I groff
.\"O emphasizes the GNU extensions, and
.\"O .I roff
.\"O is the general term for the language.
歴史的に、
.I roff 言語
は
.I troff
と呼ばれていた。
.I groff
は伝統的なシステムと互換性があり、固有の拡張も提供している。
そのため GNU 版では、
.IR roff ,
.IR troff ,
.I gorff 言語
という用語は同義語として扱われている。
しかし、どちらかといえば
.I troff
は伝統的な側面を表すときに、
.I groff
は GNU の拡張を強調するときに、
.I roff
は一般的な言語を意味するときに使われる傾向がある。
.LP
.\"O This file is only a short version of the complete documentation that is
.\"O found in the
.\"O .I groff
.\"O .BR info (1)
.\"O file, which contains more detailed, actual, and concise information.
このファイルは完全なドキュメントである
.I groff
.BR info (1)
ファイルの簡易版である。info ファイルには、より詳細で、実情に近く、
分かりやすい情報が含まれている。
.LP
.\"O The general syntax for writing groff documents is relatively easy, but
.\"O writing extensions to the roff language can be a bit harder.
groff ドキュメントを書くための通常の文法は比較的易しいが、
roff 言語を拡張する書き方は多少難しいかもしれない。
.LP
.\"O The roff language is line-oriented.
.\"O There are only two kinds of lines, control lines and text lines.
.\"O The control lines start with a control character, by default a period
.\"O .''char .
.\"O or a single quote
.\"O .''char ' ;
.\"O all other lines are text lines.
roff 言語は行指向である。
行には、制御行とテキスト行の 2 種類しかない。
制御行は制御文字で始まり、制御文字とはデフォルトではピリオド
.''char .
かシングルクォート
.''char '
である。それ以外で始まる行はすべてテキスト行である。
.LP
.\"O .B Control lines
.\"O represent commands, optionally with arguments.
.\"O They have the following syntax.
.\"O The leading control character can be followed by a command name;
.\"O arguments, if any, are separated by blanks from the command name and
.\"O among themselves, for example,
.B 制御行
はコマンドを表し、コマンドは引き数をとる場合もある。
これらの行は次のような文法となる。
まず先行する制御文字に続いてコマンド名、それから必要なら引き数がそれぞれ空白で
区切られる。例をあげると以下のとおり。
.RS
.LP
\&\.command_name arg1 arg2
.RE
.LP
.\"O For indentation, any number of space or tab characters can be inserted
.\"O between the leading control character and the command name, but the control
.\"O character must be on the first position of the line.
インデント用に、スペース文字・タブ文字を制御文字とコマンド名との間にいくつでも
挿入できる。しかし、制御文字は必ず行の先頭に置かなければならない。
.LP
.\"O .B Text lines
.\"O represent the parts that will be printed.
.\"O They can be modified by escape sequences, which are recognized by a
.\"O leading backslash
.\"O .'char \(rs .
.\"O These are in-line or even in-word formatting elements or functions.
.\"O Some of these take arguments separated by single quotes
.\"O .''char ' ,
.\"O others are regulated by a length encoding introduced by an open
.\"O parenthesis
.\"O .'char (
.\"O or enclosed in brackets
.\"O .'char [
.\"O and
.\"O .'char ] .
.B テキスト行
は、表示される部分を表す。
これらの行は、エスケープシーケンスによって修飾することができる。
バックスラッシュ
.'char \(rs
からはじまる文字列がエスケープシーケンスとして認識される。
これらは行や単語の一部に含まれ、整形要素となったり関数となったりする。
エスケープシーケンスには引き数をとるものもあり、
引き数はシングルクォート
.''char '
で区切られる。
他には、開き括弧
.'char (
で始まる長さ規定で制御されるものや、カギ括弧
.'char [
と
.'char ]
で括られるものがある。
.\"nakano: この辺私もよくわかってません、ごめんなさい。
.LP
.\"O The roff language provides flexible instruments for writing language
.\"O extension, such as macros.
.\"O When interpreting macro definitions, the roff system enters a special
.\"O operating mode, called the
.\"O .BR "copy mode" .
roff 言語は、マクロのような言語の拡張を記述するための柔軟な手段を提供している。
マクロ定義を処理するときには、roff システムは
.B コピーモード
と呼ばれる特別な処理モードへと切り替わる。
.LP
.\"O The copy mode behavior can be quite tricky, but there are some rules
.\"O that ensure a safe usage.
コピーモードのふるまいは実に巧妙である。
しかし、安全な使用法を保証するいくつかのルールがある。
.IP 1.
.\"O Printable backslashes must be denoted as
.\"O .esc e .
.\"O To be more precise,
.\"O .esc e
.\"O represents the current escape character.
.\"O To get a backslash glyph, use
.\"O .esc (rs .
表示するためのバックスラッシュは
.esc e
と表記しなければならない。
より正確に言うなら、
.esc e
は現在のエスケープ文字を意味する。
バックスラッシュのグリフが必要ならば、
.esc (rs
を用いること。
.IP 2.
.\"O Double all backslashes.
すべてのバックスラッシュを 2 回繰り返しておく。
.IP 3.
.\"O Begin all text lines with the special non-spacing character
.\"O .esc & .
すべてのテキスト行を特別な非空白文字である
.esc &
で開始する。
.LP
.\"O This does not produce the most efficient code, but it should work as a
.\"O first measure.
.\"O For better strategies, see the groff info file and
.\"O .BR groff_tmac (5).
このやり方は一番効率的なコードができるというわけではないが、当初の目的は達成できる。
より良い方法のためには、groff info ファイルと
.BR groff_tmac (5)
を参照してほしい。
.LP
.\"O Reading roff source files is easier, just reduce all double backslashes
.\"O to a single one in all macro definitions.
roff ソースファイルを読むのは簡単である。
単に、すべてのマクロ定義部分にある 2 重になったバックスラッシュを 1 つに
置き換えるだけである。
.
.\" --------------------------------------------------------------------
.\"O .SH "GROFF ELEMENTS"
.SH GROFF 要素
.\" --------------------------------------------------------------------
.\"O The roff language elements add formatting information to a text file.
.\"O The fundamental elements are predefined commands and variables that make
.\"O roff a full-blown programming language.
roff 言語の要素はテキストファイルに整形情報を追加する。
基本的な要素は定義済みのコマンドと変数であり、これらがあるので
roff は成熟したプログラミング言語となっている。
.LP
.\"O There are two kinds of roff commands, possibly with arguments.
.\"O .B Requests
.\"O are written on a line of their own starting with a dot
.\"O .'char .
.\"O or a
.\"O .''char ' ,
.\"O whereas
.\"O .B Escape sequences
.\"O are in-line functions and in-word formatting elements starting with a
.\"O backslash
.\"O .'char \(rs .
roff コマンドには 2 種類あり、可能ならば引き数をとることもできる。
.B リクエスト
は、ドット
.'char .
か
.''char '
で始まる 1 行に記述される。
一方、
.B エスケープシーケンス
は行埋め込み式の関数であり、バックスラッシュ
.'char \(rs
で始まる単語整形要素である。
.LP
.\"O The user can define her own formatting commands using the
.\"O .request .de
.\"O request.  These commands are called
.\"O .BR macros ,
.\"O but they are used exactly like requests.  Macro packages are pre-defined 
.\"O sets of macros written in the groff language.
.\"O A user's possibilities to create escape sequences herself is very
.\"O limited, only special characters can be mapped.
リクエスト
.request .de
を使うと、ユーザは自分専用の整形コマンドを定義することができる。
これらのコマンドは
.B マクロ
と呼ばれるが、リクエストとまったく同じように使われる。
マクロパッケージは groff 言語で記述された定義済みマクロの集まりである。
ユーザ独自のエスケープシーケンスを作る試みは非常に制限されており、
特殊文字のマップができる程度である。
.LP
.\"O The groff language provides several kinds of variables with
.\"O different interfaces.
.\"O There are pre-defined variables, but the user can define her own
.\"O variables as well.
groff 言語は、それぞれ使い方の異なる変数を何種類か提供している。
定義済みの変数もあるが、ユーザは独自の変数を定義することもできる。
.LP
.\"O .B String
.\"O variables store character sequences.
.\"O They are set with the
.\"O .request .ds
.\"O request and retrieved by the
.\"O .esc *
.\"O escape sequences.
.B 文字列
変数は文字のシーケンスを格納する。これらはリクエスト
.request .ds
によって値を設定し、エスケープシーケンス
.esc *
によって値が取り出される。
.LP
.\"O .B Register
.\"O variables can store numerical values, numbers with a scale unit, and
.\"O occasionally string-like objects.
.\"O They are set with the
.\"O .request .nr
.\"O request and retrieved by the
.\"O .esc n
.\"O escape sequences.
.B レジスタ
変数は、数値、単位付きの数字、そして場合によっては文字列のようなオブジェクトを
格納できる。
これらは、リクエスト
.request .nr
によって値を設定し、エスケープシーケンス
.esc n
によって値が取り出される。
.LP
.\"O .B Environments
.\"O allow the user to temporarily store global formatting parameters like
.\"O line length, font size, etc. for later reuse.
.\"O This is done by the
.\"O .request .ev
.\"O request.
.B 環境
には、ユーザが後から再利用するために、行の長さやフォントサイズといった
グローバルな整形用パラメータを一時的に格納することができる。
これは、リクエスト
.request .ev
によって行われる。
.LP
.\"O .B Fonts
.\"O are identified either by a name or by an internal number.
.\"O The current font is chosen by the
.\"O .request .ft
.\"O request or by the
.\"O .esc f
.\"O escape sequences.
.\"O Each device has special fonts, but the following fonts are available for 
.\"O all devices.
.\"O .B R
.\"O is the standard font Roman.
.\"O .B B
.\"O is its
.\"O .B bold
.\"O counterpart.
.\"O The
.\"O .I italic
.\"O font is called
.\"O .B I
.\"O is everywhere available, but on text devices, it is displayed as an
.\"O underlined Roman font.
.\"O For the graphical output devices, there exist constant-width pendants of
.\"O these font,
.\"O .BR CR ,
.\"O .BR CI ,
.\"O and
.\"O .BR CB .
.\"O On text devices, all characters have a constant width anyway.
.B フォント
は、名前でも内部的な番号ででも指定できる。
現在のフォントは、リクエスト
.request .ft
かエスケープシーケンス
.esc f
によって選ぶことができる。
デバイスごとに固有のフォントがあるが、以下のフォントはすべてのデバイスで
有効である。
.B R
は標準のローマン体フォントである。
.B B
はローマン体の
.B ボールド表示
である。
.B I
は
.I イタリック体
フォントである。
イタリックはどのデバイスでも使用できるが、
テキストデバイスではアンダーライン付きの
ローマン体フォントで表示される。
グラフィック出力デバイスでは、上記のフォントに対応する固定幅フォントもある。
それぞれ、
.BR CR ・ CB ・ CR
である。
テキストデバイスでは、どのみちすべての文字は固定幅になる。
.LP
.\"O Moreover, there are some advanced roff elements.
.\"O A
.\"O .B diversion
.\"O stores information into a macro for later usage.
.\"O A
.\"O .B trap
.\"O is a positional condition like a certain number of lines from page top
.\"O or in a diversion or in the input.
.\"O Some action can be prescribed to be run automatically when the condition
.\"O is met.
さらに、いくつかの拡張された roff 要素がある。
.B ディバージョン
は後で使うための情報をマクロ内部に格納する。
.B トラップ
は位置条件であり、ページ先頭からの特定の行番号とか、
ディバージョンや入力における特定の行番号などのかたちで指定される。
いくつかの動作を、条件を満したときに自動的に実行されるように指示することができる。
.\" uchida diversion の定訳は？
.LP
.\"O More detailed information can be found in the groff info file.
より詳細な情報は groff info ファイルに示されている。
.
.\" --------------------------------------------------------------------
.\"O .SH "CONTROL CHARACTERS"
.SH 制御文字
.\" --------------------------------------------------------------------
.\"O There is a small set of characters that have a special controlling task
.\"O in certain conditions.
ある条件下において、特別な制御機能を持つ文字がいくつかある。
.TP
.character .
.\"O A dot is only special at the beginning of a line or after the
.\"O condition in the requests
.\"O .request .if ,
.\"O .request .ie ,
.\"O .request .el ,
.\"O and
.\"O .request .while .
.\"O There it is the control character that introduces a request (or macro).
.\"O The special behavior can be delayed by using the
.\"O .esc .
.\"O escape.
.\"O By using the 
.\"O .request .cc
.\"O request, the control character can be set to a different character,
.\"O making the dot
.\"O .'char .
.\"O a non-special character.
ドットは、行の先頭にある場合と、以下のリクエスト (
.request .if ,
.request .ie ,
.request .el ,
.request .while )
の後にある場合には特別な意味を持つ。
これらの場合では、ドットはリクエスト (またはマクロ) の開始を意味する
制御文字となる。
この特殊な働きは
.esc .
のようにエスケープすることで抑制できる。
リクエスト
.request .cc
を用いると、この制御文字を別の文字に割り当てることができる。
この時、ドット
.'char .
は制御文字ではなくなる。
.IP ""
.\"O In all other positions, it just means a dot character.
.\"O In text paragraphs, it is advantageous to start each sentence at a line
.\"O of its own.
他の場所にある場合は、ドットは単にドット文字そのものを意味する。
テキストの段落においては、各センテンスを 1 行に書くと都合が良い。
.TP
.character '
.\"O The single quote has two controlling tasks.  At the beginning of a line
.\"O and in the conditional requests it is the non-breaking control
.\"O character.
.\"O That means that it introduces a request like the dot, but with the
.\"O additional property that this request doesn't cause a linebreak.
.\"O By using the 
.\"O .request .c2
.\"O request, the non-break control character can be set to a different
.\"O character.
シングルクォートには 2 つの制御機能がある。
行の先頭にある場合と、条件つきリクエストに続く場合には、非改行制御文字を意味する。
つまり、この文字はドットと同じようにリクエストの開始を意味するが、
それに加えて改行を行わないという特性がある。
リクエスト
.request .c2
を用いると、この非改行制御文字を別の文字に割り当てることができる。
.IP ""
.\"O As a second task, it is the most commonly used argument separator in
.\"O some functional escape sequences (but any pair of characters not part
.\"O of the argument will work).
.\"O In all other positions, it denotes the single quote or apostrophe
.\"O character.
.\"O Groff provides a printable representation with the
.\"O .esc (cq
.\"O escape sequence.
2 つめの機能としては、エスケープシーケンスにおいて引き数の
区切り文字としてよく使用される (ただし、引き数の一部になっていない
文字の対であればどれでも区切り文字として機能する)。
.\"nakano: ここちょっとわかりませんでした...
これら以外の場所にある時は、シングルクォート文字またはアポストロフィ文字を意味する。
groff はこの文字の表示用の表現手段としてエスケープシーケンス
.esc (cq
を提供している。
.TP
\fB"\fR
.\"O The double quote is used to enclose arguments in requests and macros.
.\"O The escaped double quote
.\"O .esc \(dq
.\"O introduces a comment.
.\"O Otherwise, it is not special.
.\"O Groff provides a printable representation with the
.\"O .esc (dq
.\"O escape sequence.
ダブルクォートは、リクエストやマクロの引き数を括る時に使用される。
エスケープされたダブルクォート
.B \e"
はコメントの開始を意味する。
それ以外の場合は、特別な機能はない。
groff はこの文字の表示用の表現手段としてエスケープシーケンス
.esc (dq
を提供している。
.TP
.character \(rs
.\"O The backslash usually introduces an escape sequence (this can be
.\"O changed with the
.\"O .request ec
.\"O request).
.\"O A printed version of the escape character is the
.\"O .esc e
.\"O escape; a backslash glyph can be obtained by
.\"O .esc (rs .
バックスラッシュは、通常はエスケープシーケンスの開始を意味する
(リスエスト
.request ec
によって変更することができる)。
表示用のエスケープ文字は、エスケープシーケンス
.esc e
であり、バックスラッシュのグリフは
.esc (rs
で得られる。
.TP
.character (
.\"O The open parenthesis is only special in escape sequences when
.\"O introducing an escape name or argument consisting of exactly two
.\"O characters.
.\"O In groff, this behavior can be replaced by the \f(CB[]\fP construct.
開き括弧は、エスケープシーケンスの内部で特別な意味を持つ。
ちょうど 2 文字からなるエスケープシーケンス名や引き数の開始を意味する。
groff では、この動作は \f(CB[]\fP の組で置き換えることができる。
.TP
.character [
.\"O The opening bracket is only special in groff escape sequences; there it
.\"O is used to introduce a long escape name or long escape argument.
.\"O Otherwise, it is non-special, e.g. in macro calls.
開き角括弧は、groff の場合エスケープシーケンス内部で特別な意味を持つ。
これは、長いエスケープシーケンス名や長いエスケープシーケンス引き数の
開始を意味する。
それ以外では、例えばマクロ呼び出しなどでも特別な作用はない。
.TP
.character ]
.\"O The closing bracket is only special in groff escape sequences; there it
.\"O terminates a long escape name or long escape argument.
.\"O Otherwise, it is non-special.
閉じ角括弧は groff のエスケープシーケンスにおいて特別な意味を持つ。
これは、長いエスケープシーケンス名や長いエスケープシーケンス引き数の終了を
意味する。
それ以外では、特別な作用はない。
.TP
\f(CIspace\fP
.\"O Space characters are only functional characters.  They separate the
.\"O arguments in requests or macros, and the words in text lines.
.\"O They are subject to groff's horizontal spacing calculations.
.\"O To get a defined space width, escape sequences like
.\"O .'char "\(rs\ "
.\"O (this is the escape character followed by a space),
.\"O .esc | ,
.\"O .esc ^ ,
.\"O or
.\"O .esc h
.\"O should be used.
空白 (space) 文字は機能的な働きしか持たない文字である。
これは、リクエストやマクロの引き数の区切り文字であり、
テキスト行における単語の区切りである。
また、groff の水平方向の語間計算の作用対象となる。
定義された空白幅を得るには、
.'char "\(rs\ "
(エスケープ文字とそれに続く空白文字)、
.'char "\(rs|" 、
.'char "\(rs^" 、
.'char "\(rsh"
といったエスケープシーケンスを用いればよい。
.IP \f(CInewline\fP
.\"O In text paragraphs, newlines mostly behave like space characters.
.\"O Continuation lines can be specified by an escaped newline, i.e., by
.\"O specifying a backslash
.\"O .'char \(rs
.\"O as the last character of a line.
テキストの段落においては、改行 (newline) は空白文字と同じような作用をする。
行が連結しているものとみなすには、改行をエスケープすることで指定できる。
つまり、行の最後の文字としてバックスラッシュ
.'char \(rs
を記述する。
.IP \f(CItab\fP
.\"O If a tab character occurs during text the interpreter makes a horizontal 
.\"O jump to the next pre-defined tab position.
.\"O There is a sophisticated interface for handling tab positions.
テキスト中にタブ文字があれば、インタプリタは次の定義済みのタブ位置へと
水平方向のインデントを作りだす。
タブ位置の調整には洗練されたインターフェースがある。
.
.\" --------------------------------------------------------------------
.\"O .SH "NUMERICAL EXPRESSIONS"
.SH 数式
.\" --------------------------------------------------------------------
.\"O A
.\"O .B numerical value
.\"O is a signed or unsigned integer or float with or without an appended
.\"O scale indicator.
.\"O A
.\"O .B scale indicator
.\"O is a one-character abbreviation for a unit of measurement.
.\"O A number followed by a scale indicator signifies a size value.
.\"O By default, numerical values do not have a scale indicator, i.e., they are
.\"O normal numbers.
.B 数値
とは、単位指定子の付加されていない
符号付き整数・符号なし整数・浮動小数点実数、
およびそれに単位指定子の付加されたものである。
.B 単位指定子
とは、計測単位を表す 1 文字の略語である。
単位が後置された数値は、サイズに関する値である。
デフォルトでは数値は単位指定を持たない。つまり、単なる数字である。
.LP
.\"O The roff language defines the following scale indicators.
roff 言語は、以下のような単位を定義している。
.LP
.na
.nh
.TS
center, tab(@);
LfCB Lw(4i).
.\"O c@Centimeter
c@センチメートル
.\"O i@Inch
i@インチ
.\"O P@Pica\ \(eq\ 1/6\ inch
P@パイカ\ \(eq\ 1/6\ インチ
.\"O p@Point\ \(eq\ 1/72\ inch
p@ポイント\ \(eq\ 1/72\ インチ
m@T{
.\"O Em\ \(eq\ \fRthe font size in points (width of letter `\f(CRm\fR')
Em\ \(eq\ \fRフォントサイズ (文字 `\f(CRm\fR` の幅)
T}
.\"O M@100th \fRof an \f(CREm
M@\f(CREm\fR の 100 倍
n@En\ \(eq\ Em/2
.\"O u@\fRBasic unit for actual output device
u@\fR実際の出力デバイス用の基本単位
.\"O v@\fRVertical line space in basic units
v@\fR基本単位による行送り幅
z@T{
.\"O scaled point\ \(eq\ 1/\f(CIsizescale\fR of a point (defined in
.\"O font \fIDESC\fP file)
スケールされたポイント数\ \(eq\ 1/\f(CIsizescale\fR
(フォントの \fIDESC\fR ファイルで定義されている)
T}
.TE
.LP
.ad
.hy
.\"O .B Numerical expressions
.\"O are combinations of the numerical values defined above with
.\"O the arithmetical operators
.B 数式
は、上記の数値と算術演算子
.operator + ,
.operator \- ,
.operator * ,
.operator / ,
.operator %
.\"O .RI ( modulo ),
.RI ( 剰余 )、
.\"O the comparative operators
比較演算子
.operator ==
.\"O (this is the same as
.\"O .operator = ),
(
.operator =
と同じ),
.operator <= ,
.operator >= ,
.operator < ,
.\"O .operator > ,
.operator > 、
.\"O the logical operators
論理演算子
.operator &
.\"O .RI ( and ),
.RI ( 論理積 ),
.operator :
.\"O .RI ( or ),
.RI ( 論理和 ),
.operator !
.\"O .RI ( not ),
.RI ( 論理否定 )、
.\"O and the parentheses
および括弧
.operator ( ,
.\"O and
.\"O .operator ) .
.operator )
の組み合わせである。
.LP
.\"O Moreover,
.\"O .I groff
.\"O added the following operators for numerical expressions:
さらに、
.I grof
には数式に以下の演算子が追加された:
.LP
.na
.nh
.TS
center, tab(@);
LfCB Lw(4i).
.\"O e1\f(CB>?\fPe2@The maximum of \f(CIe1\fP and \f(CIe2\fP.
e1\f(CB>?\fPe2@\fCIe1\fP と \f(CIe2\fP の最大値
.\"O e1\f(CB<?\fPe2@The minimum of \f(CIe1\fP and \f(CIe2\fP.
e1\f(CB<?\fPe2@\f(CIe1\fP と \f(CIe2\fP の最小値
\f(CB(\fPc\f(CB;\fPe\f(CB)@T{
.\"O Evaluate \f(CIe\fP using \f(CIc\fP as the default scaling
.\"O indicator.
\f(CIc\fP をデフォルトの単位指定子として \f(CIe\fP を評価する
.\" UCHIDA ？？？
T}
.TE
.LP
.ad
.hy
.\"O For details see the groff info file.
詳細は groff の info ファイルを参照のこと。
.
.\" --------------------------------------------------------------------
.\"O .SH CONDITIONS
.SH 条件式
.\" --------------------------------------------------------------------
.\"O .B Conditions
.\"O occur in tests raised by the
.\"O .request .if ,
.\"O .request .ie ,
.\"O and the
.\"O .request .while
.\"O requests.
.\"O The following table characterizes the different types of conditions.
.B 条件式
は、リクエスト
.request .if ,
.request .ie ,
.request .while
によって生じる条件判定である。
以下の表に、いろいろな条件式を示す。
.LP
.na
.nh
.TS
center, tab(@);
LfCB Lw(4i).
\f(CIN\fP@T{
.\"O A numerical expression \f(CIN\fP yields true if its value
.\"O is\ \f(CR>0\fP.
数式 \f(CIN\fP は値が 0 より大きければ真を返す。
T}
!\f(CIN\fP@T{
.\"O True if the value of \f(CIN\fP is\ \f(CR\(<=0\fP.
\f(CIN\fP の値が 0 以下であれば真。
T}
\&'\f(CIs1\fP'\f(CIs2\fP'@T{
.\"O True if string\ \f(CIs1\fP is identical to string\ \f(CIs2\fP.
文字列\ \f(CIs1\fP と文字列\ \f(CIs2\fP が等しければ真。
T}
!'\f(CIs1\fP'\f(CIs2\fP'@T{
.\"O True if string\ \f(CIs1\fP is not identical to string\ \f(CIs2\fP.
文字列\ \f(CIs1\fP と文字列\ \f(CIs2\fP が等しくなければ真。
T}
c\f(CIch@T{
.\"O True if there is a character\ \f(CIch\fP available.
文字\ \f(CIch\fP が有効であれば真。
T}
d\f(CIname@T{
.\"O True if there is a string, macro, diversion, or request
.\"O called \f(CIname\fP.
\f(CIname\fP という文字列・マクロ・ディバージョン・リクエストが存在すれば真。
T}
.\"O e@Current page number is even.
e@現在のページ番号が偶数なら真。
.\"O o@Current page number is odd.
o@現在のページ番号が奇数なら真。
.\"O n@Formatter is \fBnroff\fP.
n@フォーマッタが \fBnroff\fP なら真。
r\f(CIreg@T{
.\"O True if there is a register named \f(CIreg\fP.
\f(CIreg\fP というレジスタがあれば真。
T}
.\"O t@Formatter is \fBtroff\fR.
t@フォーマッタが \fBtroff\fP なら真。
.TE
.LP
.ad
.hy
.
.\" --------------------------------------------------------------------
.\"O .SH REQUESTS
.SH リクエスト
.\" --------------------------------------------------------------------
.\"O This section provides a short reference for the predefined requests.
.\"O In groff, request and macro names can be arbitrarily long.
.\"O No bracketing or marking of long names is needed.
このセクションでは、定義済みのリクエストについての短いリファレンスを
提供する。
groff では、リクエストとマクロの名前は任意の長さをとることができる。
長い名前に対して括弧で括ったりマークを付けたりする必要はない。
.LP
.\"O Most requests take one or more arguments.
.\"O The arguments are separated by space characters (no tabs!); there is no
.\"O inherent limit for their length or number.
.\"O An argument can be enclosed by a pair of double quotes: This is very handy
.\"O if an argument contains space characters, e.g.,
.\"O .argument "\(dqarg\ with\ space\(dq"
.\"O denotes a single argument.
たいていのリクエストは、ひとつまたは複数の引き数を持つ。
引き数は空白文字で区切られる (タブ文字は不可)。
その長さや数に制限はない。
引き数はダブルクォートで括ることができる。
これは、引き数に空白文字が含まれるときにとても便利である。
例えば、
\f(CI"arg with space"\fP
はひとつの引き数を意味する。
.LP
.\"O Some requests have optional arguments with a different behaviour.
.\"O Not all of these details are outlined here.
.\"O Refer to the groff info file for all details.
いくつかのリクエストは、動作を修正するためのオプション引き数を持つ。
それらの詳細はここでは説明しない。
詳細は、groff の info ファイルを参照のこと。
.LP
.\"O In the following request specifications, most argument names were chosen
.\"O to be descriptive.
.\"O Only the following denotations need clarification.
後述するリクエストの説明では、多くの引き数の名前は意味を表すように選んである。
下に挙げた用語についてはその意味を示す。
.LP
.na
.nh
.TS
center, tab(@);
LfCI Lw(4i).
.\"O c@denotes a single character.
c@1 文字を意味する。
font@T{
.\"O a font either specified as a font name or a font number.
名前または番号で指定されたフォント。
T}
anything@T{
.\"O all characters up to the end of the line or within \f(CB\(rs{\fP
.\"O and \f(CB\(rs}\fP.
行末までのすべての文字、または \f(CB\(rs{\fP と \f(CB\(rs}\fP で
括られた文字。
T}
n@T{
.\"O is a numerical expression that evaluates to an integer value.
整数値を返す数式。
T}
N@T{
.\"O is an arbitrary numerical expression, signed or unsigned.
符号付きまたは符号なしの任意の数式。
T}
\(+-N@T{
.\"O has three meanings depending on its sign, described below.
以下に説明するように符号に応じて 3 つの意味がある。
T}
.TE
.LP
.ad
.hy
.\"O If an expression defined as
.\"O .argument \(+-N
.\"O starts with a
.\"O .operator +
.\"O sign the resulting value of the expression will be added to an already
.\"O existing value inherent to the related request, e.g. adding to a number
.\"O register.
.\"O If the expression starts with a
.\"O .operator -
.\"O the value of the expression will be subtracted from the request value.
.argument \(+-N
で定義された式が
.operator +
符号で始まる場合は、式の結果の値は関連するすでに存在するリクエストに固有の
値に対して加算される。例えば、数値レジスタに追加される。
式が
.operator -
で始まる場合は、式の値がリクエストの値から減算される。
.LP
.\"O Without a sign,
.\"O .argument N
.\"O replaces the existing value directly.
.\"O To assign a negative number either prepend\ \c
.\"O .number 0
.\"O or enclose the negative number in parentheses.
符号が無い場合は、
.argument N
は既存の値を直接置き変える。
負の値を指定する場合には、0 を前置するか負数を括弧で括ればよい。
.
.\" --------------------------------------------------------------------
.\"O .SS "REQUEST SHORT REFERENCE"
.SS リクエストの簡易リファレンス
.\" --------------------------------------------------------------------
.PD 0
.
.REQ .
.\"O Empty line, ignored.  Useful for structuring documents.
空行 (無視される)。ドキュメントの整形に便利。
.
.REQ .\(rs" anything
.\"O Complete line is a comment.
行全体がコメントとなる。
.
.REQ .ab string
.\"O Print
.\"O .argument string
.\"O on standard error, exit program.
.argument string
を標準エラーに出力しプログラムを終了する。
.
.REQ .ad
.\"O Begin line adjustment for output lines in current adjust mode.
現在の位置ぞろえモードで出力行の位置ぞろえを開始する。
.
.REQ .ad c
.\"O Start line adjustment in mode
.\"O .argument c
.\"O (\f(CIc\fP\f(CR\|\^\(eq\|l,r,b,n\fP).
位置ぞろえモード
.argument c
で行を開始する。
(\f(CIc\fP\f(CR\|\^\(eq\|l,r,b,n\fP)
.
.REQ .af register c
.\"O Assign format
.\"O .argument c
.\"O to
.\"O .argument register
.\"O (\f(CIc\fP\f(CR\|\^\(eq\|l,i,I,a,A\fP).
フォーマット
.argument c
をレジスタ
.argument register
に割り当てる。
(\f(CIc\fP\f(CR\|\^\(eq\|l,i,I,a,A\fP)
.
.REQ .aln alias register
.\"O Create alias name for
.\"O .argument register .
レジスタ
.argument register
の別名
.argument alias
を作成する。
.
.REQ .als alias object
.\"O Create alias name for request, string, macro, or diversion
.\"O .argument object .
リクエストや文字列、マクロ、ディバージョンなどのオブジェクト
.argument object
の別名
.argument alias
を作成する。
.
.REQ .am macro
.\"O Append to
.\"O .argument macro
.\"O until
.\"O .request ..
.\"O is called.
.request ..
が呼ばれるまでをマクロ
.argument macro
に追加する。
.
.REQ .am macro end
.\"O Append to
.\"O .argument macro
.\"O until
.\"O .request .end
.\"O is called.
.request .end
が呼ばれるまでをマクロ
.argument macro
に追加する。
.
.REQ .as stringvar anything
.\"O Append
.\"O .argument anything
.\"O to
.\"O .argument stringvar .
文字列
.argument anything
を文字列変数
.argument stringvar
に追加する。
.
.REQ .asciify diversion
.\"O Unformat special ASCII characters in
.\"O .argument diversion .
ディバージョン
.argument diversion
に含まれる特殊 ASCII 文字を整形しない。
.
.REQ .backtrace
.\"O Print a backtrace of the input on stderr.
入力のバックトレースを標準エラー出力に出力する。
.
.REQ .bd font N
.\"O Embolden
.\"O .argument font
.\"O by
.\"O .argterm N -1
.\"O units.
フォント
.argument font
を
.argterm N -1
単位に強調する。
.
.REQ .bd S font N
.\"O Embolden Special Font
.\"O .argument S
.\"O when current font is
.\"O .argument font .
現在のフォントが
.argument font
のときにスペシャルフォント
.argument S
で強調する。
.\"nakano やってみないと判らないのかもですが、この辺いまいちピンときませんね..
.
.REQ .bp
.\"O Eject current page and begin new page.
現在のページを終了して新しいページを開始する。
.
.REQ .bp \(+-N
.\"O Eject current page; next page number
.\"O .argument \(+-N .
現在のページを終了する。次のページ番号を
.argument \(+-N
にする。
.
.REQ .blm macro
.\"O Set the blank line macro to
.\"O .argument macro .
空白行を意味するマクロを
.argument macro
に設定する。
.
.REQ .br
.\"O Line break.
改行。
.
.REQ .break
.\"O Break out of a while loop.
while ループを終了する。
.
.REQ .c2
.\"O Reset no-break control character to
.\"O .''char ' .
非改行制御文字を
.''char '
に戻す。
.
.REQ .c2 c
.\"O Set no-break control character to
.\"O .argument c .
非改行制御文字を
.argument c
に設定する。
.
.REQ .cc
.\"O Reset control character to
.\"O .'char . .
制御文字を
.'char .
に戻す。
.
.REQ .cc c
.\"O Set control character to
.\"O .argument c .
制御文字を
.argument c
に設定する。
.
.REQ .ce
.\"O Center the next input line.
次の入力行をセンタリングする。
.
.REQ .ce N
.\"O Center following
.\"O .argument N
.\"O input lines.
以下の
.argument N
行の入力行をセンタリングする。
.
.REQ .cf filename
.\"O Copy contents of file
.\"O .argument filename
.\"O unprocessed to stdout or to the diversion.
ファイル
.argument filename
の内容をそのまま標準出力またはディバージョンへコピーする。
.
.REQ .cflags mode c1 c2 ...
.\"O Treat characters
.\"O .argument c1 ,
.\"O .argument c2 ,
.\"O .argument ...
.\"O according to
.\"O .argument mode
.\"O number.
.argument mode
のモード番号に従って、文字
.argument c1 ,
.argument c2 ,
.argument ...
を扱う。
.
.REQ .ch trap N
.\"O Change
.\"O .argument trap
.\"O location
.\"O to
.\"O .argument N .
.argument trap
の場所を
.argument N
に変更する。
.
.REQ .char c anything
.\"O Define character
.\"O .argument c
.\"O to string
.\"O .argument anything .
文字列
.argument anything
を文字
.argument c
と定義する。
.
.REQ .chop object
.\"O Chop the last character off macro, string, or diversion
.\"O .argument object .
マクロ、文字列、ディバージョンなどの
.argument object
の最後の 1 文字をとりのぞく。
.
.REQ .close stream
.\"O Close the
.\"O .argument stream .
ストリーム
.argument stream
をクローズする。
.
.REQ .continue
.\"O Finish the current iteration of a while loop.
while ループにおける現在の繰り返し処理を終了する。
.
.REQ .cp
.\"O Enable compatibility mode.
互換モードを有効にする。
.
.REQ .cp N
.\"O If
.\"O .I N
.\"O is zero disable compatibility mode, otherwise enable it.
.I N
が 0 なら互換モードを無効にする。それ以外なら有効にする。
.
.REQ .cs font N M
.\"O Set constant character width mode for
.\"O .argument font
.\"O to
.\"O .argterm N /36
.\"O ems with em
.\"O .argument M .
フォント
.argument font
の固定ピッチ文字幅を
.argterm N /36
に設定する。(単位は全角文字幅
.argument M )
.
.REQ .cu N
.\"O Continuous underline in nroff, like
.\"O .request .ul
.\"O in troff.
nroff の場合の連続アンダーライン。
troff のリクエスト
.request .ul
に相当する。
.
.REQ .da macro
.\"O Divert and append to
.\"O .argument macro .
マクロ
.argument macro
を転換・追加する。
.\"nakano: divert?
.
.REQ .de macro
.\"O Define or redefine
.\"O .argument macro
.\"O until
.\"O .request ..
.\"O is called.
リクエスト
.request ..
が呼ばれるまでマクロ
.argument macro
を定義 (再定義) する。
.
.REQ .de macro end
.\"O Define or redefine
.\"O .argument macro
.\"O until
.\"O .request .end
.\"O is called.
リクエスト
.request .end
が呼ばれるまでマクロ
.argument macro
を定義 (再定義) する。
.
.REQ .di
.\"O End current diversion.
現在のディバージョンを終了する。
.
.REQ .di macro
.\"O Divert to
.\"O .argument macro .
マクロ
.argument macro
にディバージョンする。
.
.REQ .do name
.\"O Interpret
.\"O .request .name
.\"O with compatibility mode enabled.
リクエスト
.request .name
を互換モードを有効にして解釈する。
.
.REQ .ds stringvar anything
.\"O Set
.\"O .argument stringvar
.\"O to
.\"O .argument anything .
文字列変数
.argument stringvar
に文字列
.argument anything
を設定する。
.
.REQ .dt N trap
.\"O Set diversion trap to position
.\"O .argument N
.\"O (default scale indicator\ \c
.\"O .scaleindicator v ).
ディバージョンのトラップ位置を
.argument N
に設定する。
(デフォルトの単位指定子は
.scaleindicator v )
.
.REQ .ec
.\"O Reset escape character to
.\"O .'char \(rs .
エスケープ文字を
.'char \(rs
に戻す。
.
.REQ .ec c
.\"O Set escape character to
.\"O .argument c .
エスケープ文字を
.argument c
に設定する。
.
.REQ .el anything
.\"O Else part for if-else (\c
.\"O .argument .ie )
.\"O request.
if-else リクエスト (\c
.argument .ie )
の else ブロック。
.
.REQ .em macro
.\"O The
.\"O .argument macro
.\"O will be run after the end of input.
入力が終わった後にマクロ
.argument macro
を実行する。
.
.REQ .eo
.\"O Turn off escape character mechanism.
エスケープ文字の処理を抑制する。
.
.REQ .ev
.\"O Switch to previous environment.
直前の環境に変更する。
.
.REQ .ev env
.\"O Push down environment number or name
.\"O .argument env
.\"O and switch to it.
環境の番号または名前
.argument env
をプッシュして切り替える。
.
.REQ .evc env
.\"O Copy the contents of environment
.\"O .argument env
.\"O to the current environment.
.\"O No pushing or popping.
環境
.argument env
の内容を現在の環境にコピーする。
環境のプッシュまたはポップは行わない。
.
.REQ .ex
.\"O Exit from roff processing.
roff の処理を終了する。
.
.REQ .fam name
.\"O Set the current font family to
.\"O .argument name .
現在のフォントファミリーを
.argument name
に設定する。
.
.REQ .fc
.\"O Disable field mechanism.
フィールド機構を無効にする。
.\" UCHIDA ???
.
.REQ .fc a
.\"O Set field delimiter to
.\"O .argument a
.\"O and pad character to space.
フィールド区切りを
.argument a
に設定する。パディング文字をスペースにする。
.
.REQ .fc a b
.\"O Set field delimiter to
.\"O .argument a
.\"O and pad character to
.\"O .argument b .
フィールド区切りを
.argument a
に、パディング文字を
.argument b
に設定する。
.
.REQ .fi
.\"O Fill output lines.
出力行を埋める。
.
.REQ .fl
.\"O Flush output buffer.
出力バッファをフラッシュする。
.
.REQ .fp n font
.\"O Mount
.\"O .argument font
.\"O on position
.\"O .argument n .
位置
.argument n
にフォント
.argument font
をマウントする。
.
.REQ .fp n internal external
.\"O Mount font with long
.\"O .argument external
.\"O name to short
.\"O .argument internal
.\"O name on position
.\"O .argument n .
位置
.argument n
にフォントを長い名前
.argument external
から短い名前
.argument internal
にマウントする。
.\"nakano: フォントのマウントとは?
.
.REQ .fspecial font s1 s2...
.\"O When the current font is
.\"O .argument font ,
.\"O then the fonts
.\"O .argument s1 ,
.\"O .argument s2 ,
.\"O .argument ...
.\"O will be special.
現在のフォントが
.argument font
の場合に、
.argument s1 ,
.argument s2 ,
.argument ...
をスペシャルフォントにする。
.
.REQ .ft
.\"O Return to previous font.
.\"O Same as
.\"O .request \(rsfP .
直前のフォントに戻す。
リクエスト
.request \(rsfP
と同じ。
.
.REQ .ft font
.\"O Change to font name or number
.\"O .argument font ;
.\"O same as
.\"O .esc[arg] f font
.\"O escape sequence.
フォント名または番号
.argument font
に変更する。
エスケープシーケンス
.esc[arg] f font
と同じ。
.
.REQ .ftr font1 font2
.\"O Translate
.\"O .argument font1
.\"O to
.\"O .argument font2 .
フォント
.argument font1
をフォント
.argument font2
に変換する。
.
.REQ .hc
.\"O Remove additional hyphenation indicator character.
追加したハイフネーション指定文字を削除する。
.
.REQ .hc c
.\"O Set up additional hyphenation indicator character\ \c
.\"O .argument c .
ハイフネーション指定文字\ \c
.argument c
を追加する。
.
.REQ .hcode c1 code1 c2 code2 ...
.\"O Set the hyphenation code of character
.\"O .argument c1
.\"O to
.\"O .argument code1 ,
.\"O that of
.\"O .argument c2
.\"O to
.\"O .argument code2 ,
.\"O etc.
文字
.argument c1
のハイフネーションコードを
.argument code1
に、文字
.argument c2
のコードを
.argument code2
のように設定する。
.
.REQ .hla lang
.\"O Set the current hyphenation language to
.\"O .argument lang .
現在のハイフネーション言語を
.argument lang
に設定する。
.
.REQ .hlm n
.\"O Set the maximum number of consecutive hyphenated lines to
.\"O .argument n .
ハイフンされた行の最大連続数を
.argument n
に設定する。
.
.REQ .hpf file
.\"O Read hyphenation patterns from
.\"O .argument file .
ハイフネーションのパターンをファイル
.argument file
から読み込む。
.
.REQ .hw words
.\"O List of
.\"O .argument words
.\"O with exceptional hyphenation.
例外的なハイフネーションをする単語のリストを
.argument words
で指定する。
.
.REQ .hy N
.\"O Switch to hyphenation mode
.\"O .argument N .
ハイフネーションモードを
.argument N
に変更する。
.
.REQ .hym n
.\"O Set the hyphenation margin to
.\"O .argument n
.\"O (default scale indicator\ \c
.\"O .scaleindicator m ).
ハイフネーションのマージンを
.argument n
に設定する。
(デフォルトの単位指定子は\ \c
.scaleindicator m )
.
.REQ .hys n
.\"O Set the hyphenation space to
.\"O .argument n .
ハイフネーションのスペースを
.argument n
に設定する。
.
.REQ .ie cond anything
.\"O If
.\"O .argument cond
.\"O then
.\"O .argument anything
.\"O else goto
.\"O .request .el .
条件式
.argument cond
が真ならば
.argument anything
を処理する。偽の場合はリクエスト
.request .el
へ移動する。
.
.REQ .if cond anything
.\"O If
.\"O .argument cond
.\"O then
.\"O .argument anything ;
.\"O otherwise do nothing.
条件式
.argument cond
が真ならば
.argument anything
を処理する。偽の場合は何もしない。
.
.REQ .ig
.\"O Ignore text until
.\"O .request ..
.\"O is called.
リクエスト
.request ..
が呼ばれるまでテキストを無視する。
.
.REQ .ig end
.\"O Ignore text until
.\"O .request .end .
リクエスト
.request .end
が呼ばれるまでテキストを無視する。
.
.REQ .in
.\"O Change to previous indent value.
直前のインデント量に変更する。
.
.REQ .in \(+-N
.\"O Change indent according to
.\"O .argument \(+-N
.\"O (default scale indicator\ \c
.\"O .scaleindicator m ).
引き数
.argument \(+-N
に従ってインデント量を変更する。
(デフォルトの単位指定子は\ \c
.scaleindicator m )
.
.REQ .it N trap
.\"O Set an input-line count trap at position
.\"O .argument N .
入力行のカウントトラップを位置
.argument N
に設定する。
.
.REQ .kern
.\"O Enable pairwise kerning.
pairwise kerning を有効にする。
.\" UCHIDA ???
.\"nakano 整形アルゴリズムの名前みたいです。TeX から採った、って言ってるけど...
.
.REQ .kern n
.\"O If
.\"O .argument n
.\"O is zero, disable pairwise kerning, otherwise enable it.
.argument n
が 0 ならば pairwise kerning を無効にする。0 でなければ
有効にする。
.
.REQ .lc
.\"O Remove leader repetition character.
先頭の繰り返し文字を取り除く。
.
.REQ .lc c
.\"O Set leader repetition character to\ \c
.\"O .argument c .
先頭の繰り返し文字を\ \c
.argument c
に設定する。
.
.REQ .length register anything
.\"O Write the length of the string
.\"O .argument anything
.\"O in
.\"O .argument register .
文字列
.argument anything
の文字列長をレジスタ
.argument register
に書き込む。
.
.REQ .lf N file
.\"O Set input line number to
.\"O .argument N
.\"O and filename to
.\"O .argument file .
入力する行数を
.argument N
に、ファイル名を
.argument file
に設定する。
.
.REQ .lg N
.\"O Ligature mode on if
.\"O .argterm N >0 .
引き数
.argument N
が 0 より大きければリガチャ (合字) モードにする。
.
.REQ .ll
.\"O Change to previous line length.
直前の行幅に変更する。
.
.REQ .ll \(+-N
.\"O Set line length according to
.\"O .argument \(+-N
.\"O (default size
.\"O .scalednumber 6.5 i ,
.\"O default scale indicator\ \c
.\"O .scaleindicator m ).
行幅を引き数
.argument \(+-N
に従って設定する。
(デフォルトの設定は
.scalednumber 6.5 i
で、単位指定子は
.scaleindicator m )
.
.REQ .ls
.\"O Change to the previous value of additional intra-line skip.
追加の内部行スキップ量を直前の値に変更する。
.
.REQ .ls N
.\"O Set additional intra-line skip value to
.\"O .argument N ,
.\"O i.e.,
.\"O .argterm N -1
.\"O blank lines are inserted after each text output line.
追加の内部行スキップ量を
.argument N
に設定する。
つまり、テキストの出力行それぞれの後に
.argument N -1
行の空白行を挿入する。
.
.REQ .lt \(+-N
.\"O Length of title (default scale indicator\ \c
.\"O .scaleindicator m ).
タイトルの長さ。(デフォルトの単位指定子は\ \c
.scaleindicator m )
.
.REQ .mc
.\"O Margin character off.
マージンの文字を無効にする。
.
.REQ .mc c
.\"O Print character
.\"O .argument c
.\"O after each text line at actual distance from right margin.
それぞれのテキスト行の後と右側マージンの間に文字
.argument c
を出力する。
.
.REQ .mc c N
.\"O Set margin character to
.\"O .argument c
.\"O and distance to
.\"O .argument N
.\"O from right margin (default scale indicator\ \c
.\"O .scaleindicator m ).
マージン文字を
.argument c
に、右側マージンからの距離を
.argument N
に設定する。(デフォルトの単位指定子は\ \c
.scaleindicator m )
.
.REQ .mk register
.\"O Mark current vertical position in
.\"O .argument register .
現在の垂直位置を
.argument register
にマークする。
.
.REQ .mso file
.\"O The same as the .so request except that
.\"O .I file
.\"O is also searched in the tmac directories.
リクエスト .so と同じだが、tmac ディレクトリにある
.I file
も検索される。
.
.REQ .na
.\"O No output-line adjusting.
出力行の位置ぞろえを行わない。
.
.REQ .ne
.\"O Need a one-line vertical space.
1 行分の行送りが必要。
.
.REQ .ne N
.\"O Need
.\"O .argument N
.\"O vertical space (default scale indicator\ \c
.\"O .scaleindicator v ).
.argument N
行分の行送りが必要。(デフォルトの単位指定子は\ \c
.scaleindicator v )
.
.REQ .nf
.\"O No filling or adjusting of output-lines.
出力行にフィルタリングや位置ぞろえを行わない。
.
.REQ .nh
.\"O No hyphenation.
ハイフネーションをしない。
.
.REQ .nm
.\"O Number mode off.
行番号モードを無効にする。
.
.REQ .nm \(+-N M S I
.\"O In line number mode, set number, multiple, spacing, and indent.
行番号モードの、行番号、行番号出力間隔、空白、インデントを設定する。
.
.REQ .nn
.\"O Do not number next line.
次の行に行番号をつけない。
.
.REQ .nn N
.\"O Do not number next
.\"O .argument N
.\"O lines.
次の
.argument N
行に行番号をつけない。
.
.REQ .nr register \(+-N M
.\"O Define or modify
.\"O .argument register
.\"O using
.\"O .argument \(+-N
.\"O with auto-increment
.\"O .argument M .
レジスタの値を、インクリメント値
.argument M
で
.argument \(+-N
に設定・変更する。
.
.REQ .nroff
.\"O Make the built-in condition
.\"O .B n
.\"O true and
.\"O .B t
.\"O false.
内部条件式
.B n
を真に、
.B t
を偽にする。
.
.REQ .ns
.\"O Turn no-space mode on.
空白なしモードにする。
.
.REQ .nx filename
.\"O Next file.
次のファイル。
.
.REQ .open stream filename
.\"O Open
.\"O .register filename
.\"O for writing and associate the stream named
.\"O .register stream
.\"O with it.
ファイル
.register filename
を書き込みモードでオープンし、ストリーム名
.register stream
に関連付ける。
.
.REQ .opena stream filename
.\"O Like
.\"O .request .open
.\"O but append to it.
リクエスト
.request .open
と同じだが、追加モードでファイルをオープンする。
.
.REQ .os
.\"O Output vertical distance that was saved by the
.\"O .request .sv
.\"O request.
リクエスト
.request .sv
で指定された行送り量を出力する。
.
.REQ .pc
.\"O Reset page number character to\ \c
.\"O .'char % .
ページ番号文字を
.'char %
に戻す。
.
.REQ .pc c
.\"O Page number character.
ページ番号文字を設定する。
.
.REQ .pi program
.\"O Pipe output to
.\"O .argument program
.\"O (nroff only).
プログラム
.argument program
に出力をパイプする。(nroff のみ)
.
.REQ .pl
.\"O Set page length to default
.\"O .scalednumber 11 i .
.\"O The current page length is stored in
.\"O .register .p .
ページ長をデフォルトの
.scalednumber 11 i
に設定する。
現在のページ長はレジスタ
.register .p
に格納されている。
.
.REQ .pl \(+-N
.\"O Change page length to
.\"O .argument \(+-N
.\"O (default scale indicator\ \c
.\"O .scaleindicator v ).
ページ長を
.argument \(+-N
に変更する。(デフォルトの単位指定子は\ \c
.scaleindicator v )
.
.REQ .pm
.\"O Print macro names and sizes (number of blocks of 128 bytes).
マクロ名とサイズを出力する。(サイズは 1 ブロック 128 バイトのブロック数)
.
.REQ ".pm t"
.\"O Print only total of sizes of macros (number of 128 bytes blocks).
マクロ全体のサイズだけを出力する。(サイズは 1 ブロック 128 バイトのブロック数)
.
.REQ .pn \(+-N
.\"O Next page number
.\"O .argument N .
次のページ番号を
.argument N
に設定する。
.
.REQ .pnr
.\"O Print the names and contents of all currently defined number registers
.\"O on stderr.
現在定義されている数値レジスタの名前と内容を標準エラー出力に出力する。
.
.REQ .po
.\"O Change to previous page offset.  The current page offset is available in
.\"O .register .o .
直前のページオフセットに変更する。現在のページオフセットはレジスタ
.register .o
に格納されている。
.
.REQ .po \(+-N
.\"O Page offset
.\"O .argument N .
ページオフセットを
.argument N
に設定する。
.
.REQ .ps
.\"O Return to previous point-size.
直前のポイントサイズに戻す。
.
.REQ .ps \(+-N
.\"O Point size; same as
.\"O .esc[arg] s \(+-N .
ポイントサイズを指定する。エスケープシーケンス
.esc[arg] s \(+-N
と同じ。
.
.REQ .psbb filename
.\"O Get the bounding box of a PostScript image
.\"O .argument filename .
PostScript 画像
.argument filename
のための矩形領域を得る。
.
.REQ .pso command
.\"O This behaves like the
.\"O .request .so
.\"O request except that input comes from the standard output of
.\"O .argument command .
リクエスト
.request .so
と同様だが、
.argument command
の標準出力から入力する。
.
.REQ .ptr
.\"O Print the names and positions of all traps (not including input line
.\"O traps and diversion traps) on stderr.
すべてのトラップの名前と位置を標準エラー出力に出力する。
(入力行のトラップとディバージョンのトラップは含まれない)
.
.REQ .rchar c1 c2...
.\"O Remove the definitions of characters
.\"O .argument c1 ,
.\"O .argument c2 ,
.\"O .argument ...
文字定義
.argument c1 ,
.argument c2 ,
.argument ...
を削除する。
.
.REQ .rd prompt
.\"O Read insertion.
挿入を読み込む。
.
.REQ .rj n
.\"O Right justify the next
.\"O .argument n
.\"O input lines.
次の
.argument n
行の入力行を右寄せする。
.
.REQ .rm name
.\"O Remove request, macro, or string
.\"O .argument name .
.argument name
で指定されたリクエスト、マクロ、文字列を削除する。
.
.REQ .rn old new
.\"O Rename request, macro, or string
.\"O .argument old
.\"O to
.\"O .argument new .
.argument old
で指定されたリクエスト、マクロ、文字列の名前を
.argument new
に変更する。
.
.REQ .rnn reg1 reg2
.\"O Rename register
.\"O .argument reg1
.\"O to
.\"O .argument reg2 .
レジスタ名
.argument reg1
を
.argument reg2
に変更する。
.
.REQ .rr register
.\"O Remove
.\"O .argument register .
レジスタ
.argument register
を削除する。
.
.REQ .rs
.\"O Restore spacing; turn no-space mode off.
空白をもとに戻す。つまり空白なしモードを無効にする。
.
.REQ .rt \(+-N
.\"O Return
.\"O .I (upward only)
.\"O to marked vertical place (default scale indicator\ \c
.\"O .scaleindicator v ).
マークされた垂直位置まで大文字を返す。
(デフォルトの単位指定子は\ \c
.scaleindicator v )
.
.REQ .shc
.\"O Reset soft hyphen character to
.\"O .esc (hy .
ハイフン文字を
.esc (hy
に戻す。
.
.REQ .shc c
.\"O Set the soft hyphen character to
.\"O .argument c .
ハイフン文字を
.argument c
に設定する。
.
.REQ .shift n
.\"O In a macro, shift the arguments by
.\"O .argument n \ \c
.\"O positions.
マクロにおいて、引き数を位置
.argument n
にシフトする。
.
.REQ .so filename
.\"O Include source file.
ソースファイルをインクルードする。
.
.REQ .sp
.\"O Skip one line vertically.
1 行スキップする。
.
.REQ .sp N
.\"O Space vertical distance
.\"O .argument N
.\"O up or down according to sign of
.\"O .argument N
.\"O (default scaling indicator\ \c
.\"O .scaleindicator v ).
.argument N
の行送りを挿入する。
.argument N
の符号によって上下方向が決まる。
(デフォルトの単位指定子は
.scaleindicator v )
.
.REQ .special s1 s2 ...
.\"O Fonts
.\"O .argument s1 ,
.\"O .argument s2 ,
.\"O etc. are special and will be searched for characters not in the current font.
フォント
.argument s1 ,
.argument s2 ,
等はスペシャルフォントであり、現在のフォントにない文字をこれらから検索する。
.
.REQ .ss N
.\"O Space-character size set to
.\"O .argument N /12
.\"O of the spacewidth in the current font.
空白文字のサイズを
.argument N /12
に設定する。単位は現在のフォントの空白幅。
.
.REQ .ss N M
.\"O Space-character size set to
.\"O .argterm N /12
.\"O and sentence space size set to
.\"O .argterm M /12
.\"O of the spacewidth in the current font (\f(CR\(eq1/3 em\fP).
空白文字のサイズを
.argument N /12
に、文の空白サイズを
.argument M /12
に設定する。単位は現在のフォントの空白幅 (\f(CR\(eq1/3 em\fP)
.
.REQ .sty n style
.\"O Associate
.\"O .argument style
.\"O with font position
.\"O .argument n .
位置
.argument n
のフォントをスタイル
.argument style
に関連付ける。
.
.REQ .substring register n1 n2
.\"O Replace the string in
.\"O .argument register
.\"O with the substring defined by the indices
.\"O .argument n1
.\"O and
.\"O .argument n2 .
レジスタ
.argument register
の文字列の中の部分文字列
.argument n1
を
.argument n2
に置き換える。
.
.REQ .sv
.\"O Save
.\"O .scalednumber 1 v
.\"O of vertical space.
行送り量を
.scalednumber 1 v
に設定する。
.
.REQ .sv N
.\"O Save the vertical distance
.\"O .argument N
.\"O for later output with
.\"O .request .os
.\"O request.
リクエスト
.os
で出力される空白行の送り量を
.argument N
に設定する。
.
.REQ .sy command-line
.\"O Execute program
.\"O .argument command-line .
プログラム
.argument command-line
を実行する。
.
.REQ ".ta T" N
.\"O Set tabs after every position that is a multiple of
.\"O .argument N
.\"O (default scaling indicator\ \c
.\"O .scaleindicator m ).
タブ位置を
.argument N
の倍数に設定する。
(デフォルトの単位指定子は\ \c
.scaleindicator m )
.
.REQ .ta n1 n2 ... nn \f(CBT\fP r1 r2 ... rn
.\"O Set tabs at positions
.\"O .argument n1 ,
.\"O .argument n2 ,
.\"O \&...,
.\"O .argument nn ,
.\"O then set tabs at
.\"O .argument nn + r1 ,
.\"O .argument nn + r2 ,
.\"O \&...,
.\"O .argument nn + rn ,
.\"O then at
.\"O .argument nn + rn + r1 ,
.\"O .argument nn + rn + r2 ,
.\"O \&...,
.\"O .argument nn + rn + rn ,
.\"O and so on.
位置
.argument n1 ,
.argument n2 ,
\&... ,
.argument nn
のタブ位置をそれぞれ
.argument nn + r1 ,
.argument nn + r2 ,
\&...
.argument nn + rn
に、さらにそれ以降を
.argument nn + rn + r1 ,
.argument nn + rn + r2 ,
\&...
.argument nn + rn + rn
のように設定する。
.
.\".REQ .tar
.\"Restore internally saved tab positions.
.\".
.\".REQ .tas
.\"Save tab positions internally.
.
.REQ .tc
.\"O Remove tab repition character.
タブ繰り返し文字を削除する。
.
.REQ .tc c
.\"O Set tab repetition character to\ \c
.\"O .argument c .
タブ繰り返し文字を\ \c
.argument c
に設定する。
.
.REQ .ti \(+-N
.\"O Temporary indent next line (default scaling indicator\ \c
.\"O .scaleindicator m ).
次の行を一時的にインデントする。
(デフォルトの単位指定子は\ \c
.scaleindicator m )
.
.REQ .tkf font s1 n1 s2 n2
.\"O Enable track kerning for
.\"O .argument font .
フォント
.argument font
のトラックカーニングを有効にする。
.
.REQ .tl \f(CB'\fPleft\f(CB'\fPcenter\f(CB'\fPright\f(CB'\fP
.\"O Three-part title.
3 つの部位をもつタイトル。
.
.REQ .trf filename
.\"O Transparently output the contents of file
.\"O .argument filename .
ファイル
.argument filename
の内容をそのまま出力する。
.
.REQ .tm anything
.\"O Print
.\"O .argument anything
.\"O on terminal (UNIX standard message output).
.argument anything
をターミナル (UNIX の標準的なメッセージ出力先) に出力する。
.
.REQ .tr abcd....
.\"O Translate
.\"O .argument a
.\"O to
.\"O .argument b ,
.\"O .argument c
.\"O to
.\"O .argument d ,
.\"O etc. on output.
出力で
.argument a
を
.argument b
に、
.argument c
を
.argument d
に、のように変換する。
.
.REQ .trnt abcd....
.\"O This is the same as the
.\"O .request .tr
.\"O request except that the translations do not apply to text that is
.\"O transparently throughput into a diversion with
.\"O .esc ! .
リクエスト
.request .tr
と同じだが、
.esc !
によってディバージョンへと出力されるテキストは変換されない。
.
.REQ .troff
.\"O Make the built-in condition
.\"O .B t
.\"O true and
.\"O .B n
.\"O false.
内部条件式
.B t
を真に、
.B n
を偽に設定する。
.
.REQ .uf font
.\"O Underline font set to
.\"O .argument font
.\"O (to be switched to by
.\"O .request .ul ).
アンダーライン付きのフォントを
.argument font
に設定する。
(リクエスト
.request .ul
で切り替わる)
.
.REQ .ul N
.\"O Underline (italicize in troff)
.\"O .argument N
.\"O input lines.
入力行を
.argument N
行、アンダーライン付きにする。(troff では イタリック体になる)
.
.REQ .vpt n
.\"O Enable vertical position traps if
.\"O .argument n
.\"O is non-zero, disable them otherwise.
.argument n
が 0 でなければ垂直位置のトラップを有効にする。
0 ならば無効にする。
.
.REQ .vs
.\"O Change to previous vertical base line spacing.
直前の行送り幅に変更する。
.
.REQ .vs N
.\"O Set vertical base line spacing to
.\"O .argument N .
.\"O Default value is
.\"O .scalednumber 12 p .
行送りの基準となる間隔を
.argument N
に設定する。
デフォルト値は
.scalednumber 12 p
である。
.
.REQ .warn n
.\"O Set warnings code to
.\"O .argument n .
警告コードを
.argument n
に設定する。
.
.REQ .wh N trap
.\"O Set location trap; negative means from page bottom.
局所的なトラップを設定する。負の値の場合はページ末尾からになる。
.
.REQ .while cond anything
.\"O While condition
.\"O .argument cond
.\"O is true, accept
.\"O .argument anything
.\"O as input.
条件式
.argument cond
が真ならば
.argument anything
を入力として許可する。
.
.REQ .write stream anything
.\"O Write
.\"O .argument anything
.\"O to the stream named
.\"O .argument stream .
ストリーム
.argument stream
へ
.argument anything
を書き込む。
.
.PD
.LP
.\"O Besides these standard groff requests, there might be further macro
.\"O calls.
.\"O They can originate from a macro package (see
.\"O .BR roff (7)
.\"O for an overview) or from a preprocessor.
これらの基本的な groff リクエストの他にも、マクロの呼び出しがある。
これらはマクロパッケージ (概要は
.BR roff (7)
を参照) やプリプロセッサ由来のものである。
.LP
.\"O Preprocessor macros are easy to be recognized.  They enclose their code
.\"O into a pair of characteristic macros.
プリプロセッサマクロは認識しやすい。
これらは独特のマクロの対で括られている。
.LP
.TS
box, center, tab (@);
c | c | c
CfCB | CfCB | CfCB.
.\"O preprocessor@start macro@ end macro
プリプロセッサ@開始マクロ@終了マクロ
=
eqn@.PS@.PE
grap@.G1@.G2
grn@.GS@.GE
pic@.PS@.PE
refer@.R1@.R2
.\"O soelim@\fInone@\fInone
soelim@\fIなし@\fIなし
tbl@.TS@.TE
.TE
.LP
.
.\" --------------------------------------------------------------------
.\"O .SH "ESCAPE SEQUENCES"
.SH エスケープシーケンス
.\" --------------------------------------------------------------------
.
.\"O Escape sequences are in-line language elements usually introduced by
.\"O a backslash
.\"O .'char \(rs
.\"O and followed by an escape name and sometimes by a required argument.
.\"O Input processing is continued directly after the escaped character or
.\"O the argument resp. without an intervening separation character.
.\"O So there must be a way to determine the end of the escape name and the end
.\"O of the argument.
エスケープシーケンスは行内の言語要素であり、通常はバックスラッシュ
.'char \(rs
から始まりエスケープ名が続く。引き数が必要なものもある。
入力の処理は、エスケープされた文字や引き数の直後に連続し、
区切り文字はない。
したがって、エスケープ名や引き数の終了を決定する方法が必要である。
.LP
.\"O This is done by enclosing names (escape name and arguments consisting of
.\"O a variable name) by a pair of brackets
.\"O .esc[] name
.\"O and constant arguments (number expressions and characters) by apostrophes
.\"O (ASCII 0x27) like
.\"O .IR \(cqconstant\(cq .
これには、名前 (エスケープ名や変数名を含む引き数)
をカギ括弧の対で括ったり (例:
.esc[] name )、
定数の引き数 (数値式や複数の文字)
アポストロフィ (ASCII コード 0x27) で括ったり (例:
.IR 'constant' )
する 。
.LP
.\"O There are abbreviations for short names.
.\"O Two character escape names can be specified by an opening parenthesis like
.\"O .esc( xy
.\"O without a closing counterpart.
.\"O And all one-character names different from the special characters
.\"O .'char [
.\"O and
.\"O .'char (
.\"O can even be specified without a marker in the form
.\"O .esc \fP\f(CIc .
エスケープ名には短い名前の省略形がある。
2 文字のエスケープ名は開き括弧で指定される。
例として
.esc( xy
のようになり、閉じ括弧は必要ない。
そして、特別な文字である
.'char [
と
.'char (
以外の、すべての 1 文字の名前は
.esc \fP\f(CIc
のようにマーカーなしで指定することができる。
.LP
.\"O Constant arguments of length
.\"O .number 1
.\"O can omit the marker apostrophes, too, but there is no two-character
.\"O analogue.
長さが
.number 1
の定数の引き数もアポストロフィのマーカーを省略できるが、
2 文字の場合にはエスケープ名と同じような省略指定はできない。
.LP
.\"O While 1-character escape sequences are mainly used for in-line functions
.\"O and system related tasks, the 2-letter names following the
.\"O .esc( ""
.\"O construct are used for special characters predefined by the roff system.
.\"O Names with more than two characters
.\"O .esc[] name
.\"O mostly denote user defined named characters (see the
.\"O .request .char
.\"O request).
1 文字のエスケープシーケンスは主に内部関数やシステムに関連した機能であり、
.esc( ""
で構成される 2 文字名は roff システムで定義済みの特殊文字に使われる。
.esc[] name
のような 2 文字より長い名前の場合は、たいていユーザが定義したものである。
(リクエスト
.request .char
を参照)
.
.\" --------------------------------------------------------------------
.\"O .SS "SINGLE CHARACTER ESCAPES"
.SS 1 文字のエスケープシーケンス
.\" --------------------------------------------------------------------
.
.PD 0
.
.\" --------- comments ---------
.
.ESC \fB"\fP
. "
.\"O Beginning of a comment.
.\"O Everything up to the end of the line is ignored.
コメントの開始。行末までのすべてが無視される。
.
.ESC #
.\"O Everything up to and including the next newline is ignored.
.\"O This is interpreted in copy mode.
.\"O This is like
.\"O .esc \(dq
.\"O except the ignoring of the terminating newline.
行末の改行文字までが無視される。
コピーモードとして処理される。
.B \(rs"
と似ているが行末の改行文字までが無視される。
.
.\" --------- strings ---------
.
.ESC * s
.\"O The string stored in the string variable with 1-character name
.\"O .argument s .
文字列を 1 文字の名前の文字列変数
.argument s
に格納する。
.
.ESC *( st
.\"O The string stored in the string variable with 2-character name
.\"O .argument st .
文字列を 2 文字の名前の文字列変数
.argument st
に格納する。
.
.ESC[] * stringvar
.\"O The string stored in the string variable with arbitrary length name
.\"O .argument stringvar .
文字列を任意の長さの名前の文字列変数
.argument stringvar
に格納する。
.
.\" --------- macro arguments ---------
.
.ESC $0
.\"O The name by which the current macro was invoked.  The
.\"O .request .als
.\"O request can make a macro have more than one name.
現在呼びだされているマクロの名前。リクエスト
.request .als
でマクロに 1 つ以上の名前をつけることができる。
.
.ESC $ x
.\"O Macro argument with 1-place number
.\"O .argument x ,
.\"O where
.\"O .argument x
.\"O is a digit between 1 and 9.
.argument x
番目のマクロの引き数。
.argument x
は 1 から 9 までの数値。
.
.ESC $( xy
.\"O Macro argument with 2-digit number
.\"O .argument xy .
2 桁の数値
.argument xy
で指定されるマクロの引き数。
.
.ESC[] $ nexp
.\"O Macro argument with number
.\"O .argument nexp ,
.\"O where
.\"O .argument nexp
.\"O is a numerical expression evaluating to an integer \(>=1.
.argument nexp
番目のマクロの引き数。
ここで、
.argument nexp
は 1 以上の整数を返す数式。
.
.ESC $*
.\"O In a macro, the concatenation of all the arguments separated by spaces.
あるマクロにおける、すべての引き数をスペースで区切って連結した文字列。
.
.ESC $@
.\"O In a macro, the concatenation of all the arguments with each surrounded
.\"O by double quotes, and separated by spaces.
あるマクロにおける、すべての引き数それぞれをダブルクォートで括り、
スペースで区切って連結した文字列。
.
.\" --------- escaped characters ---------
.
.ESC \(rs
.\"O reduces to a single backslash; useful to delay its interpretation as
.\"O escape character in copy mode.
.\"O For a printable backslash, use
.\"O .esc e .
1 文字のバックスラッシュに短縮される。
コピーモード時のエスケープ文字による処理を抑制するのに使われる。
表示可能なバックスラッシュには
.esc e
を使用する。
.
.\"O.ESC \(cq
.ESC '
.\"O The acute accent \(aa; same as
.\"O .esc( aa .
.\"O Unescaped: apostrophe, right quotation mark, single quote (ASCII 0x27).
鋭音記号 \(aa 。
.esc( aa
と同じ。エスケープされない場合は、アポストロフィ、右引用記号、シングルクォート
(ASCII コード 0x27) となる。
.
.ESC `
.\"O The grave accent \(ga; same as
.\"O .esc( ga .
.\"O Unescaped: left quote, backquote (ASCII 0x60).
抑音記号 \(ga 。
.esc( ga
と同じ。エスケープされない場合は、左引用記号、バッククォート
(ASCII コード 0x60) となる。
.
.ESC \-
.\"O The \- sign in the current font.
現在のフォントにおける \- 符号。
.
.ESC .
.\"O An uninterpreted dot (period), even at start of line.
処理されないドット (ピリオド)。行頭の場合のみ。
.
.ESC %
.\"O Default optional hyphenation character.
デフォルトの省略可能なハイフン文字。
.
.ESC !
.\"O Transparent line indicator.
透過行指定子。
.
.ESC ? anything\fB?\fP
.\"O In a diversion, this will transparently embed
.\"O .argument anything
.\"O in the diversion.
.\"O .argument anything
.\"O is read in copy mode.
.\"O See also the escape sequences
.\"O .esc !
.\"O and
.\"O .esc ? .
ディバージョンにおいて、
.argument anything
をディバージョンにそのまま埋め込む。
.argument anything
はコピーモードで読み込まれる。
エスケープシーケンス
.esc !
と
.esc ?
も参照。
.
.
.\" --------- spacing ---------
.
.ESC \& space
.\"O Unpaddable space-size space character (no line break).
連結されない空白文字 (改行も行われない)。
.
.ESC 0
.\"O Digit width.
数字の幅。
.
.ESC |
.\"O 1/6\ em narrow space character; zero width in nroff.
l/6\ em の狭い空白文字。nroff では幅ゼロ。
.
.ESC ^
.\"O 1/12\ em half-narrow space character; zero width in nroff.
1/12\ em の狭い空白文字。nroff では幅ゼロ。
.
.ESC &
.\"O Non-printable, zero width character.
表示されないゼロ幅の文字。
.
.ESC )
.\"O Like
.\"O .esc &
.\"O except that it behaves like a character declared with the cflags
.\"O request to be transparent for the purposes of end of sentence
.\"O recognition.
.esc &
と似ているが、cflags リクエストで宣言した文字のようにふるまい、
文の終りを明示するために使用される。
.
.ESC /
.\"O Increases the width of the preceding character so that the spacing
.\"O between that character and the following character will be correct if
.\"O the following character is a roman character.
先行する文字との幅を増加し、この文字の後に続く文字がローマン体であるならば
この文字と後に続く文字の間の空白は修正される。
.
.ESC ,
.\"O Modifies the spacing of the following character so that the spacing
.\"O between that character and the preceding character will correct if the
.\"O preceding character is a roman character.
後に続く文字との幅を調整し、この文字に先行する文字がローマン体であるならば
この文字と先行する文字の間の空白は修正される。
.
.ESC ~
.\"O Unbreakable space that stretches like a normal inter-word space when a
.\"O line is adjusted.
改行の入らない空白で、行が調整されたときには通常の単語間の空白のように
引き延ばされる。
.
.ESC \& newline
.\"O Ignored newline, for continuation lines.
改行を無視して行を連結する。
.
.\" --------- structuring ---------
.
.ESC {
.\"O Begin conditional input.
条件入力の開始。
.
.ESC }
.\"O End conditional input.
条件入力の終了。
.
.\" --------- longer escape names ---------
.
.ESC ( st
.\"O The special character with 2-character name
.\"O .argument st ,
.\"O see section
.\"O .BR "SPECIAL CHARACTERS" .
2 文字の名前
.argument st
の特殊文字。
.B 特殊文字
のセクションを参照。
.
.ESC[] \& name
.\"O The named character with arbitrary length name
.\"O .argument name .
任意の長さの名前
.argument name
の名前付き文字。
.
.\" --------- alphabetical escapes ---------
.
.ESC a
.\"O Non-interpreted leader character.
処理されない先行文字。
.
.ESCq A anything
.\"O If
.\"O .argument anything
.\"O acceptable as name of a string, macro, diversion, register,
.\"O environment or font it is
.\"O .number 1
.\"O otherwise
.\"O .number 0 .
.argument anything
が文字列・マクロ・ディバージョン・レジスタ・環境・フォントのどれか
の名前として有効であるならば 1 を、そうでなければ 0 を返す。
.
.ESCq b abc...
.\"O Bracket building function.
カギ括弧を構築する関数。
.
.ESC c
.\"O Interrupt text processing.
テキスト処理を中断する。
.
.ESCq C char
.\"O The character called
.\"O .argument char ;
.\"O same as
.\"O .esc[] char ,
.\"O but compatible to other roff versions.
.argument char
で呼ばれる文字。
.esc[] char
と同じだが、他の roff システムと互換性がある。
.
.ESC d
.\"O Forward (down) 1/2 em vertical unit (1/2 line in nroff).
1/2 em だけ行送りをする (nroff では 1/2 行)。
.
.ESCq D charseq
.\"O Draw a graphical element defined by the characters in
.\"O .argument charseq ;
.\"O see groff info file for details.
.argument charseq
の文字で定義されたグラフィック要素を描画する。
詳細は groff info ファイルを参照のこと。
.
.ESC e
.\"O Printable version of the current escape character.
現在のエスケープ文字の表示可能なバージョン。
.
.ESC E
.\"O Equivalent to an escape character, but is not interpreted in copy-mode.
エスケープ文字と同じだが、コピーモードでは処理されない。
.
.ESC f F
.\"O Change to font with 1-character name or 1-digit number
.\"O .argument F .
フォントを 1 文字名または 1 桁の数値
.argument F
で指定されたものに変更する。
.
.ESC f( fo
.\"O Change to font with 2-characer name or 2-digit number
.\"O .argument fo .
フォントを 2 文字名または 2 桁の数値
.argument fo
で指定されたものに変更する。
.
.ESC[] f font
.\"O Change to font with arbitrary length name or number expression
.\"O .argument font .
フォントを任意の長さの名前または数式
.argument font
で指定されたものに変更する。
.
.ESC[] g reg
.\"O Return format of register with name
.\"O .argument reg
.\"O suitable for
.\"O .request .af .
.\"O Alternative forms
.\"O .esc(arg g xy
.\"O and
.\"O .escarg g x .
リクエスト
.request .af
に最適な
.argument reg
という名前のレジスタのフォーマットを返す。
別の形式では、
.esc(arg g xy
と
.escarg g x
となる。
.
.ESCq h N
.\"O Local horizontal motion; move right
.\"O .argument N
.\"O (left if negative).
局所的な水平移動。右側へ
.argument N
だけ移動する。(負数のときは左側へ移動する)
.
.ESCq H N
.\"O Set height of current font to
.\"O .argument N .
現在のフォントの高さを
.argument N
に設定する。
.
.ESC[] k reg
.\"O Mark horizontal input place in register with arbitrary length name
.\"O .argument reg .
.\"O Alternative forms
.\"O .esc(arg k xy
.\"O and
.\"O .escarg k x .
任意の長さの名前
.argument reg
を持つレジスタの水平入力位置をマークする。
別の形式では、
.esc(arg k xy
と
.escarg k x
となる。
.
.ESCq l Nc
.\"O Horizontal line drawing function (optionally using character
.\"O .argument c ).
水平線描画関数。(文字
.argument c
を用いることも可能)
.
.ESCq L Nc
.\"O Vertical line drawing function (optionally using character
.\"O .argument c ).
垂直線描画関数。(文字
.argument c
を用いることも可能)
.
.ESC n r
.\"O The numerical value stored in the register variable with the 1-character
.\"O name
.\"O .argument r .
1 文字の名前
.argument r
のレジスタ変数に格納されている数値。
.
.ESC n( re
.\"O The numerical value stored in the register variable with the 2-character
.\"O name
.\"O .argument re .
2 文字の名前
.argument re
のレジスタ変数に格納されている数値。
.
.ESC[] n reg
.\"O The numerical value stored in the register variable with arbitrary
.\"O lenght name
.\"O .argument reg .
任意の長さの名前
.argument reg
のレジスタ変数に格納されている数値。
.
.ESCq N n
.\"O Typeset the character with code
.\"O .argument n
.\"O in the current font, no special fonts are searched.  Useful for adding
.\"O characters to a font using the
.\"O .request .char
.\"O request.
現在のフォントで、コード
.argument n
で指定された文字を出力する。スペシャルフォントは検索されない。
リクエスト
.request .char
が使っているフォントで文字を追加するときに有用。
.
.ESCq o abc...
.\"O Overstrike characters
.\"O .argument a ,
.\"O .argument b ,
.\"O .argument c ,
.\"O etc.
文字
.argument a ,
.argument b ,
.argument c
等を 2 度打ちする。
.
.ESC p
.\"O Break and spread output line.
改行して出力行を引き延す。
.
.ESC r
.\"O Reverse 1\ em vertical motion (reverse line in nroff).
垂直方向に 1\ em 逆戻りする。(nroff では 1 行)
.
.ESCq R name \(+-n
.\"O The same as
.\"O .request .nr
.\"O .argument name
.\"O .argument \(+-n .
リクエスト
.request .nr
.argument name
.argument \(+-n
と同じ。
.
.ESC[] s \(+-N
.\"O Set the point size to
.\"O .I N
.\"O scaled points.  Note the alternative forms
.\"O .BI \(rss \(+- [ N ]\c
.\"O ,
.\"O .BI \(rss' \(+-N '\c
.\"O ,
.\"O .BI \(rss \(+- ' N '\c
.\"O ,
.\"O .esc(arg s \(+-xy ,
.\"O .BI \(rss \(+- ( xy\c
.\"O ,
.\"O .escarg s \(+-x .
.\"O Same as
.\"O .request .ps
.\"O request.
ポイントサイズを
.I N
に設定する。別の書式では
.BI \(rss \(+- [ N ]\c
,
.BI \(rss' \(+-N '\c
,
.BI \(rss \(+- ' N '\c
,
.esc(arg s \(+-xy ,
.BI \(rss \(+- ( xy\c
,
.escarg s \(+-x
となることに注意。リクエスト
.request .ps
と同じ。
.
.ESCq S N
.\"O Slant output
.\"O .argument N
.\"O degrees.
.argument N
度傾いた出力をする。
.
.ESC t
.\"O Non-interpreted horizontal tab.
解釈されない水平タブ。
.
.ESC u
.\"O Reverse (up) 1/2 em vertical motion (1/2 line in nroff).
垂直方向に 1/2 em 逆戻りする。(nroff では 1/2 行)
.
.ESCq v N
.\"O Local vertical motion; move down
.\"O .argument N
.\"O (up if negative).
局所的な垂直移動。
.argument N
だけ下げる。(負数なら上げる)
.
.ESC[] V env
.\"O The contents of the environment variable
.\"O .argument env .
.\"O Alternative forms
.\"O .esc(arg V xy
.\"O and
.\"O .escarg V x .
環境
.argument env
の内容。
別の書式では、
.esc(arg V xy
と
.escarg V x
となる。
.
.ESCq w string
.\"O The width of the character sequence
.\"O .argument string .
文字列
.argument string
の幅。
.
.ESCq x N
.\"O Extra line-space function (negative before, positive after).
行送り関数 (負数なら前へ、正数なら後へ)。
.
.ESCq X string
.\"O Output
.\"O .argument string
.\"O as device control function.
.argument string
をデバイス制御関数として出力する。
.
.ESC[] Y name
.\"O Output string variable or macro
.\"O .argument name
.\"O uninterpreted as device control function.
.\"O Alternative forms
.\"O .esc(arg Y xy
.\"O and
.\"O .escarg Y x .
文字列変数かマクロ
.argumentg name
をデバイス制御関数として処理しないように出力する。
別の書式では、
.esc(arg Y xy
と
.escarg Y x
となる。
.
.ESC z c
.\"O Print
.\"O .argument c
.\"O with zero width (without spacing).
.argument c
をゼロ幅 (空白なし) で出力する。
.
.ESCq Z anything
.\"O Print
.\"O .argument anything
.\"O and then restore the horizontal and vertical position;
.\"O .argument anything
.\"O may not contain tabs or leaders.
.argument anything
を出力し、水平・垂直位置を元に戻す。
.argument anything
はタブや先頭文字を含まない。
.PD
.LP
.\"O The escape sequences
.\"O .esc e ,
.\"O .esc . ,
.\"O .esc \(dq ,
.\"O .esc $ ,
.\"O .esc * ,
.\"O .esc a ,
.\"O .esc n ,
.\"O .esc t ,
.\"O .esc g ,
.\"O and
.\"O .escarg \& newline
.\"O are interpreted in copy mode.
エスケープシーケンス
.esc e ,
.esc . ,
.esc \fB"\fP \fR,
.esc $ ,
.esc * ,
.esc a ,
.esc n ,
.esc t ,
.esc g ,
.escarg \& newline
はコピーモードで処理される。
.LP
.\"O Escape sequences starting with
.\"O .esc (
.\"O or
.\"O .esc [
.\"O do not represent single character escape sequences, but introduce escape
.\"O names with two or more characters.
.esc (
と
.esc [
で始まるエスケープシーケンスは 1 文字のエスケープシーケンスを意味しない。
2 文字またはそれ以上の長さのエスケープ名の開始を表す。
.LP
.\"O If a backslash is followed by a character that does not constitute a
.\"O defined escape sequence the backslash is silently ignored and the
.\"O character maps to itself.
バックスラッシュの後に、定義済みエスケープシーケンスを構成しない文字が続いた
場合は、バックスラッシュは単に無視されて、その後の文字はそのものを意味する。
.
.\" --------------------------------------------------------------------
.\"O .SS "SPECIAL CHARACTERS"
.SS 特殊文字
.\" --------------------------------------------------------------------
.\"O Common special characters are predefined by escape sequences of the form
.\"O .(esc \fP\f(CIxy
.\"O with characters
.\"O .argument x
.\"O and
.\"O .argument y .
.\"O Some of these exist in the usual font while most of them are only
.\"O available in the special font.  Below you'll find a selection of the most
.\"O important glyphs; a complete list can be found in
.\"O .BR groff_char (7).
一般的な特殊文字は、エスケープシーケンス
.(esc \fP\f(CIxy
という形式ですでに定義されている。
これらのいくつかは通常のフォントにも含まれるが、ほとんどはスペシャルフォント
でないと表示ができない。以下に重要なグリフを示す。完全なリストについては
.BR groff_char (7)
で参照できる。
.RS
.LP
.PD 0
.
.\"O .ESc bu Bullet sign
.\"O .ESc co Copyright
.\"O .ESc ct Cent
.\"O .ESc dd Double dagger
.\"O .ESc de Degree
.\"O .ESc dg Dagger
.\"O .ESc em Em-dash
.\"O .ESc hy Hyphen
.\"O .ESc rg Registered sign
.\"O .ESc sc Section sign
.\"O .ESc ul Underline character
.\"O .ESc == Identical
.\"O .ESc >= Larger or equal
.\"O .ESc <= Less or equal
.\"O .ESc != Not equal
.\"O .ESc -> Right arrow
.\"O .ESc <- Left arrow
.\"O .ESc +- Plus-minus sign
.ESc bu 中黒
.ESc co 著作権記号
.ESc ct セント記号 (通貨)
.ESc dd 2 重ダガー
.ESc de 度記号
.ESc dg ダガー
.ESc em 全角ダッシュ
.ESc hy ハイフン
.ESc rg 登録記号
.ESc sc セクション記号
.ESc ul アンダーライン文字
.ESc == 等号
.ESc >= 以上
.ESc <= 以下
.ESc != 不等号
.ESc -> 右矢印
.ESc <- 左矢印
.ESc +- プラスマイナス記号
.PD
.RE
.
.\" --------------------------------------------------------------------
.\"O .SH REGISTERS
.SH レジスタ
.\" --------------------------------------------------------------------
.\"O Registers are variables that store a value.
.\"O In groff, most registers store numerical values (see section
.\"O .B NUMERICAL EXPRESSIONS
.\"O above), but some can also hold a string value.
レジスタとは値を格納する変数である。
groff では、ほとんどのレジスタは数値を格納するが (上記セクション
.B 数式
を参照)、いくつかは文字列を格納することができる。
.LP
.\"O Each register is given a name.
.\"O Arbitrary registers can be defined and set with the request
.\"O .request .nr
.\"O .argument register .
それぞれのレジスタには名前が与えられる。
任意のレジスタをリクエスト
.request .nr
.argument registrer
によって定義・設定することができる。
.LP
.\"O The value stored in a register can be retrieved by the escape sequences
.\"O introduced by
.\"O .esc n .
レジスタに格納した値は、エスケープシーケンス
.esc n
によってとりだすことができる。
.LP
.\"O Most useful are predefined registers.
.\"O In the following the notation
.\"O .argument name
.\"O is used to refer to a register called
.\"O .register name
.\"O to make clear that we speak about registers.
.\"O Please keep in mind that the
.\"O .esc en[]
.\"O decoration is not part of the register name.
便利な定義済みのレジスタがある。
以下では、レジスタの説明を明確にするために、
.argument name
という表記法は
.register name
という名前のレジスタを参照する場合に使用する。
.esc n[]
という修飾はレジスタ名の一部ではないことに注意してほしい。
.
.\" --------------------------------------------------------------------
.\"O .SS "READ-ONLY REGISTERS"
.SS 読み出し専用のレジスタ
.\" --------------------------------------------------------------------
.\"O The following registers have predefined values that should not be
.\"O modified by the user (usually, registers starting with a dot a read-only).
.\"O Mostly, they provide information on the current settings or store results
.\"O from request calls.
以下のレジスタは定義済みの値を持っており、ユーザが値を変更することはできない
(通常は、ドットで始まるレジスタは読み出し専用である)。
たいていのものは、現在の設定情報やリクエスト呼び出しの結果が格納されている。
.LP
.PD 0
.\"O .REG .$ Number of arguments in the current macro.
.REG .$ 現在のマクロの引き数の数。
.REG .A
.\"O Set to
.\"O .number 1
.\"O in
.\"O .B troff
.\"O if option
.\"O .B \-A
.\"O is used; always
.\"O .number 1
.\"O in
.\"O .BR nroff .
.B troff
にオプション
.B \-A
が使用されていたら
.number 1
が設定される。
.B nroff
では常に
.number 1
になる。
.\"O .REG .H Available horizontal resolution in basic units.
.REG .H 利用可能な水平解像度 (基本単位)。
.REG .T
.\"O Set to
.\"O .number 1
.\"O if option
.\"O .B \-T
.\"O is used.
オプション
.B \-T
が使用されていたら
.number 1
が設定される。
.\"O .REG .V Available vertical resolution in basic units.
.REG .V 利用可能な垂直解像度 (基本単位)。
.REG .a
.\"O Post-line extra line-space most recently utilized using
.\"O .escarg x 'N' .
.escarg x 'N'
などで用いられる行送り幅。
.\"O .REG .C 1 if compatibility mode is in effect, 0 otherwise.
.REG .C 互換モードが有効になっていれば 1、そうでなければ 0。
.\"O .REG .c Current input line number.
.REG .c 現在の入力行番号。
.REG .cdp
.\"O The depth of the last character added to the current environment.
.\"O It is positive if the character extends below the baseline.
現在の環境に最後に追加された文字の深さ。
文字がベースラインから下に出ていれば正数になる。
.REG .ce
.\"O The number of lines remaining to be centered, as set by the
.\"O .request .ce
.\"O request.
リクエスト
.request .ce
によって設定された、センタリングされる残りの行の行数。
.REG .cht
.\"O The height of the last character added to the current environment.
.\"O It is positive if the character extends above the baseline.
現在の環境に最後に追加された文字の高さ。
文字がベースラインの上方に広がっていれば正数になる。
.REG .csk
.\"O The skew of the last character added to the current environment.
.\"O The skew of a character is how far to the right of the center of a character
.\"O the center of an accent over that character should be placed.
現在の環境に最後に追加された文字の傾き。
文字の傾きとは、文字の上に置かれるアクセント記号の中心が、文字の中心から
どれだけ右にずれているかである。
.REG .d
.\"O Current vertical place in current diversion; equal to register
.\"O .register nl .
現在のディバージョンにおける現在の垂直位置。レジスタ
.register nl
と同じ。
.\"O .REG .ev The name or number of the current environment (string-valued).
.REG .ev 現在の環境の名前または数値 (文字列値)。
.\"O .REG .f Current font number.
.REG .f 現在のフォント番号。
.\"O .REG .fam  The current font family (string-valued).
.REG .fam 現在のフォントファミリー (文字列値)。
.\"O .REG .fp The number of the next free font position.
.REG .fp 次の自由なフォント位置の数。
.REG .g
.\"O Always 1 in GNU troff.
.\"O Macros should use it to test if running under groff.
GNU troff では常に 1 を返す。groff のもとで実行されているのかを
マクロがテストするときに使われる。
.\"O .REG .h Text base-line high-water mark on current page or diversion.
.REG .h 現在のページまたはディバージョンにおけるテキストベースラインの高水準位置。
.REG .hla
.\"O The current hyphenation language as set by the
.\"O .B .hla
.\"O request.
リクエスト
.B .hla
で設定された現在のハイフネーション言語。
.REG .hlc
.\"O The number of immediately preceding consecutive hyphenated lines.
直前にある連続するハイフネーションされた行の行数。
.REG .hlm
.\"O The maximum allowed number of consecutive hyphenated lines, as set by
.\"O the
.\"O .request .hlm
.\"O request.
連続するハイフネーションされた行が許される最大の行数。
リクエスト
.request .hlm
で設定される。
.REG .hy
.\"O The current hyphenation flags (as set by the
.\"O .request .hy
.\"O request).
現在のハイフネーションフラグ (リクエスト
.request .hy
で設定される)。
.REG .hym
.\"O The current hyphenation margin (as set by the
.\"O .request .hym
.\"O request).
現在のハイフネーションマージン (リクエスト
.request .hym
で設定される)。
.REG .hys
.\"O The current hyphenation space (as set by the
.\"O .request .hys
.\"O request).
現在のハイフネーション間隔 (リクエスト
.request .hys
で設定される)。
.\"O .REG .i Current ident.
.REG .i 現在のインデント量。
.\"O .REG .in The indent that applies to the current output line.
.REG .in 現在の出力行に適用されるインデント量。
.REG .kern
.\"O .number 1
.\"O if pairwise kerning is enabled,
.\"O .number 0
.\"O otherwise.
1 対のカーニングが有効なら
.number 1
を返す。そうでなければ
.number 0
を返す。
.\"O .REG .l Current line length.
.REG .l 現在の行幅。
.REG .lg
.\"O The current ligature mode (as set by the
.\"O .request .lg
.\"O request).
現在のリガチャ (合字) モード (リクエスト
.request .lg
で設定される)。
.\"O .REG .ll The line length that applies to the current output line.
.REG .ll 現在の出力行に適用される行幅。
.REG .lt
.\"O The title length (as set by the
.\"O .request .lt
.\"O request).
タイトル行の長さ (リクエスト
.request .lt
で設定される)。
.\"O .REG .n Length of text portion on previous output line.
.REG .n 直前の出力行の部分の長さ。
.REG .ne
.\"O The amount of space that was needed in the last
.\"O .request .ne
.\"O request that caused a trap to be sprung.
.\"O Useful in conjunction with
.\"O .register .trunc .
トラップの原因となった直前のリクエスト
.request .ne
に必要なスペースの量。
レジスタ
.register .trunc
と一緒に使用すると便利。
.\"O .REG .o Current page offset.
.REG .o 現在のページのオフセット。
.\"O .REG .p Current page length.
.REG .p 現在のページの長さ。
.REG .pn
.\"O The number of the next page: either the value set by a
.\"O .request .pn
.\"O request, or the number of the current page plus\ 1.
次のページのページ番号。リクエスト
.request .pn
によって設定された値か、現在のページ番号に 1 を追加した値になる。
.\"O .REG .ps The current pointsize in scaled points.
.REG .ps スケールポイントにおける現在のポイントサイズ。
.\"O .REG .psr The last-requested pointsize in scaled points.
.REG .psr スケールポイントにおける直前に要求されたポイントサイズ。
.REG .rj
.\"O The number of lines to be right-justified as set by the rj request.
リクエスト
.request rj
によって設定された右寄せされた行の行数。
.\"O .REG .s Current point size as a decimal fraction.
.REG .s 小数で表わした現在のポイントサイズ。
.REG .sr
.\"O The last requested pointsize in points as a decimal fraction
.\"O (string-valued).
小数で表わした直前に要求されたポイントサイズ (文字列値)。
.\"O .REG .t Distance to the next trap.
.REG .t 次のトラップまでの距離。
.REG .tabs
.\"O A string representation of the current tab settings suitable for use as
.\"O an argument to the
.\"O .request .ta
.\"O request.
リクエスト
.request .ta
の引き数として使用するのに便利な、現在のタブ設定の文字列表現。
.REG .trunc
.\"O The amount of vertical space truncated by the most recently sprung
.\"O vertical position trap, or, if the trap was sprung by a
.\"O .request .ne
.\"O request, minus the amount of vertical motion produced by
.\"O .request .ne .
.\"O request.
.\"O In other words, at the point a trap is sprung, it represents the difference
.\"O of what the vertical position would have been but for the trap, and what the
.\"O vertical position actually is.
.\"O Useful in conjunction with the
.\"O .register .ne
.\"O register.
もっとも最近の垂直位置トラップによって切り詰められた垂直スペースの量。
または、リクエスト
.request .ne
によるトラップがひきおこされた場合は、そのリクエストによって生じた
垂直移動量をさらにマイナスした値。
別の言い方をすれば、トラップが発生した時点での、
トラップが起きなかったとした場合の垂直位置と実際の垂直位置との差を
表している。
リクエスト
.register .ne
と一緒に使用すると便利。
.REG .ss
.\"O The value of the parameters set by the first argument of the
.\"O .request .ss
.\"O request.
リクエスト
.request .ss
の第 1 引き数によって設定されたパラメータの値。
.REG .sss
.\"O The value of the parameters set by the second argument of the
.\"O .request .ss
.\"O request.
リクエスト
.request .ss
の第 2 引き数によって設定されたパラメータの値。
.\"O .REG .u Equal to 1 bin fill mode and 0 in nofill mode.
.REG .u 行連結モードのときは 1、そうでなければ 0。
.\"O .REG .v Current vertical line spacing.
.REG .v 現在の垂直行送り量。
.REG .vpt
.\"O .number 1
.\"O if vertical position traps are enabled,
.\"O .number 0
.\"O otherwise.
垂直位置トラップが有効なら
.number 1
、そうでなければ
.number 0
になる。
.\"O .REG .w Width of previous character.
.REG .w 直前の文字の幅。
.REG .warn
.\"O The sum of the number codes of the currently enabled warnings.
現在の有効になっている警告のコード値の総和。
.\"O .REG .x The major version number.
.REG .x メジャーバージョン番号。
.\"O .REG .y The minor version number.
.REG .y マイナーバージョン番号。
.\"O .REG .Y The revision number of groff.
.REG .Y groff のリビジョン番号。
.\"O .REG .z Name of current diversion.
.REG .z 現在のディバージョンの名前。
.REG llx
.\"O Lower left x-coordinate (in PostScript units) of a given PostScript
.\"O image (set by
.\"O .request .psbb ).
指定された PostScript 画像の左下 x 座標 (PostScript 単位)。
リクエスト
.request .psbb
により設定される。
.REG lly
.\"O Lower left y-coordinate (in PostScript units) of a given PostScript
.\"O image (set by
.\"O .request .psbb ).
指定された PostScript 画像の左下 y 座標 (PostScript 単位)。
リクエスト
.request .psbb
により設定される。
.REG rsb
.\"O Like
.\"O .register sb ,
.\"O but takes account of the heights and depths of characters.
レジスタ
.register sb
と似ているが、文字の高さと深さを考慮している。
.REG rst
.\"O Like
.\"O .register st ,
.\"O but takes account of the heights and depths of characters.
レジスタ
.register st
と似ているが、文字の高さと深さを考慮している。
.REG sb
.\"O Depth of string below base line (generated by width function
.\"O .esc w ).
文字列のベースラインより下の深さ (幅関数
.esc w
により生成される)。
.REG skw
.\"O Right skip width from the center of the last character in the
.\"O .esc w
.\"O argument.
.esc w
の引き数において、直前の文字の中心からの右スキップ幅。
.REG ssc
.\"O The amount of horizontal space (possibly negative) that should be added
.\"O to the last character before a subscript (generated by width function
.\"O .esc w ).
添字の前の直前の文字に追加される水平移動量 (負の値も可能)。
幅関数
.esc w
により生成される。
.REG st
.\"O Height of string above base line (generated by width function
.\"O .esc w ).
文字列のベースラインより上の高さ (幅関数
.esc w
により生成される)。
.REG urx
.\"O Upper right x-coordinate (in PostScript units) of a given PostScript
.\"O image (set by
.\"O .request .psbb ).
指定された PostScript 画像の右上 x 座標 (PostScript 単位)。
リクエスト
.request .psbb
により設定される。
.REG ury
.\"O Upper right y-coordinate (in PostScript units) of a given PostScript
.\"O image (set by
.\"O .request .psbb ).
指定された PostScript 画像の右上 y 座標 (PostScript 単位)。
リクエスト
.request .psbb
により設定される。
.PD
.
.\" --------------------------------------------------------------------
.\"O .SS "WRITABLE REGISTERS"
.SS 書き込み可能レジスタ
.\" --------------------------------------------------------------------
.\"O The following registers can be read and written by the user.
.\"O They have predefined default values, but these can be modified for
.\"O customizing a document.
以下のレジスタはユーザによって読み書きが可能である。
これらは定義済みのデフォルト値を持っているが、ドキュメントを
カスタマイズするために変更することができる。
.LP
.PD 0
.\"O .REG % Current page number.
.REG % 現在のページ番号。
.\"O .REG c. Current input line number.
.REG c. 現在の入力行番号。
.\"O .REG ct Character type (set by width function
.\"O .esc w ).
.REG ct 文字タイプ (幅関数
.esc w
によって設定される)。
.\"O .REG dl Maximal width of last completed diversion.
.REG dl 直前に終了したディバージョンの最大幅。
.\"O .REG dw Current day of week (1-7).
.REG dw 現在の曜日 (1-7)。
.\"O .REG dy Current day of month (1-31).
.REG dy 現在の日 (1-31)。
.\"O .REG hp Current horizontal position at input line.
.REG hp 現在の入力行における水平位置。
.\"O .REG ln Output line number.
.REG ln 出力行番号。
.\"O .REG mo Current month (1-12).
.REG mo 現在の月 (1-12)。
.\"O .REG nl Vertical position of last printed text base-line.
.REG nl 直前に出力したテキストのベースラインの垂直位置。
.REG slimit
.\"O If greater than 0, the maximum number of objects on the input stack.
.\"O If \(<=0 there is no limit, i.e., recursion can continue until virtual
.\"O memory is exhausted.
0 より大きければ、入力スタックにあるオブジェクトの最大数。
0 以下であれば制限はない。つまり、仮想メモリを使いはたすまで再帰を続けることができる。
.REG systat
.\"O The return value of the
.\"O .I system()
.\"O function executed by the last
.\"O .request .sy
.\"O request.
直前のリクエスト
.request .sy
により実行された
.I system()
関数の戻り値。
.\"O .REG year The current year (year 2000 compliant).
.REG year 現在の年 (2000 年問題なし)。
.REG yr
.\"O Current year minus 1900.  For Y2K compliance use register
.\"O .register year
.\"O instead.
現在の年から 1900 を引いた値。2000 年問題を避けるにはレジスタ
.register year
を代りに用いること。
.PD
.
.\" --------------------------------------------------------------------
.\"O .SH WARNINGS
.SH 警告
.\" --------------------------------------------------------------------
.\"O Each warning generated by groff is identified by a name and a code
.\"O number.  The codes are powers of 2 to allow bit-encoding with a single
.\"O integer.  There are also names that can be used to refer to groups of
.\"O warnings.
groff によって生成される警告はすべて名前とコード番号が与えられている。
コード番号は 2 の累乗で、単一の int 型変数でビットエンコードができるように
なっている。名前のほうも、警告のグループで参照することができる。
.LP
.\"O The name associated with a warning is used by the
.\"O .option \-w
.\"O and
.\"O .option \-W
.\"O options;
.\"O the number code is used by the
.\"O .request .warn
.\"O request and by the
.\"O .esc[arg] n warn
.\"O register.
警告名は
.option \-w
と
.option \-W
オプションで使うことができる。
警告コード番号は、リクエスト
.request .warn
とレジスタ
.esc[arg] n warn
で使うことができる。
.LP
.PD 0
.Warning all group
.\"O All warnings except
.\"O .warning di ,
.\"O .warning mac
.\"O and
.\"O .warning reg .
.\"O Intended to cover all warnings with traditional macro packages.
.warning di ,
.warning mac ,
.warning reg
以外のすべての警告。
伝統的なマクロパッケージのすべての警告をカバーしている。
.Warning break 4
.\"O In fill mode, lines which could not be broken so that their length was
.\"O less than the line length.  This is enabled by default.
行連結モードにおいて、1 行の長さと比べて改行を入れられない行の長さが短い場合。
この警告はデフォルトで有効。
.Warning char 1
.\"O Non-existent characters.  This is enabled by default.
存在しない文字が含まれている。この警告はデフォルトで有効。
.Warning delim 8
.\"O Missing or mismatched closing delimiters.
閉じ区切り記号がない、または開き区切り記号と一致しない。
.Warning di 256
.\"O Use of
.\"O .request .di
.\"O or
.\"O .request .da
.\"O without an argument when there is no current diversion.
現在のディバージョンがない時に、引き数のない
.request .di
や
.request .da
のリクエストが使用された。
.Warning el 16
.\"O Use of the
.\"O .request .el
.\"O request with no matching
.\"O .request .ie
.\"O request.
一致するリクエスト
.request .ie
がないのにリクエスト
.request .el
が使用された。
.Warning escape 32768
.\"O Unrecognized escape sequence.  Then the escape character is ignored.
認識されないエスケープシーケンスが使用された。エスケープ文字は無視される。
.Warning font 131072
.\"O Non-existent fonts.  This is enabled by default.
存在しないフォントが使用された。
この警告はデフォルトで有効。
.Warning ig 262144
.\"O Illegal escapes in text ignored with the
.\"O .request \.ig
.\"O request.  These are conditions that are errors when they occur outside
.\"O of ignored text.
リクエスト
.request \.ig
で無視されるテキスト中に不正なエスケープがある。
無視されるテキスト外でこれが発生する場合はエラーとなる。
.Warning mac 512
.\"O Use of undefined strings, macros, and diversions.  Automatically handled
.\"O as empty.  Usually, only one warning per name.
定義されていない文字列・マクロ・ディバージョンが使用された。
自動的に空であるものと扱われる。通常は、名前ひとつに対してひとつの警告となる。
.Warning missing 8192
.\"O Request that is missing non-optional arguments.
省略できない引き数が指定されていない。
.Warning input 16384
.\"O Illegal input character.
不正な入力文字。
.Warning number 2
.\"O Invalid numeric expressions.  This is enabled by default.
不正な数式。この警告はデフォルトで有効。
.Warning range 64
.\"O Out of range arguments.
範囲外の引き数が指定された。
.Warning reg 1024
.\"O Use of undefined number register.  Automatically defined as having
.\"O value 0.  Usually, only one warning per name.
定義されていない数値レジスタが使用された。自動的に値として 0 が定義される。
通常は、名前ひとつに対してひとつの警告となる。
.Warning right-brace 4096
.\"O Use of
.\"O .esc }
.\"O where a number was expected.
数値が期待される場所に
.esc }
が使用された。
.Warning scale 32
.\"O Meaningless scaling indicators.
意味のない単位指定子が指定された。
.Warning space 65536
.\"O Missing space between a request or macro and its argument.  Then no
.\"O macro is automatically defined.  This is enabled by default.  This
.\"O warning will never occur in compatibility mode.
リクエストやマクロと引き数の間に空白文字がない。したがって自動的に定義される
マクロはない。この警告はデフォルトで有効。
また、この警告は互換モードでは決して発生しない。
.Warning syntax 128
.\"O Dubious syntax in numeric expressions.
数式であいまいな文法が使用された。
.Warning tab 2048
.\"O Inappropriate use of a tab character (either in an unquoted macro
.\"O argument or where a number was expected).
タブ文字が不正に使用された (クォートされていないマクロの引き数のところや
数値が要求されているところに使用された)。
.Warning w group
.\"O All warnings.
すべての警告。
.PD
.LP
.TS
tab(@), box, expand;
c c c | c  c  c | c  c  c
R RI CB | R RI CB | R RI CB.
.\"O Bit@Code@Warning@Bit@Code@Warning@Bit@Code@Warning
ビット@コード@警告@ビット@コード@警告@ビット@コード@警告
_
0@1@char@8@256@di@16@65536@space
1@2@number@9@512@mac@17@131072@font
2@4@break@10@1024@reg@18@262144@ig
3@8@delim@11@2048@tab
4@16@el@12@4096@right-brace
5@32@scale@13@8192@missing
6@64@range@14@16384@input
7@128@syntax@15@32768@escape
.TE
.LP
.
.\" --------------------------------------------------------------------
.\"O .SH COMPATIBILITY
.SH 互換性
.\" --------------------------------------------------------------------
.\"O .I groff
.\"O provides a
.\"O .B compatibility mode
.\"O that allows to process roff code written for classical
.\"O .troff
.\"O or for other implementations of roff in a consistent way.
.I groff
は
.B 互換モード
を提供しており、古典的な
.troff
や他の roff の実装のために書かれた roff コードをきちんと処理することができる。
.LP
.\"O Compatibility mode can be turned on with the
.\"O .option \-C
.\"O command line option, and turned on or off with the
.\"O .request .cp
.\"O request.  The number register
.\"O .esc(arg n .C
.\"O is
.\"O .number 1
.\"O if compatibility mode is on,
.\"O .number 0
.\"O otherwise.
互換モードはコマンドラインオプション
.option \-C
によって有効にでき、さらにリクエスト
.request .cp
によって無効にすることができる。
互換モードが有効のときは、
数値レジスタ
.esc(arg n .C
に
.number 1
が設定される。無効のときは
.number 0
になる。
.LP
.\"O This became necessary because the GNU concept for long names causes some
.\"O incompatibilities.
.\"O .I Classical troff
.\"O will interpret
GNU の長い名前に対する設計ではいくつか非互換な部分が生じるので、
この機能が必要とされた。
.I 古典的な troff
は
.IP
.B
\&.dsabcd
.LP
.\"O as defining a string
.\"O .B ab
.\"O with contents
.\"O .BR cd .
.\"O Normally,
.\"O .I groff
.\"O will interpret this as a call of a macro named
.\"O .request dsabcd .
を、文字列
.B ab
に内容
.B cd
を定義するとみなして処理する。
通常は、
.I groff
はこれを
.request dsabcd
という名前のマクロの呼び出しとみなして処理する。
.LP
.\"O Also
.\"O .I classical troff
.\"O will interpret
.\"O .esc *[
.\"O or
.\"O .esc n[
.\"O as references to a string or number register called
.\"O .register [ .
.\"O In
.\"O .I GNU native
.\"O .IR mode ,
.\"O however, this will normally be interpreted as the start of a long name.
また、
.I 古典的な troff
は
.esc *[
や
.esc n[
を
.register [
という文字列レジスタまたは数値レジスタへの参照とみなして処理する。
しかし、
.I GNU のネイティブモード
では通常は長い名前の開始とみなして処理する。
.LP
.\"O In
.\"O .I compatibility
.\"O .IR mode ,
.\"O groff will interpret these things in the traditional way, but long names
.\"O are not recognized.
.I 互換モード
では、groff はこれらを伝統的な方法で処理するようになる。
そのかわり、長い名前は認識されない。
.LP
.\"O On the other hand, groff in
.\"O .I GNU native mode
.\"O does not allow to use the escape sequences
一方で、
.I GNU ネイティブモード
での groff は以下のエスケープシーケンス (
.esc e ,
.esc | ,
.esc ^ ,
.esc & ,
.esc } ,
.esc { ,
.esc "\ " (space),
.esc ' ,
.esc ` ,
.esc - ,
.esc _ ,
.esc ! ,
.esc % ,
.\"O and
.\"O .esc c
.esc c )
.\"O in names of strings, macros, diversions, number registers, fonts or
.\"O environments, whereas
.\"O .I classical troff
.\"O does.  The
.\"O .esc A
.\"O escape sequence can be helpful in avoiding these escape sequences in
.\"O names.
は文字列・マクロ・ディバージョン・数値レジスタ・フォント・環境の名前としては
使用できない。しかし、
.I 古典的な troff
は可能である。
.LP
.\"O Fractional pointsizes cause one noteworthy incompatibility.
.\"O In
.\"O .I classical
.\"O .IR troff ,
.\"O the
.\"O .request .ps
.\"O request ignores scale indicators and so
.\"O .RS
.\"O .LP
.\"O .B .ps\ 10u
.\"O .RE
.\"O .LP
.\"O will set the pointsize to 10 points, whereas in groff native mode the
.\"O pointsize will be set to 10 scaled points.
小数のポイントサイズは顕著な非互換性の原因となる。
.I 古典的な troff
では、リクエスト
.request .ps
は単位指定子を無視するので
.RS
.LP
.B .ps\ 10u
.RE
.LP
はポイントサイズを 10 ポイントに設定する。しかし、groff のネイティブモード
ではポイントサイズは 10 スケールポイントに設定される。
.LP
.\"O In
.\"O .I groff
.\"O mode, there is a fundamental difference between unformatted input
.\"O characters, and formatted output characters.
.\"O Everything that affects how an output character will be output is stored
.\"O with the character; once an output character has been constructed it is
.\"O unaffected by any subsequent requests that are executed, including the
.\"O .request .bd ,
.\"O .request .cs ,
.\"O .request .tkf ,
.\"O .request .tr ,
.\"O or
.\"O .request .fp
.\"O requests.
.I groff
モードでは、整形されていない入力文字と整形された出力文字の間には根本的な
差異がある。
出力文字がどのように出力されるのかということに影響するものはすべて文字と
一緒に格納される。ある出力文字が構築されると、それ以降にどんなリクエストが
実行されてももはや影響されることはない。これは、以下のようなリクエストの
場合も含まれる。
.request .bd ,
.request .cs ,
.request .tkf ,
.request .tr ,
.request .fp
.LP
.\"O Normally output characters are constructed from input characters at the
.\"O moment immediately before the character is added to the current output
.\"O line.
.\"O Macros, diversions and strings are all, in fact, the same type of object;
.\"O they contain lists of input characters and output characters in any
.\"O combination.
通常は、現在の出力行に文字を追加する前に、出力文字は入力文字ごとに順次
構築されていく。
実は、マクロ・ディバージョン・文字列はすべて同じタイプのオブジェクトである。
これらは入力文字と出力文字の取り得る組み合わせのリストを含んでいる。
.LP
.\"O An output character does not behave like an input character for the
.\"O purposes of macro processing; it does not inherit any of the special
.\"O properties that the input character from which it was constructed might
.\"O have had.
.\"O The following example will make things clearer.
出力文字は、(マクロ処理の対象となる) 入力文字のような動作はしない。
出力文字は、それの構築元になった、入力文字が持っていたような特別な属性は
いっさい引き継がない。
以下の例で詳しく説明する。
.LP
.RS
.nf
.ft B
\&.di x
\(rs\(rs\(rs\(rs
\&.br
\&.di
\&.x
.ft
.fi
.RE
.LP
.\"O In
.\"O .I GNU mode
.\"O this will be printed as
.\"O .esc \(rs .
.\"O So each pair of input backslashes
.\"O .'char \(rs\(rs
.\"O is turned into a single output backslash
.\"O .'char \(rs
.\"O and the resulting output backslashes are not interpreted as escape
.\"O characters when they are reread.
.I GNU モード
では、この例は
.esc \(rs
のように出力されるだろう。
入力のバックスラッシュの対
.'char \(rs\(rs
はひとつのバックスラッシュ
.'char \(rs
に変換される。そして、結果として出力されるバックスラッシュは
これらが参照された時でもエスケープ文字として処理されることはない。
.LP
.\"O .I Classical troff
.\"O would interpret them as escape characters when they were reread and
.\"O would end up printing a single backslash
.\"O .'char \(rs .
.I 古典的な troff
では、これらは参照された時にエスケープ文字として処理されるので、最後には
ひとつのバックスラッシュ
.'char \(rs
が出力されるだろう。
.LP
.\"O The correct way to get a printable
.\"O .'char \(rs
.\"O is to use the
.\"O .esc e
.\"O escape sequence.  This will always print a single instance of the
.\"O current escape character, regardless of whether or not it is used in a
.\"O diversion.  It will also work in both GNU mode and compatibility mode.
.'char \(rs
一文字を表示する正しい方法は、エスケープシーケンス
.esc e
を使用することである。このやりかたなら、ディバージョンの中で使用にかかわらず
常に現在のエスケープ文字をひとつだけ出力するだろう。
これは、GNU モードと互換モードのどちらでも動作するはずである。
.LP
.\"O To store an escape sequence in a diversion that will be interpreted when
.\"O the diversion is reread, either the traditional
.\"O .esc !
.\"O transparent output facility or the
.\"O new
.\"O .esc ?
.\"O escape sequence can be used.
ディバージョンにエスケープシーケンスを格納する場合は、ディバージョンが参照されるごとに
エスケープシーケンスが処理される。
伝統的な
.esc !
の透過出力や新しい
.esc ?
のエスケープシーケンスを使用するべきである。
.\"O .
.\" --------------------------------------------------------------------
.\"O .SH BUGS
.SH バグ
.\" --------------------------------------------------------------------
.\"O At the moment, the documentation of the groff system is in a state of
.\"O change and evolution.  It is possible that there are small
.\"O inconsistencies between different documents temporarily.
現在、groff システムのドキュメントは変化と進化の途上にある。
一時的にドキュメント同士でささやかな矛盾点が見られるだろう。
.LP
.\"O The
.\"O .B WARNINGS
.\"O section belongs to
.\"O .BR troff (1).
.B 警告
セクションは
.BR troff (1)
に基づいている。
.
.\" --------------------------------------------------------------------
.\"O .SH AUTHOR
.SH 著者
.\" --------------------------------------------------------------------
.\"O This document is part of groff, the GNU roff distribution.  It was
.\"O written by Bernd Warken <bwarken@mayn.de>.
このドキュメントは groff (GNU roff パッケージ) の一部である。
Bernd Warken <bwarken@mayn.de> によって記述された。
.LP
.\"O It is distributed under the terms of the FDL (GNU Free Documentation
.\"O License) version 1.1 or later.  You should have received a copy of the
.\"O FDL on your system, it is also available on-line under
このドキュメントは FDL (GNU Free Documentation License) のバージョン 1.1 
以降の元に配布される。あなたのシステムにも FDL のコピーがあるはずである。
以下でもオンラインで参照できる。
.RS
.LP
.IR http://www.gnu.org/copyleft/fdl.html .
.RE
.LP
.\"O Formerly, the extensions of the groff language were kept in the manual
.\"O page
.\"O .BR troff (1).
.\"O This document contains the essential parts of that documentation, but
.\"O the gory details are found in the groff info file.
以前は、groff 言語の拡張機能についてはマニュアルページ
.BR troff (1)
に記述されていた。
拡張機能の基本的な事項はこのドキュメントにも含まれるが、
より詳細な情報は groff info ファイルで参照できる。
.
.\" --------------------------------------------------------------------
.\"O .SH "SEE ALSO"
.SH 関連項目
.\" --------------------------------------------------------------------
.\"O The main source of information for the groff language is the
.\"O .B groff
.\"O .BR info (1)
.\"O file.
groff 言語の主な情報源は
.B groff
.B info (1)
ファイルである。
.LP
.\"O For a survey of roff and the groff system and further documentation
.\"O pointers see
.\"O .BR roff (7).
roff と groff システムの概要とさらなるドキュメントのポインタは
.BR roff (7)
を参照のこと。
.LP
.\"O The formatter programs are described in
.\"O .BR groff (1)
.\"O and
.\"O .BR troff (1);
.\"O a complete of all predefined glyph names can be found in
.\"O .BR groff_char (7).
フォーマッタプログラムについては
.BR groff (1)
と
.BR troff (1)
に記述されている。
すべての定義済みグリフ名については
.BR groff_char (7)
に示してある。
.LP
.\"O The classical
.\"O .I troff
.\"O documentation is available on-line at
古典的な
.I troff
についてのドキュメントは以下の URL にある。
.RS
.LP
.I http://cm.bell-labs.com/cm/cs/cstr.html
.RE
.\"O and
.RS
.\"O .IR http://www.kohala.com/start/troff/ .
.IR http://www.kohala.com/start/troff/




